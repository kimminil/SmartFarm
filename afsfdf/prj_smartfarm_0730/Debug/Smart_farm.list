
Smart_farm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab0c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800ace0  0800ace0  0000bce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1d0  0800b1d0  0000d204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b1d0  0800b1d0  0000c1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1d8  0800b1d8  0000d204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1d8  0800b1d8  0000c1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1dc  0800b1dc  0000c1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800b1e0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  20000204  0800b3e4  0000d204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  0800b3e4  0000d64c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ae2  00000000  00000000  0000d234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6d  00000000  00000000  0001ed16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00021788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c37  00000000  00000000  00022748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cd3  00000000  00000000  0002337f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001376b  00000000  00000000  00048052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e062c  00000000  00000000  0005b7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bde9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005854  00000000  00000000  0013be2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00141680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800acc4 	.word	0x0800acc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	0800acc4 	.word	0x0800acc4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <MX_ADC1_Init+0x9c>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001084:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001090:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109e:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a0:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <MX_ADC1_Init+0xa0>)
 80010a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010be:	480e      	ldr	r0, [pc, #56]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010c0:	f001 fc9c 	bl	80029fc <HAL_ADC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ca:	f000 fe29 	bl	8001d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010e0:	f001 fe6e 	bl	8002dc0 <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010ea:	f000 fe19 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000220 	.word	0x20000220
 80010fc:	40012000 	.word	0x40012000
 8001100:	0f000001 	.word	0x0f000001

08001104 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <HAL_ADC_MspInit+0x7c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d127      	bne.n	8001176 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <HAL_ADC_MspInit+0x80>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	4a15      	ldr	r2, [pc, #84]	@ (8001184 <HAL_ADC_MspInit+0x80>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001134:	6453      	str	r3, [r2, #68]	@ 0x44
 8001136:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <HAL_ADC_MspInit+0x80>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <HAL_ADC_MspInit+0x80>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a0e      	ldr	r2, [pc, #56]	@ (8001184 <HAL_ADC_MspInit+0x80>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <HAL_ADC_MspInit+0x80>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800115e:	2313      	movs	r3, #19
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001162:	2303      	movs	r3, #3
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <HAL_ADC_MspInit+0x84>)
 8001172:	f002 f935 	bl	80033e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	@ 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40012000 	.word	0x40012000
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000

0800118c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b47      	ldr	r3, [pc, #284]	@ (80012c4 <MX_GPIO_Init+0x138>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a46      	ldr	r2, [pc, #280]	@ (80012c4 <MX_GPIO_Init+0x138>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b44      	ldr	r3, [pc, #272]	@ (80012c4 <MX_GPIO_Init+0x138>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b40      	ldr	r3, [pc, #256]	@ (80012c4 <MX_GPIO_Init+0x138>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a3f      	ldr	r2, [pc, #252]	@ (80012c4 <MX_GPIO_Init+0x138>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b3d      	ldr	r3, [pc, #244]	@ (80012c4 <MX_GPIO_Init+0x138>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b39      	ldr	r3, [pc, #228]	@ (80012c4 <MX_GPIO_Init+0x138>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a38      	ldr	r2, [pc, #224]	@ (80012c4 <MX_GPIO_Init+0x138>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b36      	ldr	r3, [pc, #216]	@ (80012c4 <MX_GPIO_Init+0x138>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b32      	ldr	r3, [pc, #200]	@ (80012c4 <MX_GPIO_Init+0x138>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a31      	ldr	r2, [pc, #196]	@ (80012c4 <MX_GPIO_Init+0x138>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <MX_GPIO_Init+0x138>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Peltier1_Pin|Peltier2_Pin|led2_Pin|Fan_On_Pin
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 7157 	mov.w	r1, #860	@ 0x35c
 8001218:	482b      	ldr	r0, [pc, #172]	@ (80012c8 <MX_GPIO_Init+0x13c>)
 800121a:	f002 fa8d 	bl	8003738 <HAL_GPIO_WritePin>
                          |Water_P2_Pin|Water_P1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DHT11_Pin|led1_Pin|Fan_Peltier1_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f241 1108 	movw	r1, #4360	@ 0x1108
 8001224:	4829      	ldr	r0, [pc, #164]	@ (80012cc <MX_GPIO_Init+0x140>)
 8001226:	f002 fa87 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Peltier1_Pin Peltier2_Pin led2_Pin Fan_On_Pin */
  GPIO_InitStruct.Pin = Peltier1_Pin|Peltier2_Pin|led2_Pin|Fan_On_Pin;
 800122a:	235c      	movs	r3, #92	@ 0x5c
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4821      	ldr	r0, [pc, #132]	@ (80012c8 <MX_GPIO_Init+0x13c>)
 8001242:	f002 f8cd 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	481b      	ldr	r0, [pc, #108]	@ (80012cc <MX_GPIO_Init+0x140>)
 8001260:	f002 f8be 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Water_Chk_Pin */
  GPIO_InitStruct.Pin = Water_Chk_Pin;
 8001264:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Water_Chk_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4814      	ldr	r0, [pc, #80]	@ (80012cc <MX_GPIO_Init+0x140>)
 800127a:	f002 f8b1 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Water_P2_Pin Water_P1_Pin */
  GPIO_InitStruct.Pin = Water_P2_Pin|Water_P1_Pin;
 800127e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128c:	2302      	movs	r3, #2
 800128e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <MX_GPIO_Init+0x13c>)
 8001298:	f002 f8a2 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin Fan_Peltier1_Pin */
  GPIO_InitStruct.Pin = led1_Pin|Fan_Peltier1_Pin;
 800129c:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_GPIO_Init+0x140>)
 80012b6:	f002 f893 	bl	80033e0 <HAL_GPIO_Init>

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	@ 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020400 	.word	0x40020400

080012d0 <__io_putchar>:
// ============================================printf문 =======================================================
//============================================================================================================

#if printf_en
extern int __io_putchar(int ch)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    //UART_HandleTypeDef huart1;
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);

#elif Console_Ch2
    //UART_HandleTypeDef huart2;
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80012d8:	1d39      	adds	r1, r7, #4
 80012da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012de:	2201      	movs	r2, #1
 80012e0:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <__io_putchar+0x24>)
 80012e2:	f004 f991 	bl	8005608 <HAL_UART_Transmit>

#elif Console_Ch6
    //UART_HandleTypeDef huart3;
    HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
#endif
    __NOP();
 80012e6:	bf00      	nop
  return ch;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200004b4 	.word	0x200004b4

080012f8 <delay>:
  #define DHT11_PORT  DHT11_GPIO_Port // main.h 참고
  #define DHT11_PIN   DHT11_Pin       // main.h 참고

// usec delay
void delay (uint16_t time)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
 /* change your code here for the delay in microseconds */
 __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <delay+0x30>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24
 while ((__HAL_TIM_GET_COUNTER(&htim6)) < time);  // 타이머 7
 800130a:	bf00      	nop
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <delay+0x30>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3f9      	bcc.n	800130c <delay+0x14>
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000424 	.word	0x20000424

0800132c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 GPIO_InitStruct.Pin = GPIO_Pin;
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
 HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4619      	mov	r1, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f002 f840 	bl	80033e0 <HAL_GPIO_Init>
}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 GPIO_InitStruct.Pin = GPIO_Pin;
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138c:	2301      	movs	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4619      	mov	r1, r3
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f002 f822 	bl	80033e0 <HAL_GPIO_Init>
}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <DHT11_Start>:

void DHT11_Start (void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
 if(dht_ch1 -> dht11_ch == 1)
 80013a8:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <DHT11_Start+0x50>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f993 3000 	ldrsb.w	r3, [r3]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d11c      	bne.n	80013ee <DHT11_Start+0x4a>
   { //ch1
   Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80013b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013b8:	480f      	ldr	r0, [pc, #60]	@ (80013f8 <DHT11_Start+0x54>)
 80013ba:	f7ff ffb7 	bl	800132c <Set_Pin_Output>
   HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013c4:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <DHT11_Start+0x54>)
 80013c6:	f002 f9b7 	bl	8003738 <HAL_GPIO_WritePin>
   delay(18000);   // wait for 18ms
 80013ca:	f244 6050 	movw	r0, #18000	@ 0x4650
 80013ce:	f7ff ff93 	bl	80012f8 <delay>
   HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013d8:	4807      	ldr	r0, [pc, #28]	@ (80013f8 <DHT11_Start+0x54>)
 80013da:	f002 f9ad 	bl	8003738 <HAL_GPIO_WritePin>
   delay (20);   // wait for 20us
 80013de:	2014      	movs	r0, #20
 80013e0:	f7ff ff8a 	bl	80012f8 <delay>
   Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80013e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013e8:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <DHT11_Start+0x54>)
 80013ea:	f7ff ffbd 	bl	8001368 <Set_Pin_Input>
   }
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000010 	.word	0x20000010
 80013f8:	40020400 	.word	0x40020400

080013fc <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 uint8_t Response = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	71fb      	strb	r3, [r7, #7]
 delay (40);
 8001406:	2028      	movs	r0, #40	@ 0x28
 8001408:	f7ff ff76 	bl	80012f8 <delay>
 if(dht_ch1 -> dht11_ch == 1)
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <DHT11_Check_Response+0x94>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f993 3000 	ldrsb.w	r3, [r3]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d136      	bne.n	8001486 <DHT11_Check_Response+0x8a>
  { //ch1
   if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001418:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800141c:	481d      	ldr	r0, [pc, #116]	@ (8001494 <DHT11_Check_Response+0x98>)
 800141e:	f002 f973 	bl	8003708 <HAL_GPIO_ReadPin>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d120      	bne.n	800146a <DHT11_Check_Response+0x6e>
    {
     delay (80);
 8001428:	2050      	movs	r0, #80	@ 0x50
 800142a:	f7ff ff65 	bl	80012f8 <delay>
     if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800142e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001432:	4818      	ldr	r0, [pc, #96]	@ (8001494 <DHT11_Check_Response+0x98>)
 8001434:	f002 f968 	bl	8003708 <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <DHT11_Check_Response+0x48>
 800143e:	2301      	movs	r3, #1
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	e012      	b.n	800146a <DHT11_Check_Response+0x6e>
     else Response = -1; // 255
 8001444:	23ff      	movs	r3, #255	@ 0xff
 8001446:	71fb      	strb	r3, [r7, #7]
    }
   while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001448:	e00f      	b.n	800146a <DHT11_Check_Response+0x6e>
     {
	   // wait for the pin to go low
	   dht_ch1 -> while_cnt++;
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <DHT11_Check_Response+0x94>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001452:	b292      	uxth	r2, r2
 8001454:	3201      	adds	r2, #1
 8001456:	b292      	uxth	r2, r2
 8001458:	b212      	sxth	r2, r2
 800145a:	805a      	strh	r2, [r3, #2]
	   if( dht_ch1 -> while_cnt > 500) break;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <DHT11_Check_Response+0x94>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001464:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001468:	dc08      	bgt.n	800147c <DHT11_Check_Response+0x80>
   while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800146a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800146e:	4809      	ldr	r0, [pc, #36]	@ (8001494 <DHT11_Check_Response+0x98>)
 8001470:	f002 f94a 	bl	8003708 <HAL_GPIO_ReadPin>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e7      	bne.n	800144a <DHT11_Check_Response+0x4e>
 800147a:	e000      	b.n	800147e <DHT11_Check_Response+0x82>
	   if( dht_ch1 -> while_cnt > 500) break;
 800147c:	bf00      	nop
     }
   dht_ch1 -> while_cnt = 0;
 800147e:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <DHT11_Check_Response+0x94>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2200      	movs	r2, #0
 8001484:	805a      	strh	r2, [r3, #2]
  }
#endif
 return Response;
 8001486:	79fb      	ldrb	r3, [r7, #7]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000010 	.word	0x20000010
 8001494:	40020400 	.word	0x40020400

08001498 <DHT11_Read>:
uint8_t DHT11_Read ()
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 uint8_t i,j;
 if(dht_ch1 -> dht11_ch == 1)
 800149e:	4b3b      	ldr	r3, [pc, #236]	@ (800158c <DHT11_Read+0xf4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f993 3000 	ldrsb.w	r3, [r3]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d16b      	bne.n	8001582 <DHT11_Read+0xea>
  {
   for (j=0;j<8;j++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	71bb      	strb	r3, [r7, #6]
 80014ae:	e065      	b.n	800157c <DHT11_Read+0xe4>
    {
	  while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
	   {
		  dht_ch1 -> while_cnt++;
 80014b0:	4b36      	ldr	r3, [pc, #216]	@ (800158c <DHT11_Read+0xf4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80014b8:	b292      	uxth	r2, r2
 80014ba:	3201      	adds	r2, #1
 80014bc:	b292      	uxth	r2, r2
 80014be:	b212      	sxth	r2, r2
 80014c0:	805a      	strh	r2, [r3, #2]
		// wait for the pin to go high
		if(dht_ch1 -> while_cnt > 500) break;
 80014c2:	4b32      	ldr	r3, [pc, #200]	@ (800158c <DHT11_Read+0xf4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014ce:	dc08      	bgt.n	80014e2 <DHT11_Read+0x4a>
	  while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80014d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d4:	482e      	ldr	r0, [pc, #184]	@ (8001590 <DHT11_Read+0xf8>)
 80014d6:	f002 f917 	bl	8003708 <HAL_GPIO_ReadPin>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0e7      	beq.n	80014b0 <DHT11_Read+0x18>
 80014e0:	e000      	b.n	80014e4 <DHT11_Read+0x4c>
		if(dht_ch1 -> while_cnt > 500) break;
 80014e2:	bf00      	nop
	   }
	  dht_ch1 -> while_cnt = 0;
 80014e4:	4b29      	ldr	r3, [pc, #164]	@ (800158c <DHT11_Read+0xf4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2200      	movs	r2, #0
 80014ea:	805a      	strh	r2, [r3, #2]
	  delay (40);   // wait for 40 us
 80014ec:	2028      	movs	r0, #40	@ 0x28
 80014ee:	f7ff ff03 	bl	80012f8 <delay>
	  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80014f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014f6:	4826      	ldr	r0, [pc, #152]	@ (8001590 <DHT11_Read+0xf8>)
 80014f8:	f002 f906 	bl	8003708 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10e      	bne.n	8001520 <DHT11_Read+0x88>
	   {
	    i&= ~(1<<(7-j));   // write 0
 8001502:	79bb      	ldrb	r3, [r7, #6]
 8001504:	f1c3 0307 	rsb	r3, r3, #7
 8001508:	2201      	movs	r2, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	b25b      	sxtb	r3, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	b25a      	sxtb	r2, r3
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4013      	ands	r3, r2
 800151a:	b25b      	sxtb	r3, r3
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	e01c      	b.n	800155a <DHT11_Read+0xc2>
	   }
	  else i|= (1<<(7-j));  // if the pin is high, write 1
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2201      	movs	r2, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	b25a      	sxtb	r2, r3
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	4313      	orrs	r3, r2
 8001534:	b25b      	sxtb	r3, r3
 8001536:	71fb      	strb	r3, [r7, #7]
	  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001538:	e00f      	b.n	800155a <DHT11_Read+0xc2>
	   {
		  dht_ch1 -> while_cnt++;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <DHT11_Read+0xf4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001542:	b292      	uxth	r2, r2
 8001544:	3201      	adds	r2, #1
 8001546:	b292      	uxth	r2, r2
 8001548:	b212      	sxth	r2, r2
 800154a:	805a      	strh	r2, [r3, #2]
		// wait for the pin to go low
		if(dht_ch1 -> while_cnt > 500) break;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <DHT11_Read+0xf4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001554:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001558:	dc08      	bgt.n	800156c <DHT11_Read+0xd4>
	  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800155a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800155e:	480c      	ldr	r0, [pc, #48]	@ (8001590 <DHT11_Read+0xf8>)
 8001560:	f002 f8d2 	bl	8003708 <HAL_GPIO_ReadPin>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1e7      	bne.n	800153a <DHT11_Read+0xa2>
 800156a:	e000      	b.n	800156e <DHT11_Read+0xd6>
		if(dht_ch1 -> while_cnt > 500) break;
 800156c:	bf00      	nop
	   }
	  dht_ch1 -> while_cnt =  0;
 800156e:	4b07      	ldr	r3, [pc, #28]	@ (800158c <DHT11_Read+0xf4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2200      	movs	r2, #0
 8001574:	805a      	strh	r2, [r3, #2]
   for (j=0;j<8;j++)
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	3301      	adds	r3, #1
 800157a:	71bb      	strb	r3, [r7, #6]
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	2b07      	cmp	r3, #7
 8001580:	d9a6      	bls.n	80014d0 <DHT11_Read+0x38>
    } // for end
  } // if-end
 return i;
 8001582:	79fb      	ldrb	r3, [r7, #7]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000010 	.word	0x20000010
 8001590:	40020400 	.word	0x40020400

08001594 <DHT11_Sensor_Test>:

uint8_t DHT11_Sensor_Test()
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
	uint16_t SUM, RH, TEMP;
	float Temperature = 0;
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
	float Humidity = 0;
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
	uint8_t Presence = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	75fb      	strb	r3, [r7, #23]
 // DHT11 Run == Main
 DHT11_Start();
 80015aa:	f7ff fefb 	bl	80013a4 <DHT11_Start>
 Presence = DHT11_Check_Response();
 80015ae:	f7ff ff25 	bl	80013fc <DHT11_Check_Response>
 80015b2:	4603      	mov	r3, r0
 80015b4:	75fb      	strb	r3, [r7, #23]
 Rh_byte1 = DHT11_Read ();
 80015b6:	f7ff ff6f 	bl	8001498 <DHT11_Read>
 80015ba:	4603      	mov	r3, r0
 80015bc:	75bb      	strb	r3, [r7, #22]
 Rh_byte2 = DHT11_Read ();
 80015be:	f7ff ff6b 	bl	8001498 <DHT11_Read>
 80015c2:	4603      	mov	r3, r0
 80015c4:	757b      	strb	r3, [r7, #21]
 Temp_byte1 = DHT11_Read ();
 80015c6:	f7ff ff67 	bl	8001498 <DHT11_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	753b      	strb	r3, [r7, #20]
 Temp_byte2 = DHT11_Read ();
 80015ce:	f7ff ff63 	bl	8001498 <DHT11_Read>
 80015d2:	4603      	mov	r3, r0
 80015d4:	74fb      	strb	r3, [r7, #19]
 SUM = DHT11_Read();
 80015d6:	f7ff ff5f 	bl	8001498 <DHT11_Read>
 80015da:	4603      	mov	r3, r0
 80015dc:	823b      	strh	r3, [r7, #16]

 // 정수부만 출력 됨
 TEMP = Temp_byte1;
 80015de:	7d3b      	ldrb	r3, [r7, #20]
 80015e0:	81fb      	strh	r3, [r7, #14]
 RH = Rh_byte1;
 80015e2:	7dbb      	ldrb	r3, [r7, #22]
 80015e4:	81bb      	strh	r3, [r7, #12]
 // 소수점 부도 출력 됨
 Temperature = (float) TEMP;
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f0:	edc7 7a07 	vstr	s15, [r7, #28]
 Humidity = (float) RH;
 80015f4:	89bb      	ldrh	r3, [r7, #12]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fe:	edc7 7a06 	vstr	s15, [r7, #24]

 if(dht_ch1 -> dht11_ch == 1)
 8001602:	4b2d      	ldr	r3, [pc, #180]	@ (80016b8 <DHT11_Sensor_Test+0x124>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f993 3000 	ldrsb.w	r3, [r3]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d143      	bne.n	8001696 <DHT11_Sensor_Test+0x102>
  {
	if(TEMP >= 255) Temperature = dht_ch1 -> old_temp;
 800160e:	89fb      	ldrh	r3, [r7, #14]
 8001610:	2bfe      	cmp	r3, #254	@ 0xfe
 8001612:	d909      	bls.n	8001628 <DHT11_Sensor_Test+0x94>
 8001614:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <DHT11_Sensor_Test+0x124>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	889b      	ldrh	r3, [r3, #4]
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001622:	edc7 7a07 	vstr	s15, [r7, #28]
 8001626:	e009      	b.n	800163c <DHT11_Sensor_Test+0xa8>
	else dht_ch1 -> old_temp = Temperature;
 8001628:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <DHT11_Sensor_Test+0x124>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001634:	ee17 2a90 	vmov	r2, s15
 8001638:	b292      	uxth	r2, r2
 800163a:	809a      	strh	r2, [r3, #4]

	if(RH >= 255) Humidity =dht_ch1 -> old_rh;
 800163c:	89bb      	ldrh	r3, [r7, #12]
 800163e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001640:	d909      	bls.n	8001656 <DHT11_Sensor_Test+0xc2>
 8001642:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <DHT11_Sensor_Test+0x124>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	88db      	ldrh	r3, [r3, #6]
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001650:	edc7 7a06 	vstr	s15, [r7, #24]
 8001654:	e009      	b.n	800166a <DHT11_Sensor_Test+0xd6>
	else dht_ch1 -> old_rh = Humidity;
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <DHT11_Sensor_Test+0x124>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	edd7 7a06 	vldr	s15, [r7, #24]
 800165e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001662:	ee17 2a90 	vmov	r2, s15
 8001666:	b292      	uxth	r2, r2
 8001668:	80da      	strh	r2, [r3, #6]

	dht_ch1 -> Temp_Ch1_dis = Temperature;
 800166a:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <DHT11_Sensor_Test+0x124>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001676:	edc7 7a01 	vstr	s15, [r7, #4]
 800167a:	793a      	ldrb	r2, [r7, #4]
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	729a      	strb	r2, [r3, #10]
	dht_ch1 -> Hum_Ch1_dis = Humidity;
 8001680:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <DHT11_Sensor_Test+0x124>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	edd7 7a06 	vldr	s15, [r7, #24]
 8001688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001690:	793a      	ldrb	r2, [r7, #4]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	72da      	strb	r2, [r3, #11]
  }
 HAL_Delay(500);
 8001696:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800169a:	f001 f98b 	bl	80029b4 <HAL_Delay>
 if (TEMP != 0 ||  RH != 0) return 1;
 800169e:	89fb      	ldrh	r3, [r7, #14]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <DHT11_Sensor_Test+0x116>
 80016a4:	89bb      	ldrh	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <DHT11_Sensor_Test+0x11a>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e7ff      	b.n	80016ae <DHT11_Sensor_Test+0x11a>


}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000010 	.word	0x20000010

080016bc <DHT11_Run_RH>:
float DHT11_Run_RH()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	if(DHT11_Sensor_Test()) return dht_ch1 -> Hum_Ch1_dis;
 80016c0:	f7ff ff68 	bl	8001594 <DHT11_Sensor_Test>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <DHT11_Run_RH+0x1e>
 80016ca:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <DHT11_Run_RH+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	7adb      	ldrb	r3, [r3, #11]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d8:	e7ff      	b.n	80016da <DHT11_Run_RH+0x1e>
}
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000010 	.word	0x20000010

080016e4 <DHT11_Run_TEMP>:

float DHT11_Run_TEMP()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	if(DHT11_Sensor_Test()) return dht_ch1 -> Temp_Ch1_dis;
 80016e8:	f7ff ff54 	bl	8001594 <DHT11_Sensor_Test>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <DHT11_Run_TEMP+0x1e>
 80016f2:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <DHT11_Run_TEMP+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	7a9b      	ldrb	r3, [r3, #10]
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001700:	e7ff      	b.n	8001702 <DHT11_Run_TEMP+0x1e>
}
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000010 	.word	0x20000010

0800170c <check_light>:
  uint16_t old_ch2;
  float cds_Ch1_dis;
  float cds_Ch2_dis;
}Cds_ch1 = {1, 0, 0, 0,0};
struct cds *cds_ch1 = &Cds_ch1;
uint8_t check_light(){
 800170c:	b580      	push	{r7, lr}
 800170e:	b09c      	sub	sp, #112	@ 0x70
 8001710:	af00      	add	r7, sp, #0
	uint32_t adc_val = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float lux = 0.0;
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	66bb      	str	r3, [r7, #104]	@ 0x68
	char light_msg[64];
	float r_fixed = 10000.0f; // 10kΩ 고정 저항
 800171c:	4b4b      	ldr	r3, [pc, #300]	@ (800184c <check_light+0x140>)
 800171e:	667b      	str	r3, [r7, #100]	@ 0x64
    if(cds_ch1 -> cds_ch == 1)
 8001720:	4b4b      	ldr	r3, [pc, #300]	@ (8001850 <check_light+0x144>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f993 3000 	ldrsb.w	r3, [r3]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d17c      	bne.n	8001826 <check_light+0x11a>
    {
    	ADC_ChannelConfTypeDef sConfig = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
    	sConfig.Channel = ADC_CHANNEL_0;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
    	sConfig.Rank = 1;
 800173c:	2301      	movs	r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
    	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001740:	2301      	movs	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
    	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4842      	ldr	r0, [pc, #264]	@ (8001854 <check_light+0x148>)
 800174a:	f001 fb39 	bl	8002dc0 <HAL_ADC_ConfigChannel>
    	HAL_ADC_Start(&hadc1);
 800174e:	4841      	ldr	r0, [pc, #260]	@ (8001854 <check_light+0x148>)
 8001750:	f001 f998 	bl	8002a84 <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001754:	210a      	movs	r1, #10
 8001756:	483f      	ldr	r0, [pc, #252]	@ (8001854 <check_light+0x148>)
 8001758:	f001 fa99 	bl	8002c8e <HAL_ADC_PollForConversion>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d161      	bne.n	8001826 <check_light+0x11a>
        {
			adc_val = HAL_ADC_GetValue(&hadc1);
 8001762:	483c      	ldr	r0, [pc, #240]	@ (8001854 <check_light+0x148>)
 8001764:	f001 fb1e 	bl	8002da4 <HAL_ADC_GetValue>
 8001768:	66f8      	str	r0, [r7, #108]	@ 0x6c
			cds_ch1 ->  adc_v = adc_val;
 800176a:	4b39      	ldr	r3, [pc, #228]	@ (8001850 <check_light+0x144>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001770:	b292      	uxth	r2, r2
 8001772:	805a      	strh	r2, [r3, #2]
			if(adc_val == 4095 || adc_val == 0) adc_val = cds_ch1 -> old_ch1;
 8001774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001776:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800177a:	4293      	cmp	r3, r2
 800177c:	d002      	beq.n	8001784 <check_light+0x78>
 800177e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d104      	bne.n	800178e <check_light+0x82>
 8001784:	4b32      	ldr	r3, [pc, #200]	@ (8001850 <check_light+0x144>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	889b      	ldrh	r3, [r3, #4]
 800178a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800178c:	e004      	b.n	8001798 <check_light+0x8c>
			else cds_ch1 -> old_ch1 = adc_val;
 800178e:	4b30      	ldr	r3, [pc, #192]	@ (8001850 <check_light+0x144>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001794:	b292      	uxth	r2, r2
 8001796:	809a      	strh	r2, [r3, #4]
			float Vout = (adc_val / 4095.0f) * 3.3f;
 8001798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017a2:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001858 <check_light+0x14c>
 80017a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017aa:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800185c <check_light+0x150>
 80017ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b2:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			float RLDR = (3.3f - Vout) * 10000.0f / (Vout > 0.0f ? Vout : 1.0f);
 80017b6:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800185c <check_light+0x150>
 80017ba:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80017be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001860 <check_light+0x154>
 80017c6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017ca:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80017ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	dd02      	ble.n	80017de <check_light+0xd2>
 80017d8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80017dc:	e001      	b.n	80017e2 <check_light+0xd6>
 80017de:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80017e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017e6:	ed87 7a17 	vstr	s14, [r7, #92]	@ 0x5c
			float Rk = RLDR / 1000.0f;
 80017ea:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80017ee:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001864 <check_light+0x158>
 80017f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
			float lux = 63.0f * powf(Rk, -0.7f)+50;
 80017fa:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001868 <check_light+0x15c>
 80017fe:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8001802:	f004 fabd 	bl	8005d80 <powf>
 8001806:	eef0 7a40 	vmov.f32	s15, s0
 800180a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800186c <check_light+0x160>
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001870 <check_light+0x164>
 8001816:	ee77 7a87 	vadd.f32	s15, s15, s14
 800181a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
			cds_ch1 ->  cds_Ch1_dis = lux;
 800181e:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <check_light+0x144>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001824:	609a      	str	r2, [r3, #8]
    	}
    }
    HAL_ADC_Stop(&hadc1);
 8001826:	480b      	ldr	r0, [pc, #44]	@ (8001854 <check_light+0x148>)
 8001828:	f001 f9fe 	bl	8002c28 <HAL_ADC_Stop>
    if(adc_val != 4095 || adc_val != 0) return 1;
 800182c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800182e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001832:	4293      	cmp	r3, r2
 8001834:	d102      	bne.n	800183c <check_light+0x130>
 8001836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <check_light+0x134>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <check_light+0x136>
    else return 0;
 8001840:	2300      	movs	r3, #0
    }
 8001842:	4618      	mov	r0, r3
 8001844:	3770      	adds	r7, #112	@ 0x70
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	461c4000 	.word	0x461c4000
 8001850:	20000024 	.word	0x20000024
 8001854:	20000220 	.word	0x20000220
 8001858:	457ff000 	.word	0x457ff000
 800185c:	40533333 	.word	0x40533333
 8001860:	461c4000 	.word	0x461c4000
 8001864:	447a0000 	.word	0x447a0000
 8001868:	bf333333 	.word	0xbf333333
 800186c:	427c0000 	.word	0x427c0000
 8001870:	42480000 	.word	0x42480000

08001874 <read_light>:
float read_light(){
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	if(check_light()) return cds_ch1 ->  adc_v;
 8001878:	f7ff ff48 	bl	800170c <check_light>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <read_light+0x1e>
 8001882:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <read_light+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	885b      	ldrh	r3, [r3, #2]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001890:	e7ff      	b.n	8001892 <read_light+0x1e>
}
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000024 	.word	0x20000024

0800189c <read_light_lux>:
float read_light_lux(){
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	if(check_light()) return cds_ch1 ->  cds_Ch1_dis;
 80018a0:	f7ff ff34 	bl	800170c <check_light>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <read_light_lux+0x1a>
 80018aa:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <read_light_lux+0x20>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	e7ff      	b.n	80018b6 <read_light_lux+0x1a>
}
 80018b6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000024 	.word	0x20000024

080018c0 <isWaterDetected1>:
struct w_h *w_h = &W_h;


//비접촉 방식
float isWaterDetected1()
{
 80018c0:	b598      	push	{r3, r4, r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	w_h->w1_h = HAL_GPIO_ReadPin(Water_Chk_GPIO_Port, Water_Chk_Pin);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <isWaterDetected1+0x34>)
 80018c6:	681c      	ldr	r4, [r3, #0]
 80018c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018cc:	480a      	ldr	r0, [pc, #40]	@ (80018f8 <isWaterDetected1+0x38>)
 80018ce:	f001 ff1b 	bl	8003708 <HAL_GPIO_ReadPin>
 80018d2:	4603      	mov	r3, r0
 80018d4:	7023      	strb	r3, [r4, #0]

	return (float)(w_h->w1_h == GPIO_PIN_SET);
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <isWaterDetected1+0x34>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d102      	bne.n	80018e6 <isWaterDetected1+0x26>
 80018e0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018e4:	e001      	b.n	80018ea <isWaterDetected1+0x2a>
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	ee07 3a90 	vmov	s15, r3
}
 80018ee:	eeb0 0a67 	vmov.f32	s0, s15
 80018f2:	bd98      	pop	{r3, r4, r7, pc}
 80018f4:	20000028 	.word	0x20000028
 80018f8:	40020400 	.word	0x40020400

080018fc <fan_off>:
void fan_on(){
	  HAL_GPIO_WritePin(Fan_On_GPIO_Port, Fan_On_Pin, GPIO_PIN_RESET);

}

void fan_off(){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(Fan_On_GPIO_Port, Fan_On_Pin, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	2140      	movs	r1, #64	@ 0x40
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <fan_off+0x14>)
 8001906:	f001 ff17 	bl	8003738 <HAL_GPIO_WritePin>
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40020800 	.word	0x40020800

08001914 <Water_P1_Start>:



#if water_pump_en

void Water_P1_Start() {
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P1_GPIO_Port, Water_P1_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800191e:	4802      	ldr	r0, [pc, #8]	@ (8001928 <Water_P1_Start+0x14>)
 8001920:	f001 ff0a 	bl	8003738 <HAL_GPIO_WritePin>

}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40020800 	.word	0x40020800

0800192c <Water_P2_Start>:
void Water_P2_Start() {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P2_GPIO_Port, Water_P2_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001936:	4802      	ldr	r0, [pc, #8]	@ (8001940 <Water_P2_Start+0x14>)
 8001938:	f001 fefe 	bl	8003738 <HAL_GPIO_WritePin>

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40020800 	.word	0x40020800

08001944 <Water_P1_Stop>:

void Water_P1_Stop() {
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P1_GPIO_Port, Water_P1_Pin, GPIO_PIN_SET);
 8001948:	2201      	movs	r2, #1
 800194a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800194e:	4802      	ldr	r0, [pc, #8]	@ (8001958 <Water_P1_Stop+0x14>)
 8001950:	f001 fef2 	bl	8003738 <HAL_GPIO_WritePin>

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40020800 	.word	0x40020800

0800195c <Water_P2_Stop>:
void Water_P2_Stop() {
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P2_GPIO_Port, Water_P2_Pin, GPIO_PIN_SET);
 8001960:	2201      	movs	r2, #1
 8001962:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001966:	4802      	ldr	r0, [pc, #8]	@ (8001970 <Water_P2_Stop+0x14>)
 8001968:	f001 fee6 	bl	8003738 <HAL_GPIO_WritePin>

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40020800 	.word	0x40020800

08001974 <light_on>:
//}
//void light_off(){
//	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin,GPIO_PIN_SET );
//	printf("led off\r\n");
//}
void light_on(uint16_t num){
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af02      	add	r7, sp, #8
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
	uint16_t Pwm = map(num, 0, 80, 4000, 0);
 800197e:	88f8      	ldrh	r0, [r7, #6]
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001988:	2250      	movs	r2, #80	@ 0x50
 800198a:	2100      	movs	r1, #0
 800198c:	f000 f81a 	bl	80019c4 <map>
 8001990:	4603      	mov	r3, r0
 8001992:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin,GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	2108      	movs	r1, #8
 8001998:	4807      	ldr	r0, [pc, #28]	@ (80019b8 <light_on+0x44>)
 800199a:	f001 fecd 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin,GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2110      	movs	r1, #16
 80019a2:	4806      	ldr	r0, [pc, #24]	@ (80019bc <light_on+0x48>)
 80019a4:	f001 fec8 	bl	8003738 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Pwm);
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <light_on+0x4c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	89fa      	ldrh	r2, [r7, #14]
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40020800 	.word	0x40020800
 80019c0:	20000394 	.word	0x20000394

080019c4 <map>:

uint16_t map(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 80019c4:	b490      	push	{r4, r7}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4604      	mov	r4, r0
 80019cc:	4608      	mov	r0, r1
 80019ce:	4611      	mov	r1, r2
 80019d0:	461a      	mov	r2, r3
 80019d2:	4623      	mov	r3, r4
 80019d4:	80fb      	strh	r3, [r7, #6]
 80019d6:	4603      	mov	r3, r0
 80019d8:	80bb      	strh	r3, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	807b      	strh	r3, [r7, #2]
 80019de:	4613      	mov	r3, r2
 80019e0:	803b      	strh	r3, [r7, #0]
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80019e2:	88fa      	ldrh	r2, [r7, #6]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	8a39      	ldrh	r1, [r7, #16]
 80019ea:	883a      	ldrh	r2, [r7, #0]
 80019ec:	1a8a      	subs	r2, r1, r2
 80019ee:	fb03 f202 	mul.w	r2, r3, r2
 80019f2:	8879      	ldrh	r1, [r7, #2]
 80019f4:	88bb      	ldrh	r3, [r7, #4]
 80019f6:	1acb      	subs	r3, r1, r3
 80019f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	883b      	ldrh	r3, [r7, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	b29b      	uxth	r3, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc90      	pop	{r4, r7}
 8001a0c:	4770      	bx	lr
	...

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a14:	b088      	sub	sp, #32
 8001a16:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a18:	f000 ff8a 	bl	8002930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1c:	f000 f870 	bl	8001b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a20:	f7ff fbb4 	bl	800118c <MX_GPIO_Init>
  MX_TIM6_Init();
 8001a24:	f000 fd5e 	bl	80024e4 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001a28:	f000 fe88 	bl	800273c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a2c:	f000 feb0 	bl	8002790 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001a30:	f7ff fb16 	bl	8001060 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a34:	f000 fb58 	bl	80020e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a38:	f000 fbf4 	bl	8002224 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a3c:	f000 fc40 	bl	80022c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a40:	f000 fc8c 	bl	800235c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001a44:	f000 fd00 	bl	8002448 <MX_TIM5_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001a48:	f000 f8c8 	bl	8001bdc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001a4c:	4824      	ldr	r0, [pc, #144]	@ (8001ae0 <main+0xd0>)
 8001a4e:	f002 fd5f 	bl	8004510 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8001a52:	4824      	ldr	r0, [pc, #144]	@ (8001ae4 <main+0xd4>)
 8001a54:	f002 fcf4 	bl	8004440 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001a58:	4823      	ldr	r0, [pc, #140]	@ (8001ae8 <main+0xd8>)
 8001a5a:	f002 fd59 	bl	8004510 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001a5e:	4823      	ldr	r0, [pc, #140]	@ (8001aec <main+0xdc>)
 8001a60:	f002 fd56 	bl	8004510 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start(&hadc1);
 8001a64:	4822      	ldr	r0, [pc, #136]	@ (8001af0 <main+0xe0>)
 8001a66:	f001 f80d 	bl	8002a84 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6e:	4820      	ldr	r0, [pc, #128]	@ (8001af0 <main+0xe0>)
 8001a70:	f001 f90d 	bl	8002c8e <HAL_ADC_PollForConversion>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);

  uint8_t adc_value = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]

  HAL_TIM_Base_Start_IT(&htim2);
 8001a78:	481e      	ldr	r0, [pc, #120]	@ (8001af4 <main+0xe4>)
 8001a7a:	f002 fd49 	bl	8004510 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	481d      	ldr	r0, [pc, #116]	@ (8001af8 <main+0xe8>)
 8001a82:	f002 fe0f 	bl	80046a4 <HAL_TIM_PWM_Start>
  fan_off();
 8001a86:	f7ff ff39 	bl	80018fc <fan_off>
  Water_P1_Stop();
 8001a8a:	f7ff ff5b 	bl	8001944 <Water_P1_Stop>
  Water_P2_Stop();
 8001a8e:	f7ff ff65 	bl	800195c <Water_P2_Stop>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  			  float TEMP1 = DHT11_Run_TEMP();		// 온도
 8001a92:	f7ff fe27 	bl	80016e4 <DHT11_Run_TEMP>
 8001a96:	ed87 0a02 	vstr	s0, [r7, #8]
	  			  float RH1 = DHT11_Run_RH();			// 습도
 8001a9a:	f7ff fe0f 	bl	80016bc <DHT11_Run_RH>
 8001a9e:	ed87 0a01 	vstr	s0, [r7, #4]
	  			  float lux1 = read_light();
 8001aa2:	f7ff fee7 	bl	8001874 <read_light>
 8001aa6:	ed87 0a00 	vstr	s0, [r7]
	  			  printf("TEMP : %.1f RH : %.1f lux : %.1f\r\n", TEMP1, RH1, lux1);
 8001aaa:	68b8      	ldr	r0, [r7, #8]
 8001aac:	f7fe fd6c 	bl	8000588 <__aeabi_f2d>
 8001ab0:	4680      	mov	r8, r0
 8001ab2:	4689      	mov	r9, r1
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7fe fd67 	bl	8000588 <__aeabi_f2d>
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	f7fe fd62 	bl	8000588 <__aeabi_f2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001acc:	e9cd 4500 	strd	r4, r5, [sp]
 8001ad0:	4642      	mov	r2, r8
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	4809      	ldr	r0, [pc, #36]	@ (8001afc <main+0xec>)
 8001ad6:	f005 fcbd 	bl	8007454 <iprintf>
  {
 8001ada:	bf00      	nop
 8001adc:	e7d9      	b.n	8001a92 <main+0x82>
 8001ade:	bf00      	nop
 8001ae0:	20000424 	.word	0x20000424
 8001ae4:	200002bc 	.word	0x200002bc
 8001ae8:	2000034c 	.word	0x2000034c
 8001aec:	200003dc 	.word	0x200003dc
 8001af0:	20000220 	.word	0x20000220
 8001af4:	20000304 	.word	0x20000304
 8001af8:	20000394 	.word	0x20000394
 8001afc:	0800ad48 	.word	0x0800ad48

08001b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b094      	sub	sp, #80	@ 0x50
 8001b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	2234      	movs	r2, #52	@ 0x34
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f005 fe0a 	bl	8007728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd4 <SystemClock_Config+0xd4>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	4a29      	ldr	r2, [pc, #164]	@ (8001bd4 <SystemClock_Config+0xd4>)
 8001b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b34:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <SystemClock_Config+0xd4>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b40:	2300      	movs	r3, #0
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	4b24      	ldr	r3, [pc, #144]	@ (8001bd8 <SystemClock_Config+0xd8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b4c:	4a22      	ldr	r2, [pc, #136]	@ (8001bd8 <SystemClock_Config+0xd8>)
 8001b4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <SystemClock_Config+0xd8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b60:	2301      	movs	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b74:	2308      	movs	r3, #8
 8001b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001b78:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001b7c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b82:	2302      	movs	r3, #2
 8001b84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b86:	2302      	movs	r3, #2
 8001b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 f968 	bl	8003e64 <HAL_RCC_OscConfig>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b9a:	f000 f8c1 	bl	8001d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b9e:	230f      	movs	r3, #15
 8001ba0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001ba6:	2380      	movs	r3, #128	@ 0x80
 8001ba8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001baa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	2102      	movs	r1, #2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 fdd5 	bl	800376c <HAL_RCC_ClockConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001bc8:	f000 f8aa 	bl	8001d20 <Error_Handler>
  }
}
 8001bcc:	bf00      	nop
 8001bce:	3750      	adds	r7, #80	@ 0x50
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40007000 	.word	0x40007000

08001bdc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	201d      	movs	r0, #29
 8001be6:	f001 fbd1 	bl	800338c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bea:	201d      	movs	r0, #29
 8001bec:	f001 fbea 	bl	80033c4 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	201c      	movs	r0, #28
 8001bf6:	f001 fbc9 	bl	800338c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bfa:	201c      	movs	r0, #28
 8001bfc:	f001 fbe2 	bl	80033c4 <HAL_NVIC_EnableIRQ>
  /* TIM5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	2032      	movs	r0, #50	@ 0x32
 8001c06:	f001 fbc1 	bl	800338c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c0a:	2032      	movs	r0, #50	@ 0x32
 8001c0c:	f001 fbda 	bl	80033c4 <HAL_NVIC_EnableIRQ>
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c24:	d120      	bne.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x54>
	{//	0.1s	급수
		if(Sensor_flag == 1)
 8001c26:	4b38      	ldr	r3, [pc, #224]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d11c      	bne.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x54>
		{

			uint16_t lux = read_light_lux();
 8001c2e:	f7ff fe35 	bl	800189c <read_light_lux>
 8001c32:	eef0 7a40 	vmov.f32	s15, s0
 8001c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3a:	ee17 3a90 	vmov	r3, s15
 8001c3e:	81fb      	strh	r3, [r7, #14]
			float w_2 = isWaterDetected1();
 8001c40:	f7ff fe3e 	bl	80018c0 <isWaterDetected1>
 8001c44:	ed87 0a02 	vstr	s0, [r7, #8]
			light_on(lux);
 8001c48:	89fb      	ldrh	r3, [r7, #14]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fe92 	bl	8001974 <light_on>
			//printf("w = %.1f\r\n", w_2);
			if(w_2 == 0.0){
 8001c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5c:	d102      	bne.n	8001c64 <HAL_TIM_PeriodElapsedCallback+0x50>
				Water_P1_Start(); //급수
 8001c5e:	f7ff fe59 	bl	8001914 <Water_P1_Start>
 8001c62:	e001      	b.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x54>
			}else{
				Water_P1_Stop();
 8001c64:	f7ff fe6e 	bl	8001944 <Water_P1_Stop>
			}
		}
	}
	if (htim->Instance == TIM3)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a27      	ldr	r2, [pc, #156]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d12b      	bne.n	8001cca <HAL_TIM_PeriodElapsedCallback+0xb6>
	{// 60s
		printf("1min pass\r\n");
 8001c72:	4827      	ldr	r0, [pc, #156]	@ (8001d10 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001c74:	f005 fc56 	bl	8007524 <puts>
		(flag->timer1)+=1;
 8001c78:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	785a      	ldrb	r2, [r3, #1]
 8001c7e:	4b25      	ldr	r3, [pc, #148]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3201      	adds	r2, #1
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	705a      	strb	r2, [r3, #1]

		if(flag->timer1 == 5){	//1분마다
 8001c88:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	785b      	ldrb	r3, [r3, #1]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d117      	bne.n	8001cc2 <HAL_TIM_PeriodElapsedCallback+0xae>
			(flag->timer2)++;			//timer2++
 8001c92:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	789a      	ldrb	r2, [r3, #2]
 8001c98:	3201      	adds	r2, #1
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	709a      	strb	r2, [r3, #2]
			flag->timer1 = 0;			//30초
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	705a      	strb	r2, [r3, #1]
			if(flag->timer2 == 1){
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	789b      	ldrb	r3, [r3, #2]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10c      	bne.n	8001cca <HAL_TIM_PeriodElapsedCallback+0xb6>
				flag->water_sensor_flag = 1;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
				flag->timer2 = 0;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	709a      	strb	r2, [r3, #2]
 8001cc0:	e003      	b.n	8001cca <HAL_TIM_PeriodElapsedCallback+0xb6>
			}
		}else{
			flag->water_sensor_flag = 0;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (htim->Instance == TIM5)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d10d      	bne.n	8001cf0 <HAL_TIM_PeriodElapsedCallback+0xdc>
	{	// 10s

		if(Sensor_flag == 1){
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d109      	bne.n	8001cf0 <HAL_TIM_PeriodElapsedCallback+0xdc>

			if(flag->water_sensor_flag == 1){
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <HAL_TIM_PeriodElapsedCallback+0xd8>
				Water_P2_Start();
 8001ce6:	f7ff fe21 	bl	800192c <Water_P2_Start>
 8001cea:	e001      	b.n	8001cf0 <HAL_TIM_PeriodElapsedCallback+0xdc>

			}else{
				Water_P2_Stop();
 8001cec:	f7ff fe36 	bl	800195c <Water_P2_Stop>
		}
	}


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a09      	ldr	r2, [pc, #36]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0xea>
  {
    HAL_IncTick();
 8001cfa:	f000 fe3b 	bl	8002974 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000026a 	.word	0x2000026a
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	0800ad6c 	.word	0x0800ad6c
 8001d14:	2000002c 	.word	0x2000002c
 8001d18:	40000c00 	.word	0x40000c00
 8001d1c:	40002000 	.word	0x40002000

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <Error_Handler+0x8>

08001d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_MspInit+0x4c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d78 <HAL_MspInit+0x4c>)
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d42:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <HAL_MspInit+0x4c>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_MspInit+0x4c>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <HAL_MspInit+0x4c>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_MspInit+0x4c>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800

08001d7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	@ 0x38
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	4b33      	ldr	r3, [pc, #204]	@ (8001e60 <HAL_InitTick+0xe4>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	4a32      	ldr	r2, [pc, #200]	@ (8001e60 <HAL_InitTick+0xe4>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9c:	4b30      	ldr	r3, [pc, #192]	@ (8001e60 <HAL_InitTick+0xe4>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001da8:	f107 0210 	add.w	r2, r7, #16
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fdf4 	bl	80039a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dc2:	f001 fdc5 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8001dc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8001dc8:	e004      	b.n	8001dd4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dca:	f001 fdc1 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd6:	4a23      	ldr	r2, [pc, #140]	@ (8001e64 <HAL_InitTick+0xe8>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	0c9b      	lsrs	r3, r3, #18
 8001dde:	3b01      	subs	r3, #1
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001de2:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <HAL_InitTick+0xec>)
 8001de4:	4a21      	ldr	r2, [pc, #132]	@ (8001e6c <HAL_InitTick+0xf0>)
 8001de6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001de8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <HAL_InitTick+0xec>)
 8001dea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dee:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001df0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e68 <HAL_InitTick+0xec>)
 8001df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <HAL_InitTick+0xec>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <HAL_InitTick+0xec>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e02:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <HAL_InitTick+0xec>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001e08:	4817      	ldr	r0, [pc, #92]	@ (8001e68 <HAL_InitTick+0xec>)
 8001e0a:	f002 fac9 	bl	80043a0 <HAL_TIM_Base_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001e14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d11b      	bne.n	8001e54 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001e1c:	4812      	ldr	r0, [pc, #72]	@ (8001e68 <HAL_InitTick+0xec>)
 8001e1e:	f002 fb77 	bl	8004510 <HAL_TIM_Base_Start_IT>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001e28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d111      	bne.n	8001e54 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001e30:	202d      	movs	r0, #45	@ 0x2d
 8001e32:	f001 fac7 	bl	80033c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d808      	bhi.n	8001e4e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	202d      	movs	r0, #45	@ 0x2d
 8001e42:	f001 faa3 	bl	800338c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e46:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <HAL_InitTick+0xf4>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e002      	b.n	8001e54 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3738      	adds	r7, #56	@ 0x38
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	431bde83 	.word	0x431bde83
 8001e68:	20000270 	.word	0x20000270
 8001e6c:	40002000 	.word	0x40002000
 8001e70:	20000034 	.word	0x20000034

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <NMI_Handler+0x4>

08001e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001eda:	f002 fcab 	bl	8004834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200002bc 	.word	0x200002bc

08001ee8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <TIM2_IRQHandler+0x10>)
 8001eee:	f002 fca1 	bl	8004834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //printf("Timer1 = %d , Timer2 = %d\r\n",flag->timer1,flag->timer2);
  /* USER CODE END TIM2_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000304 	.word	0x20000304

08001efc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <TIM3_IRQHandler+0x10>)
 8001f02:	f002 fc97 	bl	8004834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000034c 	.word	0x2000034c

08001f10 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001f14:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001f16:	f002 fc8d 	bl	8004834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000270 	.word	0x20000270

08001f24 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f28:	4802      	ldr	r0, [pc, #8]	@ (8001f34 <TIM5_IRQHandler+0x10>)
 8001f2a:	f002 fc83 	bl	8004834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  //printf("hi'\r\n");
  /* USER CODE END TIM5_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200003dc 	.word	0x200003dc

08001f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return 1;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_kill>:

int _kill(int pid, int sig)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f52:	f005 fc3b 	bl	80077cc <__errno>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2216      	movs	r2, #22
 8001f5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_exit>:

void _exit (int status)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ffe7 	bl	8001f48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f7a:	bf00      	nop
 8001f7c:	e7fd      	b.n	8001f7a <_exit+0x12>

08001f7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	e00a      	b.n	8001fa6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f90:	f3af 8000 	nop.w
 8001f94:	4601      	mov	r1, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	b2ca      	uxtb	r2, r1
 8001f9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	dbf0      	blt.n	8001f90 <_read+0x12>
  }

  return len;
 8001fae:	687b      	ldr	r3, [r7, #4]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e009      	b.n	8001fde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	60ba      	str	r2, [r7, #8]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f97c 	bl	80012d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	dbf1      	blt.n	8001fca <_write+0x12>
  }
  return len;
 8001fe6:	687b      	ldr	r3, [r7, #4]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_close>:

int _close(int file)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002018:	605a      	str	r2, [r3, #4]
  return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_isatty>:

int _isatty(int file)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	@ (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f005 fba0 	bl	80077cc <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	220c      	movs	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <_sbrk+0x64>)
 80020a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20020000 	.word	0x20020000
 80020b8:	00000400 	.word	0x00000400
 80020bc:	200002b8 	.word	0x200002b8
 80020c0:	20000650 	.word	0x20000650

080020c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <SystemInit+0x20>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ce:	4a05      	ldr	r2, [pc, #20]	@ (80020e4 <SystemInit+0x20>)
 80020d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b096      	sub	sp, #88	@ 0x58
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
 8002116:	615a      	str	r2, [r3, #20]
 8002118:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2220      	movs	r2, #32
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f005 fb01 	bl	8007728 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002126:	4b3d      	ldr	r3, [pc, #244]	@ (800221c <MX_TIM1_Init+0x134>)
 8002128:	4a3d      	ldr	r2, [pc, #244]	@ (8002220 <MX_TIM1_Init+0x138>)
 800212a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 45-1;
 800212c:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <MX_TIM1_Init+0x134>)
 800212e:	222c      	movs	r2, #44	@ 0x2c
 8002130:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002132:	4b3a      	ldr	r3, [pc, #232]	@ (800221c <MX_TIM1_Init+0x134>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8002138:	4b38      	ldr	r3, [pc, #224]	@ (800221c <MX_TIM1_Init+0x134>)
 800213a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800213e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002140:	4b36      	ldr	r3, [pc, #216]	@ (800221c <MX_TIM1_Init+0x134>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002146:	4b35      	ldr	r3, [pc, #212]	@ (800221c <MX_TIM1_Init+0x134>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214c:	4b33      	ldr	r3, [pc, #204]	@ (800221c <MX_TIM1_Init+0x134>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002152:	4832      	ldr	r0, [pc, #200]	@ (800221c <MX_TIM1_Init+0x134>)
 8002154:	f002 f924 	bl	80043a0 <HAL_TIM_Base_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800215e:	f7ff fddf 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002166:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002168:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800216c:	4619      	mov	r1, r3
 800216e:	482b      	ldr	r0, [pc, #172]	@ (800221c <MX_TIM1_Init+0x134>)
 8002170:	f002 fd12 	bl	8004b98 <HAL_TIM_ConfigClockSource>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800217a:	f7ff fdd1 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800217e:	4827      	ldr	r0, [pc, #156]	@ (800221c <MX_TIM1_Init+0x134>)
 8002180:	f002 fa36 	bl	80045f0 <HAL_TIM_PWM_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800218a:	f7ff fdc9 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002196:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800219a:	4619      	mov	r1, r3
 800219c:	481f      	ldr	r0, [pc, #124]	@ (800221c <MX_TIM1_Init+0x134>)
 800219e:	f003 f901 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80021a8:	f7ff fdba 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ac:	2360      	movs	r3, #96	@ 0x60
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021bc:	2300      	movs	r3, #0
 80021be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021c8:	220c      	movs	r2, #12
 80021ca:	4619      	mov	r1, r3
 80021cc:	4813      	ldr	r0, [pc, #76]	@ (800221c <MX_TIM1_Init+0x134>)
 80021ce:	f002 fc21 	bl	8004a14 <HAL_TIM_PWM_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80021d8:	f7ff fda2 	bl	8001d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	4619      	mov	r1, r3
 80021fe:	4807      	ldr	r0, [pc, #28]	@ (800221c <MX_TIM1_Init+0x134>)
 8002200:	f003 f94c 	bl	800549c <HAL_TIMEx_ConfigBreakDeadTime>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800220a:	f7ff fd89 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800220e:	4803      	ldr	r0, [pc, #12]	@ (800221c <MX_TIM1_Init+0x134>)
 8002210:	f000 fa32 	bl	8002678 <HAL_TIM_MspPostInit>

}
 8002214:	bf00      	nop
 8002216:	3758      	adds	r7, #88	@ 0x58
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200002bc 	.word	0x200002bc
 8002220:	40010000 	.word	0x40010000

08002224 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002238:	463b      	mov	r3, r7
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002240:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <MX_TIM2_Init+0x98>)
 8002242:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000-1;
 8002248:	4b1c      	ldr	r3, [pc, #112]	@ (80022bc <MX_TIM2_Init+0x98>)
 800224a:	f242 3227 	movw	r2, #8999	@ 0x2327
 800224e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002250:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <MX_TIM2_Init+0x98>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002256:	4b19      	ldr	r3, [pc, #100]	@ (80022bc <MX_TIM2_Init+0x98>)
 8002258:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800225c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225e:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <MX_TIM2_Init+0x98>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002264:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <MX_TIM2_Init+0x98>)
 8002266:	2280      	movs	r2, #128	@ 0x80
 8002268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800226a:	4814      	ldr	r0, [pc, #80]	@ (80022bc <MX_TIM2_Init+0x98>)
 800226c:	f002 f898 	bl	80043a0 <HAL_TIM_Base_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002276:	f7ff fd53 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800227a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800227e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	4619      	mov	r1, r3
 8002286:	480d      	ldr	r0, [pc, #52]	@ (80022bc <MX_TIM2_Init+0x98>)
 8002288:	f002 fc86 	bl	8004b98 <HAL_TIM_ConfigClockSource>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002292:	f7ff fd45 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800229e:	463b      	mov	r3, r7
 80022a0:	4619      	mov	r1, r3
 80022a2:	4806      	ldr	r0, [pc, #24]	@ (80022bc <MX_TIM2_Init+0x98>)
 80022a4:	f003 f87e 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80022ae:	f7ff fd37 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000304 	.word	0x20000304

080022c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <MX_TIM3_Init+0x94>)
 80022de:	4a1e      	ldr	r2, [pc, #120]	@ (8002358 <MX_TIM3_Init+0x98>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45000-1;
 80022e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002354 <MX_TIM3_Init+0x94>)
 80022e4:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 80022e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <MX_TIM3_Init+0x94>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80022f0:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <MX_TIM3_Init+0x94>)
 80022f2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80022f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f8:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <MX_TIM3_Init+0x94>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <MX_TIM3_Init+0x94>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002304:	4813      	ldr	r0, [pc, #76]	@ (8002354 <MX_TIM3_Init+0x94>)
 8002306:	f002 f84b 	bl	80043a0 <HAL_TIM_Base_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002310:	f7ff fd06 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002318:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4619      	mov	r1, r3
 8002320:	480c      	ldr	r0, [pc, #48]	@ (8002354 <MX_TIM3_Init+0x94>)
 8002322:	f002 fc39 	bl	8004b98 <HAL_TIM_ConfigClockSource>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800232c:	f7ff fcf8 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002338:	463b      	mov	r3, r7
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	@ (8002354 <MX_TIM3_Init+0x94>)
 800233e:	f003 f831 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002348:	f7ff fcea 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2000034c 	.word	0x2000034c
 8002358:	40000400 	.word	0x40000400

0800235c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	@ 0x38
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002362:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002370:	f107 0320 	add.w	r3, r7, #32
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
 8002388:	615a      	str	r2, [r3, #20]
 800238a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800238c:	4b2c      	ldr	r3, [pc, #176]	@ (8002440 <MX_TIM4_Init+0xe4>)
 800238e:	4a2d      	ldr	r2, [pc, #180]	@ (8002444 <MX_TIM4_Init+0xe8>)
 8002390:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8002392:	4b2b      	ldr	r3, [pc, #172]	@ (8002440 <MX_TIM4_Init+0xe4>)
 8002394:	2259      	movs	r2, #89	@ 0x59
 8002396:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002398:	4b29      	ldr	r3, [pc, #164]	@ (8002440 <MX_TIM4_Init+0xe4>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 15000-1;
 800239e:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <MX_TIM4_Init+0xe4>)
 80023a0:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80023a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a6:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <MX_TIM4_Init+0xe4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ac:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <MX_TIM4_Init+0xe4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023b2:	4823      	ldr	r0, [pc, #140]	@ (8002440 <MX_TIM4_Init+0xe4>)
 80023b4:	f001 fff4 	bl	80043a0 <HAL_TIM_Base_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80023be:	f7ff fcaf 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023cc:	4619      	mov	r1, r3
 80023ce:	481c      	ldr	r0, [pc, #112]	@ (8002440 <MX_TIM4_Init+0xe4>)
 80023d0:	f002 fbe2 	bl	8004b98 <HAL_TIM_ConfigClockSource>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80023da:	f7ff fca1 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023de:	4818      	ldr	r0, [pc, #96]	@ (8002440 <MX_TIM4_Init+0xe4>)
 80023e0:	f002 f906 	bl	80045f0 <HAL_TIM_PWM_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80023ea:	f7ff fc99 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023f6:	f107 0320 	add.w	r3, r7, #32
 80023fa:	4619      	mov	r1, r3
 80023fc:	4810      	ldr	r0, [pc, #64]	@ (8002440 <MX_TIM4_Init+0xe4>)
 80023fe:	f002 ffd1 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002408:	f7ff fc8a 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240c:	2360      	movs	r3, #96	@ 0x60
 800240e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2200      	movs	r2, #0
 8002420:	4619      	mov	r1, r3
 8002422:	4807      	ldr	r0, [pc, #28]	@ (8002440 <MX_TIM4_Init+0xe4>)
 8002424:	f002 faf6 	bl	8004a14 <HAL_TIM_PWM_ConfigChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800242e:	f7ff fc77 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002432:	4803      	ldr	r0, [pc, #12]	@ (8002440 <MX_TIM4_Init+0xe4>)
 8002434:	f000 f920 	bl	8002678 <HAL_TIM_MspPostInit>

}
 8002438:	bf00      	nop
 800243a:	3738      	adds	r7, #56	@ 0x38
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000394 	.word	0x20000394
 8002444:	40000800 	.word	0x40000800

08002448 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244e:	f107 0308 	add.w	r3, r7, #8
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245c:	463b      	mov	r3, r7
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002464:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <MX_TIM5_Init+0x94>)
 8002466:	4a1e      	ldr	r2, [pc, #120]	@ (80024e0 <MX_TIM5_Init+0x98>)
 8002468:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9000-1;
 800246a:	4b1c      	ldr	r3, [pc, #112]	@ (80024dc <MX_TIM5_Init+0x94>)
 800246c:	f242 3227 	movw	r2, #8999	@ 0x2327
 8002470:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <MX_TIM5_Init+0x94>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002478:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <MX_TIM5_Init+0x94>)
 800247a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800247e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002480:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <MX_TIM5_Init+0x94>)
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <MX_TIM5_Init+0x94>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800248c:	4813      	ldr	r0, [pc, #76]	@ (80024dc <MX_TIM5_Init+0x94>)
 800248e:	f001 ff87 	bl	80043a0 <HAL_TIM_Base_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002498:	f7ff fc42 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024a2:	f107 0308 	add.w	r3, r7, #8
 80024a6:	4619      	mov	r1, r3
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <MX_TIM5_Init+0x94>)
 80024aa:	f002 fb75 	bl	8004b98 <HAL_TIM_ConfigClockSource>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80024b4:	f7ff fc34 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024c0:	463b      	mov	r3, r7
 80024c2:	4619      	mov	r1, r3
 80024c4:	4805      	ldr	r0, [pc, #20]	@ (80024dc <MX_TIM5_Init+0x94>)
 80024c6:	f002 ff6d 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80024d0:	f7ff fc26 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200003dc 	.word	0x200003dc
 80024e0:	40000c00 	.word	0x40000c00

080024e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ea:	463b      	mov	r3, r7
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024f2:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <MX_TIM6_Init+0x64>)
 80024f4:	4a15      	ldr	r2, [pc, #84]	@ (800254c <MX_TIM6_Init+0x68>)
 80024f6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80024f8:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <MX_TIM6_Init+0x64>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fe:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <MX_TIM6_Init+0x64>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002504:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <MX_TIM6_Init+0x64>)
 8002506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800250a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250c:	4b0e      	ldr	r3, [pc, #56]	@ (8002548 <MX_TIM6_Init+0x64>)
 800250e:	2200      	movs	r2, #0
 8002510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002512:	480d      	ldr	r0, [pc, #52]	@ (8002548 <MX_TIM6_Init+0x64>)
 8002514:	f001 ff44 	bl	80043a0 <HAL_TIM_Base_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800251e:	f7ff fbff 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800252a:	463b      	mov	r3, r7
 800252c:	4619      	mov	r1, r3
 800252e:	4806      	ldr	r0, [pc, #24]	@ (8002548 <MX_TIM6_Init+0x64>)
 8002530:	f002 ff38 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800253a:	f7ff fbf1 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000424 	.word	0x20000424
 800254c:	40001000 	.word	0x40001000

08002550 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a40      	ldr	r2, [pc, #256]	@ (8002660 <HAL_TIM_Base_MspInit+0x110>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d116      	bne.n	8002590 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	4b3f      	ldr	r3, [pc, #252]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	4a3e      	ldr	r2, [pc, #248]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6453      	str	r3, [r2, #68]	@ 0x44
 8002572:	4b3c      	ldr	r3, [pc, #240]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	2018      	movs	r0, #24
 8002584:	f000 ff02 	bl	800338c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002588:	2018      	movs	r0, #24
 800258a:	f000 ff1b 	bl	80033c4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800258e:	e062      	b.n	8002656 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a30      	ldr	r2, [pc, #192]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	69bb      	ldr	r3, [r7, #24]
}
 80025b6:	e04e      	b.n	8002656 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002668 <HAL_TIM_Base_MspInit+0x118>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10e      	bne.n	80025e0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	4b27      	ldr	r3, [pc, #156]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	4a26      	ldr	r2, [pc, #152]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d2:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]
}
 80025de:	e03a      	b.n	8002656 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM4)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a21      	ldr	r2, [pc, #132]	@ (800266c <HAL_TIM_Base_MspInit+0x11c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
}
 8002606:	e026      	b.n	8002656 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM5)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a18      	ldr	r2, [pc, #96]	@ (8002670 <HAL_TIM_Base_MspInit+0x120>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a12      	ldr	r2, [pc, #72]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 800261c:	f043 0308 	orr.w	r3, r3, #8
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
}
 800262e:	e012      	b.n	8002656 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM6)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0f      	ldr	r2, [pc, #60]	@ (8002674 <HAL_TIM_Base_MspInit+0x124>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d10d      	bne.n	8002656 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 8002644:	f043 0310 	orr.w	r3, r3, #16
 8002648:	6413      	str	r3, [r2, #64]	@ 0x40
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_TIM_Base_MspInit+0x114>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
}
 8002656:	bf00      	nop
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40010000 	.word	0x40010000
 8002664:	40023800 	.word	0x40023800
 8002668:	40000400 	.word	0x40000400
 800266c:	40000800 	.word	0x40000800
 8002670:	40000c00 	.word	0x40000c00
 8002674:	40001000 	.word	0x40001000

08002678 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	@ 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a24      	ldr	r2, [pc, #144]	@ (8002728 <HAL_TIM_MspPostInit+0xb0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d11f      	bne.n	80026da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	4b23      	ldr	r3, [pc, #140]	@ (800272c <HAL_TIM_MspPostInit+0xb4>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a22      	ldr	r2, [pc, #136]	@ (800272c <HAL_TIM_MspPostInit+0xb4>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b20      	ldr	r3, [pc, #128]	@ (800272c <HAL_TIM_MspPostInit+0xb4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026c4:	2302      	movs	r3, #2
 80026c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026c8:	2301      	movs	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4619      	mov	r1, r3
 80026d2:	4817      	ldr	r0, [pc, #92]	@ (8002730 <HAL_TIM_MspPostInit+0xb8>)
 80026d4:	f000 fe84 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80026d8:	e022      	b.n	8002720 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a15      	ldr	r2, [pc, #84]	@ (8002734 <HAL_TIM_MspPostInit+0xbc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d11d      	bne.n	8002720 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	4b10      	ldr	r3, [pc, #64]	@ (800272c <HAL_TIM_MspPostInit+0xb4>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	4a0f      	ldr	r2, [pc, #60]	@ (800272c <HAL_TIM_MspPostInit+0xb4>)
 80026ee:	f043 0302 	orr.w	r3, r3, #2
 80026f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f4:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <HAL_TIM_MspPostInit+0xb4>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002700:	2340      	movs	r3, #64	@ 0x40
 8002702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2300      	movs	r3, #0
 800270e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002710:	2302      	movs	r3, #2
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4619      	mov	r1, r3
 800271a:	4807      	ldr	r0, [pc, #28]	@ (8002738 <HAL_TIM_MspPostInit+0xc0>)
 800271c:	f000 fe60 	bl	80033e0 <HAL_GPIO_Init>
}
 8002720:	bf00      	nop
 8002722:	3728      	adds	r7, #40	@ 0x28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40010000 	.word	0x40010000
 800272c:	40023800 	.word	0x40023800
 8002730:	40020000 	.word	0x40020000
 8002734:	40000800 	.word	0x40000800
 8002738:	40020400 	.word	0x40020400

0800273c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002740:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <MX_USART1_UART_Init+0x4c>)
 8002742:	4a12      	ldr	r2, [pc, #72]	@ (800278c <MX_USART1_UART_Init+0x50>)
 8002744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <MX_USART1_UART_Init+0x4c>)
 8002748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800274c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800274e:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <MX_USART1_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <MX_USART1_UART_Init+0x4c>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800275a:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <MX_USART1_UART_Init+0x4c>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002760:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <MX_USART1_UART_Init+0x4c>)
 8002762:	220c      	movs	r2, #12
 8002764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002766:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <MX_USART1_UART_Init+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800276c:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <MX_USART1_UART_Init+0x4c>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002772:	4805      	ldr	r0, [pc, #20]	@ (8002788 <MX_USART1_UART_Init+0x4c>)
 8002774:	f002 fef8 	bl	8005568 <HAL_UART_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800277e:	f7ff facf 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	2000046c 	.word	0x2000046c
 800278c:	40011000 	.word	0x40011000

08002790 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <MX_USART2_UART_Init+0x4c>)
 8002796:	4a12      	ldr	r2, [pc, #72]	@ (80027e0 <MX_USART2_UART_Init+0x50>)
 8002798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <MX_USART2_UART_Init+0x4c>)
 800279c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <MX_USART2_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <MX_USART2_UART_Init+0x4c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027ae:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <MX_USART2_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027b4:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <MX_USART2_UART_Init+0x4c>)
 80027b6:	220c      	movs	r2, #12
 80027b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <MX_USART2_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <MX_USART2_UART_Init+0x4c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027c6:	4805      	ldr	r0, [pc, #20]	@ (80027dc <MX_USART2_UART_Init+0x4c>)
 80027c8:	f002 fece 	bl	8005568 <HAL_UART_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027d2:	f7ff faa5 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200004b4 	.word	0x200004b4
 80027e0:	40004400 	.word	0x40004400

080027e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08c      	sub	sp, #48	@ 0x30
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 031c 	add.w	r3, r7, #28
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a32      	ldr	r2, [pc, #200]	@ (80028cc <HAL_UART_MspInit+0xe8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d12d      	bne.n	8002862 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	4b31      	ldr	r3, [pc, #196]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	4a30      	ldr	r2, [pc, #192]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 8002810:	f043 0310 	orr.w	r3, r3, #16
 8002814:	6453      	str	r3, [r2, #68]	@ 0x44
 8002816:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	4a29      	ldr	r2, [pc, #164]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6313      	str	r3, [r2, #48]	@ 0x30
 8002832:	4b27      	ldr	r3, [pc, #156]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800283e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002850:	2307      	movs	r3, #7
 8002852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	4619      	mov	r1, r3
 800285a:	481e      	ldr	r0, [pc, #120]	@ (80028d4 <HAL_UART_MspInit+0xf0>)
 800285c:	f000 fdc0 	bl	80033e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002860:	e030      	b.n	80028c4 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1c      	ldr	r2, [pc, #112]	@ (80028d8 <HAL_UART_MspInit+0xf4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d12b      	bne.n	80028c4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	4a16      	ldr	r2, [pc, #88]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 8002876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287a:	6413      	str	r3, [r2, #64]	@ 0x40
 800287c:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	4a0f      	ldr	r2, [pc, #60]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6313      	str	r3, [r2, #48]	@ 0x30
 8002898:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <HAL_UART_MspInit+0xec>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028a4:	230c      	movs	r3, #12
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028b4:	2307      	movs	r3, #7
 80028b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	4619      	mov	r1, r3
 80028be:	4805      	ldr	r0, [pc, #20]	@ (80028d4 <HAL_UART_MspInit+0xf0>)
 80028c0:	f000 fd8e 	bl	80033e0 <HAL_GPIO_Init>
}
 80028c4:	bf00      	nop
 80028c6:	3730      	adds	r7, #48	@ 0x30
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40011000 	.word	0x40011000
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40004400 	.word	0x40004400

080028dc <Reset_Handler>:
 80028dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002914 <LoopFillZerobss+0xe>
 80028e0:	f7ff fbf0 	bl	80020c4 <SystemInit>
 80028e4:	480c      	ldr	r0, [pc, #48]	@ (8002918 <LoopFillZerobss+0x12>)
 80028e6:	490d      	ldr	r1, [pc, #52]	@ (800291c <LoopFillZerobss+0x16>)
 80028e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002920 <LoopFillZerobss+0x1a>)
 80028ea:	2300      	movs	r3, #0
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:
 80028ee:	58d4      	ldr	r4, [r2, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:
 80028f4:	18c4      	adds	r4, r0, r3
 80028f6:	428c      	cmp	r4, r1
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
 80028fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002924 <LoopFillZerobss+0x1e>)
 80028fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002928 <LoopFillZerobss+0x22>)
 80028fe:	2300      	movs	r3, #0
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:
 8002906:	42a2      	cmp	r2, r4
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>
 800290a:	f004 ff65 	bl	80077d8 <__libc_init_array>
 800290e:	f7ff f87f 	bl	8001a10 <main>
 8002912:	4770      	bx	lr
 8002914:	20020000 	.word	0x20020000
 8002918:	20000000 	.word	0x20000000
 800291c:	20000204 	.word	0x20000204
 8002920:	0800b1e0 	.word	0x0800b1e0
 8002924:	20000204 	.word	0x20000204
 8002928:	2000064c 	.word	0x2000064c

0800292c <ADC_IRQHandler>:
 800292c:	e7fe      	b.n	800292c <ADC_IRQHandler>
	...

08002930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002934:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <HAL_Init+0x40>)
 800293a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800293e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_Init+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <HAL_Init+0x40>)
 8002946:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800294a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800294c:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <HAL_Init+0x40>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a07      	ldr	r2, [pc, #28]	@ (8002970 <HAL_Init+0x40>)
 8002952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002958:	2003      	movs	r0, #3
 800295a:	f000 fd0c 	bl	8003376 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800295e:	200f      	movs	r0, #15
 8002960:	f7ff fa0c 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002964:	f7ff f9e2 	bl	8001d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00

08002974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_IncTick+0x20>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_IncTick+0x24>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4413      	add	r3, r2
 8002984:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <HAL_IncTick+0x24>)
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000038 	.word	0x20000038
 8002998:	200004fc 	.word	0x200004fc

0800299c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return uwTick;
 80029a0:	4b03      	ldr	r3, [pc, #12]	@ (80029b0 <HAL_GetTick+0x14>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	200004fc 	.word	0x200004fc

080029b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff ffee 	bl	800299c <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d005      	beq.n	80029da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ce:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <HAL_Delay+0x44>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029da:	bf00      	nop
 80029dc:	f7ff ffde 	bl	800299c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d8f7      	bhi.n	80029dc <HAL_Delay+0x28>
  {
  }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000038 	.word	0x20000038

080029fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e033      	b.n	8002a7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fe fb72 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d118      	bne.n	8002a6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a42:	f023 0302 	bic.w	r3, r3, #2
 8002a46:	f043 0202 	orr.w	r2, r3, #2
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fae8 	bl	8003024 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a6a:	e001      	b.n	8002a70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_Start+0x1a>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e0b2      	b.n	8002c04 <HAL_ADC_Start+0x180>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d018      	beq.n	8002ae6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ac4:	4b52      	ldr	r3, [pc, #328]	@ (8002c10 <HAL_ADC_Start+0x18c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	@ (8002c14 <HAL_ADC_Start+0x190>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	0c9a      	lsrs	r2, r3, #18
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002ad8:	e002      	b.n	8002ae0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f9      	bne.n	8002ada <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d17a      	bne.n	8002bea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b32:	d106      	bne.n	8002b42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	f023 0206 	bic.w	r2, r3, #6
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b40:	e002      	b.n	8002b48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b50:	4b31      	ldr	r3, [pc, #196]	@ (8002c18 <HAL_ADC_Start+0x194>)
 8002b52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b5c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d12a      	bne.n	8002bc0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c1c <HAL_ADC_Start+0x198>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d015      	beq.n	8002ba0 <HAL_ADC_Start+0x11c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a29      	ldr	r2, [pc, #164]	@ (8002c20 <HAL_ADC_Start+0x19c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d105      	bne.n	8002b8a <HAL_ADC_Start+0x106>
 8002b7e:	4b26      	ldr	r3, [pc, #152]	@ (8002c18 <HAL_ADC_Start+0x194>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a25      	ldr	r2, [pc, #148]	@ (8002c24 <HAL_ADC_Start+0x1a0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d136      	bne.n	8002c02 <HAL_ADC_Start+0x17e>
 8002b94:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <HAL_ADC_Start+0x194>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d130      	bne.n	8002c02 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d129      	bne.n	8002c02 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	e020      	b.n	8002c02 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	@ (8002c1c <HAL_ADC_Start+0x198>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d11b      	bne.n	8002c02 <HAL_ADC_Start+0x17e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d114      	bne.n	8002c02 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	e00b      	b.n	8002c02 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	20000030 	.word	0x20000030
 8002c14:	431bde83 	.word	0x431bde83
 8002c18:	40012300 	.word	0x40012300
 8002c1c:	40012000 	.word	0x40012000
 8002c20:	40012100 	.word	0x40012100
 8002c24:	40012200 	.word	0x40012200

08002c28 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_Stop+0x16>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e021      	b.n	8002c82 <HAL_ADC_Stop+0x5a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d109      	bne.n	8002c78 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002caa:	d113      	bne.n	8002cd4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cba:	d10b      	bne.n	8002cd4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e063      	b.n	8002d9c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cd4:	f7ff fe62 	bl	800299c <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cda:	e021      	b.n	8002d20 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce2:	d01d      	beq.n	8002d20 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <HAL_ADC_PollForConversion+0x6c>
 8002cea:	f7ff fe57 	bl	800299c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d212      	bcs.n	8002d20 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d00b      	beq.n	8002d20 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	f043 0204 	orr.w	r2, r3, #4
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e03d      	b.n	8002d9c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d1d6      	bne.n	8002cdc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f06f 0212 	mvn.w	r2, #18
 8002d36:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d123      	bne.n	8002d9a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d11f      	bne.n	8002d9a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d006      	beq.n	8002d76 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d111      	bne.n	8002d9a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	f043 0201 	orr.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x1c>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e113      	b.n	8003004 <HAL_ADC_ConfigChannel+0x244>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b09      	cmp	r3, #9
 8002dea:	d925      	bls.n	8002e38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68d9      	ldr	r1, [r3, #12]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b1e      	subs	r3, #30
 8002e02:	2207      	movs	r2, #7
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	400a      	ands	r2, r1
 8002e10:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68d9      	ldr	r1, [r3, #12]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	4603      	mov	r3, r0
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4403      	add	r3, r0
 8002e2a:	3b1e      	subs	r3, #30
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	e022      	b.n	8002e7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6919      	ldr	r1, [r3, #16]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	400a      	ands	r2, r1
 8002e5a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6919      	ldr	r1, [r3, #16]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4403      	add	r3, r0
 8002e74:	409a      	lsls	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d824      	bhi.n	8002ed0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	3b05      	subs	r3, #5
 8002e98:	221f      	movs	r2, #31
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3b05      	subs	r3, #5
 8002ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ece:	e04c      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	d824      	bhi.n	8002f22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3b23      	subs	r3, #35	@ 0x23
 8002eea:	221f      	movs	r2, #31
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	3b23      	subs	r3, #35	@ 0x23
 8002f14:	fa00 f203 	lsl.w	r2, r0, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f20:	e023      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	3b41      	subs	r3, #65	@ 0x41
 8002f34:	221f      	movs	r2, #31
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	400a      	ands	r2, r1
 8002f42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	4618      	mov	r0, r3
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3b41      	subs	r3, #65	@ 0x41
 8002f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f6a:	4b29      	ldr	r3, [pc, #164]	@ (8003010 <HAL_ADC_ConfigChannel+0x250>)
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a28      	ldr	r2, [pc, #160]	@ (8003014 <HAL_ADC_ConfigChannel+0x254>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d10f      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x1d8>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b12      	cmp	r3, #18
 8002f7e:	d10b      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003014 <HAL_ADC_ConfigChannel+0x254>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d12b      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x23a>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8003018 <HAL_ADC_ConfigChannel+0x258>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d003      	beq.n	8002fb4 <HAL_ADC_ConfigChannel+0x1f4>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b11      	cmp	r3, #17
 8002fb2:	d122      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a11      	ldr	r2, [pc, #68]	@ (8003018 <HAL_ADC_ConfigChannel+0x258>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d111      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fd6:	4b11      	ldr	r3, [pc, #68]	@ (800301c <HAL_ADC_ConfigChannel+0x25c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a11      	ldr	r2, [pc, #68]	@ (8003020 <HAL_ADC_ConfigChannel+0x260>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	0c9a      	lsrs	r2, r3, #18
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fec:	e002      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f9      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40012300 	.word	0x40012300
 8003014:	40012000 	.word	0x40012000
 8003018:	10000012 	.word	0x10000012
 800301c:	20000030 	.word	0x20000030
 8003020:	431bde83 	.word	0x431bde83

08003024 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800302c:	4b79      	ldr	r3, [pc, #484]	@ (8003214 <ADC_Init+0x1f0>)
 800302e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	431a      	orrs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003058:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	021a      	lsls	r2, r3, #8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800307c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800309e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	4a58      	ldr	r2, [pc, #352]	@ (8003218 <ADC_Init+0x1f4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d022      	beq.n	8003102 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6899      	ldr	r1, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6899      	ldr	r1, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	e00f      	b.n	8003122 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003110:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003120:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0202 	bic.w	r2, r2, #2
 8003130:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6899      	ldr	r1, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7e1b      	ldrb	r3, [r3, #24]
 800313c:	005a      	lsls	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800315e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800316e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	3b01      	subs	r3, #1
 800317c:	035a      	lsls	r2, r3, #13
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	e007      	b.n	8003198 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003196:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	051a      	lsls	r2, r3, #20
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031da:	025a      	lsls	r2, r3, #9
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6899      	ldr	r1, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	029a      	lsls	r2, r3, #10
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	609a      	str	r2, [r3, #8]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40012300 	.word	0x40012300
 8003218:	0f000001 	.word	0x0f000001

0800321c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800322c:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003238:	4013      	ands	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800324c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324e:	4a04      	ldr	r2, [pc, #16]	@ (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	60d3      	str	r3, [r2, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <__NVIC_GetPriorityGrouping+0x18>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 0307 	and.w	r3, r3, #7
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db0b      	blt.n	80032aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	4907      	ldr	r1, [pc, #28]	@ (80032b8 <__NVIC_EnableIRQ+0x38>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2001      	movs	r0, #1
 80032a2:	fa00 f202 	lsl.w	r2, r0, r2
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000e100 	.word	0xe000e100

080032bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	db0a      	blt.n	80032e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	490c      	ldr	r1, [pc, #48]	@ (8003308 <__NVIC_SetPriority+0x4c>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	440b      	add	r3, r1
 80032e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e4:	e00a      	b.n	80032fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4908      	ldr	r1, [pc, #32]	@ (800330c <__NVIC_SetPriority+0x50>)
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	3b04      	subs	r3, #4
 80032f4:	0112      	lsls	r2, r2, #4
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	440b      	add	r3, r1
 80032fa:	761a      	strb	r2, [r3, #24]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000e100 	.word	0xe000e100
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	@ 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f1c3 0307 	rsb	r3, r3, #7
 800332a:	2b04      	cmp	r3, #4
 800332c:	bf28      	it	cs
 800332e:	2304      	movcs	r3, #4
 8003330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3304      	adds	r3, #4
 8003336:	2b06      	cmp	r3, #6
 8003338:	d902      	bls.n	8003340 <NVIC_EncodePriority+0x30>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3b03      	subs	r3, #3
 800333e:	e000      	b.n	8003342 <NVIC_EncodePriority+0x32>
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	f04f 32ff 	mov.w	r2, #4294967295
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	401a      	ands	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003358:	f04f 31ff 	mov.w	r1, #4294967295
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	43d9      	mvns	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003368:	4313      	orrs	r3, r2
         );
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	@ 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff4c 	bl	800321c <__NVIC_SetPriorityGrouping>
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800339e:	f7ff ff61 	bl	8003264 <__NVIC_GetPriorityGrouping>
 80033a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	6978      	ldr	r0, [r7, #20]
 80033aa:	f7ff ffb1 	bl	8003310 <NVIC_EncodePriority>
 80033ae:	4602      	mov	r2, r0
 80033b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ff80 	bl	80032bc <__NVIC_SetPriority>
}
 80033bc:	bf00      	nop
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff54 	bl	8003280 <__NVIC_EnableIRQ>
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	@ 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	e165      	b.n	80036c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033fc:	2201      	movs	r2, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	429a      	cmp	r2, r3
 8003416:	f040 8154 	bne.w	80036c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d005      	beq.n	8003432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342e:	2b02      	cmp	r3, #2
 8003430:	d130      	bne.n	8003494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003468:	2201      	movs	r2, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 0201 	and.w	r2, r3, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b03      	cmp	r3, #3
 800349e:	d017      	beq.n	80034d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d123      	bne.n	8003524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	08da      	lsrs	r2, r3, #3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3208      	adds	r2, #8
 80034e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	220f      	movs	r2, #15
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	08da      	lsrs	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3208      	adds	r2, #8
 800351e:	69b9      	ldr	r1, [r7, #24]
 8003520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2203      	movs	r2, #3
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0203 	and.w	r2, r3, #3
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80ae 	beq.w	80036c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	4b5d      	ldr	r3, [pc, #372]	@ (80036e0 <HAL_GPIO_Init+0x300>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	4a5c      	ldr	r2, [pc, #368]	@ (80036e0 <HAL_GPIO_Init+0x300>)
 8003570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003574:	6453      	str	r3, [r2, #68]	@ 0x44
 8003576:	4b5a      	ldr	r3, [pc, #360]	@ (80036e0 <HAL_GPIO_Init+0x300>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003582:	4a58      	ldr	r2, [pc, #352]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3302      	adds	r3, #2
 800358a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	220f      	movs	r2, #15
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4f      	ldr	r2, [pc, #316]	@ (80036e8 <HAL_GPIO_Init+0x308>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d025      	beq.n	80035fa <HAL_GPIO_Init+0x21a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4e      	ldr	r2, [pc, #312]	@ (80036ec <HAL_GPIO_Init+0x30c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d01f      	beq.n	80035f6 <HAL_GPIO_Init+0x216>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4d      	ldr	r2, [pc, #308]	@ (80036f0 <HAL_GPIO_Init+0x310>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d019      	beq.n	80035f2 <HAL_GPIO_Init+0x212>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4c      	ldr	r2, [pc, #304]	@ (80036f4 <HAL_GPIO_Init+0x314>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_GPIO_Init+0x20e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a4b      	ldr	r2, [pc, #300]	@ (80036f8 <HAL_GPIO_Init+0x318>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00d      	beq.n	80035ea <HAL_GPIO_Init+0x20a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4a      	ldr	r2, [pc, #296]	@ (80036fc <HAL_GPIO_Init+0x31c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <HAL_GPIO_Init+0x206>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a49      	ldr	r2, [pc, #292]	@ (8003700 <HAL_GPIO_Init+0x320>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_GPIO_Init+0x202>
 80035de:	2306      	movs	r3, #6
 80035e0:	e00c      	b.n	80035fc <HAL_GPIO_Init+0x21c>
 80035e2:	2307      	movs	r3, #7
 80035e4:	e00a      	b.n	80035fc <HAL_GPIO_Init+0x21c>
 80035e6:	2305      	movs	r3, #5
 80035e8:	e008      	b.n	80035fc <HAL_GPIO_Init+0x21c>
 80035ea:	2304      	movs	r3, #4
 80035ec:	e006      	b.n	80035fc <HAL_GPIO_Init+0x21c>
 80035ee:	2303      	movs	r3, #3
 80035f0:	e004      	b.n	80035fc <HAL_GPIO_Init+0x21c>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e002      	b.n	80035fc <HAL_GPIO_Init+0x21c>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_GPIO_Init+0x21c>
 80035fa:	2300      	movs	r3, #0
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	f002 0203 	and.w	r2, r2, #3
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	4093      	lsls	r3, r2
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800360c:	4935      	ldr	r1, [pc, #212]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	3302      	adds	r3, #2
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361a:	4b3a      	ldr	r3, [pc, #232]	@ (8003704 <HAL_GPIO_Init+0x324>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800363e:	4a31      	ldr	r2, [pc, #196]	@ (8003704 <HAL_GPIO_Init+0x324>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003644:	4b2f      	ldr	r3, [pc, #188]	@ (8003704 <HAL_GPIO_Init+0x324>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003668:	4a26      	ldr	r2, [pc, #152]	@ (8003704 <HAL_GPIO_Init+0x324>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800366e:	4b25      	ldr	r3, [pc, #148]	@ (8003704 <HAL_GPIO_Init+0x324>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003692:	4a1c      	ldr	r2, [pc, #112]	@ (8003704 <HAL_GPIO_Init+0x324>)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003698:	4b1a      	ldr	r3, [pc, #104]	@ (8003704 <HAL_GPIO_Init+0x324>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036bc:	4a11      	ldr	r2, [pc, #68]	@ (8003704 <HAL_GPIO_Init+0x324>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3301      	adds	r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b0f      	cmp	r3, #15
 80036cc:	f67f ae96 	bls.w	80033fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3724      	adds	r7, #36	@ 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40013800 	.word	0x40013800
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40020400 	.word	0x40020400
 80036f0:	40020800 	.word	0x40020800
 80036f4:	40020c00 	.word	0x40020c00
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40021400 	.word	0x40021400
 8003700:	40021800 	.word	0x40021800
 8003704:	40013c00 	.word	0x40013c00

08003708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e001      	b.n	800372a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
 8003744:	4613      	mov	r3, r2
 8003746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003748:	787b      	ldrb	r3, [r7, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003754:	e003      	b.n	800375e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	041a      	lsls	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	619a      	str	r2, [r3, #24]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0cc      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003780:	4b68      	ldr	r3, [pc, #416]	@ (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d90c      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b65      	ldr	r3, [pc, #404]	@ (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b63      	ldr	r3, [pc, #396]	@ (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0b8      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d020      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c0:	4b59      	ldr	r3, [pc, #356]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4a58      	ldr	r2, [pc, #352]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d8:	4b53      	ldr	r3, [pc, #332]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a52      	ldr	r2, [pc, #328]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e4:	4b50      	ldr	r3, [pc, #320]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	494d      	ldr	r1, [pc, #308]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d044      	beq.n	800388c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	4b47      	ldr	r3, [pc, #284]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d119      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e07f      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d003      	beq.n	800382a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003826:	2b03      	cmp	r3, #3
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382a:	4b3f      	ldr	r3, [pc, #252]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e06f      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383a:	4b3b      	ldr	r3, [pc, #236]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e067      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384a:	4b37      	ldr	r3, [pc, #220]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f023 0203 	bic.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4934      	ldr	r1, [pc, #208]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	4313      	orrs	r3, r2
 800385a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800385c:	f7ff f89e 	bl	800299c <HAL_GetTick>
 8003860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	e00a      	b.n	800387a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003864:	f7ff f89a 	bl	800299c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e04f      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	4b2b      	ldr	r3, [pc, #172]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 020c 	and.w	r2, r3, #12
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	429a      	cmp	r2, r3
 800388a:	d1eb      	bne.n	8003864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800388c:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d20c      	bcs.n	80038b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b22      	ldr	r3, [pc, #136]	@ (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e032      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c0:	4b19      	ldr	r3, [pc, #100]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4916      	ldr	r1, [pc, #88]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038de:	4b12      	ldr	r3, [pc, #72]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	490e      	ldr	r1, [pc, #56]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038f2:	f000 f887 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	490a      	ldr	r1, [pc, #40]	@ (800392c <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	5ccb      	ldrb	r3, [r1, r3]
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	4a09      	ldr	r2, [pc, #36]	@ (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800390e:	4b09      	ldr	r3, [pc, #36]	@ (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fa32 	bl	8001d7c <HAL_InitTick>

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023c00 	.word	0x40023c00
 8003928:	40023800 	.word	0x40023800
 800392c:	0800ad78 	.word	0x0800ad78
 8003930:	20000030 	.word	0x20000030
 8003934:	20000034 	.word	0x20000034

08003938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <HAL_RCC_GetHCLKFreq+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000030 	.word	0x20000030

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003954:	f7ff fff0 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	0a9b      	lsrs	r3, r3, #10
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4903      	ldr	r1, [pc, #12]	@ (8003974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40023800 	.word	0x40023800
 8003974:	0800ad88 	.word	0x0800ad88

08003978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800397c:	f7ff ffdc 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0b5b      	lsrs	r3, r3, #13
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4903      	ldr	r1, [pc, #12]	@ (800399c <HAL_RCC_GetPCLK2Freq+0x24>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	0800ad88 	.word	0x0800ad88

080039a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	220f      	movs	r2, #15
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039b0:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0203 	and.w	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039bc:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039c8:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039d4:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	08db      	lsrs	r3, r3, #3
 80039da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039e2:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <HAL_RCC_GetClockConfig+0x60>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	601a      	str	r2, [r3, #0]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40023c00 	.word	0x40023c00

08003a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a08:	b0ae      	sub	sp, #184	@ 0xb8
 8003a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a2a:	4bcb      	ldr	r3, [pc, #812]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	f200 8206 	bhi.w	8003e44 <HAL_RCC_GetSysClockFreq+0x440>
 8003a38:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003e45 	.word	0x08003e45
 8003a48:	08003e45 	.word	0x08003e45
 8003a4c:	08003e45 	.word	0x08003e45
 8003a50:	08003a7d 	.word	0x08003a7d
 8003a54:	08003e45 	.word	0x08003e45
 8003a58:	08003e45 	.word	0x08003e45
 8003a5c:	08003e45 	.word	0x08003e45
 8003a60:	08003a85 	.word	0x08003a85
 8003a64:	08003e45 	.word	0x08003e45
 8003a68:	08003e45 	.word	0x08003e45
 8003a6c:	08003e45 	.word	0x08003e45
 8003a70:	08003c75 	.word	0x08003c75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4bb9      	ldr	r3, [pc, #740]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x358>)
 8003a76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a7a:	e1e7      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7c:	4bb8      	ldr	r3, [pc, #736]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a82:	e1e3      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a84:	4bb4      	ldr	r3, [pc, #720]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a90:	4bb1      	ldr	r3, [pc, #708]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d071      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9c:	4bae      	ldr	r3, [pc, #696]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003aa8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003abe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	462b      	mov	r3, r5
 8003ac6:	f04f 0000 	mov.w	r0, #0
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	0159      	lsls	r1, r3, #5
 8003ad0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad4:	0150      	lsls	r0, r2, #5
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4621      	mov	r1, r4
 8003adc:	1a51      	subs	r1, r2, r1
 8003ade:	6439      	str	r1, [r7, #64]	@ 0x40
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003af4:	4649      	mov	r1, r9
 8003af6:	018b      	lsls	r3, r1, #6
 8003af8:	4641      	mov	r1, r8
 8003afa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003afe:	4641      	mov	r1, r8
 8003b00:	018a      	lsls	r2, r1, #6
 8003b02:	4641      	mov	r1, r8
 8003b04:	1a51      	subs	r1, r2, r1
 8003b06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b08:	4649      	mov	r1, r9
 8003b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	00cb      	lsls	r3, r1, #3
 8003b20:	4641      	mov	r1, r8
 8003b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b26:	4641      	mov	r1, r8
 8003b28:	00ca      	lsls	r2, r1, #3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4622      	mov	r2, r4
 8003b32:	189b      	adds	r3, r3, r2
 8003b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b36:	462b      	mov	r3, r5
 8003b38:	460a      	mov	r2, r1
 8003b3a:	eb42 0303 	adc.w	r3, r2, r3
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	024b      	lsls	r3, r1, #9
 8003b50:	4621      	mov	r1, r4
 8003b52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b56:	4621      	mov	r1, r4
 8003b58:	024a      	lsls	r2, r1, #9
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b70:	f7fd f8aa 	bl	8000cc8 <__aeabi_uldivmod>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4613      	mov	r3, r2
 8003b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b7e:	e067      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b80:	4b75      	ldr	r3, [pc, #468]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b8c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	0159      	lsls	r1, r3, #5
 8003bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb4:	0150      	lsls	r0, r2, #5
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4621      	mov	r1, r4
 8003bbc:	1a51      	subs	r1, r2, r1
 8003bbe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	018b      	lsls	r3, r1, #6
 8003bd8:	4641      	mov	r1, r8
 8003bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bde:	4641      	mov	r1, r8
 8003be0:	018a      	lsls	r2, r1, #6
 8003be2:	4641      	mov	r1, r8
 8003be4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003be8:	4649      	mov	r1, r9
 8003bea:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c02:	4692      	mov	sl, r2
 8003c04:	469b      	mov	fp, r3
 8003c06:	4623      	mov	r3, r4
 8003c08:	eb1a 0303 	adds.w	r3, sl, r3
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	462b      	mov	r3, r5
 8003c10:	eb4b 0303 	adc.w	r3, fp, r3
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c22:	4629      	mov	r1, r5
 8003c24:	028b      	lsls	r3, r1, #10
 8003c26:	4621      	mov	r1, r4
 8003c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	028a      	lsls	r2, r1, #10
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c38:	2200      	movs	r2, #0
 8003c3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c3c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c42:	f7fd f841 	bl	8000cc8 <__aeabi_uldivmod>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c50:	4b41      	ldr	r3, [pc, #260]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003c62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c72:	e0eb      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c74:	4b38      	ldr	r3, [pc, #224]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c80:	4b35      	ldr	r3, [pc, #212]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d06b      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8c:	4b32      	ldr	r3, [pc, #200]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	2200      	movs	r2, #0
 8003c94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ca4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003ca8:	4622      	mov	r2, r4
 8003caa:	462b      	mov	r3, r5
 8003cac:	f04f 0000 	mov.w	r0, #0
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	0159      	lsls	r1, r3, #5
 8003cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cba:	0150      	lsls	r0, r2, #5
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	1a51      	subs	r1, r2, r1
 8003cc4:	61b9      	str	r1, [r7, #24]
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	eb63 0301 	sbc.w	r3, r3, r1
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003cda:	4659      	mov	r1, fp
 8003cdc:	018b      	lsls	r3, r1, #6
 8003cde:	4651      	mov	r1, sl
 8003ce0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	018a      	lsls	r2, r1, #6
 8003ce8:	4651      	mov	r1, sl
 8003cea:	ebb2 0801 	subs.w	r8, r2, r1
 8003cee:	4659      	mov	r1, fp
 8003cf0:	eb63 0901 	sbc.w	r9, r3, r1
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d08:	4690      	mov	r8, r2
 8003d0a:	4699      	mov	r9, r3
 8003d0c:	4623      	mov	r3, r4
 8003d0e:	eb18 0303 	adds.w	r3, r8, r3
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	462b      	mov	r3, r5
 8003d16:	eb49 0303 	adc.w	r3, r9, r3
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d28:	4629      	mov	r1, r5
 8003d2a:	024b      	lsls	r3, r1, #9
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d32:	4621      	mov	r1, r4
 8003d34:	024a      	lsls	r2, r1, #9
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d3e:	2200      	movs	r2, #0
 8003d40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d42:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d48:	f7fc ffbe 	bl	8000cc8 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4613      	mov	r3, r2
 8003d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d56:	e065      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x420>
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	00f42400 	.word	0x00f42400
 8003d60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d64:	4b3d      	ldr	r3, [pc, #244]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x458>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	099b      	lsrs	r3, r3, #6
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	4611      	mov	r1, r2
 8003d70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d74:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d76:	2300      	movs	r3, #0
 8003d78:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d7e:	4642      	mov	r2, r8
 8003d80:	464b      	mov	r3, r9
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	0159      	lsls	r1, r3, #5
 8003d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d90:	0150      	lsls	r0, r2, #5
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4641      	mov	r1, r8
 8003d98:	1a51      	subs	r1, r2, r1
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003db0:	4659      	mov	r1, fp
 8003db2:	018b      	lsls	r3, r1, #6
 8003db4:	4651      	mov	r1, sl
 8003db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dba:	4651      	mov	r1, sl
 8003dbc:	018a      	lsls	r2, r1, #6
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	1a54      	subs	r4, r2, r1
 8003dc2:	4659      	mov	r1, fp
 8003dc4:	eb63 0501 	sbc.w	r5, r3, r1
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	00eb      	lsls	r3, r5, #3
 8003dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dd6:	00e2      	lsls	r2, r4, #3
 8003dd8:	4614      	mov	r4, r2
 8003dda:	461d      	mov	r5, r3
 8003ddc:	4643      	mov	r3, r8
 8003dde:	18e3      	adds	r3, r4, r3
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	464b      	mov	r3, r9
 8003de4:	eb45 0303 	adc.w	r3, r5, r3
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003df6:	4629      	mov	r1, r5
 8003df8:	028b      	lsls	r3, r1, #10
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e00:	4621      	mov	r1, r4
 8003e02:	028a      	lsls	r2, r1, #10
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e10:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e16:	f7fc ff57 	bl	8000cc8 <__aeabi_uldivmod>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4613      	mov	r3, r2
 8003e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e24:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x458>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	0f1b      	lsrs	r3, r3, #28
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e42:	e003      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e44:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	37b8      	adds	r7, #184	@ 0xb8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	00f42400 	.word	0x00f42400

08003e64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e28d      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8083 	beq.w	8003f8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e84:	4b94      	ldr	r3, [pc, #592]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d019      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e90:	4b91      	ldr	r3, [pc, #580]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e9c:	4b8e      	ldr	r3, [pc, #568]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eaa:	4b8b      	ldr	r3, [pc, #556]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d112      	bne.n	8003edc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb6:	4b88      	ldr	r3, [pc, #544]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ec2:	d10b      	bne.n	8003edc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec4:	4b84      	ldr	r3, [pc, #528]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d05b      	beq.n	8003f88 <HAL_RCC_OscConfig+0x124>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d157      	bne.n	8003f88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e25a      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee4:	d106      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x90>
 8003ee6:	4b7c      	ldr	r3, [pc, #496]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7b      	ldr	r2, [pc, #492]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e01d      	b.n	8003f30 <HAL_RCC_OscConfig+0xcc>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0xb4>
 8003efe:	4b76      	ldr	r3, [pc, #472]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a75      	ldr	r2, [pc, #468]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b73      	ldr	r3, [pc, #460]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a72      	ldr	r2, [pc, #456]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0xcc>
 8003f18:	4b6f      	ldr	r3, [pc, #444]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	4b6c      	ldr	r3, [pc, #432]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6b      	ldr	r2, [pc, #428]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fe fd30 	bl	800299c <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fe fd2c 	bl	800299c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	@ 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e21f      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b61      	ldr	r3, [pc, #388]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0xdc>
 8003f5e:	e014      	b.n	8003f8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe fd1c 	bl	800299c <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f68:	f7fe fd18 	bl	800299c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	@ 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e20b      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7a:	4b57      	ldr	r3, [pc, #348]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x104>
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d06f      	beq.n	8004076 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f96:	4b50      	ldr	r3, [pc, #320]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d017      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fa2:	4b4d      	ldr	r3, [pc, #308]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
        || \
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d105      	bne.n	8003fba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fae:	4b4a      	ldr	r3, [pc, #296]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fba:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d11c      	bne.n	8004000 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc6:	4b44      	ldr	r3, [pc, #272]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d116      	bne.n	8004000 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd2:	4b41      	ldr	r3, [pc, #260]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_RCC_OscConfig+0x186>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d001      	beq.n	8003fea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e1d3      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fea:	4b3b      	ldr	r3, [pc, #236]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4937      	ldr	r1, [pc, #220]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffe:	e03a      	b.n	8004076 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004008:	4b34      	ldr	r3, [pc, #208]	@ (80040dc <HAL_RCC_OscConfig+0x278>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fe fcc5 	bl	800299c <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004016:	f7fe fcc1 	bl	800299c <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e1b4      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004028:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004034:	4b28      	ldr	r3, [pc, #160]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4925      	ldr	r1, [pc, #148]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]
 8004048:	e015      	b.n	8004076 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404a:	4b24      	ldr	r3, [pc, #144]	@ (80040dc <HAL_RCC_OscConfig+0x278>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe fca4 	bl	800299c <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004058:	f7fe fca0 	bl	800299c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e193      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406a:	4b1b      	ldr	r3, [pc, #108]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d036      	beq.n	80040f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408a:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <HAL_RCC_OscConfig+0x27c>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fe fc84 	bl	800299c <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004098:	f7fe fc80 	bl	800299c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e173      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040aa:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 80040ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x234>
 80040b6:	e01b      	b.n	80040f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCC_OscConfig+0x27c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fe fc6d 	bl	800299c <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	e00e      	b.n	80040e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fe fc69 	bl	800299c <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d907      	bls.n	80040e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e15c      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
 80040d8:	40023800 	.word	0x40023800
 80040dc:	42470000 	.word	0x42470000
 80040e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80040e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ea      	bne.n	80040c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8097 	beq.w	800422c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004102:	4b83      	ldr	r3, [pc, #524]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10f      	bne.n	800412e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	4b7f      	ldr	r3, [pc, #508]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	4a7e      	ldr	r2, [pc, #504]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800411c:	6413      	str	r3, [r2, #64]	@ 0x40
 800411e:	4b7c      	ldr	r3, [pc, #496]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004126:	60bb      	str	r3, [r7, #8]
 8004128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412e:	4b79      	ldr	r3, [pc, #484]	@ (8004314 <HAL_RCC_OscConfig+0x4b0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d118      	bne.n	800416c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413a:	4b76      	ldr	r3, [pc, #472]	@ (8004314 <HAL_RCC_OscConfig+0x4b0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a75      	ldr	r2, [pc, #468]	@ (8004314 <HAL_RCC_OscConfig+0x4b0>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004146:	f7fe fc29 	bl	800299c <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414e:	f7fe fc25 	bl	800299c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e118      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004160:	4b6c      	ldr	r3, [pc, #432]	@ (8004314 <HAL_RCC_OscConfig+0x4b0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d106      	bne.n	8004182 <HAL_RCC_OscConfig+0x31e>
 8004174:	4b66      	ldr	r3, [pc, #408]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004178:	4a65      	ldr	r2, [pc, #404]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004180:	e01c      	b.n	80041bc <HAL_RCC_OscConfig+0x358>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b05      	cmp	r3, #5
 8004188:	d10c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x340>
 800418a:	4b61      	ldr	r3, [pc, #388]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418e:	4a60      	ldr	r2, [pc, #384]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	6713      	str	r3, [r2, #112]	@ 0x70
 8004196:	4b5e      	ldr	r3, [pc, #376]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419a:	4a5d      	ldr	r2, [pc, #372]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a2:	e00b      	b.n	80041bc <HAL_RCC_OscConfig+0x358>
 80041a4:	4b5a      	ldr	r3, [pc, #360]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a8:	4a59      	ldr	r2, [pc, #356]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b0:	4b57      	ldr	r3, [pc, #348]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b4:	4a56      	ldr	r2, [pc, #344]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041b6:	f023 0304 	bic.w	r3, r3, #4
 80041ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d015      	beq.n	80041f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fe fbea 	bl	800299c <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041cc:	f7fe fbe6 	bl	800299c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e0d7      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0ee      	beq.n	80041cc <HAL_RCC_OscConfig+0x368>
 80041ee:	e014      	b.n	800421a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fe fbd4 	bl	800299c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f6:	e00a      	b.n	800420e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fe fbd0 	bl	800299c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e0c1      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420e:	4b40      	ldr	r3, [pc, #256]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ee      	bne.n	80041f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004220:	4b3b      	ldr	r3, [pc, #236]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	4a3a      	ldr	r2, [pc, #232]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800422a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80ad 	beq.w	8004390 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004236:	4b36      	ldr	r3, [pc, #216]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b08      	cmp	r3, #8
 8004240:	d060      	beq.n	8004304 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d145      	bne.n	80042d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424a:	4b33      	ldr	r3, [pc, #204]	@ (8004318 <HAL_RCC_OscConfig+0x4b4>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fe fba4 	bl	800299c <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fe fba0 	bl	800299c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e093      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	4b29      	ldr	r3, [pc, #164]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69da      	ldr	r2, [r3, #28]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	019b      	lsls	r3, r3, #6
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	3b01      	subs	r3, #1
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	061b      	lsls	r3, r3, #24
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a0:	071b      	lsls	r3, r3, #28
 80042a2:	491b      	ldr	r1, [pc, #108]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <HAL_RCC_OscConfig+0x4b4>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ae:	f7fe fb75 	bl	800299c <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fe fb71 	bl	800299c <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e064      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c8:	4b11      	ldr	r3, [pc, #68]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x452>
 80042d4:	e05c      	b.n	8004390 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d6:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <HAL_RCC_OscConfig+0x4b4>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe fb5e 	bl	800299c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fe fb5a 	bl	800299c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e04d      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f6:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x480>
 8004302:	e045      	b.n	8004390 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d107      	bne.n	800431c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e040      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
 8004310:	40023800 	.word	0x40023800
 8004314:	40007000 	.word	0x40007000
 8004318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800431c:	4b1f      	ldr	r3, [pc, #124]	@ (800439c <HAL_RCC_OscConfig+0x538>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d030      	beq.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d129      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d122      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004354:	4293      	cmp	r3, r2
 8004356:	d119      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	3b01      	subs	r3, #1
 8004366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d10f      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d107      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800

080043a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e041      	b.n	8004436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fe f8c2 	bl	8002550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 fcca 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e046      	b.n	80044e6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a23      	ldr	r2, [pc, #140]	@ (80044f4 <HAL_TIM_Base_Start+0xb4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004472:	d01d      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <HAL_TIM_Base_Start+0xb8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1e      	ldr	r2, [pc, #120]	@ (80044fc <HAL_TIM_Base_Start+0xbc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <HAL_TIM_Base_Start+0xc0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	@ (8004504 <HAL_TIM_Base_Start+0xc4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a19      	ldr	r2, [pc, #100]	@ (8004508 <HAL_TIM_Base_Start+0xc8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a18      	ldr	r2, [pc, #96]	@ (800450c <HAL_TIM_Base_Start+0xcc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d111      	bne.n	80044d4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b06      	cmp	r3, #6
 80044c0:	d010      	beq.n	80044e4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	e007      	b.n	80044e4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40000c00 	.word	0x40000c00
 8004504:	40010400 	.word	0x40010400
 8004508:	40014000 	.word	0x40014000
 800450c:	40001800 	.word	0x40001800

08004510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d001      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e04e      	b.n	80045c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a23      	ldr	r2, [pc, #140]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d022      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004552:	d01d      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1f      	ldr	r2, [pc, #124]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d018      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1e      	ldr	r2, [pc, #120]	@ (80045dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1c      	ldr	r2, [pc, #112]	@ (80045e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1b      	ldr	r2, [pc, #108]	@ (80045e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a19      	ldr	r2, [pc, #100]	@ (80045e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a18      	ldr	r2, [pc, #96]	@ (80045ec <HAL_TIM_Base_Start_IT+0xdc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d111      	bne.n	80045b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d010      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b2:	e007      	b.n	80045c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800
 80045e0:	40000c00 	.word	0x40000c00
 80045e4:	40010400 	.word	0x40010400
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40001800 	.word	0x40001800

080045f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e041      	b.n	8004686 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f839 	bl	800468e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f000 fba2 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <HAL_TIM_PWM_Start+0x24>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	e022      	b.n	800470e <HAL_TIM_PWM_Start+0x6a>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d109      	bne.n	80046e2 <HAL_TIM_PWM_Start+0x3e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	bf14      	ite	ne
 80046da:	2301      	movne	r3, #1
 80046dc:	2300      	moveq	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	e015      	b.n	800470e <HAL_TIM_PWM_Start+0x6a>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d109      	bne.n	80046fc <HAL_TIM_PWM_Start+0x58>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e008      	b.n	800470e <HAL_TIM_PWM_Start+0x6a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e07c      	b.n	8004810 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_TIM_PWM_Start+0x82>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004724:	e013      	b.n	800474e <HAL_TIM_PWM_Start+0xaa>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b04      	cmp	r3, #4
 800472a:	d104      	bne.n	8004736 <HAL_TIM_PWM_Start+0x92>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004734:	e00b      	b.n	800474e <HAL_TIM_PWM_Start+0xaa>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d104      	bne.n	8004746 <HAL_TIM_PWM_Start+0xa2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004744:	e003      	b.n	800474e <HAL_TIM_PWM_Start+0xaa>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2201      	movs	r2, #1
 8004754:	6839      	ldr	r1, [r7, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fdfe 	bl	8005358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2d      	ldr	r2, [pc, #180]	@ (8004818 <HAL_TIM_PWM_Start+0x174>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_TIM_PWM_Start+0xcc>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2c      	ldr	r2, [pc, #176]	@ (800481c <HAL_TIM_PWM_Start+0x178>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_TIM_PWM_Start+0xd0>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <HAL_TIM_PWM_Start+0xd2>
 8004774:	2300      	movs	r3, #0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004788:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a22      	ldr	r2, [pc, #136]	@ (8004818 <HAL_TIM_PWM_Start+0x174>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d022      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800479c:	d01d      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004820 <HAL_TIM_PWM_Start+0x17c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d018      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004824 <HAL_TIM_PWM_Start+0x180>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004828 <HAL_TIM_PWM_Start+0x184>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a16      	ldr	r2, [pc, #88]	@ (800481c <HAL_TIM_PWM_Start+0x178>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a18      	ldr	r2, [pc, #96]	@ (800482c <HAL_TIM_PWM_Start+0x188>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	@ (8004830 <HAL_TIM_PWM_Start+0x18c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d111      	bne.n	80047fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d010      	beq.n	800480e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fc:	e007      	b.n	800480e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40010000 	.word	0x40010000
 800481c:	40010400 	.word	0x40010400
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40000c00 	.word	0x40000c00
 800482c:	40014000 	.word	0x40014000
 8004830:	40001800 	.word	0x40001800

08004834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d020      	beq.n	8004898 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01b      	beq.n	8004898 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0202 	mvn.w	r2, #2
 8004868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa5b 	bl	8004d3a <HAL_TIM_IC_CaptureCallback>
 8004884:	e005      	b.n	8004892 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fa4d 	bl	8004d26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fa5e 	bl	8004d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d020      	beq.n	80048e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01b      	beq.n	80048e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0204 	mvn.w	r2, #4
 80048b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa35 	bl	8004d3a <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa27 	bl	8004d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fa38 	bl	8004d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d020      	beq.n	8004930 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01b      	beq.n	8004930 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0208 	mvn.w	r2, #8
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2204      	movs	r2, #4
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa0f 	bl	8004d3a <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa01 	bl	8004d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fa12 	bl	8004d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b00      	cmp	r3, #0
 8004938:	d020      	beq.n	800497c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01b      	beq.n	800497c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0210 	mvn.w	r2, #16
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2208      	movs	r2, #8
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f9e9 	bl	8004d3a <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f9db 	bl	8004d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f9ec 	bl	8004d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00c      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0201 	mvn.w	r2, #1
 8004998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fd f93a 	bl	8001c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00c      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fdc8 	bl	8005554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00c      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f9bd 	bl	8004d62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00c      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0220 	mvn.w	r2, #32
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fd9a 	bl	8005540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e0ae      	b.n	8004b90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b0c      	cmp	r3, #12
 8004a3e:	f200 809f 	bhi.w	8004b80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a42:	a201      	add	r2, pc, #4	@ (adr r2, 8004a48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a7d 	.word	0x08004a7d
 8004a4c:	08004b81 	.word	0x08004b81
 8004a50:	08004b81 	.word	0x08004b81
 8004a54:	08004b81 	.word	0x08004b81
 8004a58:	08004abd 	.word	0x08004abd
 8004a5c:	08004b81 	.word	0x08004b81
 8004a60:	08004b81 	.word	0x08004b81
 8004a64:	08004b81 	.word	0x08004b81
 8004a68:	08004aff 	.word	0x08004aff
 8004a6c:	08004b81 	.word	0x08004b81
 8004a70:	08004b81 	.word	0x08004b81
 8004a74:	08004b81 	.word	0x08004b81
 8004a78:	08004b3f 	.word	0x08004b3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fa1e 	bl	8004ec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0208 	orr.w	r2, r2, #8
 8004a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0204 	bic.w	r2, r2, #4
 8004aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6999      	ldr	r1, [r3, #24]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	619a      	str	r2, [r3, #24]
      break;
 8004aba:	e064      	b.n	8004b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fa6e 	bl	8004fa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6999      	ldr	r1, [r3, #24]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	619a      	str	r2, [r3, #24]
      break;
 8004afc:	e043      	b.n	8004b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fac3 	bl	8005090 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0208 	orr.w	r2, r2, #8
 8004b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0204 	bic.w	r2, r2, #4
 8004b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69d9      	ldr	r1, [r3, #28]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	61da      	str	r2, [r3, #28]
      break;
 8004b3c:	e023      	b.n	8004b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fb17 	bl	8005178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69d9      	ldr	r1, [r3, #28]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	021a      	lsls	r2, r3, #8
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	61da      	str	r2, [r3, #28]
      break;
 8004b7e:	e002      	b.n	8004b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	75fb      	strb	r3, [r7, #23]
      break;
 8004b84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e0b4      	b.n	8004d1e <HAL_TIM_ConfigClockSource+0x186>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bec:	d03e      	beq.n	8004c6c <HAL_TIM_ConfigClockSource+0xd4>
 8004bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf2:	f200 8087 	bhi.w	8004d04 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bfa:	f000 8086 	beq.w	8004d0a <HAL_TIM_ConfigClockSource+0x172>
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c02:	d87f      	bhi.n	8004d04 <HAL_TIM_ConfigClockSource+0x16c>
 8004c04:	2b70      	cmp	r3, #112	@ 0x70
 8004c06:	d01a      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0xa6>
 8004c08:	2b70      	cmp	r3, #112	@ 0x70
 8004c0a:	d87b      	bhi.n	8004d04 <HAL_TIM_ConfigClockSource+0x16c>
 8004c0c:	2b60      	cmp	r3, #96	@ 0x60
 8004c0e:	d050      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x11a>
 8004c10:	2b60      	cmp	r3, #96	@ 0x60
 8004c12:	d877      	bhi.n	8004d04 <HAL_TIM_ConfigClockSource+0x16c>
 8004c14:	2b50      	cmp	r3, #80	@ 0x50
 8004c16:	d03c      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0xfa>
 8004c18:	2b50      	cmp	r3, #80	@ 0x50
 8004c1a:	d873      	bhi.n	8004d04 <HAL_TIM_ConfigClockSource+0x16c>
 8004c1c:	2b40      	cmp	r3, #64	@ 0x40
 8004c1e:	d058      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x13a>
 8004c20:	2b40      	cmp	r3, #64	@ 0x40
 8004c22:	d86f      	bhi.n	8004d04 <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b30      	cmp	r3, #48	@ 0x30
 8004c26:	d064      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c28:	2b30      	cmp	r3, #48	@ 0x30
 8004c2a:	d86b      	bhi.n	8004d04 <HAL_TIM_ConfigClockSource+0x16c>
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d060      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d867      	bhi.n	8004d04 <HAL_TIM_ConfigClockSource+0x16c>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d05c      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d05a      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c3c:	e062      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c4e:	f000 fb63 	bl	8005318 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	609a      	str	r2, [r3, #8]
      break;
 8004c6a:	e04f      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c7c:	f000 fb4c 	bl	8005318 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c8e:	609a      	str	r2, [r3, #8]
      break;
 8004c90:	e03c      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f000 fac0 	bl	8005224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2150      	movs	r1, #80	@ 0x50
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fb19 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 8004cb0:	e02c      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f000 fadf 	bl	8005282 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2160      	movs	r1, #96	@ 0x60
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fb09 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 8004cd0:	e01c      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f000 faa0 	bl	8005224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2140      	movs	r1, #64	@ 0x40
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 faf9 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 8004cf0:	e00c      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	f000 faf0 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 8004d02:	e003      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
      break;
 8004d08:	e000      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a43      	ldr	r2, [pc, #268]	@ (8004e98 <TIM_Base_SetConfig+0x120>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d96:	d00f      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a40      	ldr	r2, [pc, #256]	@ (8004e9c <TIM_Base_SetConfig+0x124>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00b      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ea0 <TIM_Base_SetConfig+0x128>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d007      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a3e      	ldr	r2, [pc, #248]	@ (8004ea4 <TIM_Base_SetConfig+0x12c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ea8 <TIM_Base_SetConfig+0x130>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d108      	bne.n	8004dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a32      	ldr	r2, [pc, #200]	@ (8004e98 <TIM_Base_SetConfig+0x120>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d02b      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd8:	d027      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8004e9c <TIM_Base_SetConfig+0x124>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d023      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ea0 <TIM_Base_SetConfig+0x128>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01f      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea4 <TIM_Base_SetConfig+0x12c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01b      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea8 <TIM_Base_SetConfig+0x130>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d017      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8004eac <TIM_Base_SetConfig+0x134>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb0 <TIM_Base_SetConfig+0x138>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00f      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a29      	ldr	r2, [pc, #164]	@ (8004eb4 <TIM_Base_SetConfig+0x13c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a28      	ldr	r2, [pc, #160]	@ (8004eb8 <TIM_Base_SetConfig+0x140>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a27      	ldr	r2, [pc, #156]	@ (8004ebc <TIM_Base_SetConfig+0x144>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a26      	ldr	r2, [pc, #152]	@ (8004ec0 <TIM_Base_SetConfig+0x148>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d108      	bne.n	8004e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8004e98 <TIM_Base_SetConfig+0x120>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_Base_SetConfig+0xf2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a10      	ldr	r2, [pc, #64]	@ (8004ea8 <TIM_Base_SetConfig+0x130>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d103      	bne.n	8004e72 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f043 0204 	orr.w	r2, r3, #4
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800
 8004ea4:	40000c00 	.word	0x40000c00
 8004ea8:	40010400 	.word	0x40010400
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40014400 	.word	0x40014400
 8004eb4:	40014800 	.word	0x40014800
 8004eb8:	40001800 	.word	0x40001800
 8004ebc:	40001c00 	.word	0x40001c00
 8004ec0:	40002000 	.word	0x40002000

08004ec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f023 0201 	bic.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0303 	bic.w	r3, r3, #3
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 0302 	bic.w	r3, r3, #2
 8004f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a20      	ldr	r2, [pc, #128]	@ (8004f9c <TIM_OC1_SetConfig+0xd8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_OC1_SetConfig+0x64>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a1f      	ldr	r2, [pc, #124]	@ (8004fa0 <TIM_OC1_SetConfig+0xdc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d10c      	bne.n	8004f42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f023 0308 	bic.w	r3, r3, #8
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f023 0304 	bic.w	r3, r3, #4
 8004f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a15      	ldr	r2, [pc, #84]	@ (8004f9c <TIM_OC1_SetConfig+0xd8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_OC1_SetConfig+0x8e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a14      	ldr	r2, [pc, #80]	@ (8004fa0 <TIM_OC1_SetConfig+0xdc>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d111      	bne.n	8004f76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	621a      	str	r2, [r3, #32]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40010000 	.word	0x40010000
 8004fa0:	40010400 	.word	0x40010400

08004fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	f023 0210 	bic.w	r2, r3, #16
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0320 	bic.w	r3, r3, #32
 8004fee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a22      	ldr	r2, [pc, #136]	@ (8005088 <TIM_OC2_SetConfig+0xe4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_OC2_SetConfig+0x68>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a21      	ldr	r2, [pc, #132]	@ (800508c <TIM_OC2_SetConfig+0xe8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d10d      	bne.n	8005028 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005026:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a17      	ldr	r2, [pc, #92]	@ (8005088 <TIM_OC2_SetConfig+0xe4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d003      	beq.n	8005038 <TIM_OC2_SetConfig+0x94>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a16      	ldr	r2, [pc, #88]	@ (800508c <TIM_OC2_SetConfig+0xe8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d113      	bne.n	8005060 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800503e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005046:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40010000 	.word	0x40010000
 800508c:	40010400 	.word	0x40010400

08005090 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0303 	bic.w	r3, r3, #3
 80050c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a21      	ldr	r2, [pc, #132]	@ (8005170 <TIM_OC3_SetConfig+0xe0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_OC3_SetConfig+0x66>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a20      	ldr	r2, [pc, #128]	@ (8005174 <TIM_OC3_SetConfig+0xe4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10d      	bne.n	8005112 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a16      	ldr	r2, [pc, #88]	@ (8005170 <TIM_OC3_SetConfig+0xe0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d003      	beq.n	8005122 <TIM_OC3_SetConfig+0x92>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a15      	ldr	r2, [pc, #84]	@ (8005174 <TIM_OC3_SetConfig+0xe4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d113      	bne.n	800514a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	621a      	str	r2, [r3, #32]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40010000 	.word	0x40010000
 8005174:	40010400 	.word	0x40010400

08005178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a12      	ldr	r2, [pc, #72]	@ (800521c <TIM_OC4_SetConfig+0xa4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_OC4_SetConfig+0x68>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a11      	ldr	r2, [pc, #68]	@ (8005220 <TIM_OC4_SetConfig+0xa8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d109      	bne.n	80051f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	019b      	lsls	r3, r3, #6
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40010400 	.word	0x40010400

08005224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f023 0201 	bic.w	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800524e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 030a 	bic.w	r3, r3, #10
 8005260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005282:	b480      	push	{r7}
 8005284:	b087      	sub	sp, #28
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f023 0210 	bic.w	r2, r3, #16
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	031b      	lsls	r3, r3, #12
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	f043 0307 	orr.w	r3, r3, #7
 8005304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	609a      	str	r2, [r3, #8]
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	021a      	lsls	r2, r3, #8
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	431a      	orrs	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4313      	orrs	r3, r2
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	609a      	str	r2, [r3, #8]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	2201      	movs	r2, #1
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1a      	ldr	r2, [r3, #32]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	43db      	mvns	r3, r3
 800537a:	401a      	ands	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1a      	ldr	r2, [r3, #32]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	fa01 f303 	lsl.w	r3, r1, r3
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
	...

080053a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e05a      	b.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a21      	ldr	r2, [pc, #132]	@ (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d022      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005408:	d01d      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1d      	ldr	r2, [pc, #116]	@ (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d018      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1b      	ldr	r2, [pc, #108]	@ (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1a      	ldr	r2, [pc, #104]	@ (800548c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00e      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a18      	ldr	r2, [pc, #96]	@ (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a17      	ldr	r2, [pc, #92]	@ (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a15      	ldr	r2, [pc, #84]	@ (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d10c      	bne.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800544c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	4313      	orrs	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40010400 	.word	0x40010400
 8005494:	40014000 	.word	0x40014000
 8005498:	40001800 	.word	0x40001800

0800549c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e03d      	b.n	8005534 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e042      	b.n	8005600 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fd f928 	bl	80027e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2224      	movs	r2, #36	@ 0x24
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f973 	bl	8005898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	695a      	ldr	r2, [r3, #20]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	@ 0x28
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	4613      	mov	r3, r2
 8005616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b20      	cmp	r3, #32
 8005626:	d175      	bne.n	8005714 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_UART_Transmit+0x2c>
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e06e      	b.n	8005716 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2221      	movs	r2, #33	@ 0x21
 8005642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005646:	f7fd f9a9 	bl	800299c <HAL_GetTick>
 800564a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	88fa      	ldrh	r2, [r7, #6]
 8005656:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005660:	d108      	bne.n	8005674 <HAL_UART_Transmit+0x6c>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d104      	bne.n	8005674 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	e003      	b.n	800567c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005678:	2300      	movs	r3, #0
 800567a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800567c:	e02e      	b.n	80056dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	2180      	movs	r1, #128	@ 0x80
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f848 	bl	800571e <UART_WaitOnFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e03a      	b.n	8005716 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	3302      	adds	r3, #2
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	e007      	b.n	80056ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	781a      	ldrb	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	3301      	adds	r3, #1
 80056cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1cb      	bne.n	800567e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2140      	movs	r1, #64	@ 0x40
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f814 	bl	800571e <UART_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e006      	b.n	8005716 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	603b      	str	r3, [r7, #0]
 800572a:	4613      	mov	r3, r2
 800572c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572e:	e03b      	b.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d037      	beq.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005738:	f7fd f930 	bl	800299c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	6a3a      	ldr	r2, [r7, #32]
 8005744:	429a      	cmp	r2, r3
 8005746:	d302      	bcc.n	800574e <UART_WaitOnFlagUntilTimeout+0x30>
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e03a      	b.n	80057c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d023      	beq.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b80      	cmp	r3, #128	@ 0x80
 8005764:	d020      	beq.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b40      	cmp	r3, #64	@ 0x40
 800576a:	d01d      	beq.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	2b08      	cmp	r3, #8
 8005778:	d116      	bne.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f81d 	bl	80057d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2208      	movs	r2, #8
 800579a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e00f      	b.n	80057c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	4013      	ands	r3, r2
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	bf0c      	ite	eq
 80057b8:	2301      	moveq	r3, #1
 80057ba:	2300      	movne	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d0b4      	beq.n	8005730 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b095      	sub	sp, #84	@ 0x54
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	330c      	adds	r3, #12
 80057de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e5      	bne.n	80057d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3314      	adds	r3, #20
 8005812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	61fb      	str	r3, [r7, #28]
   return(result);
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f023 0301 	bic.w	r3, r3, #1
 8005822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3314      	adds	r3, #20
 800582a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800582c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800582e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e5      	bne.n	800580c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005844:	2b01      	cmp	r3, #1
 8005846:	d119      	bne.n	800587c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	60bb      	str	r3, [r7, #8]
   return(result);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f023 0310 	bic.w	r3, r3, #16
 800585e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005868:	61ba      	str	r2, [r7, #24]
 800586a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6979      	ldr	r1, [r7, #20]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	613b      	str	r3, [r7, #16]
   return(result);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e5      	bne.n	8005848 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800588a:	bf00      	nop
 800588c:	3754      	adds	r7, #84	@ 0x54
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800589c:	b0c0      	sub	sp, #256	@ 0x100
 800589e:	af00      	add	r7, sp, #0
 80058a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	68d9      	ldr	r1, [r3, #12]
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	ea40 0301 	orr.w	r3, r0, r1
 80058c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058f0:	f021 010c 	bic.w	r1, r1, #12
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058fe:	430b      	orrs	r3, r1
 8005900:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005912:	6999      	ldr	r1, [r3, #24]
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	ea40 0301 	orr.w	r3, r0, r1
 800591e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b8f      	ldr	r3, [pc, #572]	@ (8005b64 <UART_SetConfig+0x2cc>)
 8005928:	429a      	cmp	r2, r3
 800592a:	d005      	beq.n	8005938 <UART_SetConfig+0xa0>
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b8d      	ldr	r3, [pc, #564]	@ (8005b68 <UART_SetConfig+0x2d0>)
 8005934:	429a      	cmp	r2, r3
 8005936:	d104      	bne.n	8005942 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005938:	f7fe f81e 	bl	8003978 <HAL_RCC_GetPCLK2Freq>
 800593c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005940:	e003      	b.n	800594a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005942:	f7fe f805 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8005946:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800594a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005954:	f040 810c 	bne.w	8005b70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800595c:	2200      	movs	r2, #0
 800595e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005962:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005966:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800596a:	4622      	mov	r2, r4
 800596c:	462b      	mov	r3, r5
 800596e:	1891      	adds	r1, r2, r2
 8005970:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005972:	415b      	adcs	r3, r3
 8005974:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005976:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800597a:	4621      	mov	r1, r4
 800597c:	eb12 0801 	adds.w	r8, r2, r1
 8005980:	4629      	mov	r1, r5
 8005982:	eb43 0901 	adc.w	r9, r3, r1
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800599a:	4690      	mov	r8, r2
 800599c:	4699      	mov	r9, r3
 800599e:	4623      	mov	r3, r4
 80059a0:	eb18 0303 	adds.w	r3, r8, r3
 80059a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059a8:	462b      	mov	r3, r5
 80059aa:	eb49 0303 	adc.w	r3, r9, r3
 80059ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059c6:	460b      	mov	r3, r1
 80059c8:	18db      	adds	r3, r3, r3
 80059ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80059cc:	4613      	mov	r3, r2
 80059ce:	eb42 0303 	adc.w	r3, r2, r3
 80059d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80059d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059dc:	f7fb f974 	bl	8000cc8 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4b61      	ldr	r3, [pc, #388]	@ (8005b6c <UART_SetConfig+0x2d4>)
 80059e6:	fba3 2302 	umull	r2, r3, r3, r2
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	011c      	lsls	r4, r3, #4
 80059ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	1891      	adds	r1, r2, r2
 8005a06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a08:	415b      	adcs	r3, r3
 8005a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a10:	4641      	mov	r1, r8
 8005a12:	eb12 0a01 	adds.w	sl, r2, r1
 8005a16:	4649      	mov	r1, r9
 8005a18:	eb43 0b01 	adc.w	fp, r3, r1
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a30:	4692      	mov	sl, r2
 8005a32:	469b      	mov	fp, r3
 8005a34:	4643      	mov	r3, r8
 8005a36:	eb1a 0303 	adds.w	r3, sl, r3
 8005a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a3e:	464b      	mov	r3, r9
 8005a40:	eb4b 0303 	adc.w	r3, fp, r3
 8005a44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	18db      	adds	r3, r3, r3
 8005a60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a62:	4613      	mov	r3, r2
 8005a64:	eb42 0303 	adc.w	r3, r2, r3
 8005a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a72:	f7fb f929 	bl	8000cc8 <__aeabi_uldivmod>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b6c <UART_SetConfig+0x2d4>)
 8005a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	2264      	movs	r2, #100	@ 0x64
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	1acb      	subs	r3, r1, r3
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a92:	4b36      	ldr	r3, [pc, #216]	@ (8005b6c <UART_SetConfig+0x2d4>)
 8005a94:	fba3 2302 	umull	r2, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005aa0:	441c      	add	r4, r3
 8005aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005aac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ab0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	1891      	adds	r1, r2, r2
 8005aba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005abc:	415b      	adcs	r3, r3
 8005abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ac0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ac4:	4641      	mov	r1, r8
 8005ac6:	1851      	adds	r1, r2, r1
 8005ac8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005aca:	4649      	mov	r1, r9
 8005acc:	414b      	adcs	r3, r1
 8005ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005adc:	4659      	mov	r1, fp
 8005ade:	00cb      	lsls	r3, r1, #3
 8005ae0:	4651      	mov	r1, sl
 8005ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ae6:	4651      	mov	r1, sl
 8005ae8:	00ca      	lsls	r2, r1, #3
 8005aea:	4610      	mov	r0, r2
 8005aec:	4619      	mov	r1, r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	4642      	mov	r2, r8
 8005af2:	189b      	adds	r3, r3, r2
 8005af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005af8:	464b      	mov	r3, r9
 8005afa:	460a      	mov	r2, r1
 8005afc:	eb42 0303 	adc.w	r3, r2, r3
 8005b00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b18:	460b      	mov	r3, r1
 8005b1a:	18db      	adds	r3, r3, r3
 8005b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b1e:	4613      	mov	r3, r2
 8005b20:	eb42 0303 	adc.w	r3, r2, r3
 8005b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b2e:	f7fb f8cb 	bl	8000cc8 <__aeabi_uldivmod>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4b0d      	ldr	r3, [pc, #52]	@ (8005b6c <UART_SetConfig+0x2d4>)
 8005b38:	fba3 1302 	umull	r1, r3, r3, r2
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	2164      	movs	r1, #100	@ 0x64
 8005b40:	fb01 f303 	mul.w	r3, r1, r3
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	3332      	adds	r3, #50	@ 0x32
 8005b4a:	4a08      	ldr	r2, [pc, #32]	@ (8005b6c <UART_SetConfig+0x2d4>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	095b      	lsrs	r3, r3, #5
 8005b52:	f003 0207 	and.w	r2, r3, #7
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4422      	add	r2, r4
 8005b5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b60:	e106      	b.n	8005d70 <UART_SetConfig+0x4d8>
 8005b62:	bf00      	nop
 8005b64:	40011000 	.word	0x40011000
 8005b68:	40011400 	.word	0x40011400
 8005b6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b82:	4642      	mov	r2, r8
 8005b84:	464b      	mov	r3, r9
 8005b86:	1891      	adds	r1, r2, r2
 8005b88:	6239      	str	r1, [r7, #32]
 8005b8a:	415b      	adcs	r3, r3
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b92:	4641      	mov	r1, r8
 8005b94:	1854      	adds	r4, r2, r1
 8005b96:	4649      	mov	r1, r9
 8005b98:	eb43 0501 	adc.w	r5, r3, r1
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	00eb      	lsls	r3, r5, #3
 8005ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005baa:	00e2      	lsls	r2, r4, #3
 8005bac:	4614      	mov	r4, r2
 8005bae:	461d      	mov	r5, r3
 8005bb0:	4643      	mov	r3, r8
 8005bb2:	18e3      	adds	r3, r4, r3
 8005bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bb8:	464b      	mov	r3, r9
 8005bba:	eb45 0303 	adc.w	r3, r5, r3
 8005bbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bde:	4629      	mov	r1, r5
 8005be0:	008b      	lsls	r3, r1, #2
 8005be2:	4621      	mov	r1, r4
 8005be4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005be8:	4621      	mov	r1, r4
 8005bea:	008a      	lsls	r2, r1, #2
 8005bec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bf0:	f7fb f86a 	bl	8000cc8 <__aeabi_uldivmod>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4b60      	ldr	r3, [pc, #384]	@ (8005d7c <UART_SetConfig+0x4e4>)
 8005bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	011c      	lsls	r4, r3, #4
 8005c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c14:	4642      	mov	r2, r8
 8005c16:	464b      	mov	r3, r9
 8005c18:	1891      	adds	r1, r2, r2
 8005c1a:	61b9      	str	r1, [r7, #24]
 8005c1c:	415b      	adcs	r3, r3
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c24:	4641      	mov	r1, r8
 8005c26:	1851      	adds	r1, r2, r1
 8005c28:	6139      	str	r1, [r7, #16]
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	414b      	adcs	r3, r1
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c3c:	4659      	mov	r1, fp
 8005c3e:	00cb      	lsls	r3, r1, #3
 8005c40:	4651      	mov	r1, sl
 8005c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c46:	4651      	mov	r1, sl
 8005c48:	00ca      	lsls	r2, r1, #3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4642      	mov	r2, r8
 8005c52:	189b      	adds	r3, r3, r2
 8005c54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c58:	464b      	mov	r3, r9
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	eb42 0303 	adc.w	r3, r2, r3
 8005c60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	008b      	lsls	r3, r1, #2
 8005c80:	4641      	mov	r1, r8
 8005c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c86:	4641      	mov	r1, r8
 8005c88:	008a      	lsls	r2, r1, #2
 8005c8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c8e:	f7fb f81b 	bl	8000cc8 <__aeabi_uldivmod>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4611      	mov	r1, r2
 8005c98:	4b38      	ldr	r3, [pc, #224]	@ (8005d7c <UART_SetConfig+0x4e4>)
 8005c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	2264      	movs	r2, #100	@ 0x64
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	1acb      	subs	r3, r1, r3
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	3332      	adds	r3, #50	@ 0x32
 8005cac:	4a33      	ldr	r2, [pc, #204]	@ (8005d7c <UART_SetConfig+0x4e4>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cb8:	441c      	add	r4, r3
 8005cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cc8:	4642      	mov	r2, r8
 8005cca:	464b      	mov	r3, r9
 8005ccc:	1891      	adds	r1, r2, r2
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	415b      	adcs	r3, r3
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cd8:	4641      	mov	r1, r8
 8005cda:	1851      	adds	r1, r2, r1
 8005cdc:	6039      	str	r1, [r7, #0]
 8005cde:	4649      	mov	r1, r9
 8005ce0:	414b      	adcs	r3, r1
 8005ce2:	607b      	str	r3, [r7, #4]
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cf0:	4659      	mov	r1, fp
 8005cf2:	00cb      	lsls	r3, r1, #3
 8005cf4:	4651      	mov	r1, sl
 8005cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cfa:	4651      	mov	r1, sl
 8005cfc:	00ca      	lsls	r2, r1, #3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	4619      	mov	r1, r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	4642      	mov	r2, r8
 8005d06:	189b      	adds	r3, r3, r2
 8005d08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	460a      	mov	r2, r1
 8005d0e:	eb42 0303 	adc.w	r3, r2, r3
 8005d12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	008b      	lsls	r3, r1, #2
 8005d30:	4641      	mov	r1, r8
 8005d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d36:	4641      	mov	r1, r8
 8005d38:	008a      	lsls	r2, r1, #2
 8005d3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d3e:	f7fa ffc3 	bl	8000cc8 <__aeabi_uldivmod>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4b0d      	ldr	r3, [pc, #52]	@ (8005d7c <UART_SetConfig+0x4e4>)
 8005d48:	fba3 1302 	umull	r1, r3, r3, r2
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	2164      	movs	r1, #100	@ 0x64
 8005d50:	fb01 f303 	mul.w	r3, r1, r3
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	3332      	adds	r3, #50	@ 0x32
 8005d5a:	4a08      	ldr	r2, [pc, #32]	@ (8005d7c <UART_SetConfig+0x4e4>)
 8005d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	f003 020f 	and.w	r2, r3, #15
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4422      	add	r2, r4
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d76:	46bd      	mov	sp, r7
 8005d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d7c:	51eb851f 	.word	0x51eb851f

08005d80 <powf>:
 8005d80:	b508      	push	{r3, lr}
 8005d82:	ed2d 8b04 	vpush	{d8-d9}
 8005d86:	eeb0 8a60 	vmov.f32	s16, s1
 8005d8a:	eeb0 9a40 	vmov.f32	s18, s0
 8005d8e:	f000 f859 	bl	8005e44 <__ieee754_powf>
 8005d92:	eeb4 8a48 	vcmp.f32	s16, s16
 8005d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d9a:	eef0 8a40 	vmov.f32	s17, s0
 8005d9e:	d63e      	bvs.n	8005e1e <powf+0x9e>
 8005da0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da8:	d112      	bne.n	8005dd0 <powf+0x50>
 8005daa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db2:	d039      	beq.n	8005e28 <powf+0xa8>
 8005db4:	eeb0 0a48 	vmov.f32	s0, s16
 8005db8:	f000 f839 	bl	8005e2e <finitef>
 8005dbc:	b378      	cbz	r0, 8005e1e <powf+0x9e>
 8005dbe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc6:	d52a      	bpl.n	8005e1e <powf+0x9e>
 8005dc8:	f001 fd00 	bl	80077cc <__errno>
 8005dcc:	2322      	movs	r3, #34	@ 0x22
 8005dce:	e014      	b.n	8005dfa <powf+0x7a>
 8005dd0:	f000 f82d 	bl	8005e2e <finitef>
 8005dd4:	b998      	cbnz	r0, 8005dfe <powf+0x7e>
 8005dd6:	eeb0 0a49 	vmov.f32	s0, s18
 8005dda:	f000 f828 	bl	8005e2e <finitef>
 8005dde:	b170      	cbz	r0, 8005dfe <powf+0x7e>
 8005de0:	eeb0 0a48 	vmov.f32	s0, s16
 8005de4:	f000 f823 	bl	8005e2e <finitef>
 8005de8:	b148      	cbz	r0, 8005dfe <powf+0x7e>
 8005dea:	eef4 8a68 	vcmp.f32	s17, s17
 8005dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df2:	d7e9      	bvc.n	8005dc8 <powf+0x48>
 8005df4:	f001 fcea 	bl	80077cc <__errno>
 8005df8:	2321      	movs	r3, #33	@ 0x21
 8005dfa:	6003      	str	r3, [r0, #0]
 8005dfc:	e00f      	b.n	8005e1e <powf+0x9e>
 8005dfe:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e06:	d10a      	bne.n	8005e1e <powf+0x9e>
 8005e08:	eeb0 0a49 	vmov.f32	s0, s18
 8005e0c:	f000 f80f 	bl	8005e2e <finitef>
 8005e10:	b128      	cbz	r0, 8005e1e <powf+0x9e>
 8005e12:	eeb0 0a48 	vmov.f32	s0, s16
 8005e16:	f000 f80a 	bl	8005e2e <finitef>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d1d4      	bne.n	8005dc8 <powf+0x48>
 8005e1e:	eeb0 0a68 	vmov.f32	s0, s17
 8005e22:	ecbd 8b04 	vpop	{d8-d9}
 8005e26:	bd08      	pop	{r3, pc}
 8005e28:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8005e2c:	e7f7      	b.n	8005e1e <powf+0x9e>

08005e2e <finitef>:
 8005e2e:	ee10 3a10 	vmov	r3, s0
 8005e32:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8005e36:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8005e3a:	bfac      	ite	ge
 8005e3c:	2000      	movge	r0, #0
 8005e3e:	2001      	movlt	r0, #1
 8005e40:	4770      	bx	lr
	...

08005e44 <__ieee754_powf>:
 8005e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e48:	ee10 4a90 	vmov	r4, s1
 8005e4c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8005e50:	ed2d 8b02 	vpush	{d8}
 8005e54:	ee10 6a10 	vmov	r6, s0
 8005e58:	eeb0 8a40 	vmov.f32	s16, s0
 8005e5c:	eef0 8a60 	vmov.f32	s17, s1
 8005e60:	d10c      	bne.n	8005e7c <__ieee754_powf+0x38>
 8005e62:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8005e66:	0076      	lsls	r6, r6, #1
 8005e68:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8005e6c:	f240 8274 	bls.w	8006358 <__ieee754_powf+0x514>
 8005e70:	ee38 0a28 	vadd.f32	s0, s16, s17
 8005e74:	ecbd 8b02 	vpop	{d8}
 8005e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8005e80:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8005e84:	d802      	bhi.n	8005e8c <__ieee754_powf+0x48>
 8005e86:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005e8a:	d908      	bls.n	8005e9e <__ieee754_powf+0x5a>
 8005e8c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8005e90:	d1ee      	bne.n	8005e70 <__ieee754_powf+0x2c>
 8005e92:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8005e96:	0064      	lsls	r4, r4, #1
 8005e98:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8005e9c:	e7e6      	b.n	8005e6c <__ieee754_powf+0x28>
 8005e9e:	2e00      	cmp	r6, #0
 8005ea0:	da1f      	bge.n	8005ee2 <__ieee754_powf+0x9e>
 8005ea2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8005ea6:	f080 8260 	bcs.w	800636a <__ieee754_powf+0x526>
 8005eaa:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005eae:	d32f      	bcc.n	8005f10 <__ieee754_powf+0xcc>
 8005eb0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8005eb4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8005eb8:	fa49 f503 	asr.w	r5, r9, r3
 8005ebc:	fa05 f303 	lsl.w	r3, r5, r3
 8005ec0:	454b      	cmp	r3, r9
 8005ec2:	d123      	bne.n	8005f0c <__ieee754_powf+0xc8>
 8005ec4:	f005 0501 	and.w	r5, r5, #1
 8005ec8:	f1c5 0502 	rsb	r5, r5, #2
 8005ecc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005ed0:	d11f      	bne.n	8005f12 <__ieee754_powf+0xce>
 8005ed2:	2c00      	cmp	r4, #0
 8005ed4:	f280 8246 	bge.w	8006364 <__ieee754_powf+0x520>
 8005ed8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005edc:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005ee0:	e7c8      	b.n	8005e74 <__ieee754_powf+0x30>
 8005ee2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005ee6:	d111      	bne.n	8005f0c <__ieee754_powf+0xc8>
 8005ee8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8005eec:	f000 8234 	beq.w	8006358 <__ieee754_powf+0x514>
 8005ef0:	d906      	bls.n	8005f00 <__ieee754_powf+0xbc>
 8005ef2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8006208 <__ieee754_powf+0x3c4>
 8005ef6:	2c00      	cmp	r4, #0
 8005ef8:	bfa8      	it	ge
 8005efa:	eeb0 0a68 	vmovge.f32	s0, s17
 8005efe:	e7b9      	b.n	8005e74 <__ieee754_powf+0x30>
 8005f00:	2c00      	cmp	r4, #0
 8005f02:	f280 822c 	bge.w	800635e <__ieee754_powf+0x51a>
 8005f06:	eeb1 0a68 	vneg.f32	s0, s17
 8005f0a:	e7b3      	b.n	8005e74 <__ieee754_powf+0x30>
 8005f0c:	2500      	movs	r5, #0
 8005f0e:	e7dd      	b.n	8005ecc <__ieee754_powf+0x88>
 8005f10:	2500      	movs	r5, #0
 8005f12:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8005f16:	d102      	bne.n	8005f1e <__ieee754_powf+0xda>
 8005f18:	ee28 0a08 	vmul.f32	s0, s16, s16
 8005f1c:	e7aa      	b.n	8005e74 <__ieee754_powf+0x30>
 8005f1e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8005f22:	f040 8227 	bne.w	8006374 <__ieee754_powf+0x530>
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	f2c0 8224 	blt.w	8006374 <__ieee754_powf+0x530>
 8005f2c:	eeb0 0a48 	vmov.f32	s0, s16
 8005f30:	ecbd 8b02 	vpop	{d8}
 8005f34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f38:	f000 bae6 	b.w	8006508 <__ieee754_sqrtf>
 8005f3c:	2d01      	cmp	r5, #1
 8005f3e:	d199      	bne.n	8005e74 <__ieee754_powf+0x30>
 8005f40:	eeb1 0a40 	vneg.f32	s0, s0
 8005f44:	e796      	b.n	8005e74 <__ieee754_powf+0x30>
 8005f46:	0ff0      	lsrs	r0, r6, #31
 8005f48:	3801      	subs	r0, #1
 8005f4a:	ea55 0300 	orrs.w	r3, r5, r0
 8005f4e:	d104      	bne.n	8005f5a <__ieee754_powf+0x116>
 8005f50:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005f54:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005f58:	e78c      	b.n	8005e74 <__ieee754_powf+0x30>
 8005f5a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8005f5e:	d96d      	bls.n	800603c <__ieee754_powf+0x1f8>
 8005f60:	4baa      	ldr	r3, [pc, #680]	@ (800620c <__ieee754_powf+0x3c8>)
 8005f62:	4598      	cmp	r8, r3
 8005f64:	d808      	bhi.n	8005f78 <__ieee754_powf+0x134>
 8005f66:	2c00      	cmp	r4, #0
 8005f68:	da0b      	bge.n	8005f82 <__ieee754_powf+0x13e>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	ecbd 8b02 	vpop	{d8}
 8005f70:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f74:	f000 bac2 	b.w	80064fc <__math_oflowf>
 8005f78:	4ba5      	ldr	r3, [pc, #660]	@ (8006210 <__ieee754_powf+0x3cc>)
 8005f7a:	4598      	cmp	r8, r3
 8005f7c:	d908      	bls.n	8005f90 <__ieee754_powf+0x14c>
 8005f7e:	2c00      	cmp	r4, #0
 8005f80:	dcf3      	bgt.n	8005f6a <__ieee754_powf+0x126>
 8005f82:	2000      	movs	r0, #0
 8005f84:	ecbd 8b02 	vpop	{d8}
 8005f88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	f000 bab0 	b.w	80064f0 <__math_uflowf>
 8005f90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005f94:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005f98:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8006214 <__ieee754_powf+0x3d0>
 8005f9c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8005fa0:	eee0 6a67 	vfms.f32	s13, s0, s15
 8005fa4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005fa8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8005fac:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005fb0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8006218 <__ieee754_powf+0x3d4>
 8005fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fb8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800621c <__ieee754_powf+0x3d8>
 8005fbc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8005fc0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006220 <__ieee754_powf+0x3dc>
 8005fc4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005fc8:	eeb0 7a67 	vmov.f32	s14, s15
 8005fcc:	eea0 7a26 	vfma.f32	s14, s0, s13
 8005fd0:	ee17 3a10 	vmov	r3, s14
 8005fd4:	f36f 030b 	bfc	r3, #0, #12
 8005fd8:	ee07 3a10 	vmov	s14, r3
 8005fdc:	eeb0 6a47 	vmov.f32	s12, s14
 8005fe0:	eea0 6a66 	vfms.f32	s12, s0, s13
 8005fe4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005fe8:	3d01      	subs	r5, #1
 8005fea:	4305      	orrs	r5, r0
 8005fec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ff0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8005ff4:	f36f 040b 	bfc	r4, #0, #12
 8005ff8:	bf18      	it	ne
 8005ffa:	eeb0 8a66 	vmovne.f32	s16, s13
 8005ffe:	ee06 4a90 	vmov	s13, r4
 8006002:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006006:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800600a:	ee67 7a26 	vmul.f32	s15, s14, s13
 800600e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8006012:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006016:	ee17 1a10 	vmov	r1, s14
 800601a:	2900      	cmp	r1, #0
 800601c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006020:	f340 80dd 	ble.w	80061de <__ieee754_powf+0x39a>
 8006024:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8006028:	f240 80ca 	bls.w	80061c0 <__ieee754_powf+0x37c>
 800602c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006034:	bf4c      	ite	mi
 8006036:	2001      	movmi	r0, #1
 8006038:	2000      	movpl	r0, #0
 800603a:	e797      	b.n	8005f6c <__ieee754_powf+0x128>
 800603c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8006040:	bf01      	itttt	eq
 8006042:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8006224 <__ieee754_powf+0x3e0>
 8006046:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800604a:	f06f 0317 	mvneq.w	r3, #23
 800604e:	ee17 7a90 	vmoveq	r7, s15
 8006052:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8006056:	bf18      	it	ne
 8006058:	2300      	movne	r3, #0
 800605a:	3a7f      	subs	r2, #127	@ 0x7f
 800605c:	441a      	add	r2, r3
 800605e:	4b72      	ldr	r3, [pc, #456]	@ (8006228 <__ieee754_powf+0x3e4>)
 8006060:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8006064:	429f      	cmp	r7, r3
 8006066:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800606a:	dd06      	ble.n	800607a <__ieee754_powf+0x236>
 800606c:	4b6f      	ldr	r3, [pc, #444]	@ (800622c <__ieee754_powf+0x3e8>)
 800606e:	429f      	cmp	r7, r3
 8006070:	f340 80a4 	ble.w	80061bc <__ieee754_powf+0x378>
 8006074:	3201      	adds	r2, #1
 8006076:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800607a:	2600      	movs	r6, #0
 800607c:	4b6c      	ldr	r3, [pc, #432]	@ (8006230 <__ieee754_powf+0x3ec>)
 800607e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8006082:	ee07 1a10 	vmov	s14, r1
 8006086:	edd3 5a00 	vldr	s11, [r3]
 800608a:	4b6a      	ldr	r3, [pc, #424]	@ (8006234 <__ieee754_powf+0x3f0>)
 800608c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8006090:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006094:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8006098:	1049      	asrs	r1, r1, #1
 800609a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800609e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80060a2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80060a6:	ee37 6a65 	vsub.f32	s12, s14, s11
 80060aa:	ee07 1a90 	vmov	s15, r1
 80060ae:	ee26 5a24 	vmul.f32	s10, s12, s9
 80060b2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80060b6:	ee15 7a10 	vmov	r7, s10
 80060ba:	401f      	ands	r7, r3
 80060bc:	ee06 7a90 	vmov	s13, r7
 80060c0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80060c4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80060c8:	ee65 7a05 	vmul.f32	s15, s10, s10
 80060cc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80060d0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006238 <__ieee754_powf+0x3f4>
 80060d4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800623c <__ieee754_powf+0x3f8>
 80060d8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80060dc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006240 <__ieee754_powf+0x3fc>
 80060e0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80060e4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8006214 <__ieee754_powf+0x3d0>
 80060e8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80060ec:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006244 <__ieee754_powf+0x400>
 80060f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80060f4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8006248 <__ieee754_powf+0x404>
 80060f8:	ee26 6a24 	vmul.f32	s12, s12, s9
 80060fc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006100:	ee35 7a26 	vadd.f32	s14, s10, s13
 8006104:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8006108:	ee27 7a06 	vmul.f32	s14, s14, s12
 800610c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8006110:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8006114:	eef0 5a67 	vmov.f32	s11, s15
 8006118:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800611c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8006120:	ee15 1a90 	vmov	r1, s11
 8006124:	4019      	ands	r1, r3
 8006126:	ee05 1a90 	vmov	s11, r1
 800612a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800612e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8006132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006136:	ee67 7a85 	vmul.f32	s15, s15, s10
 800613a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800613e:	eeb0 6a67 	vmov.f32	s12, s15
 8006142:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8006146:	ee16 1a10 	vmov	r1, s12
 800614a:	4019      	ands	r1, r3
 800614c:	ee06 1a10 	vmov	s12, r1
 8006150:	eeb0 7a46 	vmov.f32	s14, s12
 8006154:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8006158:	493c      	ldr	r1, [pc, #240]	@ (800624c <__ieee754_powf+0x408>)
 800615a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800615e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006162:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006250 <__ieee754_powf+0x40c>
 8006166:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8006254 <__ieee754_powf+0x410>
 800616a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800616e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006258 <__ieee754_powf+0x414>
 8006172:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006176:	ed91 7a00 	vldr	s14, [r1]
 800617a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800617e:	ee07 2a10 	vmov	s14, r2
 8006182:	4a36      	ldr	r2, [pc, #216]	@ (800625c <__ieee754_powf+0x418>)
 8006184:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006188:	eeb0 7a67 	vmov.f32	s14, s15
 800618c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8006190:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8006194:	ed92 5a00 	vldr	s10, [r2]
 8006198:	ee37 7a05 	vadd.f32	s14, s14, s10
 800619c:	ee37 7a26 	vadd.f32	s14, s14, s13
 80061a0:	ee17 2a10 	vmov	r2, s14
 80061a4:	401a      	ands	r2, r3
 80061a6:	ee07 2a10 	vmov	s14, r2
 80061aa:	ee77 6a66 	vsub.f32	s13, s14, s13
 80061ae:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80061b2:	eee6 6a65 	vfms.f32	s13, s12, s11
 80061b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061ba:	e715      	b.n	8005fe8 <__ieee754_powf+0x1a4>
 80061bc:	2601      	movs	r6, #1
 80061be:	e75d      	b.n	800607c <__ieee754_powf+0x238>
 80061c0:	d152      	bne.n	8006268 <__ieee754_powf+0x424>
 80061c2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8006260 <__ieee754_powf+0x41c>
 80061c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061ca:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80061ce:	eef4 6ac7 	vcmpe.f32	s13, s14
 80061d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d6:	f73f af29 	bgt.w	800602c <__ieee754_powf+0x1e8>
 80061da:	2386      	movs	r3, #134	@ 0x86
 80061dc:	e048      	b.n	8006270 <__ieee754_powf+0x42c>
 80061de:	4a21      	ldr	r2, [pc, #132]	@ (8006264 <__ieee754_powf+0x420>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d907      	bls.n	80061f4 <__ieee754_powf+0x3b0>
 80061e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	bf4c      	ite	mi
 80061ee:	2001      	movmi	r0, #1
 80061f0:	2000      	movpl	r0, #0
 80061f2:	e6c7      	b.n	8005f84 <__ieee754_powf+0x140>
 80061f4:	d138      	bne.n	8006268 <__ieee754_powf+0x424>
 80061f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061fa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80061fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006202:	dbea      	blt.n	80061da <__ieee754_powf+0x396>
 8006204:	e7ee      	b.n	80061e4 <__ieee754_powf+0x3a0>
 8006206:	bf00      	nop
 8006208:	00000000 	.word	0x00000000
 800620c:	3f7ffff3 	.word	0x3f7ffff3
 8006210:	3f800007 	.word	0x3f800007
 8006214:	3eaaaaab 	.word	0x3eaaaaab
 8006218:	3fb8aa00 	.word	0x3fb8aa00
 800621c:	3fb8aa3b 	.word	0x3fb8aa3b
 8006220:	36eca570 	.word	0x36eca570
 8006224:	4b800000 	.word	0x4b800000
 8006228:	001cc471 	.word	0x001cc471
 800622c:	005db3d6 	.word	0x005db3d6
 8006230:	0800ada0 	.word	0x0800ada0
 8006234:	fffff000 	.word	0xfffff000
 8006238:	3e6c3255 	.word	0x3e6c3255
 800623c:	3e53f142 	.word	0x3e53f142
 8006240:	3e8ba305 	.word	0x3e8ba305
 8006244:	3edb6db7 	.word	0x3edb6db7
 8006248:	3f19999a 	.word	0x3f19999a
 800624c:	0800ad90 	.word	0x0800ad90
 8006250:	3f76384f 	.word	0x3f76384f
 8006254:	3f763800 	.word	0x3f763800
 8006258:	369dc3a0 	.word	0x369dc3a0
 800625c:	0800ad98 	.word	0x0800ad98
 8006260:	3338aa3c 	.word	0x3338aa3c
 8006264:	43160000 	.word	0x43160000
 8006268:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800626c:	d96f      	bls.n	800634e <__ieee754_powf+0x50a>
 800626e:	15db      	asrs	r3, r3, #23
 8006270:	3b7e      	subs	r3, #126	@ 0x7e
 8006272:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8006276:	4118      	asrs	r0, r3
 8006278:	4408      	add	r0, r1
 800627a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800627e:	4a4e      	ldr	r2, [pc, #312]	@ (80063b8 <__ieee754_powf+0x574>)
 8006280:	3b7f      	subs	r3, #127	@ 0x7f
 8006282:	411a      	asrs	r2, r3
 8006284:	4002      	ands	r2, r0
 8006286:	ee07 2a10 	vmov	s14, r2
 800628a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800628e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8006292:	f1c3 0317 	rsb	r3, r3, #23
 8006296:	4118      	asrs	r0, r3
 8006298:	2900      	cmp	r1, #0
 800629a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800629e:	bfb8      	it	lt
 80062a0:	4240      	neglt	r0, r0
 80062a2:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80062a6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80063bc <__ieee754_powf+0x578>
 80062aa:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80063c0 <__ieee754_powf+0x57c>
 80062ae:	ee16 3a90 	vmov	r3, s13
 80062b2:	f36f 030b 	bfc	r3, #0, #12
 80062b6:	ee06 3a90 	vmov	s13, r3
 80062ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80062be:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80062c2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80062c6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80063c4 <__ieee754_powf+0x580>
 80062ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062ce:	eee0 7a87 	vfma.f32	s15, s1, s14
 80062d2:	eeb0 7a67 	vmov.f32	s14, s15
 80062d6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80062da:	eef0 5a47 	vmov.f32	s11, s14
 80062de:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80062e2:	ee67 6a07 	vmul.f32	s13, s14, s14
 80062e6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80062ea:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80063c8 <__ieee754_powf+0x584>
 80062ee:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80063cc <__ieee754_powf+0x588>
 80062f2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80062f6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80063d0 <__ieee754_powf+0x58c>
 80062fa:	eee6 5a26 	vfma.f32	s11, s12, s13
 80062fe:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80063d4 <__ieee754_powf+0x590>
 8006302:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8006306:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80063d8 <__ieee754_powf+0x594>
 800630a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800630e:	eeb0 6a47 	vmov.f32	s12, s14
 8006312:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8006316:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800631a:	ee67 5a06 	vmul.f32	s11, s14, s12
 800631e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8006322:	eee7 7a27 	vfma.f32	s15, s14, s15
 8006326:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800632a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800632e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006332:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006336:	ee10 3a10 	vmov	r3, s0
 800633a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800633e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006342:	da06      	bge.n	8006352 <__ieee754_powf+0x50e>
 8006344:	f000 f854 	bl	80063f0 <scalbnf>
 8006348:	ee20 0a08 	vmul.f32	s0, s0, s16
 800634c:	e592      	b.n	8005e74 <__ieee754_powf+0x30>
 800634e:	2000      	movs	r0, #0
 8006350:	e7a7      	b.n	80062a2 <__ieee754_powf+0x45e>
 8006352:	ee00 3a10 	vmov	s0, r3
 8006356:	e7f7      	b.n	8006348 <__ieee754_powf+0x504>
 8006358:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800635c:	e58a      	b.n	8005e74 <__ieee754_powf+0x30>
 800635e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80063dc <__ieee754_powf+0x598>
 8006362:	e587      	b.n	8005e74 <__ieee754_powf+0x30>
 8006364:	eeb0 0a48 	vmov.f32	s0, s16
 8006368:	e584      	b.n	8005e74 <__ieee754_powf+0x30>
 800636a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800636e:	f43f adbb 	beq.w	8005ee8 <__ieee754_powf+0xa4>
 8006372:	2502      	movs	r5, #2
 8006374:	eeb0 0a48 	vmov.f32	s0, s16
 8006378:	f000 f832 	bl	80063e0 <fabsf>
 800637c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8006380:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8006384:	4647      	mov	r7, r8
 8006386:	d003      	beq.n	8006390 <__ieee754_powf+0x54c>
 8006388:	f1b8 0f00 	cmp.w	r8, #0
 800638c:	f47f addb 	bne.w	8005f46 <__ieee754_powf+0x102>
 8006390:	2c00      	cmp	r4, #0
 8006392:	bfbc      	itt	lt
 8006394:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8006398:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800639c:	2e00      	cmp	r6, #0
 800639e:	f6bf ad69 	bge.w	8005e74 <__ieee754_powf+0x30>
 80063a2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80063a6:	ea58 0805 	orrs.w	r8, r8, r5
 80063aa:	f47f adc7 	bne.w	8005f3c <__ieee754_powf+0xf8>
 80063ae:	ee70 7a40 	vsub.f32	s15, s0, s0
 80063b2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80063b6:	e55d      	b.n	8005e74 <__ieee754_powf+0x30>
 80063b8:	ff800000 	.word	0xff800000
 80063bc:	3f317218 	.word	0x3f317218
 80063c0:	3f317200 	.word	0x3f317200
 80063c4:	35bfbe8c 	.word	0x35bfbe8c
 80063c8:	b5ddea0e 	.word	0xb5ddea0e
 80063cc:	3331bb4c 	.word	0x3331bb4c
 80063d0:	388ab355 	.word	0x388ab355
 80063d4:	bb360b61 	.word	0xbb360b61
 80063d8:	3e2aaaab 	.word	0x3e2aaaab
 80063dc:	00000000 	.word	0x00000000

080063e0 <fabsf>:
 80063e0:	ee10 3a10 	vmov	r3, s0
 80063e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063e8:	ee00 3a10 	vmov	s0, r3
 80063ec:	4770      	bx	lr
	...

080063f0 <scalbnf>:
 80063f0:	ee10 3a10 	vmov	r3, s0
 80063f4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80063f8:	d02b      	beq.n	8006452 <scalbnf+0x62>
 80063fa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80063fe:	d302      	bcc.n	8006406 <scalbnf+0x16>
 8006400:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006404:	4770      	bx	lr
 8006406:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800640a:	d123      	bne.n	8006454 <scalbnf+0x64>
 800640c:	4b24      	ldr	r3, [pc, #144]	@ (80064a0 <scalbnf+0xb0>)
 800640e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80064a4 <scalbnf+0xb4>
 8006412:	4298      	cmp	r0, r3
 8006414:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006418:	db17      	blt.n	800644a <scalbnf+0x5a>
 800641a:	ee10 3a10 	vmov	r3, s0
 800641e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006422:	3a19      	subs	r2, #25
 8006424:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006428:	4288      	cmp	r0, r1
 800642a:	dd15      	ble.n	8006458 <scalbnf+0x68>
 800642c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80064a8 <scalbnf+0xb8>
 8006430:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80064ac <scalbnf+0xbc>
 8006434:	ee10 3a10 	vmov	r3, s0
 8006438:	eeb0 7a67 	vmov.f32	s14, s15
 800643c:	2b00      	cmp	r3, #0
 800643e:	bfb8      	it	lt
 8006440:	eef0 7a66 	vmovlt.f32	s15, s13
 8006444:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006448:	4770      	bx	lr
 800644a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80064b0 <scalbnf+0xc0>
 800644e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006452:	4770      	bx	lr
 8006454:	0dd2      	lsrs	r2, r2, #23
 8006456:	e7e5      	b.n	8006424 <scalbnf+0x34>
 8006458:	4410      	add	r0, r2
 800645a:	28fe      	cmp	r0, #254	@ 0xfe
 800645c:	dce6      	bgt.n	800642c <scalbnf+0x3c>
 800645e:	2800      	cmp	r0, #0
 8006460:	dd06      	ble.n	8006470 <scalbnf+0x80>
 8006462:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006466:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800646a:	ee00 3a10 	vmov	s0, r3
 800646e:	4770      	bx	lr
 8006470:	f110 0f16 	cmn.w	r0, #22
 8006474:	da09      	bge.n	800648a <scalbnf+0x9a>
 8006476:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80064b0 <scalbnf+0xc0>
 800647a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80064b4 <scalbnf+0xc4>
 800647e:	ee10 3a10 	vmov	r3, s0
 8006482:	eeb0 7a67 	vmov.f32	s14, s15
 8006486:	2b00      	cmp	r3, #0
 8006488:	e7d9      	b.n	800643e <scalbnf+0x4e>
 800648a:	3019      	adds	r0, #25
 800648c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006490:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006494:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80064b8 <scalbnf+0xc8>
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	e7d7      	b.n	800644e <scalbnf+0x5e>
 800649e:	bf00      	nop
 80064a0:	ffff3cb0 	.word	0xffff3cb0
 80064a4:	4c000000 	.word	0x4c000000
 80064a8:	7149f2ca 	.word	0x7149f2ca
 80064ac:	f149f2ca 	.word	0xf149f2ca
 80064b0:	0da24260 	.word	0x0da24260
 80064b4:	8da24260 	.word	0x8da24260
 80064b8:	33000000 	.word	0x33000000

080064bc <with_errnof>:
 80064bc:	b510      	push	{r4, lr}
 80064be:	ed2d 8b02 	vpush	{d8}
 80064c2:	eeb0 8a40 	vmov.f32	s16, s0
 80064c6:	4604      	mov	r4, r0
 80064c8:	f001 f980 	bl	80077cc <__errno>
 80064cc:	eeb0 0a48 	vmov.f32	s0, s16
 80064d0:	ecbd 8b02 	vpop	{d8}
 80064d4:	6004      	str	r4, [r0, #0]
 80064d6:	bd10      	pop	{r4, pc}

080064d8 <xflowf>:
 80064d8:	b130      	cbz	r0, 80064e8 <xflowf+0x10>
 80064da:	eef1 7a40 	vneg.f32	s15, s0
 80064de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80064e2:	2022      	movs	r0, #34	@ 0x22
 80064e4:	f7ff bfea 	b.w	80064bc <with_errnof>
 80064e8:	eef0 7a40 	vmov.f32	s15, s0
 80064ec:	e7f7      	b.n	80064de <xflowf+0x6>
	...

080064f0 <__math_uflowf>:
 80064f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80064f8 <__math_uflowf+0x8>
 80064f4:	f7ff bff0 	b.w	80064d8 <xflowf>
 80064f8:	10000000 	.word	0x10000000

080064fc <__math_oflowf>:
 80064fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006504 <__math_oflowf+0x8>
 8006500:	f7ff bfea 	b.w	80064d8 <xflowf>
 8006504:	70000000 	.word	0x70000000

08006508 <__ieee754_sqrtf>:
 8006508:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800650c:	4770      	bx	lr
	...

08006510 <_strtol_l.isra.0>:
 8006510:	2b24      	cmp	r3, #36	@ 0x24
 8006512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006516:	4686      	mov	lr, r0
 8006518:	4690      	mov	r8, r2
 800651a:	d801      	bhi.n	8006520 <_strtol_l.isra.0+0x10>
 800651c:	2b01      	cmp	r3, #1
 800651e:	d106      	bne.n	800652e <_strtol_l.isra.0+0x1e>
 8006520:	f001 f954 	bl	80077cc <__errno>
 8006524:	2316      	movs	r3, #22
 8006526:	6003      	str	r3, [r0, #0]
 8006528:	2000      	movs	r0, #0
 800652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652e:	4834      	ldr	r0, [pc, #208]	@ (8006600 <_strtol_l.isra.0+0xf0>)
 8006530:	460d      	mov	r5, r1
 8006532:	462a      	mov	r2, r5
 8006534:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006538:	5d06      	ldrb	r6, [r0, r4]
 800653a:	f016 0608 	ands.w	r6, r6, #8
 800653e:	d1f8      	bne.n	8006532 <_strtol_l.isra.0+0x22>
 8006540:	2c2d      	cmp	r4, #45	@ 0x2d
 8006542:	d110      	bne.n	8006566 <_strtol_l.isra.0+0x56>
 8006544:	782c      	ldrb	r4, [r5, #0]
 8006546:	2601      	movs	r6, #1
 8006548:	1c95      	adds	r5, r2, #2
 800654a:	f033 0210 	bics.w	r2, r3, #16
 800654e:	d115      	bne.n	800657c <_strtol_l.isra.0+0x6c>
 8006550:	2c30      	cmp	r4, #48	@ 0x30
 8006552:	d10d      	bne.n	8006570 <_strtol_l.isra.0+0x60>
 8006554:	782a      	ldrb	r2, [r5, #0]
 8006556:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800655a:	2a58      	cmp	r2, #88	@ 0x58
 800655c:	d108      	bne.n	8006570 <_strtol_l.isra.0+0x60>
 800655e:	786c      	ldrb	r4, [r5, #1]
 8006560:	3502      	adds	r5, #2
 8006562:	2310      	movs	r3, #16
 8006564:	e00a      	b.n	800657c <_strtol_l.isra.0+0x6c>
 8006566:	2c2b      	cmp	r4, #43	@ 0x2b
 8006568:	bf04      	itt	eq
 800656a:	782c      	ldrbeq	r4, [r5, #0]
 800656c:	1c95      	addeq	r5, r2, #2
 800656e:	e7ec      	b.n	800654a <_strtol_l.isra.0+0x3a>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f6      	bne.n	8006562 <_strtol_l.isra.0+0x52>
 8006574:	2c30      	cmp	r4, #48	@ 0x30
 8006576:	bf14      	ite	ne
 8006578:	230a      	movne	r3, #10
 800657a:	2308      	moveq	r3, #8
 800657c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006580:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006584:	2200      	movs	r2, #0
 8006586:	fbbc f9f3 	udiv	r9, ip, r3
 800658a:	4610      	mov	r0, r2
 800658c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006590:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006594:	2f09      	cmp	r7, #9
 8006596:	d80f      	bhi.n	80065b8 <_strtol_l.isra.0+0xa8>
 8006598:	463c      	mov	r4, r7
 800659a:	42a3      	cmp	r3, r4
 800659c:	dd1b      	ble.n	80065d6 <_strtol_l.isra.0+0xc6>
 800659e:	1c57      	adds	r7, r2, #1
 80065a0:	d007      	beq.n	80065b2 <_strtol_l.isra.0+0xa2>
 80065a2:	4581      	cmp	r9, r0
 80065a4:	d314      	bcc.n	80065d0 <_strtol_l.isra.0+0xc0>
 80065a6:	d101      	bne.n	80065ac <_strtol_l.isra.0+0x9c>
 80065a8:	45a2      	cmp	sl, r4
 80065aa:	db11      	blt.n	80065d0 <_strtol_l.isra.0+0xc0>
 80065ac:	fb00 4003 	mla	r0, r0, r3, r4
 80065b0:	2201      	movs	r2, #1
 80065b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065b6:	e7eb      	b.n	8006590 <_strtol_l.isra.0+0x80>
 80065b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80065bc:	2f19      	cmp	r7, #25
 80065be:	d801      	bhi.n	80065c4 <_strtol_l.isra.0+0xb4>
 80065c0:	3c37      	subs	r4, #55	@ 0x37
 80065c2:	e7ea      	b.n	800659a <_strtol_l.isra.0+0x8a>
 80065c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80065c8:	2f19      	cmp	r7, #25
 80065ca:	d804      	bhi.n	80065d6 <_strtol_l.isra.0+0xc6>
 80065cc:	3c57      	subs	r4, #87	@ 0x57
 80065ce:	e7e4      	b.n	800659a <_strtol_l.isra.0+0x8a>
 80065d0:	f04f 32ff 	mov.w	r2, #4294967295
 80065d4:	e7ed      	b.n	80065b2 <_strtol_l.isra.0+0xa2>
 80065d6:	1c53      	adds	r3, r2, #1
 80065d8:	d108      	bne.n	80065ec <_strtol_l.isra.0+0xdc>
 80065da:	2322      	movs	r3, #34	@ 0x22
 80065dc:	f8ce 3000 	str.w	r3, [lr]
 80065e0:	4660      	mov	r0, ip
 80065e2:	f1b8 0f00 	cmp.w	r8, #0
 80065e6:	d0a0      	beq.n	800652a <_strtol_l.isra.0+0x1a>
 80065e8:	1e69      	subs	r1, r5, #1
 80065ea:	e006      	b.n	80065fa <_strtol_l.isra.0+0xea>
 80065ec:	b106      	cbz	r6, 80065f0 <_strtol_l.isra.0+0xe0>
 80065ee:	4240      	negs	r0, r0
 80065f0:	f1b8 0f00 	cmp.w	r8, #0
 80065f4:	d099      	beq.n	800652a <_strtol_l.isra.0+0x1a>
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	d1f6      	bne.n	80065e8 <_strtol_l.isra.0+0xd8>
 80065fa:	f8c8 1000 	str.w	r1, [r8]
 80065fe:	e794      	b.n	800652a <_strtol_l.isra.0+0x1a>
 8006600:	0800ada9 	.word	0x0800ada9

08006604 <_strtol_r>:
 8006604:	f7ff bf84 	b.w	8006510 <_strtol_l.isra.0>

08006608 <__cvt>:
 8006608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	ec57 6b10 	vmov	r6, r7, d0
 8006610:	2f00      	cmp	r7, #0
 8006612:	460c      	mov	r4, r1
 8006614:	4619      	mov	r1, r3
 8006616:	463b      	mov	r3, r7
 8006618:	bfbb      	ittet	lt
 800661a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800661e:	461f      	movlt	r7, r3
 8006620:	2300      	movge	r3, #0
 8006622:	232d      	movlt	r3, #45	@ 0x2d
 8006624:	700b      	strb	r3, [r1, #0]
 8006626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006628:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800662c:	4691      	mov	r9, r2
 800662e:	f023 0820 	bic.w	r8, r3, #32
 8006632:	bfbc      	itt	lt
 8006634:	4632      	movlt	r2, r6
 8006636:	4616      	movlt	r6, r2
 8006638:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800663c:	d005      	beq.n	800664a <__cvt+0x42>
 800663e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006642:	d100      	bne.n	8006646 <__cvt+0x3e>
 8006644:	3401      	adds	r4, #1
 8006646:	2102      	movs	r1, #2
 8006648:	e000      	b.n	800664c <__cvt+0x44>
 800664a:	2103      	movs	r1, #3
 800664c:	ab03      	add	r3, sp, #12
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	ab02      	add	r3, sp, #8
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	ec47 6b10 	vmov	d0, r6, r7
 8006658:	4653      	mov	r3, sl
 800665a:	4622      	mov	r2, r4
 800665c:	f001 f974 	bl	8007948 <_dtoa_r>
 8006660:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006664:	4605      	mov	r5, r0
 8006666:	d119      	bne.n	800669c <__cvt+0x94>
 8006668:	f019 0f01 	tst.w	r9, #1
 800666c:	d00e      	beq.n	800668c <__cvt+0x84>
 800666e:	eb00 0904 	add.w	r9, r0, r4
 8006672:	2200      	movs	r2, #0
 8006674:	2300      	movs	r3, #0
 8006676:	4630      	mov	r0, r6
 8006678:	4639      	mov	r1, r7
 800667a:	f7fa fa45 	bl	8000b08 <__aeabi_dcmpeq>
 800667e:	b108      	cbz	r0, 8006684 <__cvt+0x7c>
 8006680:	f8cd 900c 	str.w	r9, [sp, #12]
 8006684:	2230      	movs	r2, #48	@ 0x30
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	454b      	cmp	r3, r9
 800668a:	d31e      	bcc.n	80066ca <__cvt+0xc2>
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006690:	1b5b      	subs	r3, r3, r5
 8006692:	4628      	mov	r0, r5
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	b004      	add	sp, #16
 8006698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800669c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066a0:	eb00 0904 	add.w	r9, r0, r4
 80066a4:	d1e5      	bne.n	8006672 <__cvt+0x6a>
 80066a6:	7803      	ldrb	r3, [r0, #0]
 80066a8:	2b30      	cmp	r3, #48	@ 0x30
 80066aa:	d10a      	bne.n	80066c2 <__cvt+0xba>
 80066ac:	2200      	movs	r2, #0
 80066ae:	2300      	movs	r3, #0
 80066b0:	4630      	mov	r0, r6
 80066b2:	4639      	mov	r1, r7
 80066b4:	f7fa fa28 	bl	8000b08 <__aeabi_dcmpeq>
 80066b8:	b918      	cbnz	r0, 80066c2 <__cvt+0xba>
 80066ba:	f1c4 0401 	rsb	r4, r4, #1
 80066be:	f8ca 4000 	str.w	r4, [sl]
 80066c2:	f8da 3000 	ldr.w	r3, [sl]
 80066c6:	4499      	add	r9, r3
 80066c8:	e7d3      	b.n	8006672 <__cvt+0x6a>
 80066ca:	1c59      	adds	r1, r3, #1
 80066cc:	9103      	str	r1, [sp, #12]
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	e7d9      	b.n	8006686 <__cvt+0x7e>

080066d2 <__exponent>:
 80066d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066d4:	2900      	cmp	r1, #0
 80066d6:	bfba      	itte	lt
 80066d8:	4249      	neglt	r1, r1
 80066da:	232d      	movlt	r3, #45	@ 0x2d
 80066dc:	232b      	movge	r3, #43	@ 0x2b
 80066de:	2909      	cmp	r1, #9
 80066e0:	7002      	strb	r2, [r0, #0]
 80066e2:	7043      	strb	r3, [r0, #1]
 80066e4:	dd29      	ble.n	800673a <__exponent+0x68>
 80066e6:	f10d 0307 	add.w	r3, sp, #7
 80066ea:	461d      	mov	r5, r3
 80066ec:	270a      	movs	r7, #10
 80066ee:	461a      	mov	r2, r3
 80066f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80066f4:	fb07 1416 	mls	r4, r7, r6, r1
 80066f8:	3430      	adds	r4, #48	@ 0x30
 80066fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80066fe:	460c      	mov	r4, r1
 8006700:	2c63      	cmp	r4, #99	@ 0x63
 8006702:	f103 33ff 	add.w	r3, r3, #4294967295
 8006706:	4631      	mov	r1, r6
 8006708:	dcf1      	bgt.n	80066ee <__exponent+0x1c>
 800670a:	3130      	adds	r1, #48	@ 0x30
 800670c:	1e94      	subs	r4, r2, #2
 800670e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006712:	1c41      	adds	r1, r0, #1
 8006714:	4623      	mov	r3, r4
 8006716:	42ab      	cmp	r3, r5
 8006718:	d30a      	bcc.n	8006730 <__exponent+0x5e>
 800671a:	f10d 0309 	add.w	r3, sp, #9
 800671e:	1a9b      	subs	r3, r3, r2
 8006720:	42ac      	cmp	r4, r5
 8006722:	bf88      	it	hi
 8006724:	2300      	movhi	r3, #0
 8006726:	3302      	adds	r3, #2
 8006728:	4403      	add	r3, r0
 800672a:	1a18      	subs	r0, r3, r0
 800672c:	b003      	add	sp, #12
 800672e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006730:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006734:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006738:	e7ed      	b.n	8006716 <__exponent+0x44>
 800673a:	2330      	movs	r3, #48	@ 0x30
 800673c:	3130      	adds	r1, #48	@ 0x30
 800673e:	7083      	strb	r3, [r0, #2]
 8006740:	70c1      	strb	r1, [r0, #3]
 8006742:	1d03      	adds	r3, r0, #4
 8006744:	e7f1      	b.n	800672a <__exponent+0x58>
	...

08006748 <_printf_float>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	b08d      	sub	sp, #52	@ 0x34
 800674e:	460c      	mov	r4, r1
 8006750:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006754:	4616      	mov	r6, r2
 8006756:	461f      	mov	r7, r3
 8006758:	4605      	mov	r5, r0
 800675a:	f000 ffed 	bl	8007738 <_localeconv_r>
 800675e:	6803      	ldr	r3, [r0, #0]
 8006760:	9304      	str	r3, [sp, #16]
 8006762:	4618      	mov	r0, r3
 8006764:	f7f9 fda4 	bl	80002b0 <strlen>
 8006768:	2300      	movs	r3, #0
 800676a:	930a      	str	r3, [sp, #40]	@ 0x28
 800676c:	f8d8 3000 	ldr.w	r3, [r8]
 8006770:	9005      	str	r0, [sp, #20]
 8006772:	3307      	adds	r3, #7
 8006774:	f023 0307 	bic.w	r3, r3, #7
 8006778:	f103 0208 	add.w	r2, r3, #8
 800677c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006780:	f8d4 b000 	ldr.w	fp, [r4]
 8006784:	f8c8 2000 	str.w	r2, [r8]
 8006788:	e9d3 8900 	ldrd	r8, r9, [r3]
 800678c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006790:	9307      	str	r3, [sp, #28]
 8006792:	f8cd 8018 	str.w	r8, [sp, #24]
 8006796:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800679a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800679e:	4b9c      	ldr	r3, [pc, #624]	@ (8006a10 <_printf_float+0x2c8>)
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	f7fa f9e2 	bl	8000b6c <__aeabi_dcmpun>
 80067a8:	bb70      	cbnz	r0, 8006808 <_printf_float+0xc0>
 80067aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ae:	4b98      	ldr	r3, [pc, #608]	@ (8006a10 <_printf_float+0x2c8>)
 80067b0:	f04f 32ff 	mov.w	r2, #4294967295
 80067b4:	f7fa f9bc 	bl	8000b30 <__aeabi_dcmple>
 80067b8:	bb30      	cbnz	r0, 8006808 <_printf_float+0xc0>
 80067ba:	2200      	movs	r2, #0
 80067bc:	2300      	movs	r3, #0
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7fa f9ab 	bl	8000b1c <__aeabi_dcmplt>
 80067c6:	b110      	cbz	r0, 80067ce <_printf_float+0x86>
 80067c8:	232d      	movs	r3, #45	@ 0x2d
 80067ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ce:	4a91      	ldr	r2, [pc, #580]	@ (8006a14 <_printf_float+0x2cc>)
 80067d0:	4b91      	ldr	r3, [pc, #580]	@ (8006a18 <_printf_float+0x2d0>)
 80067d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067d6:	bf8c      	ite	hi
 80067d8:	4690      	movhi	r8, r2
 80067da:	4698      	movls	r8, r3
 80067dc:	2303      	movs	r3, #3
 80067de:	6123      	str	r3, [r4, #16]
 80067e0:	f02b 0304 	bic.w	r3, fp, #4
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	f04f 0900 	mov.w	r9, #0
 80067ea:	9700      	str	r7, [sp, #0]
 80067ec:	4633      	mov	r3, r6
 80067ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80067f0:	4621      	mov	r1, r4
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 f9d2 	bl	8006b9c <_printf_common>
 80067f8:	3001      	adds	r0, #1
 80067fa:	f040 808d 	bne.w	8006918 <_printf_float+0x1d0>
 80067fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006802:	b00d      	add	sp, #52	@ 0x34
 8006804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	4640      	mov	r0, r8
 800680e:	4649      	mov	r1, r9
 8006810:	f7fa f9ac 	bl	8000b6c <__aeabi_dcmpun>
 8006814:	b140      	cbz	r0, 8006828 <_printf_float+0xe0>
 8006816:	464b      	mov	r3, r9
 8006818:	2b00      	cmp	r3, #0
 800681a:	bfbc      	itt	lt
 800681c:	232d      	movlt	r3, #45	@ 0x2d
 800681e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006822:	4a7e      	ldr	r2, [pc, #504]	@ (8006a1c <_printf_float+0x2d4>)
 8006824:	4b7e      	ldr	r3, [pc, #504]	@ (8006a20 <_printf_float+0x2d8>)
 8006826:	e7d4      	b.n	80067d2 <_printf_float+0x8a>
 8006828:	6863      	ldr	r3, [r4, #4]
 800682a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800682e:	9206      	str	r2, [sp, #24]
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	d13b      	bne.n	80068ac <_printf_float+0x164>
 8006834:	2306      	movs	r3, #6
 8006836:	6063      	str	r3, [r4, #4]
 8006838:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800683c:	2300      	movs	r3, #0
 800683e:	6022      	str	r2, [r4, #0]
 8006840:	9303      	str	r3, [sp, #12]
 8006842:	ab0a      	add	r3, sp, #40	@ 0x28
 8006844:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006848:	ab09      	add	r3, sp, #36	@ 0x24
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	6861      	ldr	r1, [r4, #4]
 800684e:	ec49 8b10 	vmov	d0, r8, r9
 8006852:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006856:	4628      	mov	r0, r5
 8006858:	f7ff fed6 	bl	8006608 <__cvt>
 800685c:	9b06      	ldr	r3, [sp, #24]
 800685e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006860:	2b47      	cmp	r3, #71	@ 0x47
 8006862:	4680      	mov	r8, r0
 8006864:	d129      	bne.n	80068ba <_printf_float+0x172>
 8006866:	1cc8      	adds	r0, r1, #3
 8006868:	db02      	blt.n	8006870 <_printf_float+0x128>
 800686a:	6863      	ldr	r3, [r4, #4]
 800686c:	4299      	cmp	r1, r3
 800686e:	dd41      	ble.n	80068f4 <_printf_float+0x1ac>
 8006870:	f1aa 0a02 	sub.w	sl, sl, #2
 8006874:	fa5f fa8a 	uxtb.w	sl, sl
 8006878:	3901      	subs	r1, #1
 800687a:	4652      	mov	r2, sl
 800687c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006880:	9109      	str	r1, [sp, #36]	@ 0x24
 8006882:	f7ff ff26 	bl	80066d2 <__exponent>
 8006886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006888:	1813      	adds	r3, r2, r0
 800688a:	2a01      	cmp	r2, #1
 800688c:	4681      	mov	r9, r0
 800688e:	6123      	str	r3, [r4, #16]
 8006890:	dc02      	bgt.n	8006898 <_printf_float+0x150>
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	07d2      	lsls	r2, r2, #31
 8006896:	d501      	bpl.n	800689c <_printf_float+0x154>
 8006898:	3301      	adds	r3, #1
 800689a:	6123      	str	r3, [r4, #16]
 800689c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0a2      	beq.n	80067ea <_printf_float+0xa2>
 80068a4:	232d      	movs	r3, #45	@ 0x2d
 80068a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068aa:	e79e      	b.n	80067ea <_printf_float+0xa2>
 80068ac:	9a06      	ldr	r2, [sp, #24]
 80068ae:	2a47      	cmp	r2, #71	@ 0x47
 80068b0:	d1c2      	bne.n	8006838 <_printf_float+0xf0>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1c0      	bne.n	8006838 <_printf_float+0xf0>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e7bd      	b.n	8006836 <_printf_float+0xee>
 80068ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068be:	d9db      	bls.n	8006878 <_printf_float+0x130>
 80068c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80068c4:	d118      	bne.n	80068f8 <_printf_float+0x1b0>
 80068c6:	2900      	cmp	r1, #0
 80068c8:	6863      	ldr	r3, [r4, #4]
 80068ca:	dd0b      	ble.n	80068e4 <_printf_float+0x19c>
 80068cc:	6121      	str	r1, [r4, #16]
 80068ce:	b913      	cbnz	r3, 80068d6 <_printf_float+0x18e>
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	07d0      	lsls	r0, r2, #31
 80068d4:	d502      	bpl.n	80068dc <_printf_float+0x194>
 80068d6:	3301      	adds	r3, #1
 80068d8:	440b      	add	r3, r1
 80068da:	6123      	str	r3, [r4, #16]
 80068dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068de:	f04f 0900 	mov.w	r9, #0
 80068e2:	e7db      	b.n	800689c <_printf_float+0x154>
 80068e4:	b913      	cbnz	r3, 80068ec <_printf_float+0x1a4>
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	07d2      	lsls	r2, r2, #31
 80068ea:	d501      	bpl.n	80068f0 <_printf_float+0x1a8>
 80068ec:	3302      	adds	r3, #2
 80068ee:	e7f4      	b.n	80068da <_printf_float+0x192>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e7f2      	b.n	80068da <_printf_float+0x192>
 80068f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80068f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068fa:	4299      	cmp	r1, r3
 80068fc:	db05      	blt.n	800690a <_printf_float+0x1c2>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	6121      	str	r1, [r4, #16]
 8006902:	07d8      	lsls	r0, r3, #31
 8006904:	d5ea      	bpl.n	80068dc <_printf_float+0x194>
 8006906:	1c4b      	adds	r3, r1, #1
 8006908:	e7e7      	b.n	80068da <_printf_float+0x192>
 800690a:	2900      	cmp	r1, #0
 800690c:	bfd4      	ite	le
 800690e:	f1c1 0202 	rsble	r2, r1, #2
 8006912:	2201      	movgt	r2, #1
 8006914:	4413      	add	r3, r2
 8006916:	e7e0      	b.n	80068da <_printf_float+0x192>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	055a      	lsls	r2, r3, #21
 800691c:	d407      	bmi.n	800692e <_printf_float+0x1e6>
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	4642      	mov	r2, r8
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	d12b      	bne.n	8006984 <_printf_float+0x23c>
 800692c:	e767      	b.n	80067fe <_printf_float+0xb6>
 800692e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006932:	f240 80dd 	bls.w	8006af0 <_printf_float+0x3a8>
 8006936:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800693a:	2200      	movs	r2, #0
 800693c:	2300      	movs	r3, #0
 800693e:	f7fa f8e3 	bl	8000b08 <__aeabi_dcmpeq>
 8006942:	2800      	cmp	r0, #0
 8006944:	d033      	beq.n	80069ae <_printf_float+0x266>
 8006946:	4a37      	ldr	r2, [pc, #220]	@ (8006a24 <_printf_float+0x2dc>)
 8006948:	2301      	movs	r3, #1
 800694a:	4631      	mov	r1, r6
 800694c:	4628      	mov	r0, r5
 800694e:	47b8      	blx	r7
 8006950:	3001      	adds	r0, #1
 8006952:	f43f af54 	beq.w	80067fe <_printf_float+0xb6>
 8006956:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800695a:	4543      	cmp	r3, r8
 800695c:	db02      	blt.n	8006964 <_printf_float+0x21c>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	07d8      	lsls	r0, r3, #31
 8006962:	d50f      	bpl.n	8006984 <_printf_float+0x23c>
 8006964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f af45 	beq.w	80067fe <_printf_float+0xb6>
 8006974:	f04f 0900 	mov.w	r9, #0
 8006978:	f108 38ff 	add.w	r8, r8, #4294967295
 800697c:	f104 0a1a 	add.w	sl, r4, #26
 8006980:	45c8      	cmp	r8, r9
 8006982:	dc09      	bgt.n	8006998 <_printf_float+0x250>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	079b      	lsls	r3, r3, #30
 8006988:	f100 8103 	bmi.w	8006b92 <_printf_float+0x44a>
 800698c:	68e0      	ldr	r0, [r4, #12]
 800698e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006990:	4298      	cmp	r0, r3
 8006992:	bfb8      	it	lt
 8006994:	4618      	movlt	r0, r3
 8006996:	e734      	b.n	8006802 <_printf_float+0xba>
 8006998:	2301      	movs	r3, #1
 800699a:	4652      	mov	r2, sl
 800699c:	4631      	mov	r1, r6
 800699e:	4628      	mov	r0, r5
 80069a0:	47b8      	blx	r7
 80069a2:	3001      	adds	r0, #1
 80069a4:	f43f af2b 	beq.w	80067fe <_printf_float+0xb6>
 80069a8:	f109 0901 	add.w	r9, r9, #1
 80069ac:	e7e8      	b.n	8006980 <_printf_float+0x238>
 80069ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	dc39      	bgt.n	8006a28 <_printf_float+0x2e0>
 80069b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a24 <_printf_float+0x2dc>)
 80069b6:	2301      	movs	r3, #1
 80069b8:	4631      	mov	r1, r6
 80069ba:	4628      	mov	r0, r5
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	f43f af1d 	beq.w	80067fe <_printf_float+0xb6>
 80069c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80069c8:	ea59 0303 	orrs.w	r3, r9, r3
 80069cc:	d102      	bne.n	80069d4 <_printf_float+0x28c>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	07d9      	lsls	r1, r3, #31
 80069d2:	d5d7      	bpl.n	8006984 <_printf_float+0x23c>
 80069d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f af0d 	beq.w	80067fe <_printf_float+0xb6>
 80069e4:	f04f 0a00 	mov.w	sl, #0
 80069e8:	f104 0b1a 	add.w	fp, r4, #26
 80069ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ee:	425b      	negs	r3, r3
 80069f0:	4553      	cmp	r3, sl
 80069f2:	dc01      	bgt.n	80069f8 <_printf_float+0x2b0>
 80069f4:	464b      	mov	r3, r9
 80069f6:	e793      	b.n	8006920 <_printf_float+0x1d8>
 80069f8:	2301      	movs	r3, #1
 80069fa:	465a      	mov	r2, fp
 80069fc:	4631      	mov	r1, r6
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	f43f aefb 	beq.w	80067fe <_printf_float+0xb6>
 8006a08:	f10a 0a01 	add.w	sl, sl, #1
 8006a0c:	e7ee      	b.n	80069ec <_printf_float+0x2a4>
 8006a0e:	bf00      	nop
 8006a10:	7fefffff 	.word	0x7fefffff
 8006a14:	0800aead 	.word	0x0800aead
 8006a18:	0800aea9 	.word	0x0800aea9
 8006a1c:	0800aeb5 	.word	0x0800aeb5
 8006a20:	0800aeb1 	.word	0x0800aeb1
 8006a24:	0800aeb9 	.word	0x0800aeb9
 8006a28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a2e:	4553      	cmp	r3, sl
 8006a30:	bfa8      	it	ge
 8006a32:	4653      	movge	r3, sl
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	4699      	mov	r9, r3
 8006a38:	dc36      	bgt.n	8006aa8 <_printf_float+0x360>
 8006a3a:	f04f 0b00 	mov.w	fp, #0
 8006a3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a42:	f104 021a 	add.w	r2, r4, #26
 8006a46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a48:	9306      	str	r3, [sp, #24]
 8006a4a:	eba3 0309 	sub.w	r3, r3, r9
 8006a4e:	455b      	cmp	r3, fp
 8006a50:	dc31      	bgt.n	8006ab6 <_printf_float+0x36e>
 8006a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a54:	459a      	cmp	sl, r3
 8006a56:	dc3a      	bgt.n	8006ace <_printf_float+0x386>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	07da      	lsls	r2, r3, #31
 8006a5c:	d437      	bmi.n	8006ace <_printf_float+0x386>
 8006a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a60:	ebaa 0903 	sub.w	r9, sl, r3
 8006a64:	9b06      	ldr	r3, [sp, #24]
 8006a66:	ebaa 0303 	sub.w	r3, sl, r3
 8006a6a:	4599      	cmp	r9, r3
 8006a6c:	bfa8      	it	ge
 8006a6e:	4699      	movge	r9, r3
 8006a70:	f1b9 0f00 	cmp.w	r9, #0
 8006a74:	dc33      	bgt.n	8006ade <_printf_float+0x396>
 8006a76:	f04f 0800 	mov.w	r8, #0
 8006a7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a7e:	f104 0b1a 	add.w	fp, r4, #26
 8006a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a84:	ebaa 0303 	sub.w	r3, sl, r3
 8006a88:	eba3 0309 	sub.w	r3, r3, r9
 8006a8c:	4543      	cmp	r3, r8
 8006a8e:	f77f af79 	ble.w	8006984 <_printf_float+0x23c>
 8006a92:	2301      	movs	r3, #1
 8006a94:	465a      	mov	r2, fp
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f aeae 	beq.w	80067fe <_printf_float+0xb6>
 8006aa2:	f108 0801 	add.w	r8, r8, #1
 8006aa6:	e7ec      	b.n	8006a82 <_printf_float+0x33a>
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d1c2      	bne.n	8006a3a <_printf_float+0x2f2>
 8006ab4:	e6a3      	b.n	80067fe <_printf_float+0xb6>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4628      	mov	r0, r5
 8006abc:	9206      	str	r2, [sp, #24]
 8006abe:	47b8      	blx	r7
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	f43f ae9c 	beq.w	80067fe <_printf_float+0xb6>
 8006ac6:	9a06      	ldr	r2, [sp, #24]
 8006ac8:	f10b 0b01 	add.w	fp, fp, #1
 8006acc:	e7bb      	b.n	8006a46 <_printf_float+0x2fe>
 8006ace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	47b8      	blx	r7
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d1c0      	bne.n	8006a5e <_printf_float+0x316>
 8006adc:	e68f      	b.n	80067fe <_printf_float+0xb6>
 8006ade:	9a06      	ldr	r2, [sp, #24]
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	4442      	add	r2, r8
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	47b8      	blx	r7
 8006aea:	3001      	adds	r0, #1
 8006aec:	d1c3      	bne.n	8006a76 <_printf_float+0x32e>
 8006aee:	e686      	b.n	80067fe <_printf_float+0xb6>
 8006af0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006af4:	f1ba 0f01 	cmp.w	sl, #1
 8006af8:	dc01      	bgt.n	8006afe <_printf_float+0x3b6>
 8006afa:	07db      	lsls	r3, r3, #31
 8006afc:	d536      	bpl.n	8006b6c <_printf_float+0x424>
 8006afe:	2301      	movs	r3, #1
 8006b00:	4642      	mov	r2, r8
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f43f ae78 	beq.w	80067fe <_printf_float+0xb6>
 8006b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f43f ae70 	beq.w	80067fe <_printf_float+0xb6>
 8006b1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b22:	2200      	movs	r2, #0
 8006b24:	2300      	movs	r3, #0
 8006b26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b2a:	f7f9 ffed 	bl	8000b08 <__aeabi_dcmpeq>
 8006b2e:	b9c0      	cbnz	r0, 8006b62 <_printf_float+0x41a>
 8006b30:	4653      	mov	r3, sl
 8006b32:	f108 0201 	add.w	r2, r8, #1
 8006b36:	4631      	mov	r1, r6
 8006b38:	4628      	mov	r0, r5
 8006b3a:	47b8      	blx	r7
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d10c      	bne.n	8006b5a <_printf_float+0x412>
 8006b40:	e65d      	b.n	80067fe <_printf_float+0xb6>
 8006b42:	2301      	movs	r3, #1
 8006b44:	465a      	mov	r2, fp
 8006b46:	4631      	mov	r1, r6
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b8      	blx	r7
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	f43f ae56 	beq.w	80067fe <_printf_float+0xb6>
 8006b52:	f108 0801 	add.w	r8, r8, #1
 8006b56:	45d0      	cmp	r8, sl
 8006b58:	dbf3      	blt.n	8006b42 <_printf_float+0x3fa>
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b60:	e6df      	b.n	8006922 <_printf_float+0x1da>
 8006b62:	f04f 0800 	mov.w	r8, #0
 8006b66:	f104 0b1a 	add.w	fp, r4, #26
 8006b6a:	e7f4      	b.n	8006b56 <_printf_float+0x40e>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4642      	mov	r2, r8
 8006b70:	e7e1      	b.n	8006b36 <_printf_float+0x3ee>
 8006b72:	2301      	movs	r3, #1
 8006b74:	464a      	mov	r2, r9
 8006b76:	4631      	mov	r1, r6
 8006b78:	4628      	mov	r0, r5
 8006b7a:	47b8      	blx	r7
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	f43f ae3e 	beq.w	80067fe <_printf_float+0xb6>
 8006b82:	f108 0801 	add.w	r8, r8, #1
 8006b86:	68e3      	ldr	r3, [r4, #12]
 8006b88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b8a:	1a5b      	subs	r3, r3, r1
 8006b8c:	4543      	cmp	r3, r8
 8006b8e:	dcf0      	bgt.n	8006b72 <_printf_float+0x42a>
 8006b90:	e6fc      	b.n	800698c <_printf_float+0x244>
 8006b92:	f04f 0800 	mov.w	r8, #0
 8006b96:	f104 0919 	add.w	r9, r4, #25
 8006b9a:	e7f4      	b.n	8006b86 <_printf_float+0x43e>

08006b9c <_printf_common>:
 8006b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	4616      	mov	r6, r2
 8006ba2:	4698      	mov	r8, r3
 8006ba4:	688a      	ldr	r2, [r1, #8]
 8006ba6:	690b      	ldr	r3, [r1, #16]
 8006ba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bac:	4293      	cmp	r3, r2
 8006bae:	bfb8      	it	lt
 8006bb0:	4613      	movlt	r3, r2
 8006bb2:	6033      	str	r3, [r6, #0]
 8006bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bb8:	4607      	mov	r7, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	b10a      	cbz	r2, 8006bc2 <_printf_common+0x26>
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	6033      	str	r3, [r6, #0]
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	0699      	lsls	r1, r3, #26
 8006bc6:	bf42      	ittt	mi
 8006bc8:	6833      	ldrmi	r3, [r6, #0]
 8006bca:	3302      	addmi	r3, #2
 8006bcc:	6033      	strmi	r3, [r6, #0]
 8006bce:	6825      	ldr	r5, [r4, #0]
 8006bd0:	f015 0506 	ands.w	r5, r5, #6
 8006bd4:	d106      	bne.n	8006be4 <_printf_common+0x48>
 8006bd6:	f104 0a19 	add.w	sl, r4, #25
 8006bda:	68e3      	ldr	r3, [r4, #12]
 8006bdc:	6832      	ldr	r2, [r6, #0]
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	42ab      	cmp	r3, r5
 8006be2:	dc26      	bgt.n	8006c32 <_printf_common+0x96>
 8006be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006be8:	6822      	ldr	r2, [r4, #0]
 8006bea:	3b00      	subs	r3, #0
 8006bec:	bf18      	it	ne
 8006bee:	2301      	movne	r3, #1
 8006bf0:	0692      	lsls	r2, r2, #26
 8006bf2:	d42b      	bmi.n	8006c4c <_printf_common+0xb0>
 8006bf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bf8:	4641      	mov	r1, r8
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	47c8      	blx	r9
 8006bfe:	3001      	adds	r0, #1
 8006c00:	d01e      	beq.n	8006c40 <_printf_common+0xa4>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	6922      	ldr	r2, [r4, #16]
 8006c06:	f003 0306 	and.w	r3, r3, #6
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	bf02      	ittt	eq
 8006c0e:	68e5      	ldreq	r5, [r4, #12]
 8006c10:	6833      	ldreq	r3, [r6, #0]
 8006c12:	1aed      	subeq	r5, r5, r3
 8006c14:	68a3      	ldr	r3, [r4, #8]
 8006c16:	bf0c      	ite	eq
 8006c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c1c:	2500      	movne	r5, #0
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	bfc4      	itt	gt
 8006c22:	1a9b      	subgt	r3, r3, r2
 8006c24:	18ed      	addgt	r5, r5, r3
 8006c26:	2600      	movs	r6, #0
 8006c28:	341a      	adds	r4, #26
 8006c2a:	42b5      	cmp	r5, r6
 8006c2c:	d11a      	bne.n	8006c64 <_printf_common+0xc8>
 8006c2e:	2000      	movs	r0, #0
 8006c30:	e008      	b.n	8006c44 <_printf_common+0xa8>
 8006c32:	2301      	movs	r3, #1
 8006c34:	4652      	mov	r2, sl
 8006c36:	4641      	mov	r1, r8
 8006c38:	4638      	mov	r0, r7
 8006c3a:	47c8      	blx	r9
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d103      	bne.n	8006c48 <_printf_common+0xac>
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c48:	3501      	adds	r5, #1
 8006c4a:	e7c6      	b.n	8006bda <_printf_common+0x3e>
 8006c4c:	18e1      	adds	r1, r4, r3
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	2030      	movs	r0, #48	@ 0x30
 8006c52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c56:	4422      	add	r2, r4
 8006c58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c60:	3302      	adds	r3, #2
 8006c62:	e7c7      	b.n	8006bf4 <_printf_common+0x58>
 8006c64:	2301      	movs	r3, #1
 8006c66:	4622      	mov	r2, r4
 8006c68:	4641      	mov	r1, r8
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	47c8      	blx	r9
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d0e6      	beq.n	8006c40 <_printf_common+0xa4>
 8006c72:	3601      	adds	r6, #1
 8006c74:	e7d9      	b.n	8006c2a <_printf_common+0x8e>
	...

08006c78 <_printf_i>:
 8006c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c7c:	7e0f      	ldrb	r7, [r1, #24]
 8006c7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c80:	2f78      	cmp	r7, #120	@ 0x78
 8006c82:	4691      	mov	r9, r2
 8006c84:	4680      	mov	r8, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	469a      	mov	sl, r3
 8006c8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c8e:	d807      	bhi.n	8006ca0 <_printf_i+0x28>
 8006c90:	2f62      	cmp	r7, #98	@ 0x62
 8006c92:	d80a      	bhi.n	8006caa <_printf_i+0x32>
 8006c94:	2f00      	cmp	r7, #0
 8006c96:	f000 80d1 	beq.w	8006e3c <_printf_i+0x1c4>
 8006c9a:	2f58      	cmp	r7, #88	@ 0x58
 8006c9c:	f000 80b8 	beq.w	8006e10 <_printf_i+0x198>
 8006ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ca8:	e03a      	b.n	8006d20 <_printf_i+0xa8>
 8006caa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cae:	2b15      	cmp	r3, #21
 8006cb0:	d8f6      	bhi.n	8006ca0 <_printf_i+0x28>
 8006cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8006cb8 <_printf_i+0x40>)
 8006cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cb8:	08006d11 	.word	0x08006d11
 8006cbc:	08006d25 	.word	0x08006d25
 8006cc0:	08006ca1 	.word	0x08006ca1
 8006cc4:	08006ca1 	.word	0x08006ca1
 8006cc8:	08006ca1 	.word	0x08006ca1
 8006ccc:	08006ca1 	.word	0x08006ca1
 8006cd0:	08006d25 	.word	0x08006d25
 8006cd4:	08006ca1 	.word	0x08006ca1
 8006cd8:	08006ca1 	.word	0x08006ca1
 8006cdc:	08006ca1 	.word	0x08006ca1
 8006ce0:	08006ca1 	.word	0x08006ca1
 8006ce4:	08006e23 	.word	0x08006e23
 8006ce8:	08006d4f 	.word	0x08006d4f
 8006cec:	08006ddd 	.word	0x08006ddd
 8006cf0:	08006ca1 	.word	0x08006ca1
 8006cf4:	08006ca1 	.word	0x08006ca1
 8006cf8:	08006e45 	.word	0x08006e45
 8006cfc:	08006ca1 	.word	0x08006ca1
 8006d00:	08006d4f 	.word	0x08006d4f
 8006d04:	08006ca1 	.word	0x08006ca1
 8006d08:	08006ca1 	.word	0x08006ca1
 8006d0c:	08006de5 	.word	0x08006de5
 8006d10:	6833      	ldr	r3, [r6, #0]
 8006d12:	1d1a      	adds	r2, r3, #4
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6032      	str	r2, [r6, #0]
 8006d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d20:	2301      	movs	r3, #1
 8006d22:	e09c      	b.n	8006e5e <_printf_i+0x1e6>
 8006d24:	6833      	ldr	r3, [r6, #0]
 8006d26:	6820      	ldr	r0, [r4, #0]
 8006d28:	1d19      	adds	r1, r3, #4
 8006d2a:	6031      	str	r1, [r6, #0]
 8006d2c:	0606      	lsls	r6, r0, #24
 8006d2e:	d501      	bpl.n	8006d34 <_printf_i+0xbc>
 8006d30:	681d      	ldr	r5, [r3, #0]
 8006d32:	e003      	b.n	8006d3c <_printf_i+0xc4>
 8006d34:	0645      	lsls	r5, r0, #25
 8006d36:	d5fb      	bpl.n	8006d30 <_printf_i+0xb8>
 8006d38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d3c:	2d00      	cmp	r5, #0
 8006d3e:	da03      	bge.n	8006d48 <_printf_i+0xd0>
 8006d40:	232d      	movs	r3, #45	@ 0x2d
 8006d42:	426d      	negs	r5, r5
 8006d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d48:	4858      	ldr	r0, [pc, #352]	@ (8006eac <_printf_i+0x234>)
 8006d4a:	230a      	movs	r3, #10
 8006d4c:	e011      	b.n	8006d72 <_printf_i+0xfa>
 8006d4e:	6821      	ldr	r1, [r4, #0]
 8006d50:	6833      	ldr	r3, [r6, #0]
 8006d52:	0608      	lsls	r0, r1, #24
 8006d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d58:	d402      	bmi.n	8006d60 <_printf_i+0xe8>
 8006d5a:	0649      	lsls	r1, r1, #25
 8006d5c:	bf48      	it	mi
 8006d5e:	b2ad      	uxthmi	r5, r5
 8006d60:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d62:	4852      	ldr	r0, [pc, #328]	@ (8006eac <_printf_i+0x234>)
 8006d64:	6033      	str	r3, [r6, #0]
 8006d66:	bf14      	ite	ne
 8006d68:	230a      	movne	r3, #10
 8006d6a:	2308      	moveq	r3, #8
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d72:	6866      	ldr	r6, [r4, #4]
 8006d74:	60a6      	str	r6, [r4, #8]
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	db05      	blt.n	8006d86 <_printf_i+0x10e>
 8006d7a:	6821      	ldr	r1, [r4, #0]
 8006d7c:	432e      	orrs	r6, r5
 8006d7e:	f021 0104 	bic.w	r1, r1, #4
 8006d82:	6021      	str	r1, [r4, #0]
 8006d84:	d04b      	beq.n	8006e1e <_printf_i+0x1a6>
 8006d86:	4616      	mov	r6, r2
 8006d88:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d8c:	fb03 5711 	mls	r7, r3, r1, r5
 8006d90:	5dc7      	ldrb	r7, [r0, r7]
 8006d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d96:	462f      	mov	r7, r5
 8006d98:	42bb      	cmp	r3, r7
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	d9f4      	bls.n	8006d88 <_printf_i+0x110>
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d10b      	bne.n	8006dba <_printf_i+0x142>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	07df      	lsls	r7, r3, #31
 8006da6:	d508      	bpl.n	8006dba <_printf_i+0x142>
 8006da8:	6923      	ldr	r3, [r4, #16]
 8006daa:	6861      	ldr	r1, [r4, #4]
 8006dac:	4299      	cmp	r1, r3
 8006dae:	bfde      	ittt	le
 8006db0:	2330      	movle	r3, #48	@ 0x30
 8006db2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006db6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dba:	1b92      	subs	r2, r2, r6
 8006dbc:	6122      	str	r2, [r4, #16]
 8006dbe:	f8cd a000 	str.w	sl, [sp]
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	aa03      	add	r2, sp, #12
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4640      	mov	r0, r8
 8006dca:	f7ff fee7 	bl	8006b9c <_printf_common>
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d14a      	bne.n	8006e68 <_printf_i+0x1f0>
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd6:	b004      	add	sp, #16
 8006dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	f043 0320 	orr.w	r3, r3, #32
 8006de2:	6023      	str	r3, [r4, #0]
 8006de4:	4832      	ldr	r0, [pc, #200]	@ (8006eb0 <_printf_i+0x238>)
 8006de6:	2778      	movs	r7, #120	@ 0x78
 8006de8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	6831      	ldr	r1, [r6, #0]
 8006df0:	061f      	lsls	r7, r3, #24
 8006df2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006df6:	d402      	bmi.n	8006dfe <_printf_i+0x186>
 8006df8:	065f      	lsls	r7, r3, #25
 8006dfa:	bf48      	it	mi
 8006dfc:	b2ad      	uxthmi	r5, r5
 8006dfe:	6031      	str	r1, [r6, #0]
 8006e00:	07d9      	lsls	r1, r3, #31
 8006e02:	bf44      	itt	mi
 8006e04:	f043 0320 	orrmi.w	r3, r3, #32
 8006e08:	6023      	strmi	r3, [r4, #0]
 8006e0a:	b11d      	cbz	r5, 8006e14 <_printf_i+0x19c>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	e7ad      	b.n	8006d6c <_printf_i+0xf4>
 8006e10:	4826      	ldr	r0, [pc, #152]	@ (8006eac <_printf_i+0x234>)
 8006e12:	e7e9      	b.n	8006de8 <_printf_i+0x170>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	f023 0320 	bic.w	r3, r3, #32
 8006e1a:	6023      	str	r3, [r4, #0]
 8006e1c:	e7f6      	b.n	8006e0c <_printf_i+0x194>
 8006e1e:	4616      	mov	r6, r2
 8006e20:	e7bd      	b.n	8006d9e <_printf_i+0x126>
 8006e22:	6833      	ldr	r3, [r6, #0]
 8006e24:	6825      	ldr	r5, [r4, #0]
 8006e26:	6961      	ldr	r1, [r4, #20]
 8006e28:	1d18      	adds	r0, r3, #4
 8006e2a:	6030      	str	r0, [r6, #0]
 8006e2c:	062e      	lsls	r6, r5, #24
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	d501      	bpl.n	8006e36 <_printf_i+0x1be>
 8006e32:	6019      	str	r1, [r3, #0]
 8006e34:	e002      	b.n	8006e3c <_printf_i+0x1c4>
 8006e36:	0668      	lsls	r0, r5, #25
 8006e38:	d5fb      	bpl.n	8006e32 <_printf_i+0x1ba>
 8006e3a:	8019      	strh	r1, [r3, #0]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	6123      	str	r3, [r4, #16]
 8006e40:	4616      	mov	r6, r2
 8006e42:	e7bc      	b.n	8006dbe <_printf_i+0x146>
 8006e44:	6833      	ldr	r3, [r6, #0]
 8006e46:	1d1a      	adds	r2, r3, #4
 8006e48:	6032      	str	r2, [r6, #0]
 8006e4a:	681e      	ldr	r6, [r3, #0]
 8006e4c:	6862      	ldr	r2, [r4, #4]
 8006e4e:	2100      	movs	r1, #0
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7f9 f9dd 	bl	8000210 <memchr>
 8006e56:	b108      	cbz	r0, 8006e5c <_printf_i+0x1e4>
 8006e58:	1b80      	subs	r0, r0, r6
 8006e5a:	6060      	str	r0, [r4, #4]
 8006e5c:	6863      	ldr	r3, [r4, #4]
 8006e5e:	6123      	str	r3, [r4, #16]
 8006e60:	2300      	movs	r3, #0
 8006e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e66:	e7aa      	b.n	8006dbe <_printf_i+0x146>
 8006e68:	6923      	ldr	r3, [r4, #16]
 8006e6a:	4632      	mov	r2, r6
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	4640      	mov	r0, r8
 8006e70:	47d0      	blx	sl
 8006e72:	3001      	adds	r0, #1
 8006e74:	d0ad      	beq.n	8006dd2 <_printf_i+0x15a>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	079b      	lsls	r3, r3, #30
 8006e7a:	d413      	bmi.n	8006ea4 <_printf_i+0x22c>
 8006e7c:	68e0      	ldr	r0, [r4, #12]
 8006e7e:	9b03      	ldr	r3, [sp, #12]
 8006e80:	4298      	cmp	r0, r3
 8006e82:	bfb8      	it	lt
 8006e84:	4618      	movlt	r0, r3
 8006e86:	e7a6      	b.n	8006dd6 <_printf_i+0x15e>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	4640      	mov	r0, r8
 8006e90:	47d0      	blx	sl
 8006e92:	3001      	adds	r0, #1
 8006e94:	d09d      	beq.n	8006dd2 <_printf_i+0x15a>
 8006e96:	3501      	adds	r5, #1
 8006e98:	68e3      	ldr	r3, [r4, #12]
 8006e9a:	9903      	ldr	r1, [sp, #12]
 8006e9c:	1a5b      	subs	r3, r3, r1
 8006e9e:	42ab      	cmp	r3, r5
 8006ea0:	dcf2      	bgt.n	8006e88 <_printf_i+0x210>
 8006ea2:	e7eb      	b.n	8006e7c <_printf_i+0x204>
 8006ea4:	2500      	movs	r5, #0
 8006ea6:	f104 0619 	add.w	r6, r4, #25
 8006eaa:	e7f5      	b.n	8006e98 <_printf_i+0x220>
 8006eac:	0800aebb 	.word	0x0800aebb
 8006eb0:	0800aecc 	.word	0x0800aecc

08006eb4 <_scanf_float>:
 8006eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb8:	b087      	sub	sp, #28
 8006eba:	4691      	mov	r9, r2
 8006ebc:	9303      	str	r3, [sp, #12]
 8006ebe:	688b      	ldr	r3, [r1, #8]
 8006ec0:	1e5a      	subs	r2, r3, #1
 8006ec2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006ec6:	bf81      	itttt	hi
 8006ec8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ecc:	eb03 0b05 	addhi.w	fp, r3, r5
 8006ed0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006ed4:	608b      	strhi	r3, [r1, #8]
 8006ed6:	680b      	ldr	r3, [r1, #0]
 8006ed8:	460a      	mov	r2, r1
 8006eda:	f04f 0500 	mov.w	r5, #0
 8006ede:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006ee2:	f842 3b1c 	str.w	r3, [r2], #28
 8006ee6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006eea:	4680      	mov	r8, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	bf98      	it	ls
 8006ef0:	f04f 0b00 	movls.w	fp, #0
 8006ef4:	9201      	str	r2, [sp, #4]
 8006ef6:	4616      	mov	r6, r2
 8006ef8:	46aa      	mov	sl, r5
 8006efa:	462f      	mov	r7, r5
 8006efc:	9502      	str	r5, [sp, #8]
 8006efe:	68a2      	ldr	r2, [r4, #8]
 8006f00:	b15a      	cbz	r2, 8006f1a <_scanf_float+0x66>
 8006f02:	f8d9 3000 	ldr.w	r3, [r9]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f0a:	d863      	bhi.n	8006fd4 <_scanf_float+0x120>
 8006f0c:	2b40      	cmp	r3, #64	@ 0x40
 8006f0e:	d83b      	bhi.n	8006f88 <_scanf_float+0xd4>
 8006f10:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006f14:	b2c8      	uxtb	r0, r1
 8006f16:	280e      	cmp	r0, #14
 8006f18:	d939      	bls.n	8006f8e <_scanf_float+0xda>
 8006f1a:	b11f      	cbz	r7, 8006f24 <_scanf_float+0x70>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f22:	6023      	str	r3, [r4, #0]
 8006f24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f28:	f1ba 0f01 	cmp.w	sl, #1
 8006f2c:	f200 8114 	bhi.w	8007158 <_scanf_float+0x2a4>
 8006f30:	9b01      	ldr	r3, [sp, #4]
 8006f32:	429e      	cmp	r6, r3
 8006f34:	f200 8105 	bhi.w	8007142 <_scanf_float+0x28e>
 8006f38:	2001      	movs	r0, #1
 8006f3a:	b007      	add	sp, #28
 8006f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f40:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006f44:	2a0d      	cmp	r2, #13
 8006f46:	d8e8      	bhi.n	8006f1a <_scanf_float+0x66>
 8006f48:	a101      	add	r1, pc, #4	@ (adr r1, 8006f50 <_scanf_float+0x9c>)
 8006f4a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08007099 	.word	0x08007099
 8006f54:	08006f1b 	.word	0x08006f1b
 8006f58:	08006f1b 	.word	0x08006f1b
 8006f5c:	08006f1b 	.word	0x08006f1b
 8006f60:	080070f5 	.word	0x080070f5
 8006f64:	080070cf 	.word	0x080070cf
 8006f68:	08006f1b 	.word	0x08006f1b
 8006f6c:	08006f1b 	.word	0x08006f1b
 8006f70:	080070a7 	.word	0x080070a7
 8006f74:	08006f1b 	.word	0x08006f1b
 8006f78:	08006f1b 	.word	0x08006f1b
 8006f7c:	08006f1b 	.word	0x08006f1b
 8006f80:	08006f1b 	.word	0x08006f1b
 8006f84:	08007063 	.word	0x08007063
 8006f88:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006f8c:	e7da      	b.n	8006f44 <_scanf_float+0x90>
 8006f8e:	290e      	cmp	r1, #14
 8006f90:	d8c3      	bhi.n	8006f1a <_scanf_float+0x66>
 8006f92:	a001      	add	r0, pc, #4	@ (adr r0, 8006f98 <_scanf_float+0xe4>)
 8006f94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f98:	08007053 	.word	0x08007053
 8006f9c:	08006f1b 	.word	0x08006f1b
 8006fa0:	08007053 	.word	0x08007053
 8006fa4:	080070e3 	.word	0x080070e3
 8006fa8:	08006f1b 	.word	0x08006f1b
 8006fac:	08006ff5 	.word	0x08006ff5
 8006fb0:	08007039 	.word	0x08007039
 8006fb4:	08007039 	.word	0x08007039
 8006fb8:	08007039 	.word	0x08007039
 8006fbc:	08007039 	.word	0x08007039
 8006fc0:	08007039 	.word	0x08007039
 8006fc4:	08007039 	.word	0x08007039
 8006fc8:	08007039 	.word	0x08007039
 8006fcc:	08007039 	.word	0x08007039
 8006fd0:	08007039 	.word	0x08007039
 8006fd4:	2b6e      	cmp	r3, #110	@ 0x6e
 8006fd6:	d809      	bhi.n	8006fec <_scanf_float+0x138>
 8006fd8:	2b60      	cmp	r3, #96	@ 0x60
 8006fda:	d8b1      	bhi.n	8006f40 <_scanf_float+0x8c>
 8006fdc:	2b54      	cmp	r3, #84	@ 0x54
 8006fde:	d07b      	beq.n	80070d8 <_scanf_float+0x224>
 8006fe0:	2b59      	cmp	r3, #89	@ 0x59
 8006fe2:	d19a      	bne.n	8006f1a <_scanf_float+0x66>
 8006fe4:	2d07      	cmp	r5, #7
 8006fe6:	d198      	bne.n	8006f1a <_scanf_float+0x66>
 8006fe8:	2508      	movs	r5, #8
 8006fea:	e02f      	b.n	800704c <_scanf_float+0x198>
 8006fec:	2b74      	cmp	r3, #116	@ 0x74
 8006fee:	d073      	beq.n	80070d8 <_scanf_float+0x224>
 8006ff0:	2b79      	cmp	r3, #121	@ 0x79
 8006ff2:	e7f6      	b.n	8006fe2 <_scanf_float+0x12e>
 8006ff4:	6821      	ldr	r1, [r4, #0]
 8006ff6:	05c8      	lsls	r0, r1, #23
 8006ff8:	d51e      	bpl.n	8007038 <_scanf_float+0x184>
 8006ffa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006ffe:	6021      	str	r1, [r4, #0]
 8007000:	3701      	adds	r7, #1
 8007002:	f1bb 0f00 	cmp.w	fp, #0
 8007006:	d003      	beq.n	8007010 <_scanf_float+0x15c>
 8007008:	3201      	adds	r2, #1
 800700a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800700e:	60a2      	str	r2, [r4, #8]
 8007010:	68a3      	ldr	r3, [r4, #8]
 8007012:	3b01      	subs	r3, #1
 8007014:	60a3      	str	r3, [r4, #8]
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	3301      	adds	r3, #1
 800701a:	6123      	str	r3, [r4, #16]
 800701c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007020:	3b01      	subs	r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	f8c9 3004 	str.w	r3, [r9, #4]
 8007028:	f340 8082 	ble.w	8007130 <_scanf_float+0x27c>
 800702c:	f8d9 3000 	ldr.w	r3, [r9]
 8007030:	3301      	adds	r3, #1
 8007032:	f8c9 3000 	str.w	r3, [r9]
 8007036:	e762      	b.n	8006efe <_scanf_float+0x4a>
 8007038:	eb1a 0105 	adds.w	r1, sl, r5
 800703c:	f47f af6d 	bne.w	8006f1a <_scanf_float+0x66>
 8007040:	6822      	ldr	r2, [r4, #0]
 8007042:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007046:	6022      	str	r2, [r4, #0]
 8007048:	460d      	mov	r5, r1
 800704a:	468a      	mov	sl, r1
 800704c:	f806 3b01 	strb.w	r3, [r6], #1
 8007050:	e7de      	b.n	8007010 <_scanf_float+0x15c>
 8007052:	6822      	ldr	r2, [r4, #0]
 8007054:	0610      	lsls	r0, r2, #24
 8007056:	f57f af60 	bpl.w	8006f1a <_scanf_float+0x66>
 800705a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800705e:	6022      	str	r2, [r4, #0]
 8007060:	e7f4      	b.n	800704c <_scanf_float+0x198>
 8007062:	f1ba 0f00 	cmp.w	sl, #0
 8007066:	d10c      	bne.n	8007082 <_scanf_float+0x1ce>
 8007068:	b977      	cbnz	r7, 8007088 <_scanf_float+0x1d4>
 800706a:	6822      	ldr	r2, [r4, #0]
 800706c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007070:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007074:	d108      	bne.n	8007088 <_scanf_float+0x1d4>
 8007076:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800707a:	6022      	str	r2, [r4, #0]
 800707c:	f04f 0a01 	mov.w	sl, #1
 8007080:	e7e4      	b.n	800704c <_scanf_float+0x198>
 8007082:	f1ba 0f02 	cmp.w	sl, #2
 8007086:	d050      	beq.n	800712a <_scanf_float+0x276>
 8007088:	2d01      	cmp	r5, #1
 800708a:	d002      	beq.n	8007092 <_scanf_float+0x1de>
 800708c:	2d04      	cmp	r5, #4
 800708e:	f47f af44 	bne.w	8006f1a <_scanf_float+0x66>
 8007092:	3501      	adds	r5, #1
 8007094:	b2ed      	uxtb	r5, r5
 8007096:	e7d9      	b.n	800704c <_scanf_float+0x198>
 8007098:	f1ba 0f01 	cmp.w	sl, #1
 800709c:	f47f af3d 	bne.w	8006f1a <_scanf_float+0x66>
 80070a0:	f04f 0a02 	mov.w	sl, #2
 80070a4:	e7d2      	b.n	800704c <_scanf_float+0x198>
 80070a6:	b975      	cbnz	r5, 80070c6 <_scanf_float+0x212>
 80070a8:	2f00      	cmp	r7, #0
 80070aa:	f47f af37 	bne.w	8006f1c <_scanf_float+0x68>
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80070b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80070b8:	f040 8103 	bne.w	80072c2 <_scanf_float+0x40e>
 80070bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80070c0:	6022      	str	r2, [r4, #0]
 80070c2:	2501      	movs	r5, #1
 80070c4:	e7c2      	b.n	800704c <_scanf_float+0x198>
 80070c6:	2d03      	cmp	r5, #3
 80070c8:	d0e3      	beq.n	8007092 <_scanf_float+0x1de>
 80070ca:	2d05      	cmp	r5, #5
 80070cc:	e7df      	b.n	800708e <_scanf_float+0x1da>
 80070ce:	2d02      	cmp	r5, #2
 80070d0:	f47f af23 	bne.w	8006f1a <_scanf_float+0x66>
 80070d4:	2503      	movs	r5, #3
 80070d6:	e7b9      	b.n	800704c <_scanf_float+0x198>
 80070d8:	2d06      	cmp	r5, #6
 80070da:	f47f af1e 	bne.w	8006f1a <_scanf_float+0x66>
 80070de:	2507      	movs	r5, #7
 80070e0:	e7b4      	b.n	800704c <_scanf_float+0x198>
 80070e2:	6822      	ldr	r2, [r4, #0]
 80070e4:	0591      	lsls	r1, r2, #22
 80070e6:	f57f af18 	bpl.w	8006f1a <_scanf_float+0x66>
 80070ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80070ee:	6022      	str	r2, [r4, #0]
 80070f0:	9702      	str	r7, [sp, #8]
 80070f2:	e7ab      	b.n	800704c <_scanf_float+0x198>
 80070f4:	6822      	ldr	r2, [r4, #0]
 80070f6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80070fa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80070fe:	d005      	beq.n	800710c <_scanf_float+0x258>
 8007100:	0550      	lsls	r0, r2, #21
 8007102:	f57f af0a 	bpl.w	8006f1a <_scanf_float+0x66>
 8007106:	2f00      	cmp	r7, #0
 8007108:	f000 80db 	beq.w	80072c2 <_scanf_float+0x40e>
 800710c:	0591      	lsls	r1, r2, #22
 800710e:	bf58      	it	pl
 8007110:	9902      	ldrpl	r1, [sp, #8]
 8007112:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007116:	bf58      	it	pl
 8007118:	1a79      	subpl	r1, r7, r1
 800711a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800711e:	bf58      	it	pl
 8007120:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007124:	6022      	str	r2, [r4, #0]
 8007126:	2700      	movs	r7, #0
 8007128:	e790      	b.n	800704c <_scanf_float+0x198>
 800712a:	f04f 0a03 	mov.w	sl, #3
 800712e:	e78d      	b.n	800704c <_scanf_float+0x198>
 8007130:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007134:	4649      	mov	r1, r9
 8007136:	4640      	mov	r0, r8
 8007138:	4798      	blx	r3
 800713a:	2800      	cmp	r0, #0
 800713c:	f43f aedf 	beq.w	8006efe <_scanf_float+0x4a>
 8007140:	e6eb      	b.n	8006f1a <_scanf_float+0x66>
 8007142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007146:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800714a:	464a      	mov	r2, r9
 800714c:	4640      	mov	r0, r8
 800714e:	4798      	blx	r3
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	3b01      	subs	r3, #1
 8007154:	6123      	str	r3, [r4, #16]
 8007156:	e6eb      	b.n	8006f30 <_scanf_float+0x7c>
 8007158:	1e6b      	subs	r3, r5, #1
 800715a:	2b06      	cmp	r3, #6
 800715c:	d824      	bhi.n	80071a8 <_scanf_float+0x2f4>
 800715e:	2d02      	cmp	r5, #2
 8007160:	d836      	bhi.n	80071d0 <_scanf_float+0x31c>
 8007162:	9b01      	ldr	r3, [sp, #4]
 8007164:	429e      	cmp	r6, r3
 8007166:	f67f aee7 	bls.w	8006f38 <_scanf_float+0x84>
 800716a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800716e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007172:	464a      	mov	r2, r9
 8007174:	4640      	mov	r0, r8
 8007176:	4798      	blx	r3
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	3b01      	subs	r3, #1
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	e7f0      	b.n	8007162 <_scanf_float+0x2ae>
 8007180:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007184:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007188:	464a      	mov	r2, r9
 800718a:	4640      	mov	r0, r8
 800718c:	4798      	blx	r3
 800718e:	6923      	ldr	r3, [r4, #16]
 8007190:	3b01      	subs	r3, #1
 8007192:	6123      	str	r3, [r4, #16]
 8007194:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007198:	fa5f fa8a 	uxtb.w	sl, sl
 800719c:	f1ba 0f02 	cmp.w	sl, #2
 80071a0:	d1ee      	bne.n	8007180 <_scanf_float+0x2cc>
 80071a2:	3d03      	subs	r5, #3
 80071a4:	b2ed      	uxtb	r5, r5
 80071a6:	1b76      	subs	r6, r6, r5
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	05da      	lsls	r2, r3, #23
 80071ac:	d530      	bpl.n	8007210 <_scanf_float+0x35c>
 80071ae:	055b      	lsls	r3, r3, #21
 80071b0:	d511      	bpl.n	80071d6 <_scanf_float+0x322>
 80071b2:	9b01      	ldr	r3, [sp, #4]
 80071b4:	429e      	cmp	r6, r3
 80071b6:	f67f aebf 	bls.w	8006f38 <_scanf_float+0x84>
 80071ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071c2:	464a      	mov	r2, r9
 80071c4:	4640      	mov	r0, r8
 80071c6:	4798      	blx	r3
 80071c8:	6923      	ldr	r3, [r4, #16]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	e7f0      	b.n	80071b2 <_scanf_float+0x2fe>
 80071d0:	46aa      	mov	sl, r5
 80071d2:	46b3      	mov	fp, r6
 80071d4:	e7de      	b.n	8007194 <_scanf_float+0x2e0>
 80071d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	2965      	cmp	r1, #101	@ 0x65
 80071de:	f103 33ff 	add.w	r3, r3, #4294967295
 80071e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80071e6:	6123      	str	r3, [r4, #16]
 80071e8:	d00c      	beq.n	8007204 <_scanf_float+0x350>
 80071ea:	2945      	cmp	r1, #69	@ 0x45
 80071ec:	d00a      	beq.n	8007204 <_scanf_float+0x350>
 80071ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071f2:	464a      	mov	r2, r9
 80071f4:	4640      	mov	r0, r8
 80071f6:	4798      	blx	r3
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80071fe:	3b01      	subs	r3, #1
 8007200:	1eb5      	subs	r5, r6, #2
 8007202:	6123      	str	r3, [r4, #16]
 8007204:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007208:	464a      	mov	r2, r9
 800720a:	4640      	mov	r0, r8
 800720c:	4798      	blx	r3
 800720e:	462e      	mov	r6, r5
 8007210:	6822      	ldr	r2, [r4, #0]
 8007212:	f012 0210 	ands.w	r2, r2, #16
 8007216:	d001      	beq.n	800721c <_scanf_float+0x368>
 8007218:	2000      	movs	r0, #0
 800721a:	e68e      	b.n	8006f3a <_scanf_float+0x86>
 800721c:	7032      	strb	r2, [r6, #0]
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007228:	d125      	bne.n	8007276 <_scanf_float+0x3c2>
 800722a:	9b02      	ldr	r3, [sp, #8]
 800722c:	429f      	cmp	r7, r3
 800722e:	d00a      	beq.n	8007246 <_scanf_float+0x392>
 8007230:	1bda      	subs	r2, r3, r7
 8007232:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007236:	429e      	cmp	r6, r3
 8007238:	bf28      	it	cs
 800723a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800723e:	4922      	ldr	r1, [pc, #136]	@ (80072c8 <_scanf_float+0x414>)
 8007240:	4630      	mov	r0, r6
 8007242:	f000 f977 	bl	8007534 <siprintf>
 8007246:	9901      	ldr	r1, [sp, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	4640      	mov	r0, r8
 800724c:	f002 fcf8 	bl	8009c40 <_strtod_r>
 8007250:	9b03      	ldr	r3, [sp, #12]
 8007252:	6821      	ldr	r1, [r4, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f011 0f02 	tst.w	r1, #2
 800725a:	ec57 6b10 	vmov	r6, r7, d0
 800725e:	f103 0204 	add.w	r2, r3, #4
 8007262:	d015      	beq.n	8007290 <_scanf_float+0x3dc>
 8007264:	9903      	ldr	r1, [sp, #12]
 8007266:	600a      	str	r2, [r1, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	e9c3 6700 	strd	r6, r7, [r3]
 800726e:	68e3      	ldr	r3, [r4, #12]
 8007270:	3301      	adds	r3, #1
 8007272:	60e3      	str	r3, [r4, #12]
 8007274:	e7d0      	b.n	8007218 <_scanf_float+0x364>
 8007276:	9b04      	ldr	r3, [sp, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0e4      	beq.n	8007246 <_scanf_float+0x392>
 800727c:	9905      	ldr	r1, [sp, #20]
 800727e:	230a      	movs	r3, #10
 8007280:	3101      	adds	r1, #1
 8007282:	4640      	mov	r0, r8
 8007284:	f7ff f9be 	bl	8006604 <_strtol_r>
 8007288:	9b04      	ldr	r3, [sp, #16]
 800728a:	9e05      	ldr	r6, [sp, #20]
 800728c:	1ac2      	subs	r2, r0, r3
 800728e:	e7d0      	b.n	8007232 <_scanf_float+0x37e>
 8007290:	f011 0f04 	tst.w	r1, #4
 8007294:	9903      	ldr	r1, [sp, #12]
 8007296:	600a      	str	r2, [r1, #0]
 8007298:	d1e6      	bne.n	8007268 <_scanf_float+0x3b4>
 800729a:	681d      	ldr	r5, [r3, #0]
 800729c:	4632      	mov	r2, r6
 800729e:	463b      	mov	r3, r7
 80072a0:	4630      	mov	r0, r6
 80072a2:	4639      	mov	r1, r7
 80072a4:	f7f9 fc62 	bl	8000b6c <__aeabi_dcmpun>
 80072a8:	b128      	cbz	r0, 80072b6 <_scanf_float+0x402>
 80072aa:	4808      	ldr	r0, [pc, #32]	@ (80072cc <_scanf_float+0x418>)
 80072ac:	f000 fabc 	bl	8007828 <nanf>
 80072b0:	ed85 0a00 	vstr	s0, [r5]
 80072b4:	e7db      	b.n	800726e <_scanf_float+0x3ba>
 80072b6:	4630      	mov	r0, r6
 80072b8:	4639      	mov	r1, r7
 80072ba:	f7f9 fcb5 	bl	8000c28 <__aeabi_d2f>
 80072be:	6028      	str	r0, [r5, #0]
 80072c0:	e7d5      	b.n	800726e <_scanf_float+0x3ba>
 80072c2:	2700      	movs	r7, #0
 80072c4:	e62e      	b.n	8006f24 <_scanf_float+0x70>
 80072c6:	bf00      	nop
 80072c8:	0800aedd 	.word	0x0800aedd
 80072cc:	0800b01e 	.word	0x0800b01e

080072d0 <std>:
 80072d0:	2300      	movs	r3, #0
 80072d2:	b510      	push	{r4, lr}
 80072d4:	4604      	mov	r4, r0
 80072d6:	e9c0 3300 	strd	r3, r3, [r0]
 80072da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072de:	6083      	str	r3, [r0, #8]
 80072e0:	8181      	strh	r1, [r0, #12]
 80072e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80072e4:	81c2      	strh	r2, [r0, #14]
 80072e6:	6183      	str	r3, [r0, #24]
 80072e8:	4619      	mov	r1, r3
 80072ea:	2208      	movs	r2, #8
 80072ec:	305c      	adds	r0, #92	@ 0x5c
 80072ee:	f000 fa1b 	bl	8007728 <memset>
 80072f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007328 <std+0x58>)
 80072f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80072f6:	4b0d      	ldr	r3, [pc, #52]	@ (800732c <std+0x5c>)
 80072f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007330 <std+0x60>)
 80072fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <std+0x64>)
 8007300:	6323      	str	r3, [r4, #48]	@ 0x30
 8007302:	4b0d      	ldr	r3, [pc, #52]	@ (8007338 <std+0x68>)
 8007304:	6224      	str	r4, [r4, #32]
 8007306:	429c      	cmp	r4, r3
 8007308:	d006      	beq.n	8007318 <std+0x48>
 800730a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800730e:	4294      	cmp	r4, r2
 8007310:	d002      	beq.n	8007318 <std+0x48>
 8007312:	33d0      	adds	r3, #208	@ 0xd0
 8007314:	429c      	cmp	r4, r3
 8007316:	d105      	bne.n	8007324 <std+0x54>
 8007318:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800731c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007320:	f000 ba7e 	b.w	8007820 <__retarget_lock_init_recursive>
 8007324:	bd10      	pop	{r4, pc}
 8007326:	bf00      	nop
 8007328:	08007579 	.word	0x08007579
 800732c:	0800759b 	.word	0x0800759b
 8007330:	080075d3 	.word	0x080075d3
 8007334:	080075f7 	.word	0x080075f7
 8007338:	20000500 	.word	0x20000500

0800733c <stdio_exit_handler>:
 800733c:	4a02      	ldr	r2, [pc, #8]	@ (8007348 <stdio_exit_handler+0xc>)
 800733e:	4903      	ldr	r1, [pc, #12]	@ (800734c <stdio_exit_handler+0x10>)
 8007340:	4803      	ldr	r0, [pc, #12]	@ (8007350 <stdio_exit_handler+0x14>)
 8007342:	f000 b869 	b.w	8007418 <_fwalk_sglue>
 8007346:	bf00      	nop
 8007348:	2000003c 	.word	0x2000003c
 800734c:	0800a289 	.word	0x0800a289
 8007350:	2000004c 	.word	0x2000004c

08007354 <cleanup_stdio>:
 8007354:	6841      	ldr	r1, [r0, #4]
 8007356:	4b0c      	ldr	r3, [pc, #48]	@ (8007388 <cleanup_stdio+0x34>)
 8007358:	4299      	cmp	r1, r3
 800735a:	b510      	push	{r4, lr}
 800735c:	4604      	mov	r4, r0
 800735e:	d001      	beq.n	8007364 <cleanup_stdio+0x10>
 8007360:	f002 ff92 	bl	800a288 <_fflush_r>
 8007364:	68a1      	ldr	r1, [r4, #8]
 8007366:	4b09      	ldr	r3, [pc, #36]	@ (800738c <cleanup_stdio+0x38>)
 8007368:	4299      	cmp	r1, r3
 800736a:	d002      	beq.n	8007372 <cleanup_stdio+0x1e>
 800736c:	4620      	mov	r0, r4
 800736e:	f002 ff8b 	bl	800a288 <_fflush_r>
 8007372:	68e1      	ldr	r1, [r4, #12]
 8007374:	4b06      	ldr	r3, [pc, #24]	@ (8007390 <cleanup_stdio+0x3c>)
 8007376:	4299      	cmp	r1, r3
 8007378:	d004      	beq.n	8007384 <cleanup_stdio+0x30>
 800737a:	4620      	mov	r0, r4
 800737c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007380:	f002 bf82 	b.w	800a288 <_fflush_r>
 8007384:	bd10      	pop	{r4, pc}
 8007386:	bf00      	nop
 8007388:	20000500 	.word	0x20000500
 800738c:	20000568 	.word	0x20000568
 8007390:	200005d0 	.word	0x200005d0

08007394 <global_stdio_init.part.0>:
 8007394:	b510      	push	{r4, lr}
 8007396:	4b0b      	ldr	r3, [pc, #44]	@ (80073c4 <global_stdio_init.part.0+0x30>)
 8007398:	4c0b      	ldr	r4, [pc, #44]	@ (80073c8 <global_stdio_init.part.0+0x34>)
 800739a:	4a0c      	ldr	r2, [pc, #48]	@ (80073cc <global_stdio_init.part.0+0x38>)
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	4620      	mov	r0, r4
 80073a0:	2200      	movs	r2, #0
 80073a2:	2104      	movs	r1, #4
 80073a4:	f7ff ff94 	bl	80072d0 <std>
 80073a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073ac:	2201      	movs	r2, #1
 80073ae:	2109      	movs	r1, #9
 80073b0:	f7ff ff8e 	bl	80072d0 <std>
 80073b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073b8:	2202      	movs	r2, #2
 80073ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073be:	2112      	movs	r1, #18
 80073c0:	f7ff bf86 	b.w	80072d0 <std>
 80073c4:	20000638 	.word	0x20000638
 80073c8:	20000500 	.word	0x20000500
 80073cc:	0800733d 	.word	0x0800733d

080073d0 <__sfp_lock_acquire>:
 80073d0:	4801      	ldr	r0, [pc, #4]	@ (80073d8 <__sfp_lock_acquire+0x8>)
 80073d2:	f000 ba26 	b.w	8007822 <__retarget_lock_acquire_recursive>
 80073d6:	bf00      	nop
 80073d8:	20000641 	.word	0x20000641

080073dc <__sfp_lock_release>:
 80073dc:	4801      	ldr	r0, [pc, #4]	@ (80073e4 <__sfp_lock_release+0x8>)
 80073de:	f000 ba21 	b.w	8007824 <__retarget_lock_release_recursive>
 80073e2:	bf00      	nop
 80073e4:	20000641 	.word	0x20000641

080073e8 <__sinit>:
 80073e8:	b510      	push	{r4, lr}
 80073ea:	4604      	mov	r4, r0
 80073ec:	f7ff fff0 	bl	80073d0 <__sfp_lock_acquire>
 80073f0:	6a23      	ldr	r3, [r4, #32]
 80073f2:	b11b      	cbz	r3, 80073fc <__sinit+0x14>
 80073f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f8:	f7ff bff0 	b.w	80073dc <__sfp_lock_release>
 80073fc:	4b04      	ldr	r3, [pc, #16]	@ (8007410 <__sinit+0x28>)
 80073fe:	6223      	str	r3, [r4, #32]
 8007400:	4b04      	ldr	r3, [pc, #16]	@ (8007414 <__sinit+0x2c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f5      	bne.n	80073f4 <__sinit+0xc>
 8007408:	f7ff ffc4 	bl	8007394 <global_stdio_init.part.0>
 800740c:	e7f2      	b.n	80073f4 <__sinit+0xc>
 800740e:	bf00      	nop
 8007410:	08007355 	.word	0x08007355
 8007414:	20000638 	.word	0x20000638

08007418 <_fwalk_sglue>:
 8007418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800741c:	4607      	mov	r7, r0
 800741e:	4688      	mov	r8, r1
 8007420:	4614      	mov	r4, r2
 8007422:	2600      	movs	r6, #0
 8007424:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007428:	f1b9 0901 	subs.w	r9, r9, #1
 800742c:	d505      	bpl.n	800743a <_fwalk_sglue+0x22>
 800742e:	6824      	ldr	r4, [r4, #0]
 8007430:	2c00      	cmp	r4, #0
 8007432:	d1f7      	bne.n	8007424 <_fwalk_sglue+0xc>
 8007434:	4630      	mov	r0, r6
 8007436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743a:	89ab      	ldrh	r3, [r5, #12]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d907      	bls.n	8007450 <_fwalk_sglue+0x38>
 8007440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007444:	3301      	adds	r3, #1
 8007446:	d003      	beq.n	8007450 <_fwalk_sglue+0x38>
 8007448:	4629      	mov	r1, r5
 800744a:	4638      	mov	r0, r7
 800744c:	47c0      	blx	r8
 800744e:	4306      	orrs	r6, r0
 8007450:	3568      	adds	r5, #104	@ 0x68
 8007452:	e7e9      	b.n	8007428 <_fwalk_sglue+0x10>

08007454 <iprintf>:
 8007454:	b40f      	push	{r0, r1, r2, r3}
 8007456:	b507      	push	{r0, r1, r2, lr}
 8007458:	4906      	ldr	r1, [pc, #24]	@ (8007474 <iprintf+0x20>)
 800745a:	ab04      	add	r3, sp, #16
 800745c:	6808      	ldr	r0, [r1, #0]
 800745e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007462:	6881      	ldr	r1, [r0, #8]
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	f002 fd73 	bl	8009f50 <_vfiprintf_r>
 800746a:	b003      	add	sp, #12
 800746c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007470:	b004      	add	sp, #16
 8007472:	4770      	bx	lr
 8007474:	20000048 	.word	0x20000048

08007478 <_puts_r>:
 8007478:	6a03      	ldr	r3, [r0, #32]
 800747a:	b570      	push	{r4, r5, r6, lr}
 800747c:	6884      	ldr	r4, [r0, #8]
 800747e:	4605      	mov	r5, r0
 8007480:	460e      	mov	r6, r1
 8007482:	b90b      	cbnz	r3, 8007488 <_puts_r+0x10>
 8007484:	f7ff ffb0 	bl	80073e8 <__sinit>
 8007488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800748a:	07db      	lsls	r3, r3, #31
 800748c:	d405      	bmi.n	800749a <_puts_r+0x22>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	0598      	lsls	r0, r3, #22
 8007492:	d402      	bmi.n	800749a <_puts_r+0x22>
 8007494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007496:	f000 f9c4 	bl	8007822 <__retarget_lock_acquire_recursive>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	0719      	lsls	r1, r3, #28
 800749e:	d502      	bpl.n	80074a6 <_puts_r+0x2e>
 80074a0:	6923      	ldr	r3, [r4, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d135      	bne.n	8007512 <_puts_r+0x9a>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 f8e7 	bl	800767c <__swsetup_r>
 80074ae:	b380      	cbz	r0, 8007512 <_puts_r+0x9a>
 80074b0:	f04f 35ff 	mov.w	r5, #4294967295
 80074b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074b6:	07da      	lsls	r2, r3, #31
 80074b8:	d405      	bmi.n	80074c6 <_puts_r+0x4e>
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	059b      	lsls	r3, r3, #22
 80074be:	d402      	bmi.n	80074c6 <_puts_r+0x4e>
 80074c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074c2:	f000 f9af 	bl	8007824 <__retarget_lock_release_recursive>
 80074c6:	4628      	mov	r0, r5
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	da04      	bge.n	80074d8 <_puts_r+0x60>
 80074ce:	69a2      	ldr	r2, [r4, #24]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	dc17      	bgt.n	8007504 <_puts_r+0x8c>
 80074d4:	290a      	cmp	r1, #10
 80074d6:	d015      	beq.n	8007504 <_puts_r+0x8c>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	6022      	str	r2, [r4, #0]
 80074de:	7019      	strb	r1, [r3, #0]
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074e6:	3b01      	subs	r3, #1
 80074e8:	60a3      	str	r3, [r4, #8]
 80074ea:	2900      	cmp	r1, #0
 80074ec:	d1ed      	bne.n	80074ca <_puts_r+0x52>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da11      	bge.n	8007516 <_puts_r+0x9e>
 80074f2:	4622      	mov	r2, r4
 80074f4:	210a      	movs	r1, #10
 80074f6:	4628      	mov	r0, r5
 80074f8:	f000 f881 	bl	80075fe <__swbuf_r>
 80074fc:	3001      	adds	r0, #1
 80074fe:	d0d7      	beq.n	80074b0 <_puts_r+0x38>
 8007500:	250a      	movs	r5, #10
 8007502:	e7d7      	b.n	80074b4 <_puts_r+0x3c>
 8007504:	4622      	mov	r2, r4
 8007506:	4628      	mov	r0, r5
 8007508:	f000 f879 	bl	80075fe <__swbuf_r>
 800750c:	3001      	adds	r0, #1
 800750e:	d1e7      	bne.n	80074e0 <_puts_r+0x68>
 8007510:	e7ce      	b.n	80074b0 <_puts_r+0x38>
 8007512:	3e01      	subs	r6, #1
 8007514:	e7e4      	b.n	80074e0 <_puts_r+0x68>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	6022      	str	r2, [r4, #0]
 800751c:	220a      	movs	r2, #10
 800751e:	701a      	strb	r2, [r3, #0]
 8007520:	e7ee      	b.n	8007500 <_puts_r+0x88>
	...

08007524 <puts>:
 8007524:	4b02      	ldr	r3, [pc, #8]	@ (8007530 <puts+0xc>)
 8007526:	4601      	mov	r1, r0
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	f7ff bfa5 	b.w	8007478 <_puts_r>
 800752e:	bf00      	nop
 8007530:	20000048 	.word	0x20000048

08007534 <siprintf>:
 8007534:	b40e      	push	{r1, r2, r3}
 8007536:	b510      	push	{r4, lr}
 8007538:	b09d      	sub	sp, #116	@ 0x74
 800753a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800753c:	9002      	str	r0, [sp, #8]
 800753e:	9006      	str	r0, [sp, #24]
 8007540:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007544:	480a      	ldr	r0, [pc, #40]	@ (8007570 <siprintf+0x3c>)
 8007546:	9107      	str	r1, [sp, #28]
 8007548:	9104      	str	r1, [sp, #16]
 800754a:	490a      	ldr	r1, [pc, #40]	@ (8007574 <siprintf+0x40>)
 800754c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007550:	9105      	str	r1, [sp, #20]
 8007552:	2400      	movs	r4, #0
 8007554:	a902      	add	r1, sp, #8
 8007556:	6800      	ldr	r0, [r0, #0]
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800755c:	f002 fbd2 	bl	8009d04 <_svfiprintf_r>
 8007560:	9b02      	ldr	r3, [sp, #8]
 8007562:	701c      	strb	r4, [r3, #0]
 8007564:	b01d      	add	sp, #116	@ 0x74
 8007566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756a:	b003      	add	sp, #12
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	20000048 	.word	0x20000048
 8007574:	ffff0208 	.word	0xffff0208

08007578 <__sread>:
 8007578:	b510      	push	{r4, lr}
 800757a:	460c      	mov	r4, r1
 800757c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007580:	f000 f900 	bl	8007784 <_read_r>
 8007584:	2800      	cmp	r0, #0
 8007586:	bfab      	itete	ge
 8007588:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800758a:	89a3      	ldrhlt	r3, [r4, #12]
 800758c:	181b      	addge	r3, r3, r0
 800758e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007592:	bfac      	ite	ge
 8007594:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007596:	81a3      	strhlt	r3, [r4, #12]
 8007598:	bd10      	pop	{r4, pc}

0800759a <__swrite>:
 800759a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800759e:	461f      	mov	r7, r3
 80075a0:	898b      	ldrh	r3, [r1, #12]
 80075a2:	05db      	lsls	r3, r3, #23
 80075a4:	4605      	mov	r5, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	4616      	mov	r6, r2
 80075aa:	d505      	bpl.n	80075b8 <__swrite+0x1e>
 80075ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b0:	2302      	movs	r3, #2
 80075b2:	2200      	movs	r2, #0
 80075b4:	f000 f8d4 	bl	8007760 <_lseek_r>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075c2:	81a3      	strh	r3, [r4, #12]
 80075c4:	4632      	mov	r2, r6
 80075c6:	463b      	mov	r3, r7
 80075c8:	4628      	mov	r0, r5
 80075ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ce:	f000 b8eb 	b.w	80077a8 <_write_r>

080075d2 <__sseek>:
 80075d2:	b510      	push	{r4, lr}
 80075d4:	460c      	mov	r4, r1
 80075d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075da:	f000 f8c1 	bl	8007760 <_lseek_r>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	bf15      	itete	ne
 80075e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80075e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80075ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80075ee:	81a3      	strheq	r3, [r4, #12]
 80075f0:	bf18      	it	ne
 80075f2:	81a3      	strhne	r3, [r4, #12]
 80075f4:	bd10      	pop	{r4, pc}

080075f6 <__sclose>:
 80075f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fa:	f000 b8a1 	b.w	8007740 <_close_r>

080075fe <__swbuf_r>:
 80075fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007600:	460e      	mov	r6, r1
 8007602:	4614      	mov	r4, r2
 8007604:	4605      	mov	r5, r0
 8007606:	b118      	cbz	r0, 8007610 <__swbuf_r+0x12>
 8007608:	6a03      	ldr	r3, [r0, #32]
 800760a:	b90b      	cbnz	r3, 8007610 <__swbuf_r+0x12>
 800760c:	f7ff feec 	bl	80073e8 <__sinit>
 8007610:	69a3      	ldr	r3, [r4, #24]
 8007612:	60a3      	str	r3, [r4, #8]
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	071a      	lsls	r2, r3, #28
 8007618:	d501      	bpl.n	800761e <__swbuf_r+0x20>
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	b943      	cbnz	r3, 8007630 <__swbuf_r+0x32>
 800761e:	4621      	mov	r1, r4
 8007620:	4628      	mov	r0, r5
 8007622:	f000 f82b 	bl	800767c <__swsetup_r>
 8007626:	b118      	cbz	r0, 8007630 <__swbuf_r+0x32>
 8007628:	f04f 37ff 	mov.w	r7, #4294967295
 800762c:	4638      	mov	r0, r7
 800762e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	6922      	ldr	r2, [r4, #16]
 8007634:	1a98      	subs	r0, r3, r2
 8007636:	6963      	ldr	r3, [r4, #20]
 8007638:	b2f6      	uxtb	r6, r6
 800763a:	4283      	cmp	r3, r0
 800763c:	4637      	mov	r7, r6
 800763e:	dc05      	bgt.n	800764c <__swbuf_r+0x4e>
 8007640:	4621      	mov	r1, r4
 8007642:	4628      	mov	r0, r5
 8007644:	f002 fe20 	bl	800a288 <_fflush_r>
 8007648:	2800      	cmp	r0, #0
 800764a:	d1ed      	bne.n	8007628 <__swbuf_r+0x2a>
 800764c:	68a3      	ldr	r3, [r4, #8]
 800764e:	3b01      	subs	r3, #1
 8007650:	60a3      	str	r3, [r4, #8]
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	6022      	str	r2, [r4, #0]
 8007658:	701e      	strb	r6, [r3, #0]
 800765a:	6962      	ldr	r2, [r4, #20]
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	429a      	cmp	r2, r3
 8007660:	d004      	beq.n	800766c <__swbuf_r+0x6e>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	07db      	lsls	r3, r3, #31
 8007666:	d5e1      	bpl.n	800762c <__swbuf_r+0x2e>
 8007668:	2e0a      	cmp	r6, #10
 800766a:	d1df      	bne.n	800762c <__swbuf_r+0x2e>
 800766c:	4621      	mov	r1, r4
 800766e:	4628      	mov	r0, r5
 8007670:	f002 fe0a 	bl	800a288 <_fflush_r>
 8007674:	2800      	cmp	r0, #0
 8007676:	d0d9      	beq.n	800762c <__swbuf_r+0x2e>
 8007678:	e7d6      	b.n	8007628 <__swbuf_r+0x2a>
	...

0800767c <__swsetup_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4b29      	ldr	r3, [pc, #164]	@ (8007724 <__swsetup_r+0xa8>)
 8007680:	4605      	mov	r5, r0
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	460c      	mov	r4, r1
 8007686:	b118      	cbz	r0, 8007690 <__swsetup_r+0x14>
 8007688:	6a03      	ldr	r3, [r0, #32]
 800768a:	b90b      	cbnz	r3, 8007690 <__swsetup_r+0x14>
 800768c:	f7ff feac 	bl	80073e8 <__sinit>
 8007690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007694:	0719      	lsls	r1, r3, #28
 8007696:	d422      	bmi.n	80076de <__swsetup_r+0x62>
 8007698:	06da      	lsls	r2, r3, #27
 800769a:	d407      	bmi.n	80076ac <__swsetup_r+0x30>
 800769c:	2209      	movs	r2, #9
 800769e:	602a      	str	r2, [r5, #0]
 80076a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	f04f 30ff 	mov.w	r0, #4294967295
 80076aa:	e033      	b.n	8007714 <__swsetup_r+0x98>
 80076ac:	0758      	lsls	r0, r3, #29
 80076ae:	d512      	bpl.n	80076d6 <__swsetup_r+0x5a>
 80076b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076b2:	b141      	cbz	r1, 80076c6 <__swsetup_r+0x4a>
 80076b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076b8:	4299      	cmp	r1, r3
 80076ba:	d002      	beq.n	80076c2 <__swsetup_r+0x46>
 80076bc:	4628      	mov	r0, r5
 80076be:	f000 ff13 	bl	80084e8 <_free_r>
 80076c2:	2300      	movs	r3, #0
 80076c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	2300      	movs	r3, #0
 80076d0:	6063      	str	r3, [r4, #4]
 80076d2:	6923      	ldr	r3, [r4, #16]
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	89a3      	ldrh	r3, [r4, #12]
 80076d8:	f043 0308 	orr.w	r3, r3, #8
 80076dc:	81a3      	strh	r3, [r4, #12]
 80076de:	6923      	ldr	r3, [r4, #16]
 80076e0:	b94b      	cbnz	r3, 80076f6 <__swsetup_r+0x7a>
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80076e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076ec:	d003      	beq.n	80076f6 <__swsetup_r+0x7a>
 80076ee:	4621      	mov	r1, r4
 80076f0:	4628      	mov	r0, r5
 80076f2:	f002 fe17 	bl	800a324 <__smakebuf_r>
 80076f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076fa:	f013 0201 	ands.w	r2, r3, #1
 80076fe:	d00a      	beq.n	8007716 <__swsetup_r+0x9a>
 8007700:	2200      	movs	r2, #0
 8007702:	60a2      	str	r2, [r4, #8]
 8007704:	6962      	ldr	r2, [r4, #20]
 8007706:	4252      	negs	r2, r2
 8007708:	61a2      	str	r2, [r4, #24]
 800770a:	6922      	ldr	r2, [r4, #16]
 800770c:	b942      	cbnz	r2, 8007720 <__swsetup_r+0xa4>
 800770e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007712:	d1c5      	bne.n	80076a0 <__swsetup_r+0x24>
 8007714:	bd38      	pop	{r3, r4, r5, pc}
 8007716:	0799      	lsls	r1, r3, #30
 8007718:	bf58      	it	pl
 800771a:	6962      	ldrpl	r2, [r4, #20]
 800771c:	60a2      	str	r2, [r4, #8]
 800771e:	e7f4      	b.n	800770a <__swsetup_r+0x8e>
 8007720:	2000      	movs	r0, #0
 8007722:	e7f7      	b.n	8007714 <__swsetup_r+0x98>
 8007724:	20000048 	.word	0x20000048

08007728 <memset>:
 8007728:	4402      	add	r2, r0
 800772a:	4603      	mov	r3, r0
 800772c:	4293      	cmp	r3, r2
 800772e:	d100      	bne.n	8007732 <memset+0xa>
 8007730:	4770      	bx	lr
 8007732:	f803 1b01 	strb.w	r1, [r3], #1
 8007736:	e7f9      	b.n	800772c <memset+0x4>

08007738 <_localeconv_r>:
 8007738:	4800      	ldr	r0, [pc, #0]	@ (800773c <_localeconv_r+0x4>)
 800773a:	4770      	bx	lr
 800773c:	20000188 	.word	0x20000188

08007740 <_close_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4d06      	ldr	r5, [pc, #24]	@ (800775c <_close_r+0x1c>)
 8007744:	2300      	movs	r3, #0
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	602b      	str	r3, [r5, #0]
 800774c:	f7fa fc50 	bl	8001ff0 <_close>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_close_r+0x1a>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	b103      	cbz	r3, 800775a <_close_r+0x1a>
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	2000063c 	.word	0x2000063c

08007760 <_lseek_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4d07      	ldr	r5, [pc, #28]	@ (8007780 <_lseek_r+0x20>)
 8007764:	4604      	mov	r4, r0
 8007766:	4608      	mov	r0, r1
 8007768:	4611      	mov	r1, r2
 800776a:	2200      	movs	r2, #0
 800776c:	602a      	str	r2, [r5, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	f7fa fc65 	bl	800203e <_lseek>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_lseek_r+0x1e>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_lseek_r+0x1e>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	2000063c 	.word	0x2000063c

08007784 <_read_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4d07      	ldr	r5, [pc, #28]	@ (80077a4 <_read_r+0x20>)
 8007788:	4604      	mov	r4, r0
 800778a:	4608      	mov	r0, r1
 800778c:	4611      	mov	r1, r2
 800778e:	2200      	movs	r2, #0
 8007790:	602a      	str	r2, [r5, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	f7fa fbf3 	bl	8001f7e <_read>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_read_r+0x1e>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_read_r+0x1e>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	2000063c 	.word	0x2000063c

080077a8 <_write_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4d07      	ldr	r5, [pc, #28]	@ (80077c8 <_write_r+0x20>)
 80077ac:	4604      	mov	r4, r0
 80077ae:	4608      	mov	r0, r1
 80077b0:	4611      	mov	r1, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	602a      	str	r2, [r5, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f7fa fbfe 	bl	8001fb8 <_write>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d102      	bne.n	80077c6 <_write_r+0x1e>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	b103      	cbz	r3, 80077c6 <_write_r+0x1e>
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	2000063c 	.word	0x2000063c

080077cc <__errno>:
 80077cc:	4b01      	ldr	r3, [pc, #4]	@ (80077d4 <__errno+0x8>)
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	20000048 	.word	0x20000048

080077d8 <__libc_init_array>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	4d0d      	ldr	r5, [pc, #52]	@ (8007810 <__libc_init_array+0x38>)
 80077dc:	4c0d      	ldr	r4, [pc, #52]	@ (8007814 <__libc_init_array+0x3c>)
 80077de:	1b64      	subs	r4, r4, r5
 80077e0:	10a4      	asrs	r4, r4, #2
 80077e2:	2600      	movs	r6, #0
 80077e4:	42a6      	cmp	r6, r4
 80077e6:	d109      	bne.n	80077fc <__libc_init_array+0x24>
 80077e8:	4d0b      	ldr	r5, [pc, #44]	@ (8007818 <__libc_init_array+0x40>)
 80077ea:	4c0c      	ldr	r4, [pc, #48]	@ (800781c <__libc_init_array+0x44>)
 80077ec:	f003 fa6a 	bl	800acc4 <_init>
 80077f0:	1b64      	subs	r4, r4, r5
 80077f2:	10a4      	asrs	r4, r4, #2
 80077f4:	2600      	movs	r6, #0
 80077f6:	42a6      	cmp	r6, r4
 80077f8:	d105      	bne.n	8007806 <__libc_init_array+0x2e>
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007800:	4798      	blx	r3
 8007802:	3601      	adds	r6, #1
 8007804:	e7ee      	b.n	80077e4 <__libc_init_array+0xc>
 8007806:	f855 3b04 	ldr.w	r3, [r5], #4
 800780a:	4798      	blx	r3
 800780c:	3601      	adds	r6, #1
 800780e:	e7f2      	b.n	80077f6 <__libc_init_array+0x1e>
 8007810:	0800b1d8 	.word	0x0800b1d8
 8007814:	0800b1d8 	.word	0x0800b1d8
 8007818:	0800b1d8 	.word	0x0800b1d8
 800781c:	0800b1dc 	.word	0x0800b1dc

08007820 <__retarget_lock_init_recursive>:
 8007820:	4770      	bx	lr

08007822 <__retarget_lock_acquire_recursive>:
 8007822:	4770      	bx	lr

08007824 <__retarget_lock_release_recursive>:
 8007824:	4770      	bx	lr
	...

08007828 <nanf>:
 8007828:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007830 <nanf+0x8>
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	7fc00000 	.word	0x7fc00000

08007834 <quorem>:
 8007834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007838:	6903      	ldr	r3, [r0, #16]
 800783a:	690c      	ldr	r4, [r1, #16]
 800783c:	42a3      	cmp	r3, r4
 800783e:	4607      	mov	r7, r0
 8007840:	db7e      	blt.n	8007940 <quorem+0x10c>
 8007842:	3c01      	subs	r4, #1
 8007844:	f101 0814 	add.w	r8, r1, #20
 8007848:	00a3      	lsls	r3, r4, #2
 800784a:	f100 0514 	add.w	r5, r0, #20
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800785a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800785e:	3301      	adds	r3, #1
 8007860:	429a      	cmp	r2, r3
 8007862:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007866:	fbb2 f6f3 	udiv	r6, r2, r3
 800786a:	d32e      	bcc.n	80078ca <quorem+0x96>
 800786c:	f04f 0a00 	mov.w	sl, #0
 8007870:	46c4      	mov	ip, r8
 8007872:	46ae      	mov	lr, r5
 8007874:	46d3      	mov	fp, sl
 8007876:	f85c 3b04 	ldr.w	r3, [ip], #4
 800787a:	b298      	uxth	r0, r3
 800787c:	fb06 a000 	mla	r0, r6, r0, sl
 8007880:	0c02      	lsrs	r2, r0, #16
 8007882:	0c1b      	lsrs	r3, r3, #16
 8007884:	fb06 2303 	mla	r3, r6, r3, r2
 8007888:	f8de 2000 	ldr.w	r2, [lr]
 800788c:	b280      	uxth	r0, r0
 800788e:	b292      	uxth	r2, r2
 8007890:	1a12      	subs	r2, r2, r0
 8007892:	445a      	add	r2, fp
 8007894:	f8de 0000 	ldr.w	r0, [lr]
 8007898:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800789c:	b29b      	uxth	r3, r3
 800789e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80078a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80078a6:	b292      	uxth	r2, r2
 80078a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80078ac:	45e1      	cmp	r9, ip
 80078ae:	f84e 2b04 	str.w	r2, [lr], #4
 80078b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80078b6:	d2de      	bcs.n	8007876 <quorem+0x42>
 80078b8:	9b00      	ldr	r3, [sp, #0]
 80078ba:	58eb      	ldr	r3, [r5, r3]
 80078bc:	b92b      	cbnz	r3, 80078ca <quorem+0x96>
 80078be:	9b01      	ldr	r3, [sp, #4]
 80078c0:	3b04      	subs	r3, #4
 80078c2:	429d      	cmp	r5, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	d32f      	bcc.n	8007928 <quorem+0xf4>
 80078c8:	613c      	str	r4, [r7, #16]
 80078ca:	4638      	mov	r0, r7
 80078cc:	f001 f9c8 	bl	8008c60 <__mcmp>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	db25      	blt.n	8007920 <quorem+0xec>
 80078d4:	4629      	mov	r1, r5
 80078d6:	2000      	movs	r0, #0
 80078d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80078dc:	f8d1 c000 	ldr.w	ip, [r1]
 80078e0:	fa1f fe82 	uxth.w	lr, r2
 80078e4:	fa1f f38c 	uxth.w	r3, ip
 80078e8:	eba3 030e 	sub.w	r3, r3, lr
 80078ec:	4403      	add	r3, r0
 80078ee:	0c12      	lsrs	r2, r2, #16
 80078f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80078f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078fe:	45c1      	cmp	r9, r8
 8007900:	f841 3b04 	str.w	r3, [r1], #4
 8007904:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007908:	d2e6      	bcs.n	80078d8 <quorem+0xa4>
 800790a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800790e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007912:	b922      	cbnz	r2, 800791e <quorem+0xea>
 8007914:	3b04      	subs	r3, #4
 8007916:	429d      	cmp	r5, r3
 8007918:	461a      	mov	r2, r3
 800791a:	d30b      	bcc.n	8007934 <quorem+0x100>
 800791c:	613c      	str	r4, [r7, #16]
 800791e:	3601      	adds	r6, #1
 8007920:	4630      	mov	r0, r6
 8007922:	b003      	add	sp, #12
 8007924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007928:	6812      	ldr	r2, [r2, #0]
 800792a:	3b04      	subs	r3, #4
 800792c:	2a00      	cmp	r2, #0
 800792e:	d1cb      	bne.n	80078c8 <quorem+0x94>
 8007930:	3c01      	subs	r4, #1
 8007932:	e7c6      	b.n	80078c2 <quorem+0x8e>
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	3b04      	subs	r3, #4
 8007938:	2a00      	cmp	r2, #0
 800793a:	d1ef      	bne.n	800791c <quorem+0xe8>
 800793c:	3c01      	subs	r4, #1
 800793e:	e7ea      	b.n	8007916 <quorem+0xe2>
 8007940:	2000      	movs	r0, #0
 8007942:	e7ee      	b.n	8007922 <quorem+0xee>
 8007944:	0000      	movs	r0, r0
	...

08007948 <_dtoa_r>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	69c7      	ldr	r7, [r0, #28]
 800794e:	b097      	sub	sp, #92	@ 0x5c
 8007950:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007954:	ec55 4b10 	vmov	r4, r5, d0
 8007958:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800795a:	9107      	str	r1, [sp, #28]
 800795c:	4681      	mov	r9, r0
 800795e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007960:	9311      	str	r3, [sp, #68]	@ 0x44
 8007962:	b97f      	cbnz	r7, 8007984 <_dtoa_r+0x3c>
 8007964:	2010      	movs	r0, #16
 8007966:	f000 fe09 	bl	800857c <malloc>
 800796a:	4602      	mov	r2, r0
 800796c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007970:	b920      	cbnz	r0, 800797c <_dtoa_r+0x34>
 8007972:	4ba9      	ldr	r3, [pc, #676]	@ (8007c18 <_dtoa_r+0x2d0>)
 8007974:	21ef      	movs	r1, #239	@ 0xef
 8007976:	48a9      	ldr	r0, [pc, #676]	@ (8007c1c <_dtoa_r+0x2d4>)
 8007978:	f002 fd86 	bl	800a488 <__assert_func>
 800797c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007980:	6007      	str	r7, [r0, #0]
 8007982:	60c7      	str	r7, [r0, #12]
 8007984:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007988:	6819      	ldr	r1, [r3, #0]
 800798a:	b159      	cbz	r1, 80079a4 <_dtoa_r+0x5c>
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	604a      	str	r2, [r1, #4]
 8007990:	2301      	movs	r3, #1
 8007992:	4093      	lsls	r3, r2
 8007994:	608b      	str	r3, [r1, #8]
 8007996:	4648      	mov	r0, r9
 8007998:	f000 fee6 	bl	8008768 <_Bfree>
 800799c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	1e2b      	subs	r3, r5, #0
 80079a6:	bfb9      	ittee	lt
 80079a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80079ac:	9305      	strlt	r3, [sp, #20]
 80079ae:	2300      	movge	r3, #0
 80079b0:	6033      	strge	r3, [r6, #0]
 80079b2:	9f05      	ldr	r7, [sp, #20]
 80079b4:	4b9a      	ldr	r3, [pc, #616]	@ (8007c20 <_dtoa_r+0x2d8>)
 80079b6:	bfbc      	itt	lt
 80079b8:	2201      	movlt	r2, #1
 80079ba:	6032      	strlt	r2, [r6, #0]
 80079bc:	43bb      	bics	r3, r7
 80079be:	d112      	bne.n	80079e6 <_dtoa_r+0x9e>
 80079c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80079c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079cc:	4323      	orrs	r3, r4
 80079ce:	f000 855a 	beq.w	8008486 <_dtoa_r+0xb3e>
 80079d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007c34 <_dtoa_r+0x2ec>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 855c 	beq.w	8008496 <_dtoa_r+0xb4e>
 80079de:	f10a 0303 	add.w	r3, sl, #3
 80079e2:	f000 bd56 	b.w	8008492 <_dtoa_r+0xb4a>
 80079e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80079ea:	2200      	movs	r2, #0
 80079ec:	ec51 0b17 	vmov	r0, r1, d7
 80079f0:	2300      	movs	r3, #0
 80079f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80079f6:	f7f9 f887 	bl	8000b08 <__aeabi_dcmpeq>
 80079fa:	4680      	mov	r8, r0
 80079fc:	b158      	cbz	r0, 8007a16 <_dtoa_r+0xce>
 80079fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a00:	2301      	movs	r3, #1
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a06:	b113      	cbz	r3, 8007a0e <_dtoa_r+0xc6>
 8007a08:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007a0a:	4b86      	ldr	r3, [pc, #536]	@ (8007c24 <_dtoa_r+0x2dc>)
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007c38 <_dtoa_r+0x2f0>
 8007a12:	f000 bd40 	b.w	8008496 <_dtoa_r+0xb4e>
 8007a16:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007a1a:	aa14      	add	r2, sp, #80	@ 0x50
 8007a1c:	a915      	add	r1, sp, #84	@ 0x54
 8007a1e:	4648      	mov	r0, r9
 8007a20:	f001 fa3e 	bl	8008ea0 <__d2b>
 8007a24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007a28:	9002      	str	r0, [sp, #8]
 8007a2a:	2e00      	cmp	r6, #0
 8007a2c:	d078      	beq.n	8007b20 <_dtoa_r+0x1d8>
 8007a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a30:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a48:	4619      	mov	r1, r3
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4b76      	ldr	r3, [pc, #472]	@ (8007c28 <_dtoa_r+0x2e0>)
 8007a4e:	f7f8 fc3b 	bl	80002c8 <__aeabi_dsub>
 8007a52:	a36b      	add	r3, pc, #428	@ (adr r3, 8007c00 <_dtoa_r+0x2b8>)
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f7f8 fdee 	bl	8000638 <__aeabi_dmul>
 8007a5c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007c08 <_dtoa_r+0x2c0>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f7f8 fc33 	bl	80002cc <__adddf3>
 8007a66:	4604      	mov	r4, r0
 8007a68:	4630      	mov	r0, r6
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	f7f8 fd7a 	bl	8000564 <__aeabi_i2d>
 8007a70:	a367      	add	r3, pc, #412	@ (adr r3, 8007c10 <_dtoa_r+0x2c8>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	f7f8 fddf 	bl	8000638 <__aeabi_dmul>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4620      	mov	r0, r4
 8007a80:	4629      	mov	r1, r5
 8007a82:	f7f8 fc23 	bl	80002cc <__adddf3>
 8007a86:	4604      	mov	r4, r0
 8007a88:	460d      	mov	r5, r1
 8007a8a:	f7f9 f885 	bl	8000b98 <__aeabi_d2iz>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	4607      	mov	r7, r0
 8007a92:	2300      	movs	r3, #0
 8007a94:	4620      	mov	r0, r4
 8007a96:	4629      	mov	r1, r5
 8007a98:	f7f9 f840 	bl	8000b1c <__aeabi_dcmplt>
 8007a9c:	b140      	cbz	r0, 8007ab0 <_dtoa_r+0x168>
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	f7f8 fd60 	bl	8000564 <__aeabi_i2d>
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	462b      	mov	r3, r5
 8007aa8:	f7f9 f82e 	bl	8000b08 <__aeabi_dcmpeq>
 8007aac:	b900      	cbnz	r0, 8007ab0 <_dtoa_r+0x168>
 8007aae:	3f01      	subs	r7, #1
 8007ab0:	2f16      	cmp	r7, #22
 8007ab2:	d852      	bhi.n	8007b5a <_dtoa_r+0x212>
 8007ab4:	4b5d      	ldr	r3, [pc, #372]	@ (8007c2c <_dtoa_r+0x2e4>)
 8007ab6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ac2:	f7f9 f82b 	bl	8000b1c <__aeabi_dcmplt>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d049      	beq.n	8007b5e <_dtoa_r+0x216>
 8007aca:	3f01      	subs	r7, #1
 8007acc:	2300      	movs	r3, #0
 8007ace:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ad0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ad2:	1b9b      	subs	r3, r3, r6
 8007ad4:	1e5a      	subs	r2, r3, #1
 8007ad6:	bf45      	ittet	mi
 8007ad8:	f1c3 0301 	rsbmi	r3, r3, #1
 8007adc:	9300      	strmi	r3, [sp, #0]
 8007ade:	2300      	movpl	r3, #0
 8007ae0:	2300      	movmi	r3, #0
 8007ae2:	9206      	str	r2, [sp, #24]
 8007ae4:	bf54      	ite	pl
 8007ae6:	9300      	strpl	r3, [sp, #0]
 8007ae8:	9306      	strmi	r3, [sp, #24]
 8007aea:	2f00      	cmp	r7, #0
 8007aec:	db39      	blt.n	8007b62 <_dtoa_r+0x21a>
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007af2:	443b      	add	r3, r7
 8007af4:	9306      	str	r3, [sp, #24]
 8007af6:	2300      	movs	r3, #0
 8007af8:	9308      	str	r3, [sp, #32]
 8007afa:	9b07      	ldr	r3, [sp, #28]
 8007afc:	2b09      	cmp	r3, #9
 8007afe:	d863      	bhi.n	8007bc8 <_dtoa_r+0x280>
 8007b00:	2b05      	cmp	r3, #5
 8007b02:	bfc4      	itt	gt
 8007b04:	3b04      	subgt	r3, #4
 8007b06:	9307      	strgt	r3, [sp, #28]
 8007b08:	9b07      	ldr	r3, [sp, #28]
 8007b0a:	f1a3 0302 	sub.w	r3, r3, #2
 8007b0e:	bfcc      	ite	gt
 8007b10:	2400      	movgt	r4, #0
 8007b12:	2401      	movle	r4, #1
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d863      	bhi.n	8007be0 <_dtoa_r+0x298>
 8007b18:	e8df f003 	tbb	[pc, r3]
 8007b1c:	2b375452 	.word	0x2b375452
 8007b20:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007b24:	441e      	add	r6, r3
 8007b26:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	bfc1      	itttt	gt
 8007b2e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b32:	409f      	lslgt	r7, r3
 8007b34:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b38:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b3c:	bfd6      	itet	le
 8007b3e:	f1c3 0320 	rsble	r3, r3, #32
 8007b42:	ea47 0003 	orrgt.w	r0, r7, r3
 8007b46:	fa04 f003 	lslle.w	r0, r4, r3
 8007b4a:	f7f8 fcfb 	bl	8000544 <__aeabi_ui2d>
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b54:	3e01      	subs	r6, #1
 8007b56:	9212      	str	r2, [sp, #72]	@ 0x48
 8007b58:	e776      	b.n	8007a48 <_dtoa_r+0x100>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e7b7      	b.n	8007ace <_dtoa_r+0x186>
 8007b5e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007b60:	e7b6      	b.n	8007ad0 <_dtoa_r+0x188>
 8007b62:	9b00      	ldr	r3, [sp, #0]
 8007b64:	1bdb      	subs	r3, r3, r7
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	427b      	negs	r3, r7
 8007b6a:	9308      	str	r3, [sp, #32]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007b70:	e7c3      	b.n	8007afa <_dtoa_r+0x1b2>
 8007b72:	2301      	movs	r3, #1
 8007b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b78:	eb07 0b03 	add.w	fp, r7, r3
 8007b7c:	f10b 0301 	add.w	r3, fp, #1
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	9303      	str	r3, [sp, #12]
 8007b84:	bfb8      	it	lt
 8007b86:	2301      	movlt	r3, #1
 8007b88:	e006      	b.n	8007b98 <_dtoa_r+0x250>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	dd28      	ble.n	8007be6 <_dtoa_r+0x29e>
 8007b94:	469b      	mov	fp, r3
 8007b96:	9303      	str	r3, [sp, #12]
 8007b98:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	f102 0514 	add.w	r5, r2, #20
 8007ba4:	429d      	cmp	r5, r3
 8007ba6:	d926      	bls.n	8007bf6 <_dtoa_r+0x2ae>
 8007ba8:	6041      	str	r1, [r0, #4]
 8007baa:	4648      	mov	r0, r9
 8007bac:	f000 fd9c 	bl	80086e8 <_Balloc>
 8007bb0:	4682      	mov	sl, r0
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d142      	bne.n	8007c3c <_dtoa_r+0x2f4>
 8007bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8007c30 <_dtoa_r+0x2e8>)
 8007bb8:	4602      	mov	r2, r0
 8007bba:	f240 11af 	movw	r1, #431	@ 0x1af
 8007bbe:	e6da      	b.n	8007976 <_dtoa_r+0x2e>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	e7e3      	b.n	8007b8c <_dtoa_r+0x244>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e7d5      	b.n	8007b74 <_dtoa_r+0x22c>
 8007bc8:	2401      	movs	r4, #1
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9307      	str	r3, [sp, #28]
 8007bce:	9409      	str	r4, [sp, #36]	@ 0x24
 8007bd0:	f04f 3bff 	mov.w	fp, #4294967295
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8cd b00c 	str.w	fp, [sp, #12]
 8007bda:	2312      	movs	r3, #18
 8007bdc:	920c      	str	r2, [sp, #48]	@ 0x30
 8007bde:	e7db      	b.n	8007b98 <_dtoa_r+0x250>
 8007be0:	2301      	movs	r3, #1
 8007be2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007be4:	e7f4      	b.n	8007bd0 <_dtoa_r+0x288>
 8007be6:	f04f 0b01 	mov.w	fp, #1
 8007bea:	f8cd b00c 	str.w	fp, [sp, #12]
 8007bee:	465b      	mov	r3, fp
 8007bf0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007bf4:	e7d0      	b.n	8007b98 <_dtoa_r+0x250>
 8007bf6:	3101      	adds	r1, #1
 8007bf8:	0052      	lsls	r2, r2, #1
 8007bfa:	e7d1      	b.n	8007ba0 <_dtoa_r+0x258>
 8007bfc:	f3af 8000 	nop.w
 8007c00:	636f4361 	.word	0x636f4361
 8007c04:	3fd287a7 	.word	0x3fd287a7
 8007c08:	8b60c8b3 	.word	0x8b60c8b3
 8007c0c:	3fc68a28 	.word	0x3fc68a28
 8007c10:	509f79fb 	.word	0x509f79fb
 8007c14:	3fd34413 	.word	0x3fd34413
 8007c18:	0800aeef 	.word	0x0800aeef
 8007c1c:	0800af06 	.word	0x0800af06
 8007c20:	7ff00000 	.word	0x7ff00000
 8007c24:	0800aeba 	.word	0x0800aeba
 8007c28:	3ff80000 	.word	0x3ff80000
 8007c2c:	0800b0b8 	.word	0x0800b0b8
 8007c30:	0800af5e 	.word	0x0800af5e
 8007c34:	0800aeeb 	.word	0x0800aeeb
 8007c38:	0800aeb9 	.word	0x0800aeb9
 8007c3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c40:	6018      	str	r0, [r3, #0]
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	2b0e      	cmp	r3, #14
 8007c46:	f200 80a1 	bhi.w	8007d8c <_dtoa_r+0x444>
 8007c4a:	2c00      	cmp	r4, #0
 8007c4c:	f000 809e 	beq.w	8007d8c <_dtoa_r+0x444>
 8007c50:	2f00      	cmp	r7, #0
 8007c52:	dd33      	ble.n	8007cbc <_dtoa_r+0x374>
 8007c54:	4b9c      	ldr	r3, [pc, #624]	@ (8007ec8 <_dtoa_r+0x580>)
 8007c56:	f007 020f 	and.w	r2, r7, #15
 8007c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c5e:	ed93 7b00 	vldr	d7, [r3]
 8007c62:	05f8      	lsls	r0, r7, #23
 8007c64:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007c68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c6c:	d516      	bpl.n	8007c9c <_dtoa_r+0x354>
 8007c6e:	4b97      	ldr	r3, [pc, #604]	@ (8007ecc <_dtoa_r+0x584>)
 8007c70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c78:	f7f8 fe08 	bl	800088c <__aeabi_ddiv>
 8007c7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c80:	f004 040f 	and.w	r4, r4, #15
 8007c84:	2603      	movs	r6, #3
 8007c86:	4d91      	ldr	r5, [pc, #580]	@ (8007ecc <_dtoa_r+0x584>)
 8007c88:	b954      	cbnz	r4, 8007ca0 <_dtoa_r+0x358>
 8007c8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c92:	f7f8 fdfb 	bl	800088c <__aeabi_ddiv>
 8007c96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c9a:	e028      	b.n	8007cee <_dtoa_r+0x3a6>
 8007c9c:	2602      	movs	r6, #2
 8007c9e:	e7f2      	b.n	8007c86 <_dtoa_r+0x33e>
 8007ca0:	07e1      	lsls	r1, r4, #31
 8007ca2:	d508      	bpl.n	8007cb6 <_dtoa_r+0x36e>
 8007ca4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007ca8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cac:	f7f8 fcc4 	bl	8000638 <__aeabi_dmul>
 8007cb0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007cb4:	3601      	adds	r6, #1
 8007cb6:	1064      	asrs	r4, r4, #1
 8007cb8:	3508      	adds	r5, #8
 8007cba:	e7e5      	b.n	8007c88 <_dtoa_r+0x340>
 8007cbc:	f000 80af 	beq.w	8007e1e <_dtoa_r+0x4d6>
 8007cc0:	427c      	negs	r4, r7
 8007cc2:	4b81      	ldr	r3, [pc, #516]	@ (8007ec8 <_dtoa_r+0x580>)
 8007cc4:	4d81      	ldr	r5, [pc, #516]	@ (8007ecc <_dtoa_r+0x584>)
 8007cc6:	f004 020f 	and.w	r2, r4, #15
 8007cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007cd6:	f7f8 fcaf 	bl	8000638 <__aeabi_dmul>
 8007cda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cde:	1124      	asrs	r4, r4, #4
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	2602      	movs	r6, #2
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	f040 808f 	bne.w	8007e08 <_dtoa_r+0x4c0>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1d3      	bne.n	8007c96 <_dtoa_r+0x34e>
 8007cee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007cf0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 8094 	beq.w	8007e22 <_dtoa_r+0x4da>
 8007cfa:	4b75      	ldr	r3, [pc, #468]	@ (8007ed0 <_dtoa_r+0x588>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	f7f8 ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	f000 808b 	beq.w	8007e22 <_dtoa_r+0x4da>
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 8087 	beq.w	8007e22 <_dtoa_r+0x4da>
 8007d14:	f1bb 0f00 	cmp.w	fp, #0
 8007d18:	dd34      	ble.n	8007d84 <_dtoa_r+0x43c>
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	4b6d      	ldr	r3, [pc, #436]	@ (8007ed4 <_dtoa_r+0x58c>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	4629      	mov	r1, r5
 8007d22:	f7f8 fc89 	bl	8000638 <__aeabi_dmul>
 8007d26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d2a:	f107 38ff 	add.w	r8, r7, #4294967295
 8007d2e:	3601      	adds	r6, #1
 8007d30:	465c      	mov	r4, fp
 8007d32:	4630      	mov	r0, r6
 8007d34:	f7f8 fc16 	bl	8000564 <__aeabi_i2d>
 8007d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d3c:	f7f8 fc7c 	bl	8000638 <__aeabi_dmul>
 8007d40:	4b65      	ldr	r3, [pc, #404]	@ (8007ed8 <_dtoa_r+0x590>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	f7f8 fac2 	bl	80002cc <__adddf3>
 8007d48:	4605      	mov	r5, r0
 8007d4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d4e:	2c00      	cmp	r4, #0
 8007d50:	d16a      	bne.n	8007e28 <_dtoa_r+0x4e0>
 8007d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d56:	4b61      	ldr	r3, [pc, #388]	@ (8007edc <_dtoa_r+0x594>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f7f8 fab5 	bl	80002c8 <__aeabi_dsub>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d66:	462a      	mov	r2, r5
 8007d68:	4633      	mov	r3, r6
 8007d6a:	f7f8 fef5 	bl	8000b58 <__aeabi_dcmpgt>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f040 8298 	bne.w	80082a4 <_dtoa_r+0x95c>
 8007d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d78:	462a      	mov	r2, r5
 8007d7a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d7e:	f7f8 fecd 	bl	8000b1c <__aeabi_dcmplt>
 8007d82:	bb38      	cbnz	r0, 8007dd4 <_dtoa_r+0x48c>
 8007d84:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007d88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f2c0 8157 	blt.w	8008042 <_dtoa_r+0x6fa>
 8007d94:	2f0e      	cmp	r7, #14
 8007d96:	f300 8154 	bgt.w	8008042 <_dtoa_r+0x6fa>
 8007d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8007ec8 <_dtoa_r+0x580>)
 8007d9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007da0:	ed93 7b00 	vldr	d7, [r3]
 8007da4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	ed8d 7b00 	vstr	d7, [sp]
 8007dac:	f280 80e5 	bge.w	8007f7a <_dtoa_r+0x632>
 8007db0:	9b03      	ldr	r3, [sp, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f300 80e1 	bgt.w	8007f7a <_dtoa_r+0x632>
 8007db8:	d10c      	bne.n	8007dd4 <_dtoa_r+0x48c>
 8007dba:	4b48      	ldr	r3, [pc, #288]	@ (8007edc <_dtoa_r+0x594>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	ec51 0b17 	vmov	r0, r1, d7
 8007dc2:	f7f8 fc39 	bl	8000638 <__aeabi_dmul>
 8007dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dca:	f7f8 febb 	bl	8000b44 <__aeabi_dcmpge>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f000 8266 	beq.w	80082a0 <_dtoa_r+0x958>
 8007dd4:	2400      	movs	r4, #0
 8007dd6:	4625      	mov	r5, r4
 8007dd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007dda:	4656      	mov	r6, sl
 8007ddc:	ea6f 0803 	mvn.w	r8, r3
 8007de0:	2700      	movs	r7, #0
 8007de2:	4621      	mov	r1, r4
 8007de4:	4648      	mov	r0, r9
 8007de6:	f000 fcbf 	bl	8008768 <_Bfree>
 8007dea:	2d00      	cmp	r5, #0
 8007dec:	f000 80bd 	beq.w	8007f6a <_dtoa_r+0x622>
 8007df0:	b12f      	cbz	r7, 8007dfe <_dtoa_r+0x4b6>
 8007df2:	42af      	cmp	r7, r5
 8007df4:	d003      	beq.n	8007dfe <_dtoa_r+0x4b6>
 8007df6:	4639      	mov	r1, r7
 8007df8:	4648      	mov	r0, r9
 8007dfa:	f000 fcb5 	bl	8008768 <_Bfree>
 8007dfe:	4629      	mov	r1, r5
 8007e00:	4648      	mov	r0, r9
 8007e02:	f000 fcb1 	bl	8008768 <_Bfree>
 8007e06:	e0b0      	b.n	8007f6a <_dtoa_r+0x622>
 8007e08:	07e2      	lsls	r2, r4, #31
 8007e0a:	d505      	bpl.n	8007e18 <_dtoa_r+0x4d0>
 8007e0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e10:	f7f8 fc12 	bl	8000638 <__aeabi_dmul>
 8007e14:	3601      	adds	r6, #1
 8007e16:	2301      	movs	r3, #1
 8007e18:	1064      	asrs	r4, r4, #1
 8007e1a:	3508      	adds	r5, #8
 8007e1c:	e762      	b.n	8007ce4 <_dtoa_r+0x39c>
 8007e1e:	2602      	movs	r6, #2
 8007e20:	e765      	b.n	8007cee <_dtoa_r+0x3a6>
 8007e22:	9c03      	ldr	r4, [sp, #12]
 8007e24:	46b8      	mov	r8, r7
 8007e26:	e784      	b.n	8007d32 <_dtoa_r+0x3ea>
 8007e28:	4b27      	ldr	r3, [pc, #156]	@ (8007ec8 <_dtoa_r+0x580>)
 8007e2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e34:	4454      	add	r4, sl
 8007e36:	2900      	cmp	r1, #0
 8007e38:	d054      	beq.n	8007ee4 <_dtoa_r+0x59c>
 8007e3a:	4929      	ldr	r1, [pc, #164]	@ (8007ee0 <_dtoa_r+0x598>)
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	f7f8 fd25 	bl	800088c <__aeabi_ddiv>
 8007e42:	4633      	mov	r3, r6
 8007e44:	462a      	mov	r2, r5
 8007e46:	f7f8 fa3f 	bl	80002c8 <__aeabi_dsub>
 8007e4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007e4e:	4656      	mov	r6, sl
 8007e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e54:	f7f8 fea0 	bl	8000b98 <__aeabi_d2iz>
 8007e58:	4605      	mov	r5, r0
 8007e5a:	f7f8 fb83 	bl	8000564 <__aeabi_i2d>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e66:	f7f8 fa2f 	bl	80002c8 <__aeabi_dsub>
 8007e6a:	3530      	adds	r5, #48	@ 0x30
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e74:	f806 5b01 	strb.w	r5, [r6], #1
 8007e78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007e7c:	f7f8 fe4e 	bl	8000b1c <__aeabi_dcmplt>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d172      	bne.n	8007f6a <_dtoa_r+0x622>
 8007e84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e88:	4911      	ldr	r1, [pc, #68]	@ (8007ed0 <_dtoa_r+0x588>)
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	f7f8 fa1c 	bl	80002c8 <__aeabi_dsub>
 8007e90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007e94:	f7f8 fe42 	bl	8000b1c <__aeabi_dcmplt>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	f040 80b4 	bne.w	8008006 <_dtoa_r+0x6be>
 8007e9e:	42a6      	cmp	r6, r4
 8007ea0:	f43f af70 	beq.w	8007d84 <_dtoa_r+0x43c>
 8007ea4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed4 <_dtoa_r+0x58c>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f7f8 fbc4 	bl	8000638 <__aeabi_dmul>
 8007eb0:	4b08      	ldr	r3, [pc, #32]	@ (8007ed4 <_dtoa_r+0x58c>)
 8007eb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ebc:	f7f8 fbbc 	bl	8000638 <__aeabi_dmul>
 8007ec0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ec4:	e7c4      	b.n	8007e50 <_dtoa_r+0x508>
 8007ec6:	bf00      	nop
 8007ec8:	0800b0b8 	.word	0x0800b0b8
 8007ecc:	0800b090 	.word	0x0800b090
 8007ed0:	3ff00000 	.word	0x3ff00000
 8007ed4:	40240000 	.word	0x40240000
 8007ed8:	401c0000 	.word	0x401c0000
 8007edc:	40140000 	.word	0x40140000
 8007ee0:	3fe00000 	.word	0x3fe00000
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f7f8 fba6 	bl	8000638 <__aeabi_dmul>
 8007eec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ef0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007ef2:	4656      	mov	r6, sl
 8007ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ef8:	f7f8 fe4e 	bl	8000b98 <__aeabi_d2iz>
 8007efc:	4605      	mov	r5, r0
 8007efe:	f7f8 fb31 	bl	8000564 <__aeabi_i2d>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f0a:	f7f8 f9dd 	bl	80002c8 <__aeabi_dsub>
 8007f0e:	3530      	adds	r5, #48	@ 0x30
 8007f10:	f806 5b01 	strb.w	r5, [r6], #1
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	42a6      	cmp	r6, r4
 8007f1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	d124      	bne.n	8007f6e <_dtoa_r+0x626>
 8007f24:	4baf      	ldr	r3, [pc, #700]	@ (80081e4 <_dtoa_r+0x89c>)
 8007f26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f2a:	f7f8 f9cf 	bl	80002cc <__adddf3>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f36:	f7f8 fe0f 	bl	8000b58 <__aeabi_dcmpgt>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d163      	bne.n	8008006 <_dtoa_r+0x6be>
 8007f3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f42:	49a8      	ldr	r1, [pc, #672]	@ (80081e4 <_dtoa_r+0x89c>)
 8007f44:	2000      	movs	r0, #0
 8007f46:	f7f8 f9bf 	bl	80002c8 <__aeabi_dsub>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f52:	f7f8 fde3 	bl	8000b1c <__aeabi_dcmplt>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f43f af14 	beq.w	8007d84 <_dtoa_r+0x43c>
 8007f5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007f5e:	1e73      	subs	r3, r6, #1
 8007f60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f66:	2b30      	cmp	r3, #48	@ 0x30
 8007f68:	d0f8      	beq.n	8007f5c <_dtoa_r+0x614>
 8007f6a:	4647      	mov	r7, r8
 8007f6c:	e03b      	b.n	8007fe6 <_dtoa_r+0x69e>
 8007f6e:	4b9e      	ldr	r3, [pc, #632]	@ (80081e8 <_dtoa_r+0x8a0>)
 8007f70:	f7f8 fb62 	bl	8000638 <__aeabi_dmul>
 8007f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f78:	e7bc      	b.n	8007ef4 <_dtoa_r+0x5ac>
 8007f7a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007f7e:	4656      	mov	r6, sl
 8007f80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f84:	4620      	mov	r0, r4
 8007f86:	4629      	mov	r1, r5
 8007f88:	f7f8 fc80 	bl	800088c <__aeabi_ddiv>
 8007f8c:	f7f8 fe04 	bl	8000b98 <__aeabi_d2iz>
 8007f90:	4680      	mov	r8, r0
 8007f92:	f7f8 fae7 	bl	8000564 <__aeabi_i2d>
 8007f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f9a:	f7f8 fb4d 	bl	8000638 <__aeabi_dmul>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007faa:	f7f8 f98d 	bl	80002c8 <__aeabi_dsub>
 8007fae:	f806 4b01 	strb.w	r4, [r6], #1
 8007fb2:	9d03      	ldr	r5, [sp, #12]
 8007fb4:	eba6 040a 	sub.w	r4, r6, sl
 8007fb8:	42a5      	cmp	r5, r4
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	d133      	bne.n	8008028 <_dtoa_r+0x6e0>
 8007fc0:	f7f8 f984 	bl	80002cc <__adddf3>
 8007fc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fc8:	4604      	mov	r4, r0
 8007fca:	460d      	mov	r5, r1
 8007fcc:	f7f8 fdc4 	bl	8000b58 <__aeabi_dcmpgt>
 8007fd0:	b9c0      	cbnz	r0, 8008004 <_dtoa_r+0x6bc>
 8007fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	4629      	mov	r1, r5
 8007fda:	f7f8 fd95 	bl	8000b08 <__aeabi_dcmpeq>
 8007fde:	b110      	cbz	r0, 8007fe6 <_dtoa_r+0x69e>
 8007fe0:	f018 0f01 	tst.w	r8, #1
 8007fe4:	d10e      	bne.n	8008004 <_dtoa_r+0x6bc>
 8007fe6:	9902      	ldr	r1, [sp, #8]
 8007fe8:	4648      	mov	r0, r9
 8007fea:	f000 fbbd 	bl	8008768 <_Bfree>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	7033      	strb	r3, [r6, #0]
 8007ff2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ff4:	3701      	adds	r7, #1
 8007ff6:	601f      	str	r7, [r3, #0]
 8007ff8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 824b 	beq.w	8008496 <_dtoa_r+0xb4e>
 8008000:	601e      	str	r6, [r3, #0]
 8008002:	e248      	b.n	8008496 <_dtoa_r+0xb4e>
 8008004:	46b8      	mov	r8, r7
 8008006:	4633      	mov	r3, r6
 8008008:	461e      	mov	r6, r3
 800800a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800800e:	2a39      	cmp	r2, #57	@ 0x39
 8008010:	d106      	bne.n	8008020 <_dtoa_r+0x6d8>
 8008012:	459a      	cmp	sl, r3
 8008014:	d1f8      	bne.n	8008008 <_dtoa_r+0x6c0>
 8008016:	2230      	movs	r2, #48	@ 0x30
 8008018:	f108 0801 	add.w	r8, r8, #1
 800801c:	f88a 2000 	strb.w	r2, [sl]
 8008020:	781a      	ldrb	r2, [r3, #0]
 8008022:	3201      	adds	r2, #1
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	e7a0      	b.n	8007f6a <_dtoa_r+0x622>
 8008028:	4b6f      	ldr	r3, [pc, #444]	@ (80081e8 <_dtoa_r+0x8a0>)
 800802a:	2200      	movs	r2, #0
 800802c:	f7f8 fb04 	bl	8000638 <__aeabi_dmul>
 8008030:	2200      	movs	r2, #0
 8008032:	2300      	movs	r3, #0
 8008034:	4604      	mov	r4, r0
 8008036:	460d      	mov	r5, r1
 8008038:	f7f8 fd66 	bl	8000b08 <__aeabi_dcmpeq>
 800803c:	2800      	cmp	r0, #0
 800803e:	d09f      	beq.n	8007f80 <_dtoa_r+0x638>
 8008040:	e7d1      	b.n	8007fe6 <_dtoa_r+0x69e>
 8008042:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008044:	2a00      	cmp	r2, #0
 8008046:	f000 80ea 	beq.w	800821e <_dtoa_r+0x8d6>
 800804a:	9a07      	ldr	r2, [sp, #28]
 800804c:	2a01      	cmp	r2, #1
 800804e:	f300 80cd 	bgt.w	80081ec <_dtoa_r+0x8a4>
 8008052:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008054:	2a00      	cmp	r2, #0
 8008056:	f000 80c1 	beq.w	80081dc <_dtoa_r+0x894>
 800805a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800805e:	9c08      	ldr	r4, [sp, #32]
 8008060:	9e00      	ldr	r6, [sp, #0]
 8008062:	9a00      	ldr	r2, [sp, #0]
 8008064:	441a      	add	r2, r3
 8008066:	9200      	str	r2, [sp, #0]
 8008068:	9a06      	ldr	r2, [sp, #24]
 800806a:	2101      	movs	r1, #1
 800806c:	441a      	add	r2, r3
 800806e:	4648      	mov	r0, r9
 8008070:	9206      	str	r2, [sp, #24]
 8008072:	f000 fc77 	bl	8008964 <__i2b>
 8008076:	4605      	mov	r5, r0
 8008078:	b166      	cbz	r6, 8008094 <_dtoa_r+0x74c>
 800807a:	9b06      	ldr	r3, [sp, #24]
 800807c:	2b00      	cmp	r3, #0
 800807e:	dd09      	ble.n	8008094 <_dtoa_r+0x74c>
 8008080:	42b3      	cmp	r3, r6
 8008082:	9a00      	ldr	r2, [sp, #0]
 8008084:	bfa8      	it	ge
 8008086:	4633      	movge	r3, r6
 8008088:	1ad2      	subs	r2, r2, r3
 800808a:	9200      	str	r2, [sp, #0]
 800808c:	9a06      	ldr	r2, [sp, #24]
 800808e:	1af6      	subs	r6, r6, r3
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	9306      	str	r3, [sp, #24]
 8008094:	9b08      	ldr	r3, [sp, #32]
 8008096:	b30b      	cbz	r3, 80080dc <_dtoa_r+0x794>
 8008098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 80c6 	beq.w	800822c <_dtoa_r+0x8e4>
 80080a0:	2c00      	cmp	r4, #0
 80080a2:	f000 80c0 	beq.w	8008226 <_dtoa_r+0x8de>
 80080a6:	4629      	mov	r1, r5
 80080a8:	4622      	mov	r2, r4
 80080aa:	4648      	mov	r0, r9
 80080ac:	f000 fd12 	bl	8008ad4 <__pow5mult>
 80080b0:	9a02      	ldr	r2, [sp, #8]
 80080b2:	4601      	mov	r1, r0
 80080b4:	4605      	mov	r5, r0
 80080b6:	4648      	mov	r0, r9
 80080b8:	f000 fc6a 	bl	8008990 <__multiply>
 80080bc:	9902      	ldr	r1, [sp, #8]
 80080be:	4680      	mov	r8, r0
 80080c0:	4648      	mov	r0, r9
 80080c2:	f000 fb51 	bl	8008768 <_Bfree>
 80080c6:	9b08      	ldr	r3, [sp, #32]
 80080c8:	1b1b      	subs	r3, r3, r4
 80080ca:	9308      	str	r3, [sp, #32]
 80080cc:	f000 80b1 	beq.w	8008232 <_dtoa_r+0x8ea>
 80080d0:	9a08      	ldr	r2, [sp, #32]
 80080d2:	4641      	mov	r1, r8
 80080d4:	4648      	mov	r0, r9
 80080d6:	f000 fcfd 	bl	8008ad4 <__pow5mult>
 80080da:	9002      	str	r0, [sp, #8]
 80080dc:	2101      	movs	r1, #1
 80080de:	4648      	mov	r0, r9
 80080e0:	f000 fc40 	bl	8008964 <__i2b>
 80080e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080e6:	4604      	mov	r4, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 81d8 	beq.w	800849e <_dtoa_r+0xb56>
 80080ee:	461a      	mov	r2, r3
 80080f0:	4601      	mov	r1, r0
 80080f2:	4648      	mov	r0, r9
 80080f4:	f000 fcee 	bl	8008ad4 <__pow5mult>
 80080f8:	9b07      	ldr	r3, [sp, #28]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	4604      	mov	r4, r0
 80080fe:	f300 809f 	bgt.w	8008240 <_dtoa_r+0x8f8>
 8008102:	9b04      	ldr	r3, [sp, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f040 8097 	bne.w	8008238 <_dtoa_r+0x8f0>
 800810a:	9b05      	ldr	r3, [sp, #20]
 800810c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008110:	2b00      	cmp	r3, #0
 8008112:	f040 8093 	bne.w	800823c <_dtoa_r+0x8f4>
 8008116:	9b05      	ldr	r3, [sp, #20]
 8008118:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800811c:	0d1b      	lsrs	r3, r3, #20
 800811e:	051b      	lsls	r3, r3, #20
 8008120:	b133      	cbz	r3, 8008130 <_dtoa_r+0x7e8>
 8008122:	9b00      	ldr	r3, [sp, #0]
 8008124:	3301      	adds	r3, #1
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	9b06      	ldr	r3, [sp, #24]
 800812a:	3301      	adds	r3, #1
 800812c:	9306      	str	r3, [sp, #24]
 800812e:	2301      	movs	r3, #1
 8008130:	9308      	str	r3, [sp, #32]
 8008132:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 81b8 	beq.w	80084aa <_dtoa_r+0xb62>
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008140:	6918      	ldr	r0, [r3, #16]
 8008142:	f000 fbc3 	bl	80088cc <__hi0bits>
 8008146:	f1c0 0020 	rsb	r0, r0, #32
 800814a:	9b06      	ldr	r3, [sp, #24]
 800814c:	4418      	add	r0, r3
 800814e:	f010 001f 	ands.w	r0, r0, #31
 8008152:	f000 8082 	beq.w	800825a <_dtoa_r+0x912>
 8008156:	f1c0 0320 	rsb	r3, r0, #32
 800815a:	2b04      	cmp	r3, #4
 800815c:	dd73      	ble.n	8008246 <_dtoa_r+0x8fe>
 800815e:	9b00      	ldr	r3, [sp, #0]
 8008160:	f1c0 001c 	rsb	r0, r0, #28
 8008164:	4403      	add	r3, r0
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	9b06      	ldr	r3, [sp, #24]
 800816a:	4403      	add	r3, r0
 800816c:	4406      	add	r6, r0
 800816e:	9306      	str	r3, [sp, #24]
 8008170:	9b00      	ldr	r3, [sp, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	dd05      	ble.n	8008182 <_dtoa_r+0x83a>
 8008176:	9902      	ldr	r1, [sp, #8]
 8008178:	461a      	mov	r2, r3
 800817a:	4648      	mov	r0, r9
 800817c:	f000 fd04 	bl	8008b88 <__lshift>
 8008180:	9002      	str	r0, [sp, #8]
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	dd05      	ble.n	8008194 <_dtoa_r+0x84c>
 8008188:	4621      	mov	r1, r4
 800818a:	461a      	mov	r2, r3
 800818c:	4648      	mov	r0, r9
 800818e:	f000 fcfb 	bl	8008b88 <__lshift>
 8008192:	4604      	mov	r4, r0
 8008194:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008196:	2b00      	cmp	r3, #0
 8008198:	d061      	beq.n	800825e <_dtoa_r+0x916>
 800819a:	9802      	ldr	r0, [sp, #8]
 800819c:	4621      	mov	r1, r4
 800819e:	f000 fd5f 	bl	8008c60 <__mcmp>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	da5b      	bge.n	800825e <_dtoa_r+0x916>
 80081a6:	2300      	movs	r3, #0
 80081a8:	9902      	ldr	r1, [sp, #8]
 80081aa:	220a      	movs	r2, #10
 80081ac:	4648      	mov	r0, r9
 80081ae:	f000 fafd 	bl	80087ac <__multadd>
 80081b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b4:	9002      	str	r0, [sp, #8]
 80081b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 8177 	beq.w	80084ae <_dtoa_r+0xb66>
 80081c0:	4629      	mov	r1, r5
 80081c2:	2300      	movs	r3, #0
 80081c4:	220a      	movs	r2, #10
 80081c6:	4648      	mov	r0, r9
 80081c8:	f000 faf0 	bl	80087ac <__multadd>
 80081cc:	f1bb 0f00 	cmp.w	fp, #0
 80081d0:	4605      	mov	r5, r0
 80081d2:	dc6f      	bgt.n	80082b4 <_dtoa_r+0x96c>
 80081d4:	9b07      	ldr	r3, [sp, #28]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	dc49      	bgt.n	800826e <_dtoa_r+0x926>
 80081da:	e06b      	b.n	80082b4 <_dtoa_r+0x96c>
 80081dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80081e2:	e73c      	b.n	800805e <_dtoa_r+0x716>
 80081e4:	3fe00000 	.word	0x3fe00000
 80081e8:	40240000 	.word	0x40240000
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	1e5c      	subs	r4, r3, #1
 80081f0:	9b08      	ldr	r3, [sp, #32]
 80081f2:	42a3      	cmp	r3, r4
 80081f4:	db09      	blt.n	800820a <_dtoa_r+0x8c2>
 80081f6:	1b1c      	subs	r4, r3, r4
 80081f8:	9b03      	ldr	r3, [sp, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f6bf af30 	bge.w	8008060 <_dtoa_r+0x718>
 8008200:	9b00      	ldr	r3, [sp, #0]
 8008202:	9a03      	ldr	r2, [sp, #12]
 8008204:	1a9e      	subs	r6, r3, r2
 8008206:	2300      	movs	r3, #0
 8008208:	e72b      	b.n	8008062 <_dtoa_r+0x71a>
 800820a:	9b08      	ldr	r3, [sp, #32]
 800820c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800820e:	9408      	str	r4, [sp, #32]
 8008210:	1ae3      	subs	r3, r4, r3
 8008212:	441a      	add	r2, r3
 8008214:	9e00      	ldr	r6, [sp, #0]
 8008216:	9b03      	ldr	r3, [sp, #12]
 8008218:	920d      	str	r2, [sp, #52]	@ 0x34
 800821a:	2400      	movs	r4, #0
 800821c:	e721      	b.n	8008062 <_dtoa_r+0x71a>
 800821e:	9c08      	ldr	r4, [sp, #32]
 8008220:	9e00      	ldr	r6, [sp, #0]
 8008222:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008224:	e728      	b.n	8008078 <_dtoa_r+0x730>
 8008226:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800822a:	e751      	b.n	80080d0 <_dtoa_r+0x788>
 800822c:	9a08      	ldr	r2, [sp, #32]
 800822e:	9902      	ldr	r1, [sp, #8]
 8008230:	e750      	b.n	80080d4 <_dtoa_r+0x78c>
 8008232:	f8cd 8008 	str.w	r8, [sp, #8]
 8008236:	e751      	b.n	80080dc <_dtoa_r+0x794>
 8008238:	2300      	movs	r3, #0
 800823a:	e779      	b.n	8008130 <_dtoa_r+0x7e8>
 800823c:	9b04      	ldr	r3, [sp, #16]
 800823e:	e777      	b.n	8008130 <_dtoa_r+0x7e8>
 8008240:	2300      	movs	r3, #0
 8008242:	9308      	str	r3, [sp, #32]
 8008244:	e779      	b.n	800813a <_dtoa_r+0x7f2>
 8008246:	d093      	beq.n	8008170 <_dtoa_r+0x828>
 8008248:	9a00      	ldr	r2, [sp, #0]
 800824a:	331c      	adds	r3, #28
 800824c:	441a      	add	r2, r3
 800824e:	9200      	str	r2, [sp, #0]
 8008250:	9a06      	ldr	r2, [sp, #24]
 8008252:	441a      	add	r2, r3
 8008254:	441e      	add	r6, r3
 8008256:	9206      	str	r2, [sp, #24]
 8008258:	e78a      	b.n	8008170 <_dtoa_r+0x828>
 800825a:	4603      	mov	r3, r0
 800825c:	e7f4      	b.n	8008248 <_dtoa_r+0x900>
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	46b8      	mov	r8, r7
 8008264:	dc20      	bgt.n	80082a8 <_dtoa_r+0x960>
 8008266:	469b      	mov	fp, r3
 8008268:	9b07      	ldr	r3, [sp, #28]
 800826a:	2b02      	cmp	r3, #2
 800826c:	dd1e      	ble.n	80082ac <_dtoa_r+0x964>
 800826e:	f1bb 0f00 	cmp.w	fp, #0
 8008272:	f47f adb1 	bne.w	8007dd8 <_dtoa_r+0x490>
 8008276:	4621      	mov	r1, r4
 8008278:	465b      	mov	r3, fp
 800827a:	2205      	movs	r2, #5
 800827c:	4648      	mov	r0, r9
 800827e:	f000 fa95 	bl	80087ac <__multadd>
 8008282:	4601      	mov	r1, r0
 8008284:	4604      	mov	r4, r0
 8008286:	9802      	ldr	r0, [sp, #8]
 8008288:	f000 fcea 	bl	8008c60 <__mcmp>
 800828c:	2800      	cmp	r0, #0
 800828e:	f77f ada3 	ble.w	8007dd8 <_dtoa_r+0x490>
 8008292:	4656      	mov	r6, sl
 8008294:	2331      	movs	r3, #49	@ 0x31
 8008296:	f806 3b01 	strb.w	r3, [r6], #1
 800829a:	f108 0801 	add.w	r8, r8, #1
 800829e:	e59f      	b.n	8007de0 <_dtoa_r+0x498>
 80082a0:	9c03      	ldr	r4, [sp, #12]
 80082a2:	46b8      	mov	r8, r7
 80082a4:	4625      	mov	r5, r4
 80082a6:	e7f4      	b.n	8008292 <_dtoa_r+0x94a>
 80082a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80082ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 8101 	beq.w	80084b6 <_dtoa_r+0xb6e>
 80082b4:	2e00      	cmp	r6, #0
 80082b6:	dd05      	ble.n	80082c4 <_dtoa_r+0x97c>
 80082b8:	4629      	mov	r1, r5
 80082ba:	4632      	mov	r2, r6
 80082bc:	4648      	mov	r0, r9
 80082be:	f000 fc63 	bl	8008b88 <__lshift>
 80082c2:	4605      	mov	r5, r0
 80082c4:	9b08      	ldr	r3, [sp, #32]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d05c      	beq.n	8008384 <_dtoa_r+0xa3c>
 80082ca:	6869      	ldr	r1, [r5, #4]
 80082cc:	4648      	mov	r0, r9
 80082ce:	f000 fa0b 	bl	80086e8 <_Balloc>
 80082d2:	4606      	mov	r6, r0
 80082d4:	b928      	cbnz	r0, 80082e2 <_dtoa_r+0x99a>
 80082d6:	4b82      	ldr	r3, [pc, #520]	@ (80084e0 <_dtoa_r+0xb98>)
 80082d8:	4602      	mov	r2, r0
 80082da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80082de:	f7ff bb4a 	b.w	8007976 <_dtoa_r+0x2e>
 80082e2:	692a      	ldr	r2, [r5, #16]
 80082e4:	3202      	adds	r2, #2
 80082e6:	0092      	lsls	r2, r2, #2
 80082e8:	f105 010c 	add.w	r1, r5, #12
 80082ec:	300c      	adds	r0, #12
 80082ee:	f002 f8b3 	bl	800a458 <memcpy>
 80082f2:	2201      	movs	r2, #1
 80082f4:	4631      	mov	r1, r6
 80082f6:	4648      	mov	r0, r9
 80082f8:	f000 fc46 	bl	8008b88 <__lshift>
 80082fc:	f10a 0301 	add.w	r3, sl, #1
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	eb0a 030b 	add.w	r3, sl, fp
 8008306:	9308      	str	r3, [sp, #32]
 8008308:	9b04      	ldr	r3, [sp, #16]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	462f      	mov	r7, r5
 8008310:	9306      	str	r3, [sp, #24]
 8008312:	4605      	mov	r5, r0
 8008314:	9b00      	ldr	r3, [sp, #0]
 8008316:	9802      	ldr	r0, [sp, #8]
 8008318:	4621      	mov	r1, r4
 800831a:	f103 3bff 	add.w	fp, r3, #4294967295
 800831e:	f7ff fa89 	bl	8007834 <quorem>
 8008322:	4603      	mov	r3, r0
 8008324:	3330      	adds	r3, #48	@ 0x30
 8008326:	9003      	str	r0, [sp, #12]
 8008328:	4639      	mov	r1, r7
 800832a:	9802      	ldr	r0, [sp, #8]
 800832c:	9309      	str	r3, [sp, #36]	@ 0x24
 800832e:	f000 fc97 	bl	8008c60 <__mcmp>
 8008332:	462a      	mov	r2, r5
 8008334:	9004      	str	r0, [sp, #16]
 8008336:	4621      	mov	r1, r4
 8008338:	4648      	mov	r0, r9
 800833a:	f000 fcad 	bl	8008c98 <__mdiff>
 800833e:	68c2      	ldr	r2, [r0, #12]
 8008340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008342:	4606      	mov	r6, r0
 8008344:	bb02      	cbnz	r2, 8008388 <_dtoa_r+0xa40>
 8008346:	4601      	mov	r1, r0
 8008348:	9802      	ldr	r0, [sp, #8]
 800834a:	f000 fc89 	bl	8008c60 <__mcmp>
 800834e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008350:	4602      	mov	r2, r0
 8008352:	4631      	mov	r1, r6
 8008354:	4648      	mov	r0, r9
 8008356:	920c      	str	r2, [sp, #48]	@ 0x30
 8008358:	9309      	str	r3, [sp, #36]	@ 0x24
 800835a:	f000 fa05 	bl	8008768 <_Bfree>
 800835e:	9b07      	ldr	r3, [sp, #28]
 8008360:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008362:	9e00      	ldr	r6, [sp, #0]
 8008364:	ea42 0103 	orr.w	r1, r2, r3
 8008368:	9b06      	ldr	r3, [sp, #24]
 800836a:	4319      	orrs	r1, r3
 800836c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800836e:	d10d      	bne.n	800838c <_dtoa_r+0xa44>
 8008370:	2b39      	cmp	r3, #57	@ 0x39
 8008372:	d027      	beq.n	80083c4 <_dtoa_r+0xa7c>
 8008374:	9a04      	ldr	r2, [sp, #16]
 8008376:	2a00      	cmp	r2, #0
 8008378:	dd01      	ble.n	800837e <_dtoa_r+0xa36>
 800837a:	9b03      	ldr	r3, [sp, #12]
 800837c:	3331      	adds	r3, #49	@ 0x31
 800837e:	f88b 3000 	strb.w	r3, [fp]
 8008382:	e52e      	b.n	8007de2 <_dtoa_r+0x49a>
 8008384:	4628      	mov	r0, r5
 8008386:	e7b9      	b.n	80082fc <_dtoa_r+0x9b4>
 8008388:	2201      	movs	r2, #1
 800838a:	e7e2      	b.n	8008352 <_dtoa_r+0xa0a>
 800838c:	9904      	ldr	r1, [sp, #16]
 800838e:	2900      	cmp	r1, #0
 8008390:	db04      	blt.n	800839c <_dtoa_r+0xa54>
 8008392:	9807      	ldr	r0, [sp, #28]
 8008394:	4301      	orrs	r1, r0
 8008396:	9806      	ldr	r0, [sp, #24]
 8008398:	4301      	orrs	r1, r0
 800839a:	d120      	bne.n	80083de <_dtoa_r+0xa96>
 800839c:	2a00      	cmp	r2, #0
 800839e:	ddee      	ble.n	800837e <_dtoa_r+0xa36>
 80083a0:	9902      	ldr	r1, [sp, #8]
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	2201      	movs	r2, #1
 80083a6:	4648      	mov	r0, r9
 80083a8:	f000 fbee 	bl	8008b88 <__lshift>
 80083ac:	4621      	mov	r1, r4
 80083ae:	9002      	str	r0, [sp, #8]
 80083b0:	f000 fc56 	bl	8008c60 <__mcmp>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	9b00      	ldr	r3, [sp, #0]
 80083b8:	dc02      	bgt.n	80083c0 <_dtoa_r+0xa78>
 80083ba:	d1e0      	bne.n	800837e <_dtoa_r+0xa36>
 80083bc:	07da      	lsls	r2, r3, #31
 80083be:	d5de      	bpl.n	800837e <_dtoa_r+0xa36>
 80083c0:	2b39      	cmp	r3, #57	@ 0x39
 80083c2:	d1da      	bne.n	800837a <_dtoa_r+0xa32>
 80083c4:	2339      	movs	r3, #57	@ 0x39
 80083c6:	f88b 3000 	strb.w	r3, [fp]
 80083ca:	4633      	mov	r3, r6
 80083cc:	461e      	mov	r6, r3
 80083ce:	3b01      	subs	r3, #1
 80083d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80083d4:	2a39      	cmp	r2, #57	@ 0x39
 80083d6:	d04e      	beq.n	8008476 <_dtoa_r+0xb2e>
 80083d8:	3201      	adds	r2, #1
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	e501      	b.n	8007de2 <_dtoa_r+0x49a>
 80083de:	2a00      	cmp	r2, #0
 80083e0:	dd03      	ble.n	80083ea <_dtoa_r+0xaa2>
 80083e2:	2b39      	cmp	r3, #57	@ 0x39
 80083e4:	d0ee      	beq.n	80083c4 <_dtoa_r+0xa7c>
 80083e6:	3301      	adds	r3, #1
 80083e8:	e7c9      	b.n	800837e <_dtoa_r+0xa36>
 80083ea:	9a00      	ldr	r2, [sp, #0]
 80083ec:	9908      	ldr	r1, [sp, #32]
 80083ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80083f2:	428a      	cmp	r2, r1
 80083f4:	d028      	beq.n	8008448 <_dtoa_r+0xb00>
 80083f6:	9902      	ldr	r1, [sp, #8]
 80083f8:	2300      	movs	r3, #0
 80083fa:	220a      	movs	r2, #10
 80083fc:	4648      	mov	r0, r9
 80083fe:	f000 f9d5 	bl	80087ac <__multadd>
 8008402:	42af      	cmp	r7, r5
 8008404:	9002      	str	r0, [sp, #8]
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	f04f 020a 	mov.w	r2, #10
 800840e:	4639      	mov	r1, r7
 8008410:	4648      	mov	r0, r9
 8008412:	d107      	bne.n	8008424 <_dtoa_r+0xadc>
 8008414:	f000 f9ca 	bl	80087ac <__multadd>
 8008418:	4607      	mov	r7, r0
 800841a:	4605      	mov	r5, r0
 800841c:	9b00      	ldr	r3, [sp, #0]
 800841e:	3301      	adds	r3, #1
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	e777      	b.n	8008314 <_dtoa_r+0x9cc>
 8008424:	f000 f9c2 	bl	80087ac <__multadd>
 8008428:	4629      	mov	r1, r5
 800842a:	4607      	mov	r7, r0
 800842c:	2300      	movs	r3, #0
 800842e:	220a      	movs	r2, #10
 8008430:	4648      	mov	r0, r9
 8008432:	f000 f9bb 	bl	80087ac <__multadd>
 8008436:	4605      	mov	r5, r0
 8008438:	e7f0      	b.n	800841c <_dtoa_r+0xad4>
 800843a:	f1bb 0f00 	cmp.w	fp, #0
 800843e:	bfcc      	ite	gt
 8008440:	465e      	movgt	r6, fp
 8008442:	2601      	movle	r6, #1
 8008444:	4456      	add	r6, sl
 8008446:	2700      	movs	r7, #0
 8008448:	9902      	ldr	r1, [sp, #8]
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	2201      	movs	r2, #1
 800844e:	4648      	mov	r0, r9
 8008450:	f000 fb9a 	bl	8008b88 <__lshift>
 8008454:	4621      	mov	r1, r4
 8008456:	9002      	str	r0, [sp, #8]
 8008458:	f000 fc02 	bl	8008c60 <__mcmp>
 800845c:	2800      	cmp	r0, #0
 800845e:	dcb4      	bgt.n	80083ca <_dtoa_r+0xa82>
 8008460:	d102      	bne.n	8008468 <_dtoa_r+0xb20>
 8008462:	9b00      	ldr	r3, [sp, #0]
 8008464:	07db      	lsls	r3, r3, #31
 8008466:	d4b0      	bmi.n	80083ca <_dtoa_r+0xa82>
 8008468:	4633      	mov	r3, r6
 800846a:	461e      	mov	r6, r3
 800846c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008470:	2a30      	cmp	r2, #48	@ 0x30
 8008472:	d0fa      	beq.n	800846a <_dtoa_r+0xb22>
 8008474:	e4b5      	b.n	8007de2 <_dtoa_r+0x49a>
 8008476:	459a      	cmp	sl, r3
 8008478:	d1a8      	bne.n	80083cc <_dtoa_r+0xa84>
 800847a:	2331      	movs	r3, #49	@ 0x31
 800847c:	f108 0801 	add.w	r8, r8, #1
 8008480:	f88a 3000 	strb.w	r3, [sl]
 8008484:	e4ad      	b.n	8007de2 <_dtoa_r+0x49a>
 8008486:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008488:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80084e4 <_dtoa_r+0xb9c>
 800848c:	b11b      	cbz	r3, 8008496 <_dtoa_r+0xb4e>
 800848e:	f10a 0308 	add.w	r3, sl, #8
 8008492:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	4650      	mov	r0, sl
 8008498:	b017      	add	sp, #92	@ 0x5c
 800849a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849e:	9b07      	ldr	r3, [sp, #28]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	f77f ae2e 	ble.w	8008102 <_dtoa_r+0x7ba>
 80084a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084a8:	9308      	str	r3, [sp, #32]
 80084aa:	2001      	movs	r0, #1
 80084ac:	e64d      	b.n	800814a <_dtoa_r+0x802>
 80084ae:	f1bb 0f00 	cmp.w	fp, #0
 80084b2:	f77f aed9 	ble.w	8008268 <_dtoa_r+0x920>
 80084b6:	4656      	mov	r6, sl
 80084b8:	9802      	ldr	r0, [sp, #8]
 80084ba:	4621      	mov	r1, r4
 80084bc:	f7ff f9ba 	bl	8007834 <quorem>
 80084c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80084c4:	f806 3b01 	strb.w	r3, [r6], #1
 80084c8:	eba6 020a 	sub.w	r2, r6, sl
 80084cc:	4593      	cmp	fp, r2
 80084ce:	ddb4      	ble.n	800843a <_dtoa_r+0xaf2>
 80084d0:	9902      	ldr	r1, [sp, #8]
 80084d2:	2300      	movs	r3, #0
 80084d4:	220a      	movs	r2, #10
 80084d6:	4648      	mov	r0, r9
 80084d8:	f000 f968 	bl	80087ac <__multadd>
 80084dc:	9002      	str	r0, [sp, #8]
 80084de:	e7eb      	b.n	80084b8 <_dtoa_r+0xb70>
 80084e0:	0800af5e 	.word	0x0800af5e
 80084e4:	0800aee2 	.word	0x0800aee2

080084e8 <_free_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4605      	mov	r5, r0
 80084ec:	2900      	cmp	r1, #0
 80084ee:	d041      	beq.n	8008574 <_free_r+0x8c>
 80084f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f4:	1f0c      	subs	r4, r1, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bfb8      	it	lt
 80084fa:	18e4      	addlt	r4, r4, r3
 80084fc:	f000 f8e8 	bl	80086d0 <__malloc_lock>
 8008500:	4a1d      	ldr	r2, [pc, #116]	@ (8008578 <_free_r+0x90>)
 8008502:	6813      	ldr	r3, [r2, #0]
 8008504:	b933      	cbnz	r3, 8008514 <_free_r+0x2c>
 8008506:	6063      	str	r3, [r4, #4]
 8008508:	6014      	str	r4, [r2, #0]
 800850a:	4628      	mov	r0, r5
 800850c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008510:	f000 b8e4 	b.w	80086dc <__malloc_unlock>
 8008514:	42a3      	cmp	r3, r4
 8008516:	d908      	bls.n	800852a <_free_r+0x42>
 8008518:	6820      	ldr	r0, [r4, #0]
 800851a:	1821      	adds	r1, r4, r0
 800851c:	428b      	cmp	r3, r1
 800851e:	bf01      	itttt	eq
 8008520:	6819      	ldreq	r1, [r3, #0]
 8008522:	685b      	ldreq	r3, [r3, #4]
 8008524:	1809      	addeq	r1, r1, r0
 8008526:	6021      	streq	r1, [r4, #0]
 8008528:	e7ed      	b.n	8008506 <_free_r+0x1e>
 800852a:	461a      	mov	r2, r3
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	b10b      	cbz	r3, 8008534 <_free_r+0x4c>
 8008530:	42a3      	cmp	r3, r4
 8008532:	d9fa      	bls.n	800852a <_free_r+0x42>
 8008534:	6811      	ldr	r1, [r2, #0]
 8008536:	1850      	adds	r0, r2, r1
 8008538:	42a0      	cmp	r0, r4
 800853a:	d10b      	bne.n	8008554 <_free_r+0x6c>
 800853c:	6820      	ldr	r0, [r4, #0]
 800853e:	4401      	add	r1, r0
 8008540:	1850      	adds	r0, r2, r1
 8008542:	4283      	cmp	r3, r0
 8008544:	6011      	str	r1, [r2, #0]
 8008546:	d1e0      	bne.n	800850a <_free_r+0x22>
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	6053      	str	r3, [r2, #4]
 800854e:	4408      	add	r0, r1
 8008550:	6010      	str	r0, [r2, #0]
 8008552:	e7da      	b.n	800850a <_free_r+0x22>
 8008554:	d902      	bls.n	800855c <_free_r+0x74>
 8008556:	230c      	movs	r3, #12
 8008558:	602b      	str	r3, [r5, #0]
 800855a:	e7d6      	b.n	800850a <_free_r+0x22>
 800855c:	6820      	ldr	r0, [r4, #0]
 800855e:	1821      	adds	r1, r4, r0
 8008560:	428b      	cmp	r3, r1
 8008562:	bf04      	itt	eq
 8008564:	6819      	ldreq	r1, [r3, #0]
 8008566:	685b      	ldreq	r3, [r3, #4]
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	bf04      	itt	eq
 800856c:	1809      	addeq	r1, r1, r0
 800856e:	6021      	streq	r1, [r4, #0]
 8008570:	6054      	str	r4, [r2, #4]
 8008572:	e7ca      	b.n	800850a <_free_r+0x22>
 8008574:	bd38      	pop	{r3, r4, r5, pc}
 8008576:	bf00      	nop
 8008578:	20000648 	.word	0x20000648

0800857c <malloc>:
 800857c:	4b02      	ldr	r3, [pc, #8]	@ (8008588 <malloc+0xc>)
 800857e:	4601      	mov	r1, r0
 8008580:	6818      	ldr	r0, [r3, #0]
 8008582:	f000 b825 	b.w	80085d0 <_malloc_r>
 8008586:	bf00      	nop
 8008588:	20000048 	.word	0x20000048

0800858c <sbrk_aligned>:
 800858c:	b570      	push	{r4, r5, r6, lr}
 800858e:	4e0f      	ldr	r6, [pc, #60]	@ (80085cc <sbrk_aligned+0x40>)
 8008590:	460c      	mov	r4, r1
 8008592:	6831      	ldr	r1, [r6, #0]
 8008594:	4605      	mov	r5, r0
 8008596:	b911      	cbnz	r1, 800859e <sbrk_aligned+0x12>
 8008598:	f001 ff4e 	bl	800a438 <_sbrk_r>
 800859c:	6030      	str	r0, [r6, #0]
 800859e:	4621      	mov	r1, r4
 80085a0:	4628      	mov	r0, r5
 80085a2:	f001 ff49 	bl	800a438 <_sbrk_r>
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	d103      	bne.n	80085b2 <sbrk_aligned+0x26>
 80085aa:	f04f 34ff 	mov.w	r4, #4294967295
 80085ae:	4620      	mov	r0, r4
 80085b0:	bd70      	pop	{r4, r5, r6, pc}
 80085b2:	1cc4      	adds	r4, r0, #3
 80085b4:	f024 0403 	bic.w	r4, r4, #3
 80085b8:	42a0      	cmp	r0, r4
 80085ba:	d0f8      	beq.n	80085ae <sbrk_aligned+0x22>
 80085bc:	1a21      	subs	r1, r4, r0
 80085be:	4628      	mov	r0, r5
 80085c0:	f001 ff3a 	bl	800a438 <_sbrk_r>
 80085c4:	3001      	adds	r0, #1
 80085c6:	d1f2      	bne.n	80085ae <sbrk_aligned+0x22>
 80085c8:	e7ef      	b.n	80085aa <sbrk_aligned+0x1e>
 80085ca:	bf00      	nop
 80085cc:	20000644 	.word	0x20000644

080085d0 <_malloc_r>:
 80085d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d4:	1ccd      	adds	r5, r1, #3
 80085d6:	f025 0503 	bic.w	r5, r5, #3
 80085da:	3508      	adds	r5, #8
 80085dc:	2d0c      	cmp	r5, #12
 80085de:	bf38      	it	cc
 80085e0:	250c      	movcc	r5, #12
 80085e2:	2d00      	cmp	r5, #0
 80085e4:	4606      	mov	r6, r0
 80085e6:	db01      	blt.n	80085ec <_malloc_r+0x1c>
 80085e8:	42a9      	cmp	r1, r5
 80085ea:	d904      	bls.n	80085f6 <_malloc_r+0x26>
 80085ec:	230c      	movs	r3, #12
 80085ee:	6033      	str	r3, [r6, #0]
 80085f0:	2000      	movs	r0, #0
 80085f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086cc <_malloc_r+0xfc>
 80085fa:	f000 f869 	bl	80086d0 <__malloc_lock>
 80085fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008602:	461c      	mov	r4, r3
 8008604:	bb44      	cbnz	r4, 8008658 <_malloc_r+0x88>
 8008606:	4629      	mov	r1, r5
 8008608:	4630      	mov	r0, r6
 800860a:	f7ff ffbf 	bl	800858c <sbrk_aligned>
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	4604      	mov	r4, r0
 8008612:	d158      	bne.n	80086c6 <_malloc_r+0xf6>
 8008614:	f8d8 4000 	ldr.w	r4, [r8]
 8008618:	4627      	mov	r7, r4
 800861a:	2f00      	cmp	r7, #0
 800861c:	d143      	bne.n	80086a6 <_malloc_r+0xd6>
 800861e:	2c00      	cmp	r4, #0
 8008620:	d04b      	beq.n	80086ba <_malloc_r+0xea>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	4639      	mov	r1, r7
 8008626:	4630      	mov	r0, r6
 8008628:	eb04 0903 	add.w	r9, r4, r3
 800862c:	f001 ff04 	bl	800a438 <_sbrk_r>
 8008630:	4581      	cmp	r9, r0
 8008632:	d142      	bne.n	80086ba <_malloc_r+0xea>
 8008634:	6821      	ldr	r1, [r4, #0]
 8008636:	1a6d      	subs	r5, r5, r1
 8008638:	4629      	mov	r1, r5
 800863a:	4630      	mov	r0, r6
 800863c:	f7ff ffa6 	bl	800858c <sbrk_aligned>
 8008640:	3001      	adds	r0, #1
 8008642:	d03a      	beq.n	80086ba <_malloc_r+0xea>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	442b      	add	r3, r5
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	f8d8 3000 	ldr.w	r3, [r8]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	bb62      	cbnz	r2, 80086ac <_malloc_r+0xdc>
 8008652:	f8c8 7000 	str.w	r7, [r8]
 8008656:	e00f      	b.n	8008678 <_malloc_r+0xa8>
 8008658:	6822      	ldr	r2, [r4, #0]
 800865a:	1b52      	subs	r2, r2, r5
 800865c:	d420      	bmi.n	80086a0 <_malloc_r+0xd0>
 800865e:	2a0b      	cmp	r2, #11
 8008660:	d917      	bls.n	8008692 <_malloc_r+0xc2>
 8008662:	1961      	adds	r1, r4, r5
 8008664:	42a3      	cmp	r3, r4
 8008666:	6025      	str	r5, [r4, #0]
 8008668:	bf18      	it	ne
 800866a:	6059      	strne	r1, [r3, #4]
 800866c:	6863      	ldr	r3, [r4, #4]
 800866e:	bf08      	it	eq
 8008670:	f8c8 1000 	streq.w	r1, [r8]
 8008674:	5162      	str	r2, [r4, r5]
 8008676:	604b      	str	r3, [r1, #4]
 8008678:	4630      	mov	r0, r6
 800867a:	f000 f82f 	bl	80086dc <__malloc_unlock>
 800867e:	f104 000b 	add.w	r0, r4, #11
 8008682:	1d23      	adds	r3, r4, #4
 8008684:	f020 0007 	bic.w	r0, r0, #7
 8008688:	1ac2      	subs	r2, r0, r3
 800868a:	bf1c      	itt	ne
 800868c:	1a1b      	subne	r3, r3, r0
 800868e:	50a3      	strne	r3, [r4, r2]
 8008690:	e7af      	b.n	80085f2 <_malloc_r+0x22>
 8008692:	6862      	ldr	r2, [r4, #4]
 8008694:	42a3      	cmp	r3, r4
 8008696:	bf0c      	ite	eq
 8008698:	f8c8 2000 	streq.w	r2, [r8]
 800869c:	605a      	strne	r2, [r3, #4]
 800869e:	e7eb      	b.n	8008678 <_malloc_r+0xa8>
 80086a0:	4623      	mov	r3, r4
 80086a2:	6864      	ldr	r4, [r4, #4]
 80086a4:	e7ae      	b.n	8008604 <_malloc_r+0x34>
 80086a6:	463c      	mov	r4, r7
 80086a8:	687f      	ldr	r7, [r7, #4]
 80086aa:	e7b6      	b.n	800861a <_malloc_r+0x4a>
 80086ac:	461a      	mov	r2, r3
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	42a3      	cmp	r3, r4
 80086b2:	d1fb      	bne.n	80086ac <_malloc_r+0xdc>
 80086b4:	2300      	movs	r3, #0
 80086b6:	6053      	str	r3, [r2, #4]
 80086b8:	e7de      	b.n	8008678 <_malloc_r+0xa8>
 80086ba:	230c      	movs	r3, #12
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	4630      	mov	r0, r6
 80086c0:	f000 f80c 	bl	80086dc <__malloc_unlock>
 80086c4:	e794      	b.n	80085f0 <_malloc_r+0x20>
 80086c6:	6005      	str	r5, [r0, #0]
 80086c8:	e7d6      	b.n	8008678 <_malloc_r+0xa8>
 80086ca:	bf00      	nop
 80086cc:	20000648 	.word	0x20000648

080086d0 <__malloc_lock>:
 80086d0:	4801      	ldr	r0, [pc, #4]	@ (80086d8 <__malloc_lock+0x8>)
 80086d2:	f7ff b8a6 	b.w	8007822 <__retarget_lock_acquire_recursive>
 80086d6:	bf00      	nop
 80086d8:	20000640 	.word	0x20000640

080086dc <__malloc_unlock>:
 80086dc:	4801      	ldr	r0, [pc, #4]	@ (80086e4 <__malloc_unlock+0x8>)
 80086de:	f7ff b8a1 	b.w	8007824 <__retarget_lock_release_recursive>
 80086e2:	bf00      	nop
 80086e4:	20000640 	.word	0x20000640

080086e8 <_Balloc>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	69c6      	ldr	r6, [r0, #28]
 80086ec:	4604      	mov	r4, r0
 80086ee:	460d      	mov	r5, r1
 80086f0:	b976      	cbnz	r6, 8008710 <_Balloc+0x28>
 80086f2:	2010      	movs	r0, #16
 80086f4:	f7ff ff42 	bl	800857c <malloc>
 80086f8:	4602      	mov	r2, r0
 80086fa:	61e0      	str	r0, [r4, #28]
 80086fc:	b920      	cbnz	r0, 8008708 <_Balloc+0x20>
 80086fe:	4b18      	ldr	r3, [pc, #96]	@ (8008760 <_Balloc+0x78>)
 8008700:	4818      	ldr	r0, [pc, #96]	@ (8008764 <_Balloc+0x7c>)
 8008702:	216b      	movs	r1, #107	@ 0x6b
 8008704:	f001 fec0 	bl	800a488 <__assert_func>
 8008708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800870c:	6006      	str	r6, [r0, #0]
 800870e:	60c6      	str	r6, [r0, #12]
 8008710:	69e6      	ldr	r6, [r4, #28]
 8008712:	68f3      	ldr	r3, [r6, #12]
 8008714:	b183      	cbz	r3, 8008738 <_Balloc+0x50>
 8008716:	69e3      	ldr	r3, [r4, #28]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800871e:	b9b8      	cbnz	r0, 8008750 <_Balloc+0x68>
 8008720:	2101      	movs	r1, #1
 8008722:	fa01 f605 	lsl.w	r6, r1, r5
 8008726:	1d72      	adds	r2, r6, #5
 8008728:	0092      	lsls	r2, r2, #2
 800872a:	4620      	mov	r0, r4
 800872c:	f001 feca 	bl	800a4c4 <_calloc_r>
 8008730:	b160      	cbz	r0, 800874c <_Balloc+0x64>
 8008732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008736:	e00e      	b.n	8008756 <_Balloc+0x6e>
 8008738:	2221      	movs	r2, #33	@ 0x21
 800873a:	2104      	movs	r1, #4
 800873c:	4620      	mov	r0, r4
 800873e:	f001 fec1 	bl	800a4c4 <_calloc_r>
 8008742:	69e3      	ldr	r3, [r4, #28]
 8008744:	60f0      	str	r0, [r6, #12]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e4      	bne.n	8008716 <_Balloc+0x2e>
 800874c:	2000      	movs	r0, #0
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	6802      	ldr	r2, [r0, #0]
 8008752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008756:	2300      	movs	r3, #0
 8008758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800875c:	e7f7      	b.n	800874e <_Balloc+0x66>
 800875e:	bf00      	nop
 8008760:	0800aeef 	.word	0x0800aeef
 8008764:	0800af6f 	.word	0x0800af6f

08008768 <_Bfree>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	69c6      	ldr	r6, [r0, #28]
 800876c:	4605      	mov	r5, r0
 800876e:	460c      	mov	r4, r1
 8008770:	b976      	cbnz	r6, 8008790 <_Bfree+0x28>
 8008772:	2010      	movs	r0, #16
 8008774:	f7ff ff02 	bl	800857c <malloc>
 8008778:	4602      	mov	r2, r0
 800877a:	61e8      	str	r0, [r5, #28]
 800877c:	b920      	cbnz	r0, 8008788 <_Bfree+0x20>
 800877e:	4b09      	ldr	r3, [pc, #36]	@ (80087a4 <_Bfree+0x3c>)
 8008780:	4809      	ldr	r0, [pc, #36]	@ (80087a8 <_Bfree+0x40>)
 8008782:	218f      	movs	r1, #143	@ 0x8f
 8008784:	f001 fe80 	bl	800a488 <__assert_func>
 8008788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800878c:	6006      	str	r6, [r0, #0]
 800878e:	60c6      	str	r6, [r0, #12]
 8008790:	b13c      	cbz	r4, 80087a2 <_Bfree+0x3a>
 8008792:	69eb      	ldr	r3, [r5, #28]
 8008794:	6862      	ldr	r2, [r4, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800879c:	6021      	str	r1, [r4, #0]
 800879e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	0800aeef 	.word	0x0800aeef
 80087a8:	0800af6f 	.word	0x0800af6f

080087ac <__multadd>:
 80087ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b0:	690d      	ldr	r5, [r1, #16]
 80087b2:	4607      	mov	r7, r0
 80087b4:	460c      	mov	r4, r1
 80087b6:	461e      	mov	r6, r3
 80087b8:	f101 0c14 	add.w	ip, r1, #20
 80087bc:	2000      	movs	r0, #0
 80087be:	f8dc 3000 	ldr.w	r3, [ip]
 80087c2:	b299      	uxth	r1, r3
 80087c4:	fb02 6101 	mla	r1, r2, r1, r6
 80087c8:	0c1e      	lsrs	r6, r3, #16
 80087ca:	0c0b      	lsrs	r3, r1, #16
 80087cc:	fb02 3306 	mla	r3, r2, r6, r3
 80087d0:	b289      	uxth	r1, r1
 80087d2:	3001      	adds	r0, #1
 80087d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087d8:	4285      	cmp	r5, r0
 80087da:	f84c 1b04 	str.w	r1, [ip], #4
 80087de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087e2:	dcec      	bgt.n	80087be <__multadd+0x12>
 80087e4:	b30e      	cbz	r6, 800882a <__multadd+0x7e>
 80087e6:	68a3      	ldr	r3, [r4, #8]
 80087e8:	42ab      	cmp	r3, r5
 80087ea:	dc19      	bgt.n	8008820 <__multadd+0x74>
 80087ec:	6861      	ldr	r1, [r4, #4]
 80087ee:	4638      	mov	r0, r7
 80087f0:	3101      	adds	r1, #1
 80087f2:	f7ff ff79 	bl	80086e8 <_Balloc>
 80087f6:	4680      	mov	r8, r0
 80087f8:	b928      	cbnz	r0, 8008806 <__multadd+0x5a>
 80087fa:	4602      	mov	r2, r0
 80087fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008830 <__multadd+0x84>)
 80087fe:	480d      	ldr	r0, [pc, #52]	@ (8008834 <__multadd+0x88>)
 8008800:	21ba      	movs	r1, #186	@ 0xba
 8008802:	f001 fe41 	bl	800a488 <__assert_func>
 8008806:	6922      	ldr	r2, [r4, #16]
 8008808:	3202      	adds	r2, #2
 800880a:	f104 010c 	add.w	r1, r4, #12
 800880e:	0092      	lsls	r2, r2, #2
 8008810:	300c      	adds	r0, #12
 8008812:	f001 fe21 	bl	800a458 <memcpy>
 8008816:	4621      	mov	r1, r4
 8008818:	4638      	mov	r0, r7
 800881a:	f7ff ffa5 	bl	8008768 <_Bfree>
 800881e:	4644      	mov	r4, r8
 8008820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008824:	3501      	adds	r5, #1
 8008826:	615e      	str	r6, [r3, #20]
 8008828:	6125      	str	r5, [r4, #16]
 800882a:	4620      	mov	r0, r4
 800882c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008830:	0800af5e 	.word	0x0800af5e
 8008834:	0800af6f 	.word	0x0800af6f

08008838 <__s2b>:
 8008838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800883c:	460c      	mov	r4, r1
 800883e:	4615      	mov	r5, r2
 8008840:	461f      	mov	r7, r3
 8008842:	2209      	movs	r2, #9
 8008844:	3308      	adds	r3, #8
 8008846:	4606      	mov	r6, r0
 8008848:	fb93 f3f2 	sdiv	r3, r3, r2
 800884c:	2100      	movs	r1, #0
 800884e:	2201      	movs	r2, #1
 8008850:	429a      	cmp	r2, r3
 8008852:	db09      	blt.n	8008868 <__s2b+0x30>
 8008854:	4630      	mov	r0, r6
 8008856:	f7ff ff47 	bl	80086e8 <_Balloc>
 800885a:	b940      	cbnz	r0, 800886e <__s2b+0x36>
 800885c:	4602      	mov	r2, r0
 800885e:	4b19      	ldr	r3, [pc, #100]	@ (80088c4 <__s2b+0x8c>)
 8008860:	4819      	ldr	r0, [pc, #100]	@ (80088c8 <__s2b+0x90>)
 8008862:	21d3      	movs	r1, #211	@ 0xd3
 8008864:	f001 fe10 	bl	800a488 <__assert_func>
 8008868:	0052      	lsls	r2, r2, #1
 800886a:	3101      	adds	r1, #1
 800886c:	e7f0      	b.n	8008850 <__s2b+0x18>
 800886e:	9b08      	ldr	r3, [sp, #32]
 8008870:	6143      	str	r3, [r0, #20]
 8008872:	2d09      	cmp	r5, #9
 8008874:	f04f 0301 	mov.w	r3, #1
 8008878:	6103      	str	r3, [r0, #16]
 800887a:	dd16      	ble.n	80088aa <__s2b+0x72>
 800887c:	f104 0909 	add.w	r9, r4, #9
 8008880:	46c8      	mov	r8, r9
 8008882:	442c      	add	r4, r5
 8008884:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008888:	4601      	mov	r1, r0
 800888a:	3b30      	subs	r3, #48	@ 0x30
 800888c:	220a      	movs	r2, #10
 800888e:	4630      	mov	r0, r6
 8008890:	f7ff ff8c 	bl	80087ac <__multadd>
 8008894:	45a0      	cmp	r8, r4
 8008896:	d1f5      	bne.n	8008884 <__s2b+0x4c>
 8008898:	f1a5 0408 	sub.w	r4, r5, #8
 800889c:	444c      	add	r4, r9
 800889e:	1b2d      	subs	r5, r5, r4
 80088a0:	1963      	adds	r3, r4, r5
 80088a2:	42bb      	cmp	r3, r7
 80088a4:	db04      	blt.n	80088b0 <__s2b+0x78>
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	340a      	adds	r4, #10
 80088ac:	2509      	movs	r5, #9
 80088ae:	e7f6      	b.n	800889e <__s2b+0x66>
 80088b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80088b4:	4601      	mov	r1, r0
 80088b6:	3b30      	subs	r3, #48	@ 0x30
 80088b8:	220a      	movs	r2, #10
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7ff ff76 	bl	80087ac <__multadd>
 80088c0:	e7ee      	b.n	80088a0 <__s2b+0x68>
 80088c2:	bf00      	nop
 80088c4:	0800af5e 	.word	0x0800af5e
 80088c8:	0800af6f 	.word	0x0800af6f

080088cc <__hi0bits>:
 80088cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80088d0:	4603      	mov	r3, r0
 80088d2:	bf36      	itet	cc
 80088d4:	0403      	lslcc	r3, r0, #16
 80088d6:	2000      	movcs	r0, #0
 80088d8:	2010      	movcc	r0, #16
 80088da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088de:	bf3c      	itt	cc
 80088e0:	021b      	lslcc	r3, r3, #8
 80088e2:	3008      	addcc	r0, #8
 80088e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088e8:	bf3c      	itt	cc
 80088ea:	011b      	lslcc	r3, r3, #4
 80088ec:	3004      	addcc	r0, #4
 80088ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088f2:	bf3c      	itt	cc
 80088f4:	009b      	lslcc	r3, r3, #2
 80088f6:	3002      	addcc	r0, #2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	db05      	blt.n	8008908 <__hi0bits+0x3c>
 80088fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008900:	f100 0001 	add.w	r0, r0, #1
 8008904:	bf08      	it	eq
 8008906:	2020      	moveq	r0, #32
 8008908:	4770      	bx	lr

0800890a <__lo0bits>:
 800890a:	6803      	ldr	r3, [r0, #0]
 800890c:	4602      	mov	r2, r0
 800890e:	f013 0007 	ands.w	r0, r3, #7
 8008912:	d00b      	beq.n	800892c <__lo0bits+0x22>
 8008914:	07d9      	lsls	r1, r3, #31
 8008916:	d421      	bmi.n	800895c <__lo0bits+0x52>
 8008918:	0798      	lsls	r0, r3, #30
 800891a:	bf49      	itett	mi
 800891c:	085b      	lsrmi	r3, r3, #1
 800891e:	089b      	lsrpl	r3, r3, #2
 8008920:	2001      	movmi	r0, #1
 8008922:	6013      	strmi	r3, [r2, #0]
 8008924:	bf5c      	itt	pl
 8008926:	6013      	strpl	r3, [r2, #0]
 8008928:	2002      	movpl	r0, #2
 800892a:	4770      	bx	lr
 800892c:	b299      	uxth	r1, r3
 800892e:	b909      	cbnz	r1, 8008934 <__lo0bits+0x2a>
 8008930:	0c1b      	lsrs	r3, r3, #16
 8008932:	2010      	movs	r0, #16
 8008934:	b2d9      	uxtb	r1, r3
 8008936:	b909      	cbnz	r1, 800893c <__lo0bits+0x32>
 8008938:	3008      	adds	r0, #8
 800893a:	0a1b      	lsrs	r3, r3, #8
 800893c:	0719      	lsls	r1, r3, #28
 800893e:	bf04      	itt	eq
 8008940:	091b      	lsreq	r3, r3, #4
 8008942:	3004      	addeq	r0, #4
 8008944:	0799      	lsls	r1, r3, #30
 8008946:	bf04      	itt	eq
 8008948:	089b      	lsreq	r3, r3, #2
 800894a:	3002      	addeq	r0, #2
 800894c:	07d9      	lsls	r1, r3, #31
 800894e:	d403      	bmi.n	8008958 <__lo0bits+0x4e>
 8008950:	085b      	lsrs	r3, r3, #1
 8008952:	f100 0001 	add.w	r0, r0, #1
 8008956:	d003      	beq.n	8008960 <__lo0bits+0x56>
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	4770      	bx	lr
 800895c:	2000      	movs	r0, #0
 800895e:	4770      	bx	lr
 8008960:	2020      	movs	r0, #32
 8008962:	4770      	bx	lr

08008964 <__i2b>:
 8008964:	b510      	push	{r4, lr}
 8008966:	460c      	mov	r4, r1
 8008968:	2101      	movs	r1, #1
 800896a:	f7ff febd 	bl	80086e8 <_Balloc>
 800896e:	4602      	mov	r2, r0
 8008970:	b928      	cbnz	r0, 800897e <__i2b+0x1a>
 8008972:	4b05      	ldr	r3, [pc, #20]	@ (8008988 <__i2b+0x24>)
 8008974:	4805      	ldr	r0, [pc, #20]	@ (800898c <__i2b+0x28>)
 8008976:	f240 1145 	movw	r1, #325	@ 0x145
 800897a:	f001 fd85 	bl	800a488 <__assert_func>
 800897e:	2301      	movs	r3, #1
 8008980:	6144      	str	r4, [r0, #20]
 8008982:	6103      	str	r3, [r0, #16]
 8008984:	bd10      	pop	{r4, pc}
 8008986:	bf00      	nop
 8008988:	0800af5e 	.word	0x0800af5e
 800898c:	0800af6f 	.word	0x0800af6f

08008990 <__multiply>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	4617      	mov	r7, r2
 8008996:	690a      	ldr	r2, [r1, #16]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	429a      	cmp	r2, r3
 800899c:	bfa8      	it	ge
 800899e:	463b      	movge	r3, r7
 80089a0:	4689      	mov	r9, r1
 80089a2:	bfa4      	itt	ge
 80089a4:	460f      	movge	r7, r1
 80089a6:	4699      	movge	r9, r3
 80089a8:	693d      	ldr	r5, [r7, #16]
 80089aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	eb05 060a 	add.w	r6, r5, sl
 80089b6:	42b3      	cmp	r3, r6
 80089b8:	b085      	sub	sp, #20
 80089ba:	bfb8      	it	lt
 80089bc:	3101      	addlt	r1, #1
 80089be:	f7ff fe93 	bl	80086e8 <_Balloc>
 80089c2:	b930      	cbnz	r0, 80089d2 <__multiply+0x42>
 80089c4:	4602      	mov	r2, r0
 80089c6:	4b41      	ldr	r3, [pc, #260]	@ (8008acc <__multiply+0x13c>)
 80089c8:	4841      	ldr	r0, [pc, #260]	@ (8008ad0 <__multiply+0x140>)
 80089ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80089ce:	f001 fd5b 	bl	800a488 <__assert_func>
 80089d2:	f100 0414 	add.w	r4, r0, #20
 80089d6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80089da:	4623      	mov	r3, r4
 80089dc:	2200      	movs	r2, #0
 80089de:	4573      	cmp	r3, lr
 80089e0:	d320      	bcc.n	8008a24 <__multiply+0x94>
 80089e2:	f107 0814 	add.w	r8, r7, #20
 80089e6:	f109 0114 	add.w	r1, r9, #20
 80089ea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80089ee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80089f2:	9302      	str	r3, [sp, #8]
 80089f4:	1beb      	subs	r3, r5, r7
 80089f6:	3b15      	subs	r3, #21
 80089f8:	f023 0303 	bic.w	r3, r3, #3
 80089fc:	3304      	adds	r3, #4
 80089fe:	3715      	adds	r7, #21
 8008a00:	42bd      	cmp	r5, r7
 8008a02:	bf38      	it	cc
 8008a04:	2304      	movcc	r3, #4
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	9b02      	ldr	r3, [sp, #8]
 8008a0a:	9103      	str	r1, [sp, #12]
 8008a0c:	428b      	cmp	r3, r1
 8008a0e:	d80c      	bhi.n	8008a2a <__multiply+0x9a>
 8008a10:	2e00      	cmp	r6, #0
 8008a12:	dd03      	ble.n	8008a1c <__multiply+0x8c>
 8008a14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d055      	beq.n	8008ac8 <__multiply+0x138>
 8008a1c:	6106      	str	r6, [r0, #16]
 8008a1e:	b005      	add	sp, #20
 8008a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a24:	f843 2b04 	str.w	r2, [r3], #4
 8008a28:	e7d9      	b.n	80089de <__multiply+0x4e>
 8008a2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8008a2e:	f1ba 0f00 	cmp.w	sl, #0
 8008a32:	d01f      	beq.n	8008a74 <__multiply+0xe4>
 8008a34:	46c4      	mov	ip, r8
 8008a36:	46a1      	mov	r9, r4
 8008a38:	2700      	movs	r7, #0
 8008a3a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a3e:	f8d9 3000 	ldr.w	r3, [r9]
 8008a42:	fa1f fb82 	uxth.w	fp, r2
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	fb0a 330b 	mla	r3, sl, fp, r3
 8008a4c:	443b      	add	r3, r7
 8008a4e:	f8d9 7000 	ldr.w	r7, [r9]
 8008a52:	0c12      	lsrs	r2, r2, #16
 8008a54:	0c3f      	lsrs	r7, r7, #16
 8008a56:	fb0a 7202 	mla	r2, sl, r2, r7
 8008a5a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a64:	4565      	cmp	r5, ip
 8008a66:	f849 3b04 	str.w	r3, [r9], #4
 8008a6a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008a6e:	d8e4      	bhi.n	8008a3a <__multiply+0xaa>
 8008a70:	9b01      	ldr	r3, [sp, #4]
 8008a72:	50e7      	str	r7, [r4, r3]
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a7a:	3104      	adds	r1, #4
 8008a7c:	f1b9 0f00 	cmp.w	r9, #0
 8008a80:	d020      	beq.n	8008ac4 <__multiply+0x134>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	4647      	mov	r7, r8
 8008a86:	46a4      	mov	ip, r4
 8008a88:	f04f 0a00 	mov.w	sl, #0
 8008a8c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008a90:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008a94:	fb09 220b 	mla	r2, r9, fp, r2
 8008a98:	4452      	add	r2, sl
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aa0:	f84c 3b04 	str.w	r3, [ip], #4
 8008aa4:	f857 3b04 	ldr.w	r3, [r7], #4
 8008aa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008aac:	f8bc 3000 	ldrh.w	r3, [ip]
 8008ab0:	fb09 330a 	mla	r3, r9, sl, r3
 8008ab4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008ab8:	42bd      	cmp	r5, r7
 8008aba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008abe:	d8e5      	bhi.n	8008a8c <__multiply+0xfc>
 8008ac0:	9a01      	ldr	r2, [sp, #4]
 8008ac2:	50a3      	str	r3, [r4, r2]
 8008ac4:	3404      	adds	r4, #4
 8008ac6:	e79f      	b.n	8008a08 <__multiply+0x78>
 8008ac8:	3e01      	subs	r6, #1
 8008aca:	e7a1      	b.n	8008a10 <__multiply+0x80>
 8008acc:	0800af5e 	.word	0x0800af5e
 8008ad0:	0800af6f 	.word	0x0800af6f

08008ad4 <__pow5mult>:
 8008ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad8:	4615      	mov	r5, r2
 8008ada:	f012 0203 	ands.w	r2, r2, #3
 8008ade:	4607      	mov	r7, r0
 8008ae0:	460e      	mov	r6, r1
 8008ae2:	d007      	beq.n	8008af4 <__pow5mult+0x20>
 8008ae4:	4c25      	ldr	r4, [pc, #148]	@ (8008b7c <__pow5mult+0xa8>)
 8008ae6:	3a01      	subs	r2, #1
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008aee:	f7ff fe5d 	bl	80087ac <__multadd>
 8008af2:	4606      	mov	r6, r0
 8008af4:	10ad      	asrs	r5, r5, #2
 8008af6:	d03d      	beq.n	8008b74 <__pow5mult+0xa0>
 8008af8:	69fc      	ldr	r4, [r7, #28]
 8008afa:	b97c      	cbnz	r4, 8008b1c <__pow5mult+0x48>
 8008afc:	2010      	movs	r0, #16
 8008afe:	f7ff fd3d 	bl	800857c <malloc>
 8008b02:	4602      	mov	r2, r0
 8008b04:	61f8      	str	r0, [r7, #28]
 8008b06:	b928      	cbnz	r0, 8008b14 <__pow5mult+0x40>
 8008b08:	4b1d      	ldr	r3, [pc, #116]	@ (8008b80 <__pow5mult+0xac>)
 8008b0a:	481e      	ldr	r0, [pc, #120]	@ (8008b84 <__pow5mult+0xb0>)
 8008b0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008b10:	f001 fcba 	bl	800a488 <__assert_func>
 8008b14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b18:	6004      	str	r4, [r0, #0]
 8008b1a:	60c4      	str	r4, [r0, #12]
 8008b1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008b20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b24:	b94c      	cbnz	r4, 8008b3a <__pow5mult+0x66>
 8008b26:	f240 2171 	movw	r1, #625	@ 0x271
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	f7ff ff1a 	bl	8008964 <__i2b>
 8008b30:	2300      	movs	r3, #0
 8008b32:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b36:	4604      	mov	r4, r0
 8008b38:	6003      	str	r3, [r0, #0]
 8008b3a:	f04f 0900 	mov.w	r9, #0
 8008b3e:	07eb      	lsls	r3, r5, #31
 8008b40:	d50a      	bpl.n	8008b58 <__pow5mult+0x84>
 8008b42:	4631      	mov	r1, r6
 8008b44:	4622      	mov	r2, r4
 8008b46:	4638      	mov	r0, r7
 8008b48:	f7ff ff22 	bl	8008990 <__multiply>
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4680      	mov	r8, r0
 8008b50:	4638      	mov	r0, r7
 8008b52:	f7ff fe09 	bl	8008768 <_Bfree>
 8008b56:	4646      	mov	r6, r8
 8008b58:	106d      	asrs	r5, r5, #1
 8008b5a:	d00b      	beq.n	8008b74 <__pow5mult+0xa0>
 8008b5c:	6820      	ldr	r0, [r4, #0]
 8008b5e:	b938      	cbnz	r0, 8008b70 <__pow5mult+0x9c>
 8008b60:	4622      	mov	r2, r4
 8008b62:	4621      	mov	r1, r4
 8008b64:	4638      	mov	r0, r7
 8008b66:	f7ff ff13 	bl	8008990 <__multiply>
 8008b6a:	6020      	str	r0, [r4, #0]
 8008b6c:	f8c0 9000 	str.w	r9, [r0]
 8008b70:	4604      	mov	r4, r0
 8008b72:	e7e4      	b.n	8008b3e <__pow5mult+0x6a>
 8008b74:	4630      	mov	r0, r6
 8008b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7a:	bf00      	nop
 8008b7c:	0800b080 	.word	0x0800b080
 8008b80:	0800aeef 	.word	0x0800aeef
 8008b84:	0800af6f 	.word	0x0800af6f

08008b88 <__lshift>:
 8008b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	6849      	ldr	r1, [r1, #4]
 8008b90:	6923      	ldr	r3, [r4, #16]
 8008b92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b96:	68a3      	ldr	r3, [r4, #8]
 8008b98:	4607      	mov	r7, r0
 8008b9a:	4691      	mov	r9, r2
 8008b9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ba0:	f108 0601 	add.w	r6, r8, #1
 8008ba4:	42b3      	cmp	r3, r6
 8008ba6:	db0b      	blt.n	8008bc0 <__lshift+0x38>
 8008ba8:	4638      	mov	r0, r7
 8008baa:	f7ff fd9d 	bl	80086e8 <_Balloc>
 8008bae:	4605      	mov	r5, r0
 8008bb0:	b948      	cbnz	r0, 8008bc6 <__lshift+0x3e>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	4b28      	ldr	r3, [pc, #160]	@ (8008c58 <__lshift+0xd0>)
 8008bb6:	4829      	ldr	r0, [pc, #164]	@ (8008c5c <__lshift+0xd4>)
 8008bb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008bbc:	f001 fc64 	bl	800a488 <__assert_func>
 8008bc0:	3101      	adds	r1, #1
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	e7ee      	b.n	8008ba4 <__lshift+0x1c>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f100 0114 	add.w	r1, r0, #20
 8008bcc:	f100 0210 	add.w	r2, r0, #16
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	4553      	cmp	r3, sl
 8008bd4:	db33      	blt.n	8008c3e <__lshift+0xb6>
 8008bd6:	6920      	ldr	r0, [r4, #16]
 8008bd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bdc:	f104 0314 	add.w	r3, r4, #20
 8008be0:	f019 091f 	ands.w	r9, r9, #31
 8008be4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008be8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bec:	d02b      	beq.n	8008c46 <__lshift+0xbe>
 8008bee:	f1c9 0e20 	rsb	lr, r9, #32
 8008bf2:	468a      	mov	sl, r1
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	fa00 f009 	lsl.w	r0, r0, r9
 8008bfc:	4310      	orrs	r0, r2
 8008bfe:	f84a 0b04 	str.w	r0, [sl], #4
 8008c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c06:	459c      	cmp	ip, r3
 8008c08:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c0c:	d8f3      	bhi.n	8008bf6 <__lshift+0x6e>
 8008c0e:	ebac 0304 	sub.w	r3, ip, r4
 8008c12:	3b15      	subs	r3, #21
 8008c14:	f023 0303 	bic.w	r3, r3, #3
 8008c18:	3304      	adds	r3, #4
 8008c1a:	f104 0015 	add.w	r0, r4, #21
 8008c1e:	4560      	cmp	r0, ip
 8008c20:	bf88      	it	hi
 8008c22:	2304      	movhi	r3, #4
 8008c24:	50ca      	str	r2, [r1, r3]
 8008c26:	b10a      	cbz	r2, 8008c2c <__lshift+0xa4>
 8008c28:	f108 0602 	add.w	r6, r8, #2
 8008c2c:	3e01      	subs	r6, #1
 8008c2e:	4638      	mov	r0, r7
 8008c30:	612e      	str	r6, [r5, #16]
 8008c32:	4621      	mov	r1, r4
 8008c34:	f7ff fd98 	bl	8008768 <_Bfree>
 8008c38:	4628      	mov	r0, r5
 8008c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c42:	3301      	adds	r3, #1
 8008c44:	e7c5      	b.n	8008bd2 <__lshift+0x4a>
 8008c46:	3904      	subs	r1, #4
 8008c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c50:	459c      	cmp	ip, r3
 8008c52:	d8f9      	bhi.n	8008c48 <__lshift+0xc0>
 8008c54:	e7ea      	b.n	8008c2c <__lshift+0xa4>
 8008c56:	bf00      	nop
 8008c58:	0800af5e 	.word	0x0800af5e
 8008c5c:	0800af6f 	.word	0x0800af6f

08008c60 <__mcmp>:
 8008c60:	690a      	ldr	r2, [r1, #16]
 8008c62:	4603      	mov	r3, r0
 8008c64:	6900      	ldr	r0, [r0, #16]
 8008c66:	1a80      	subs	r0, r0, r2
 8008c68:	b530      	push	{r4, r5, lr}
 8008c6a:	d10e      	bne.n	8008c8a <__mcmp+0x2a>
 8008c6c:	3314      	adds	r3, #20
 8008c6e:	3114      	adds	r1, #20
 8008c70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c80:	4295      	cmp	r5, r2
 8008c82:	d003      	beq.n	8008c8c <__mcmp+0x2c>
 8008c84:	d205      	bcs.n	8008c92 <__mcmp+0x32>
 8008c86:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8a:	bd30      	pop	{r4, r5, pc}
 8008c8c:	42a3      	cmp	r3, r4
 8008c8e:	d3f3      	bcc.n	8008c78 <__mcmp+0x18>
 8008c90:	e7fb      	b.n	8008c8a <__mcmp+0x2a>
 8008c92:	2001      	movs	r0, #1
 8008c94:	e7f9      	b.n	8008c8a <__mcmp+0x2a>
	...

08008c98 <__mdiff>:
 8008c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	4689      	mov	r9, r1
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	4648      	mov	r0, r9
 8008ca4:	4614      	mov	r4, r2
 8008ca6:	f7ff ffdb 	bl	8008c60 <__mcmp>
 8008caa:	1e05      	subs	r5, r0, #0
 8008cac:	d112      	bne.n	8008cd4 <__mdiff+0x3c>
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f7ff fd19 	bl	80086e8 <_Balloc>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	b928      	cbnz	r0, 8008cc6 <__mdiff+0x2e>
 8008cba:	4b3f      	ldr	r3, [pc, #252]	@ (8008db8 <__mdiff+0x120>)
 8008cbc:	f240 2137 	movw	r1, #567	@ 0x237
 8008cc0:	483e      	ldr	r0, [pc, #248]	@ (8008dbc <__mdiff+0x124>)
 8008cc2:	f001 fbe1 	bl	800a488 <__assert_func>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ccc:	4610      	mov	r0, r2
 8008cce:	b003      	add	sp, #12
 8008cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd4:	bfbc      	itt	lt
 8008cd6:	464b      	movlt	r3, r9
 8008cd8:	46a1      	movlt	r9, r4
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ce0:	bfba      	itte	lt
 8008ce2:	461c      	movlt	r4, r3
 8008ce4:	2501      	movlt	r5, #1
 8008ce6:	2500      	movge	r5, #0
 8008ce8:	f7ff fcfe 	bl	80086e8 <_Balloc>
 8008cec:	4602      	mov	r2, r0
 8008cee:	b918      	cbnz	r0, 8008cf8 <__mdiff+0x60>
 8008cf0:	4b31      	ldr	r3, [pc, #196]	@ (8008db8 <__mdiff+0x120>)
 8008cf2:	f240 2145 	movw	r1, #581	@ 0x245
 8008cf6:	e7e3      	b.n	8008cc0 <__mdiff+0x28>
 8008cf8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008cfc:	6926      	ldr	r6, [r4, #16]
 8008cfe:	60c5      	str	r5, [r0, #12]
 8008d00:	f109 0310 	add.w	r3, r9, #16
 8008d04:	f109 0514 	add.w	r5, r9, #20
 8008d08:	f104 0e14 	add.w	lr, r4, #20
 8008d0c:	f100 0b14 	add.w	fp, r0, #20
 8008d10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008d14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	46d9      	mov	r9, fp
 8008d1c:	f04f 0c00 	mov.w	ip, #0
 8008d20:	9b01      	ldr	r3, [sp, #4]
 8008d22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008d26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	fa1f f38a 	uxth.w	r3, sl
 8008d30:	4619      	mov	r1, r3
 8008d32:	b283      	uxth	r3, r0
 8008d34:	1acb      	subs	r3, r1, r3
 8008d36:	0c00      	lsrs	r0, r0, #16
 8008d38:	4463      	add	r3, ip
 8008d3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008d3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008d48:	4576      	cmp	r6, lr
 8008d4a:	f849 3b04 	str.w	r3, [r9], #4
 8008d4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d52:	d8e5      	bhi.n	8008d20 <__mdiff+0x88>
 8008d54:	1b33      	subs	r3, r6, r4
 8008d56:	3b15      	subs	r3, #21
 8008d58:	f023 0303 	bic.w	r3, r3, #3
 8008d5c:	3415      	adds	r4, #21
 8008d5e:	3304      	adds	r3, #4
 8008d60:	42a6      	cmp	r6, r4
 8008d62:	bf38      	it	cc
 8008d64:	2304      	movcc	r3, #4
 8008d66:	441d      	add	r5, r3
 8008d68:	445b      	add	r3, fp
 8008d6a:	461e      	mov	r6, r3
 8008d6c:	462c      	mov	r4, r5
 8008d6e:	4544      	cmp	r4, r8
 8008d70:	d30e      	bcc.n	8008d90 <__mdiff+0xf8>
 8008d72:	f108 0103 	add.w	r1, r8, #3
 8008d76:	1b49      	subs	r1, r1, r5
 8008d78:	f021 0103 	bic.w	r1, r1, #3
 8008d7c:	3d03      	subs	r5, #3
 8008d7e:	45a8      	cmp	r8, r5
 8008d80:	bf38      	it	cc
 8008d82:	2100      	movcc	r1, #0
 8008d84:	440b      	add	r3, r1
 8008d86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d8a:	b191      	cbz	r1, 8008db2 <__mdiff+0x11a>
 8008d8c:	6117      	str	r7, [r2, #16]
 8008d8e:	e79d      	b.n	8008ccc <__mdiff+0x34>
 8008d90:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d94:	46e6      	mov	lr, ip
 8008d96:	0c08      	lsrs	r0, r1, #16
 8008d98:	fa1c fc81 	uxtah	ip, ip, r1
 8008d9c:	4471      	add	r1, lr
 8008d9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008da2:	b289      	uxth	r1, r1
 8008da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008da8:	f846 1b04 	str.w	r1, [r6], #4
 8008dac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008db0:	e7dd      	b.n	8008d6e <__mdiff+0xd6>
 8008db2:	3f01      	subs	r7, #1
 8008db4:	e7e7      	b.n	8008d86 <__mdiff+0xee>
 8008db6:	bf00      	nop
 8008db8:	0800af5e 	.word	0x0800af5e
 8008dbc:	0800af6f 	.word	0x0800af6f

08008dc0 <__ulp>:
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	ed8d 0b00 	vstr	d0, [sp]
 8008dc6:	9a01      	ldr	r2, [sp, #4]
 8008dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8008e08 <__ulp+0x48>)
 8008dca:	4013      	ands	r3, r2
 8008dcc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	dc08      	bgt.n	8008de6 <__ulp+0x26>
 8008dd4:	425b      	negs	r3, r3
 8008dd6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008dda:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008dde:	da04      	bge.n	8008dea <__ulp+0x2a>
 8008de0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008de4:	4113      	asrs	r3, r2
 8008de6:	2200      	movs	r2, #0
 8008de8:	e008      	b.n	8008dfc <__ulp+0x3c>
 8008dea:	f1a2 0314 	sub.w	r3, r2, #20
 8008dee:	2b1e      	cmp	r3, #30
 8008df0:	bfda      	itte	le
 8008df2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008df6:	40da      	lsrle	r2, r3
 8008df8:	2201      	movgt	r2, #1
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	ec41 0b10 	vmov	d0, r0, r1
 8008e04:	b002      	add	sp, #8
 8008e06:	4770      	bx	lr
 8008e08:	7ff00000 	.word	0x7ff00000

08008e0c <__b2d>:
 8008e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e10:	6906      	ldr	r6, [r0, #16]
 8008e12:	f100 0814 	add.w	r8, r0, #20
 8008e16:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008e1a:	1f37      	subs	r7, r6, #4
 8008e1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e20:	4610      	mov	r0, r2
 8008e22:	f7ff fd53 	bl	80088cc <__hi0bits>
 8008e26:	f1c0 0320 	rsb	r3, r0, #32
 8008e2a:	280a      	cmp	r0, #10
 8008e2c:	600b      	str	r3, [r1, #0]
 8008e2e:	491b      	ldr	r1, [pc, #108]	@ (8008e9c <__b2d+0x90>)
 8008e30:	dc15      	bgt.n	8008e5e <__b2d+0x52>
 8008e32:	f1c0 0c0b 	rsb	ip, r0, #11
 8008e36:	fa22 f30c 	lsr.w	r3, r2, ip
 8008e3a:	45b8      	cmp	r8, r7
 8008e3c:	ea43 0501 	orr.w	r5, r3, r1
 8008e40:	bf34      	ite	cc
 8008e42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e46:	2300      	movcs	r3, #0
 8008e48:	3015      	adds	r0, #21
 8008e4a:	fa02 f000 	lsl.w	r0, r2, r0
 8008e4e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008e52:	4303      	orrs	r3, r0
 8008e54:	461c      	mov	r4, r3
 8008e56:	ec45 4b10 	vmov	d0, r4, r5
 8008e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5e:	45b8      	cmp	r8, r7
 8008e60:	bf3a      	itte	cc
 8008e62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e66:	f1a6 0708 	subcc.w	r7, r6, #8
 8008e6a:	2300      	movcs	r3, #0
 8008e6c:	380b      	subs	r0, #11
 8008e6e:	d012      	beq.n	8008e96 <__b2d+0x8a>
 8008e70:	f1c0 0120 	rsb	r1, r0, #32
 8008e74:	fa23 f401 	lsr.w	r4, r3, r1
 8008e78:	4082      	lsls	r2, r0
 8008e7a:	4322      	orrs	r2, r4
 8008e7c:	4547      	cmp	r7, r8
 8008e7e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008e82:	bf8c      	ite	hi
 8008e84:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008e88:	2200      	movls	r2, #0
 8008e8a:	4083      	lsls	r3, r0
 8008e8c:	40ca      	lsrs	r2, r1
 8008e8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008e92:	4313      	orrs	r3, r2
 8008e94:	e7de      	b.n	8008e54 <__b2d+0x48>
 8008e96:	ea42 0501 	orr.w	r5, r2, r1
 8008e9a:	e7db      	b.n	8008e54 <__b2d+0x48>
 8008e9c:	3ff00000 	.word	0x3ff00000

08008ea0 <__d2b>:
 8008ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ea4:	460f      	mov	r7, r1
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	ec59 8b10 	vmov	r8, r9, d0
 8008eac:	4616      	mov	r6, r2
 8008eae:	f7ff fc1b 	bl	80086e8 <_Balloc>
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	b930      	cbnz	r0, 8008ec4 <__d2b+0x24>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	4b23      	ldr	r3, [pc, #140]	@ (8008f48 <__d2b+0xa8>)
 8008eba:	4824      	ldr	r0, [pc, #144]	@ (8008f4c <__d2b+0xac>)
 8008ebc:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ec0:	f001 fae2 	bl	800a488 <__assert_func>
 8008ec4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ec8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ecc:	b10d      	cbz	r5, 8008ed2 <__d2b+0x32>
 8008ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	f1b8 0300 	subs.w	r3, r8, #0
 8008ed8:	d023      	beq.n	8008f22 <__d2b+0x82>
 8008eda:	4668      	mov	r0, sp
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	f7ff fd14 	bl	800890a <__lo0bits>
 8008ee2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ee6:	b1d0      	cbz	r0, 8008f1e <__d2b+0x7e>
 8008ee8:	f1c0 0320 	rsb	r3, r0, #32
 8008eec:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef0:	430b      	orrs	r3, r1
 8008ef2:	40c2      	lsrs	r2, r0
 8008ef4:	6163      	str	r3, [r4, #20]
 8008ef6:	9201      	str	r2, [sp, #4]
 8008ef8:	9b01      	ldr	r3, [sp, #4]
 8008efa:	61a3      	str	r3, [r4, #24]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bf0c      	ite	eq
 8008f00:	2201      	moveq	r2, #1
 8008f02:	2202      	movne	r2, #2
 8008f04:	6122      	str	r2, [r4, #16]
 8008f06:	b1a5      	cbz	r5, 8008f32 <__d2b+0x92>
 8008f08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f0c:	4405      	add	r5, r0
 8008f0e:	603d      	str	r5, [r7, #0]
 8008f10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f14:	6030      	str	r0, [r6, #0]
 8008f16:	4620      	mov	r0, r4
 8008f18:	b003      	add	sp, #12
 8008f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f1e:	6161      	str	r1, [r4, #20]
 8008f20:	e7ea      	b.n	8008ef8 <__d2b+0x58>
 8008f22:	a801      	add	r0, sp, #4
 8008f24:	f7ff fcf1 	bl	800890a <__lo0bits>
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	6163      	str	r3, [r4, #20]
 8008f2c:	3020      	adds	r0, #32
 8008f2e:	2201      	movs	r2, #1
 8008f30:	e7e8      	b.n	8008f04 <__d2b+0x64>
 8008f32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f3a:	6038      	str	r0, [r7, #0]
 8008f3c:	6918      	ldr	r0, [r3, #16]
 8008f3e:	f7ff fcc5 	bl	80088cc <__hi0bits>
 8008f42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f46:	e7e5      	b.n	8008f14 <__d2b+0x74>
 8008f48:	0800af5e 	.word	0x0800af5e
 8008f4c:	0800af6f 	.word	0x0800af6f

08008f50 <__ratio>:
 8008f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	b085      	sub	sp, #20
 8008f56:	e9cd 1000 	strd	r1, r0, [sp]
 8008f5a:	a902      	add	r1, sp, #8
 8008f5c:	f7ff ff56 	bl	8008e0c <__b2d>
 8008f60:	9800      	ldr	r0, [sp, #0]
 8008f62:	a903      	add	r1, sp, #12
 8008f64:	ec55 4b10 	vmov	r4, r5, d0
 8008f68:	f7ff ff50 	bl	8008e0c <__b2d>
 8008f6c:	9b01      	ldr	r3, [sp, #4]
 8008f6e:	6919      	ldr	r1, [r3, #16]
 8008f70:	9b00      	ldr	r3, [sp, #0]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	1ac9      	subs	r1, r1, r3
 8008f76:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008f7a:	1a9b      	subs	r3, r3, r2
 8008f7c:	ec5b ab10 	vmov	sl, fp, d0
 8008f80:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	bfce      	itee	gt
 8008f88:	462a      	movgt	r2, r5
 8008f8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f8e:	465a      	movle	r2, fp
 8008f90:	462f      	mov	r7, r5
 8008f92:	46d9      	mov	r9, fp
 8008f94:	bfcc      	ite	gt
 8008f96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f9a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	4652      	mov	r2, sl
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	f7f7 fc71 	bl	800088c <__aeabi_ddiv>
 8008faa:	ec41 0b10 	vmov	d0, r0, r1
 8008fae:	b005      	add	sp, #20
 8008fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fb4 <__copybits>:
 8008fb4:	3901      	subs	r1, #1
 8008fb6:	b570      	push	{r4, r5, r6, lr}
 8008fb8:	1149      	asrs	r1, r1, #5
 8008fba:	6914      	ldr	r4, [r2, #16]
 8008fbc:	3101      	adds	r1, #1
 8008fbe:	f102 0314 	add.w	r3, r2, #20
 8008fc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008fc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008fca:	1f05      	subs	r5, r0, #4
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	d30c      	bcc.n	8008fea <__copybits+0x36>
 8008fd0:	1aa3      	subs	r3, r4, r2
 8008fd2:	3b11      	subs	r3, #17
 8008fd4:	f023 0303 	bic.w	r3, r3, #3
 8008fd8:	3211      	adds	r2, #17
 8008fda:	42a2      	cmp	r2, r4
 8008fdc:	bf88      	it	hi
 8008fde:	2300      	movhi	r3, #0
 8008fe0:	4418      	add	r0, r3
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	4288      	cmp	r0, r1
 8008fe6:	d305      	bcc.n	8008ff4 <__copybits+0x40>
 8008fe8:	bd70      	pop	{r4, r5, r6, pc}
 8008fea:	f853 6b04 	ldr.w	r6, [r3], #4
 8008fee:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ff2:	e7eb      	b.n	8008fcc <__copybits+0x18>
 8008ff4:	f840 3b04 	str.w	r3, [r0], #4
 8008ff8:	e7f4      	b.n	8008fe4 <__copybits+0x30>

08008ffa <__any_on>:
 8008ffa:	f100 0214 	add.w	r2, r0, #20
 8008ffe:	6900      	ldr	r0, [r0, #16]
 8009000:	114b      	asrs	r3, r1, #5
 8009002:	4298      	cmp	r0, r3
 8009004:	b510      	push	{r4, lr}
 8009006:	db11      	blt.n	800902c <__any_on+0x32>
 8009008:	dd0a      	ble.n	8009020 <__any_on+0x26>
 800900a:	f011 011f 	ands.w	r1, r1, #31
 800900e:	d007      	beq.n	8009020 <__any_on+0x26>
 8009010:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009014:	fa24 f001 	lsr.w	r0, r4, r1
 8009018:	fa00 f101 	lsl.w	r1, r0, r1
 800901c:	428c      	cmp	r4, r1
 800901e:	d10b      	bne.n	8009038 <__any_on+0x3e>
 8009020:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009024:	4293      	cmp	r3, r2
 8009026:	d803      	bhi.n	8009030 <__any_on+0x36>
 8009028:	2000      	movs	r0, #0
 800902a:	bd10      	pop	{r4, pc}
 800902c:	4603      	mov	r3, r0
 800902e:	e7f7      	b.n	8009020 <__any_on+0x26>
 8009030:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009034:	2900      	cmp	r1, #0
 8009036:	d0f5      	beq.n	8009024 <__any_on+0x2a>
 8009038:	2001      	movs	r0, #1
 800903a:	e7f6      	b.n	800902a <__any_on+0x30>

0800903c <sulp>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	4604      	mov	r4, r0
 8009040:	460d      	mov	r5, r1
 8009042:	ec45 4b10 	vmov	d0, r4, r5
 8009046:	4616      	mov	r6, r2
 8009048:	f7ff feba 	bl	8008dc0 <__ulp>
 800904c:	ec51 0b10 	vmov	r0, r1, d0
 8009050:	b17e      	cbz	r6, 8009072 <sulp+0x36>
 8009052:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009056:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800905a:	2b00      	cmp	r3, #0
 800905c:	dd09      	ble.n	8009072 <sulp+0x36>
 800905e:	051b      	lsls	r3, r3, #20
 8009060:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009064:	2400      	movs	r4, #0
 8009066:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800906a:	4622      	mov	r2, r4
 800906c:	462b      	mov	r3, r5
 800906e:	f7f7 fae3 	bl	8000638 <__aeabi_dmul>
 8009072:	ec41 0b10 	vmov	d0, r0, r1
 8009076:	bd70      	pop	{r4, r5, r6, pc}

08009078 <_strtod_l>:
 8009078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	b09f      	sub	sp, #124	@ 0x7c
 800907e:	460c      	mov	r4, r1
 8009080:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009082:	2200      	movs	r2, #0
 8009084:	921a      	str	r2, [sp, #104]	@ 0x68
 8009086:	9005      	str	r0, [sp, #20]
 8009088:	f04f 0a00 	mov.w	sl, #0
 800908c:	f04f 0b00 	mov.w	fp, #0
 8009090:	460a      	mov	r2, r1
 8009092:	9219      	str	r2, [sp, #100]	@ 0x64
 8009094:	7811      	ldrb	r1, [r2, #0]
 8009096:	292b      	cmp	r1, #43	@ 0x2b
 8009098:	d04a      	beq.n	8009130 <_strtod_l+0xb8>
 800909a:	d838      	bhi.n	800910e <_strtod_l+0x96>
 800909c:	290d      	cmp	r1, #13
 800909e:	d832      	bhi.n	8009106 <_strtod_l+0x8e>
 80090a0:	2908      	cmp	r1, #8
 80090a2:	d832      	bhi.n	800910a <_strtod_l+0x92>
 80090a4:	2900      	cmp	r1, #0
 80090a6:	d03b      	beq.n	8009120 <_strtod_l+0xa8>
 80090a8:	2200      	movs	r2, #0
 80090aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80090ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80090ae:	782a      	ldrb	r2, [r5, #0]
 80090b0:	2a30      	cmp	r2, #48	@ 0x30
 80090b2:	f040 80b2 	bne.w	800921a <_strtod_l+0x1a2>
 80090b6:	786a      	ldrb	r2, [r5, #1]
 80090b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80090bc:	2a58      	cmp	r2, #88	@ 0x58
 80090be:	d16e      	bne.n	800919e <_strtod_l+0x126>
 80090c0:	9302      	str	r3, [sp, #8]
 80090c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	4a8f      	ldr	r2, [pc, #572]	@ (8009308 <_strtod_l+0x290>)
 80090cc:	9805      	ldr	r0, [sp, #20]
 80090ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80090d0:	a919      	add	r1, sp, #100	@ 0x64
 80090d2:	f001 fa73 	bl	800a5bc <__gethex>
 80090d6:	f010 060f 	ands.w	r6, r0, #15
 80090da:	4604      	mov	r4, r0
 80090dc:	d005      	beq.n	80090ea <_strtod_l+0x72>
 80090de:	2e06      	cmp	r6, #6
 80090e0:	d128      	bne.n	8009134 <_strtod_l+0xbc>
 80090e2:	3501      	adds	r5, #1
 80090e4:	2300      	movs	r3, #0
 80090e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80090e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80090ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 858e 	bne.w	8009c0e <_strtod_l+0xb96>
 80090f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090f4:	b1cb      	cbz	r3, 800912a <_strtod_l+0xb2>
 80090f6:	4652      	mov	r2, sl
 80090f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80090fc:	ec43 2b10 	vmov	d0, r2, r3
 8009100:	b01f      	add	sp, #124	@ 0x7c
 8009102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009106:	2920      	cmp	r1, #32
 8009108:	d1ce      	bne.n	80090a8 <_strtod_l+0x30>
 800910a:	3201      	adds	r2, #1
 800910c:	e7c1      	b.n	8009092 <_strtod_l+0x1a>
 800910e:	292d      	cmp	r1, #45	@ 0x2d
 8009110:	d1ca      	bne.n	80090a8 <_strtod_l+0x30>
 8009112:	2101      	movs	r1, #1
 8009114:	910e      	str	r1, [sp, #56]	@ 0x38
 8009116:	1c51      	adds	r1, r2, #1
 8009118:	9119      	str	r1, [sp, #100]	@ 0x64
 800911a:	7852      	ldrb	r2, [r2, #1]
 800911c:	2a00      	cmp	r2, #0
 800911e:	d1c5      	bne.n	80090ac <_strtod_l+0x34>
 8009120:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009122:	9419      	str	r4, [sp, #100]	@ 0x64
 8009124:	2b00      	cmp	r3, #0
 8009126:	f040 8570 	bne.w	8009c0a <_strtod_l+0xb92>
 800912a:	4652      	mov	r2, sl
 800912c:	465b      	mov	r3, fp
 800912e:	e7e5      	b.n	80090fc <_strtod_l+0x84>
 8009130:	2100      	movs	r1, #0
 8009132:	e7ef      	b.n	8009114 <_strtod_l+0x9c>
 8009134:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009136:	b13a      	cbz	r2, 8009148 <_strtod_l+0xd0>
 8009138:	2135      	movs	r1, #53	@ 0x35
 800913a:	a81c      	add	r0, sp, #112	@ 0x70
 800913c:	f7ff ff3a 	bl	8008fb4 <__copybits>
 8009140:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009142:	9805      	ldr	r0, [sp, #20]
 8009144:	f7ff fb10 	bl	8008768 <_Bfree>
 8009148:	3e01      	subs	r6, #1
 800914a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800914c:	2e04      	cmp	r6, #4
 800914e:	d806      	bhi.n	800915e <_strtod_l+0xe6>
 8009150:	e8df f006 	tbb	[pc, r6]
 8009154:	201d0314 	.word	0x201d0314
 8009158:	14          	.byte	0x14
 8009159:	00          	.byte	0x00
 800915a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800915e:	05e1      	lsls	r1, r4, #23
 8009160:	bf48      	it	mi
 8009162:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009166:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800916a:	0d1b      	lsrs	r3, r3, #20
 800916c:	051b      	lsls	r3, r3, #20
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1bb      	bne.n	80090ea <_strtod_l+0x72>
 8009172:	f7fe fb2b 	bl	80077cc <__errno>
 8009176:	2322      	movs	r3, #34	@ 0x22
 8009178:	6003      	str	r3, [r0, #0]
 800917a:	e7b6      	b.n	80090ea <_strtod_l+0x72>
 800917c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009180:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009184:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009188:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800918c:	e7e7      	b.n	800915e <_strtod_l+0xe6>
 800918e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009310 <_strtod_l+0x298>
 8009192:	e7e4      	b.n	800915e <_strtod_l+0xe6>
 8009194:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009198:	f04f 3aff 	mov.w	sl, #4294967295
 800919c:	e7df      	b.n	800915e <_strtod_l+0xe6>
 800919e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80091a4:	785b      	ldrb	r3, [r3, #1]
 80091a6:	2b30      	cmp	r3, #48	@ 0x30
 80091a8:	d0f9      	beq.n	800919e <_strtod_l+0x126>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d09d      	beq.n	80090ea <_strtod_l+0x72>
 80091ae:	2301      	movs	r3, #1
 80091b0:	2700      	movs	r7, #0
 80091b2:	9308      	str	r3, [sp, #32]
 80091b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80091b8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80091ba:	46b9      	mov	r9, r7
 80091bc:	220a      	movs	r2, #10
 80091be:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80091c0:	7805      	ldrb	r5, [r0, #0]
 80091c2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80091c6:	b2d9      	uxtb	r1, r3
 80091c8:	2909      	cmp	r1, #9
 80091ca:	d928      	bls.n	800921e <_strtod_l+0x1a6>
 80091cc:	494f      	ldr	r1, [pc, #316]	@ (800930c <_strtod_l+0x294>)
 80091ce:	2201      	movs	r2, #1
 80091d0:	f001 f8fe 	bl	800a3d0 <strncmp>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d032      	beq.n	800923e <_strtod_l+0x1c6>
 80091d8:	2000      	movs	r0, #0
 80091da:	462a      	mov	r2, r5
 80091dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80091de:	464d      	mov	r5, r9
 80091e0:	4603      	mov	r3, r0
 80091e2:	2a65      	cmp	r2, #101	@ 0x65
 80091e4:	d001      	beq.n	80091ea <_strtod_l+0x172>
 80091e6:	2a45      	cmp	r2, #69	@ 0x45
 80091e8:	d114      	bne.n	8009214 <_strtod_l+0x19c>
 80091ea:	b91d      	cbnz	r5, 80091f4 <_strtod_l+0x17c>
 80091ec:	9a08      	ldr	r2, [sp, #32]
 80091ee:	4302      	orrs	r2, r0
 80091f0:	d096      	beq.n	8009120 <_strtod_l+0xa8>
 80091f2:	2500      	movs	r5, #0
 80091f4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80091f6:	1c62      	adds	r2, r4, #1
 80091f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80091fa:	7862      	ldrb	r2, [r4, #1]
 80091fc:	2a2b      	cmp	r2, #43	@ 0x2b
 80091fe:	d07a      	beq.n	80092f6 <_strtod_l+0x27e>
 8009200:	2a2d      	cmp	r2, #45	@ 0x2d
 8009202:	d07e      	beq.n	8009302 <_strtod_l+0x28a>
 8009204:	f04f 0c00 	mov.w	ip, #0
 8009208:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800920c:	2909      	cmp	r1, #9
 800920e:	f240 8085 	bls.w	800931c <_strtod_l+0x2a4>
 8009212:	9419      	str	r4, [sp, #100]	@ 0x64
 8009214:	f04f 0800 	mov.w	r8, #0
 8009218:	e0a5      	b.n	8009366 <_strtod_l+0x2ee>
 800921a:	2300      	movs	r3, #0
 800921c:	e7c8      	b.n	80091b0 <_strtod_l+0x138>
 800921e:	f1b9 0f08 	cmp.w	r9, #8
 8009222:	bfd8      	it	le
 8009224:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009226:	f100 0001 	add.w	r0, r0, #1
 800922a:	bfda      	itte	le
 800922c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009230:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009232:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009236:	f109 0901 	add.w	r9, r9, #1
 800923a:	9019      	str	r0, [sp, #100]	@ 0x64
 800923c:	e7bf      	b.n	80091be <_strtod_l+0x146>
 800923e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	9219      	str	r2, [sp, #100]	@ 0x64
 8009244:	785a      	ldrb	r2, [r3, #1]
 8009246:	f1b9 0f00 	cmp.w	r9, #0
 800924a:	d03b      	beq.n	80092c4 <_strtod_l+0x24c>
 800924c:	900a      	str	r0, [sp, #40]	@ 0x28
 800924e:	464d      	mov	r5, r9
 8009250:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009254:	2b09      	cmp	r3, #9
 8009256:	d912      	bls.n	800927e <_strtod_l+0x206>
 8009258:	2301      	movs	r3, #1
 800925a:	e7c2      	b.n	80091e2 <_strtod_l+0x16a>
 800925c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	9219      	str	r2, [sp, #100]	@ 0x64
 8009262:	785a      	ldrb	r2, [r3, #1]
 8009264:	3001      	adds	r0, #1
 8009266:	2a30      	cmp	r2, #48	@ 0x30
 8009268:	d0f8      	beq.n	800925c <_strtod_l+0x1e4>
 800926a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800926e:	2b08      	cmp	r3, #8
 8009270:	f200 84d2 	bhi.w	8009c18 <_strtod_l+0xba0>
 8009274:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009276:	900a      	str	r0, [sp, #40]	@ 0x28
 8009278:	2000      	movs	r0, #0
 800927a:	930c      	str	r3, [sp, #48]	@ 0x30
 800927c:	4605      	mov	r5, r0
 800927e:	3a30      	subs	r2, #48	@ 0x30
 8009280:	f100 0301 	add.w	r3, r0, #1
 8009284:	d018      	beq.n	80092b8 <_strtod_l+0x240>
 8009286:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009288:	4419      	add	r1, r3
 800928a:	910a      	str	r1, [sp, #40]	@ 0x28
 800928c:	462e      	mov	r6, r5
 800928e:	f04f 0e0a 	mov.w	lr, #10
 8009292:	1c71      	adds	r1, r6, #1
 8009294:	eba1 0c05 	sub.w	ip, r1, r5
 8009298:	4563      	cmp	r3, ip
 800929a:	dc15      	bgt.n	80092c8 <_strtod_l+0x250>
 800929c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80092a0:	182b      	adds	r3, r5, r0
 80092a2:	2b08      	cmp	r3, #8
 80092a4:	f105 0501 	add.w	r5, r5, #1
 80092a8:	4405      	add	r5, r0
 80092aa:	dc1a      	bgt.n	80092e2 <_strtod_l+0x26a>
 80092ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092ae:	230a      	movs	r3, #10
 80092b0:	fb03 2301 	mla	r3, r3, r1, r2
 80092b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092b6:	2300      	movs	r3, #0
 80092b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092ba:	1c51      	adds	r1, r2, #1
 80092bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80092be:	7852      	ldrb	r2, [r2, #1]
 80092c0:	4618      	mov	r0, r3
 80092c2:	e7c5      	b.n	8009250 <_strtod_l+0x1d8>
 80092c4:	4648      	mov	r0, r9
 80092c6:	e7ce      	b.n	8009266 <_strtod_l+0x1ee>
 80092c8:	2e08      	cmp	r6, #8
 80092ca:	dc05      	bgt.n	80092d8 <_strtod_l+0x260>
 80092cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80092ce:	fb0e f606 	mul.w	r6, lr, r6
 80092d2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80092d4:	460e      	mov	r6, r1
 80092d6:	e7dc      	b.n	8009292 <_strtod_l+0x21a>
 80092d8:	2910      	cmp	r1, #16
 80092da:	bfd8      	it	le
 80092dc:	fb0e f707 	mulle.w	r7, lr, r7
 80092e0:	e7f8      	b.n	80092d4 <_strtod_l+0x25c>
 80092e2:	2b0f      	cmp	r3, #15
 80092e4:	bfdc      	itt	le
 80092e6:	230a      	movle	r3, #10
 80092e8:	fb03 2707 	mlale	r7, r3, r7, r2
 80092ec:	e7e3      	b.n	80092b6 <_strtod_l+0x23e>
 80092ee:	2300      	movs	r3, #0
 80092f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80092f2:	2301      	movs	r3, #1
 80092f4:	e77a      	b.n	80091ec <_strtod_l+0x174>
 80092f6:	f04f 0c00 	mov.w	ip, #0
 80092fa:	1ca2      	adds	r2, r4, #2
 80092fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80092fe:	78a2      	ldrb	r2, [r4, #2]
 8009300:	e782      	b.n	8009208 <_strtod_l+0x190>
 8009302:	f04f 0c01 	mov.w	ip, #1
 8009306:	e7f8      	b.n	80092fa <_strtod_l+0x282>
 8009308:	0800b194 	.word	0x0800b194
 800930c:	0800afc8 	.word	0x0800afc8
 8009310:	7ff00000 	.word	0x7ff00000
 8009314:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009316:	1c51      	adds	r1, r2, #1
 8009318:	9119      	str	r1, [sp, #100]	@ 0x64
 800931a:	7852      	ldrb	r2, [r2, #1]
 800931c:	2a30      	cmp	r2, #48	@ 0x30
 800931e:	d0f9      	beq.n	8009314 <_strtod_l+0x29c>
 8009320:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009324:	2908      	cmp	r1, #8
 8009326:	f63f af75 	bhi.w	8009214 <_strtod_l+0x19c>
 800932a:	3a30      	subs	r2, #48	@ 0x30
 800932c:	9209      	str	r2, [sp, #36]	@ 0x24
 800932e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009330:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009332:	f04f 080a 	mov.w	r8, #10
 8009336:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009338:	1c56      	adds	r6, r2, #1
 800933a:	9619      	str	r6, [sp, #100]	@ 0x64
 800933c:	7852      	ldrb	r2, [r2, #1]
 800933e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009342:	f1be 0f09 	cmp.w	lr, #9
 8009346:	d939      	bls.n	80093bc <_strtod_l+0x344>
 8009348:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800934a:	1a76      	subs	r6, r6, r1
 800934c:	2e08      	cmp	r6, #8
 800934e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009352:	dc03      	bgt.n	800935c <_strtod_l+0x2e4>
 8009354:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009356:	4588      	cmp	r8, r1
 8009358:	bfa8      	it	ge
 800935a:	4688      	movge	r8, r1
 800935c:	f1bc 0f00 	cmp.w	ip, #0
 8009360:	d001      	beq.n	8009366 <_strtod_l+0x2ee>
 8009362:	f1c8 0800 	rsb	r8, r8, #0
 8009366:	2d00      	cmp	r5, #0
 8009368:	d14e      	bne.n	8009408 <_strtod_l+0x390>
 800936a:	9908      	ldr	r1, [sp, #32]
 800936c:	4308      	orrs	r0, r1
 800936e:	f47f aebc 	bne.w	80090ea <_strtod_l+0x72>
 8009372:	2b00      	cmp	r3, #0
 8009374:	f47f aed4 	bne.w	8009120 <_strtod_l+0xa8>
 8009378:	2a69      	cmp	r2, #105	@ 0x69
 800937a:	d028      	beq.n	80093ce <_strtod_l+0x356>
 800937c:	dc25      	bgt.n	80093ca <_strtod_l+0x352>
 800937e:	2a49      	cmp	r2, #73	@ 0x49
 8009380:	d025      	beq.n	80093ce <_strtod_l+0x356>
 8009382:	2a4e      	cmp	r2, #78	@ 0x4e
 8009384:	f47f aecc 	bne.w	8009120 <_strtod_l+0xa8>
 8009388:	499a      	ldr	r1, [pc, #616]	@ (80095f4 <_strtod_l+0x57c>)
 800938a:	a819      	add	r0, sp, #100	@ 0x64
 800938c:	f001 fb38 	bl	800aa00 <__match>
 8009390:	2800      	cmp	r0, #0
 8009392:	f43f aec5 	beq.w	8009120 <_strtod_l+0xa8>
 8009396:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	2b28      	cmp	r3, #40	@ 0x28
 800939c:	d12e      	bne.n	80093fc <_strtod_l+0x384>
 800939e:	4996      	ldr	r1, [pc, #600]	@ (80095f8 <_strtod_l+0x580>)
 80093a0:	aa1c      	add	r2, sp, #112	@ 0x70
 80093a2:	a819      	add	r0, sp, #100	@ 0x64
 80093a4:	f001 fb40 	bl	800aa28 <__hexnan>
 80093a8:	2805      	cmp	r0, #5
 80093aa:	d127      	bne.n	80093fc <_strtod_l+0x384>
 80093ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80093ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80093b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80093b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80093ba:	e696      	b.n	80090ea <_strtod_l+0x72>
 80093bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093be:	fb08 2101 	mla	r1, r8, r1, r2
 80093c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80093c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80093c8:	e7b5      	b.n	8009336 <_strtod_l+0x2be>
 80093ca:	2a6e      	cmp	r2, #110	@ 0x6e
 80093cc:	e7da      	b.n	8009384 <_strtod_l+0x30c>
 80093ce:	498b      	ldr	r1, [pc, #556]	@ (80095fc <_strtod_l+0x584>)
 80093d0:	a819      	add	r0, sp, #100	@ 0x64
 80093d2:	f001 fb15 	bl	800aa00 <__match>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	f43f aea2 	beq.w	8009120 <_strtod_l+0xa8>
 80093dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093de:	4988      	ldr	r1, [pc, #544]	@ (8009600 <_strtod_l+0x588>)
 80093e0:	3b01      	subs	r3, #1
 80093e2:	a819      	add	r0, sp, #100	@ 0x64
 80093e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80093e6:	f001 fb0b 	bl	800aa00 <__match>
 80093ea:	b910      	cbnz	r0, 80093f2 <_strtod_l+0x37a>
 80093ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093ee:	3301      	adds	r3, #1
 80093f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80093f2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009610 <_strtod_l+0x598>
 80093f6:	f04f 0a00 	mov.w	sl, #0
 80093fa:	e676      	b.n	80090ea <_strtod_l+0x72>
 80093fc:	4881      	ldr	r0, [pc, #516]	@ (8009604 <_strtod_l+0x58c>)
 80093fe:	f001 f83b 	bl	800a478 <nan>
 8009402:	ec5b ab10 	vmov	sl, fp, d0
 8009406:	e670      	b.n	80090ea <_strtod_l+0x72>
 8009408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800940a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800940c:	eba8 0303 	sub.w	r3, r8, r3
 8009410:	f1b9 0f00 	cmp.w	r9, #0
 8009414:	bf08      	it	eq
 8009416:	46a9      	moveq	r9, r5
 8009418:	2d10      	cmp	r5, #16
 800941a:	9309      	str	r3, [sp, #36]	@ 0x24
 800941c:	462c      	mov	r4, r5
 800941e:	bfa8      	it	ge
 8009420:	2410      	movge	r4, #16
 8009422:	f7f7 f88f 	bl	8000544 <__aeabi_ui2d>
 8009426:	2d09      	cmp	r5, #9
 8009428:	4682      	mov	sl, r0
 800942a:	468b      	mov	fp, r1
 800942c:	dc13      	bgt.n	8009456 <_strtod_l+0x3de>
 800942e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009430:	2b00      	cmp	r3, #0
 8009432:	f43f ae5a 	beq.w	80090ea <_strtod_l+0x72>
 8009436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009438:	dd78      	ble.n	800952c <_strtod_l+0x4b4>
 800943a:	2b16      	cmp	r3, #22
 800943c:	dc5f      	bgt.n	80094fe <_strtod_l+0x486>
 800943e:	4972      	ldr	r1, [pc, #456]	@ (8009608 <_strtod_l+0x590>)
 8009440:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009448:	4652      	mov	r2, sl
 800944a:	465b      	mov	r3, fp
 800944c:	f7f7 f8f4 	bl	8000638 <__aeabi_dmul>
 8009450:	4682      	mov	sl, r0
 8009452:	468b      	mov	fp, r1
 8009454:	e649      	b.n	80090ea <_strtod_l+0x72>
 8009456:	4b6c      	ldr	r3, [pc, #432]	@ (8009608 <_strtod_l+0x590>)
 8009458:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800945c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009460:	f7f7 f8ea 	bl	8000638 <__aeabi_dmul>
 8009464:	4682      	mov	sl, r0
 8009466:	4638      	mov	r0, r7
 8009468:	468b      	mov	fp, r1
 800946a:	f7f7 f86b 	bl	8000544 <__aeabi_ui2d>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4650      	mov	r0, sl
 8009474:	4659      	mov	r1, fp
 8009476:	f7f6 ff29 	bl	80002cc <__adddf3>
 800947a:	2d0f      	cmp	r5, #15
 800947c:	4682      	mov	sl, r0
 800947e:	468b      	mov	fp, r1
 8009480:	ddd5      	ble.n	800942e <_strtod_l+0x3b6>
 8009482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009484:	1b2c      	subs	r4, r5, r4
 8009486:	441c      	add	r4, r3
 8009488:	2c00      	cmp	r4, #0
 800948a:	f340 8093 	ble.w	80095b4 <_strtod_l+0x53c>
 800948e:	f014 030f 	ands.w	r3, r4, #15
 8009492:	d00a      	beq.n	80094aa <_strtod_l+0x432>
 8009494:	495c      	ldr	r1, [pc, #368]	@ (8009608 <_strtod_l+0x590>)
 8009496:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800949a:	4652      	mov	r2, sl
 800949c:	465b      	mov	r3, fp
 800949e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094a2:	f7f7 f8c9 	bl	8000638 <__aeabi_dmul>
 80094a6:	4682      	mov	sl, r0
 80094a8:	468b      	mov	fp, r1
 80094aa:	f034 040f 	bics.w	r4, r4, #15
 80094ae:	d073      	beq.n	8009598 <_strtod_l+0x520>
 80094b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80094b4:	dd49      	ble.n	800954a <_strtod_l+0x4d2>
 80094b6:	2400      	movs	r4, #0
 80094b8:	46a0      	mov	r8, r4
 80094ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80094bc:	46a1      	mov	r9, r4
 80094be:	9a05      	ldr	r2, [sp, #20]
 80094c0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009610 <_strtod_l+0x598>
 80094c4:	2322      	movs	r3, #34	@ 0x22
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	f04f 0a00 	mov.w	sl, #0
 80094cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f43f ae0b 	beq.w	80090ea <_strtod_l+0x72>
 80094d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094d6:	9805      	ldr	r0, [sp, #20]
 80094d8:	f7ff f946 	bl	8008768 <_Bfree>
 80094dc:	9805      	ldr	r0, [sp, #20]
 80094de:	4649      	mov	r1, r9
 80094e0:	f7ff f942 	bl	8008768 <_Bfree>
 80094e4:	9805      	ldr	r0, [sp, #20]
 80094e6:	4641      	mov	r1, r8
 80094e8:	f7ff f93e 	bl	8008768 <_Bfree>
 80094ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094ee:	9805      	ldr	r0, [sp, #20]
 80094f0:	f7ff f93a 	bl	8008768 <_Bfree>
 80094f4:	9805      	ldr	r0, [sp, #20]
 80094f6:	4621      	mov	r1, r4
 80094f8:	f7ff f936 	bl	8008768 <_Bfree>
 80094fc:	e5f5      	b.n	80090ea <_strtod_l+0x72>
 80094fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009500:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009504:	4293      	cmp	r3, r2
 8009506:	dbbc      	blt.n	8009482 <_strtod_l+0x40a>
 8009508:	4c3f      	ldr	r4, [pc, #252]	@ (8009608 <_strtod_l+0x590>)
 800950a:	f1c5 050f 	rsb	r5, r5, #15
 800950e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009512:	4652      	mov	r2, sl
 8009514:	465b      	mov	r3, fp
 8009516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800951a:	f7f7 f88d 	bl	8000638 <__aeabi_dmul>
 800951e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009520:	1b5d      	subs	r5, r3, r5
 8009522:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009526:	e9d4 2300 	ldrd	r2, r3, [r4]
 800952a:	e78f      	b.n	800944c <_strtod_l+0x3d4>
 800952c:	3316      	adds	r3, #22
 800952e:	dba8      	blt.n	8009482 <_strtod_l+0x40a>
 8009530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009532:	eba3 0808 	sub.w	r8, r3, r8
 8009536:	4b34      	ldr	r3, [pc, #208]	@ (8009608 <_strtod_l+0x590>)
 8009538:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800953c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009540:	4650      	mov	r0, sl
 8009542:	4659      	mov	r1, fp
 8009544:	f7f7 f9a2 	bl	800088c <__aeabi_ddiv>
 8009548:	e782      	b.n	8009450 <_strtod_l+0x3d8>
 800954a:	2300      	movs	r3, #0
 800954c:	4f2f      	ldr	r7, [pc, #188]	@ (800960c <_strtod_l+0x594>)
 800954e:	1124      	asrs	r4, r4, #4
 8009550:	4650      	mov	r0, sl
 8009552:	4659      	mov	r1, fp
 8009554:	461e      	mov	r6, r3
 8009556:	2c01      	cmp	r4, #1
 8009558:	dc21      	bgt.n	800959e <_strtod_l+0x526>
 800955a:	b10b      	cbz	r3, 8009560 <_strtod_l+0x4e8>
 800955c:	4682      	mov	sl, r0
 800955e:	468b      	mov	fp, r1
 8009560:	492a      	ldr	r1, [pc, #168]	@ (800960c <_strtod_l+0x594>)
 8009562:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009566:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800956a:	4652      	mov	r2, sl
 800956c:	465b      	mov	r3, fp
 800956e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009572:	f7f7 f861 	bl	8000638 <__aeabi_dmul>
 8009576:	4b26      	ldr	r3, [pc, #152]	@ (8009610 <_strtod_l+0x598>)
 8009578:	460a      	mov	r2, r1
 800957a:	400b      	ands	r3, r1
 800957c:	4925      	ldr	r1, [pc, #148]	@ (8009614 <_strtod_l+0x59c>)
 800957e:	428b      	cmp	r3, r1
 8009580:	4682      	mov	sl, r0
 8009582:	d898      	bhi.n	80094b6 <_strtod_l+0x43e>
 8009584:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009588:	428b      	cmp	r3, r1
 800958a:	bf86      	itte	hi
 800958c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009618 <_strtod_l+0x5a0>
 8009590:	f04f 3aff 	movhi.w	sl, #4294967295
 8009594:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009598:	2300      	movs	r3, #0
 800959a:	9308      	str	r3, [sp, #32]
 800959c:	e076      	b.n	800968c <_strtod_l+0x614>
 800959e:	07e2      	lsls	r2, r4, #31
 80095a0:	d504      	bpl.n	80095ac <_strtod_l+0x534>
 80095a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095a6:	f7f7 f847 	bl	8000638 <__aeabi_dmul>
 80095aa:	2301      	movs	r3, #1
 80095ac:	3601      	adds	r6, #1
 80095ae:	1064      	asrs	r4, r4, #1
 80095b0:	3708      	adds	r7, #8
 80095b2:	e7d0      	b.n	8009556 <_strtod_l+0x4de>
 80095b4:	d0f0      	beq.n	8009598 <_strtod_l+0x520>
 80095b6:	4264      	negs	r4, r4
 80095b8:	f014 020f 	ands.w	r2, r4, #15
 80095bc:	d00a      	beq.n	80095d4 <_strtod_l+0x55c>
 80095be:	4b12      	ldr	r3, [pc, #72]	@ (8009608 <_strtod_l+0x590>)
 80095c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095c4:	4650      	mov	r0, sl
 80095c6:	4659      	mov	r1, fp
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	f7f7 f95e 	bl	800088c <__aeabi_ddiv>
 80095d0:	4682      	mov	sl, r0
 80095d2:	468b      	mov	fp, r1
 80095d4:	1124      	asrs	r4, r4, #4
 80095d6:	d0df      	beq.n	8009598 <_strtod_l+0x520>
 80095d8:	2c1f      	cmp	r4, #31
 80095da:	dd1f      	ble.n	800961c <_strtod_l+0x5a4>
 80095dc:	2400      	movs	r4, #0
 80095de:	46a0      	mov	r8, r4
 80095e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095e2:	46a1      	mov	r9, r4
 80095e4:	9a05      	ldr	r2, [sp, #20]
 80095e6:	2322      	movs	r3, #34	@ 0x22
 80095e8:	f04f 0a00 	mov.w	sl, #0
 80095ec:	f04f 0b00 	mov.w	fp, #0
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	e76b      	b.n	80094cc <_strtod_l+0x454>
 80095f4:	0800aeb6 	.word	0x0800aeb6
 80095f8:	0800b180 	.word	0x0800b180
 80095fc:	0800aeae 	.word	0x0800aeae
 8009600:	0800aee5 	.word	0x0800aee5
 8009604:	0800b01e 	.word	0x0800b01e
 8009608:	0800b0b8 	.word	0x0800b0b8
 800960c:	0800b090 	.word	0x0800b090
 8009610:	7ff00000 	.word	0x7ff00000
 8009614:	7ca00000 	.word	0x7ca00000
 8009618:	7fefffff 	.word	0x7fefffff
 800961c:	f014 0310 	ands.w	r3, r4, #16
 8009620:	bf18      	it	ne
 8009622:	236a      	movne	r3, #106	@ 0x6a
 8009624:	4ea9      	ldr	r6, [pc, #676]	@ (80098cc <_strtod_l+0x854>)
 8009626:	9308      	str	r3, [sp, #32]
 8009628:	4650      	mov	r0, sl
 800962a:	4659      	mov	r1, fp
 800962c:	2300      	movs	r3, #0
 800962e:	07e7      	lsls	r7, r4, #31
 8009630:	d504      	bpl.n	800963c <_strtod_l+0x5c4>
 8009632:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009636:	f7f6 ffff 	bl	8000638 <__aeabi_dmul>
 800963a:	2301      	movs	r3, #1
 800963c:	1064      	asrs	r4, r4, #1
 800963e:	f106 0608 	add.w	r6, r6, #8
 8009642:	d1f4      	bne.n	800962e <_strtod_l+0x5b6>
 8009644:	b10b      	cbz	r3, 800964a <_strtod_l+0x5d2>
 8009646:	4682      	mov	sl, r0
 8009648:	468b      	mov	fp, r1
 800964a:	9b08      	ldr	r3, [sp, #32]
 800964c:	b1b3      	cbz	r3, 800967c <_strtod_l+0x604>
 800964e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009652:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009656:	2b00      	cmp	r3, #0
 8009658:	4659      	mov	r1, fp
 800965a:	dd0f      	ble.n	800967c <_strtod_l+0x604>
 800965c:	2b1f      	cmp	r3, #31
 800965e:	dd56      	ble.n	800970e <_strtod_l+0x696>
 8009660:	2b34      	cmp	r3, #52	@ 0x34
 8009662:	bfde      	ittt	le
 8009664:	f04f 33ff 	movle.w	r3, #4294967295
 8009668:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800966c:	4093      	lslle	r3, r2
 800966e:	f04f 0a00 	mov.w	sl, #0
 8009672:	bfcc      	ite	gt
 8009674:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009678:	ea03 0b01 	andle.w	fp, r3, r1
 800967c:	2200      	movs	r2, #0
 800967e:	2300      	movs	r3, #0
 8009680:	4650      	mov	r0, sl
 8009682:	4659      	mov	r1, fp
 8009684:	f7f7 fa40 	bl	8000b08 <__aeabi_dcmpeq>
 8009688:	2800      	cmp	r0, #0
 800968a:	d1a7      	bne.n	80095dc <_strtod_l+0x564>
 800968c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009692:	9805      	ldr	r0, [sp, #20]
 8009694:	462b      	mov	r3, r5
 8009696:	464a      	mov	r2, r9
 8009698:	f7ff f8ce 	bl	8008838 <__s2b>
 800969c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800969e:	2800      	cmp	r0, #0
 80096a0:	f43f af09 	beq.w	80094b6 <_strtod_l+0x43e>
 80096a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096a8:	2a00      	cmp	r2, #0
 80096aa:	eba3 0308 	sub.w	r3, r3, r8
 80096ae:	bfa8      	it	ge
 80096b0:	2300      	movge	r3, #0
 80096b2:	9312      	str	r3, [sp, #72]	@ 0x48
 80096b4:	2400      	movs	r4, #0
 80096b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80096ba:	9316      	str	r3, [sp, #88]	@ 0x58
 80096bc:	46a0      	mov	r8, r4
 80096be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096c0:	9805      	ldr	r0, [sp, #20]
 80096c2:	6859      	ldr	r1, [r3, #4]
 80096c4:	f7ff f810 	bl	80086e8 <_Balloc>
 80096c8:	4681      	mov	r9, r0
 80096ca:	2800      	cmp	r0, #0
 80096cc:	f43f aef7 	beq.w	80094be <_strtod_l+0x446>
 80096d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096d2:	691a      	ldr	r2, [r3, #16]
 80096d4:	3202      	adds	r2, #2
 80096d6:	f103 010c 	add.w	r1, r3, #12
 80096da:	0092      	lsls	r2, r2, #2
 80096dc:	300c      	adds	r0, #12
 80096de:	f000 febb 	bl	800a458 <memcpy>
 80096e2:	ec4b ab10 	vmov	d0, sl, fp
 80096e6:	9805      	ldr	r0, [sp, #20]
 80096e8:	aa1c      	add	r2, sp, #112	@ 0x70
 80096ea:	a91b      	add	r1, sp, #108	@ 0x6c
 80096ec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80096f0:	f7ff fbd6 	bl	8008ea0 <__d2b>
 80096f4:	901a      	str	r0, [sp, #104]	@ 0x68
 80096f6:	2800      	cmp	r0, #0
 80096f8:	f43f aee1 	beq.w	80094be <_strtod_l+0x446>
 80096fc:	9805      	ldr	r0, [sp, #20]
 80096fe:	2101      	movs	r1, #1
 8009700:	f7ff f930 	bl	8008964 <__i2b>
 8009704:	4680      	mov	r8, r0
 8009706:	b948      	cbnz	r0, 800971c <_strtod_l+0x6a4>
 8009708:	f04f 0800 	mov.w	r8, #0
 800970c:	e6d7      	b.n	80094be <_strtod_l+0x446>
 800970e:	f04f 32ff 	mov.w	r2, #4294967295
 8009712:	fa02 f303 	lsl.w	r3, r2, r3
 8009716:	ea03 0a0a 	and.w	sl, r3, sl
 800971a:	e7af      	b.n	800967c <_strtod_l+0x604>
 800971c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800971e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009720:	2d00      	cmp	r5, #0
 8009722:	bfab      	itete	ge
 8009724:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009726:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009728:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800972a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800972c:	bfac      	ite	ge
 800972e:	18ef      	addge	r7, r5, r3
 8009730:	1b5e      	sublt	r6, r3, r5
 8009732:	9b08      	ldr	r3, [sp, #32]
 8009734:	1aed      	subs	r5, r5, r3
 8009736:	4415      	add	r5, r2
 8009738:	4b65      	ldr	r3, [pc, #404]	@ (80098d0 <_strtod_l+0x858>)
 800973a:	3d01      	subs	r5, #1
 800973c:	429d      	cmp	r5, r3
 800973e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009742:	da50      	bge.n	80097e6 <_strtod_l+0x76e>
 8009744:	1b5b      	subs	r3, r3, r5
 8009746:	2b1f      	cmp	r3, #31
 8009748:	eba2 0203 	sub.w	r2, r2, r3
 800974c:	f04f 0101 	mov.w	r1, #1
 8009750:	dc3d      	bgt.n	80097ce <_strtod_l+0x756>
 8009752:	fa01 f303 	lsl.w	r3, r1, r3
 8009756:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009758:	2300      	movs	r3, #0
 800975a:	9310      	str	r3, [sp, #64]	@ 0x40
 800975c:	18bd      	adds	r5, r7, r2
 800975e:	9b08      	ldr	r3, [sp, #32]
 8009760:	42af      	cmp	r7, r5
 8009762:	4416      	add	r6, r2
 8009764:	441e      	add	r6, r3
 8009766:	463b      	mov	r3, r7
 8009768:	bfa8      	it	ge
 800976a:	462b      	movge	r3, r5
 800976c:	42b3      	cmp	r3, r6
 800976e:	bfa8      	it	ge
 8009770:	4633      	movge	r3, r6
 8009772:	2b00      	cmp	r3, #0
 8009774:	bfc2      	ittt	gt
 8009776:	1aed      	subgt	r5, r5, r3
 8009778:	1af6      	subgt	r6, r6, r3
 800977a:	1aff      	subgt	r7, r7, r3
 800977c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800977e:	2b00      	cmp	r3, #0
 8009780:	dd16      	ble.n	80097b0 <_strtod_l+0x738>
 8009782:	4641      	mov	r1, r8
 8009784:	9805      	ldr	r0, [sp, #20]
 8009786:	461a      	mov	r2, r3
 8009788:	f7ff f9a4 	bl	8008ad4 <__pow5mult>
 800978c:	4680      	mov	r8, r0
 800978e:	2800      	cmp	r0, #0
 8009790:	d0ba      	beq.n	8009708 <_strtod_l+0x690>
 8009792:	4601      	mov	r1, r0
 8009794:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009796:	9805      	ldr	r0, [sp, #20]
 8009798:	f7ff f8fa 	bl	8008990 <__multiply>
 800979c:	900a      	str	r0, [sp, #40]	@ 0x28
 800979e:	2800      	cmp	r0, #0
 80097a0:	f43f ae8d 	beq.w	80094be <_strtod_l+0x446>
 80097a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097a6:	9805      	ldr	r0, [sp, #20]
 80097a8:	f7fe ffde 	bl	8008768 <_Bfree>
 80097ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80097b0:	2d00      	cmp	r5, #0
 80097b2:	dc1d      	bgt.n	80097f0 <_strtod_l+0x778>
 80097b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dd23      	ble.n	8009802 <_strtod_l+0x78a>
 80097ba:	4649      	mov	r1, r9
 80097bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80097be:	9805      	ldr	r0, [sp, #20]
 80097c0:	f7ff f988 	bl	8008ad4 <__pow5mult>
 80097c4:	4681      	mov	r9, r0
 80097c6:	b9e0      	cbnz	r0, 8009802 <_strtod_l+0x78a>
 80097c8:	f04f 0900 	mov.w	r9, #0
 80097cc:	e677      	b.n	80094be <_strtod_l+0x446>
 80097ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80097d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80097d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80097da:	35e2      	adds	r5, #226	@ 0xe2
 80097dc:	fa01 f305 	lsl.w	r3, r1, r5
 80097e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80097e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80097e4:	e7ba      	b.n	800975c <_strtod_l+0x6e4>
 80097e6:	2300      	movs	r3, #0
 80097e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80097ea:	2301      	movs	r3, #1
 80097ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097ee:	e7b5      	b.n	800975c <_strtod_l+0x6e4>
 80097f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097f2:	9805      	ldr	r0, [sp, #20]
 80097f4:	462a      	mov	r2, r5
 80097f6:	f7ff f9c7 	bl	8008b88 <__lshift>
 80097fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d1d9      	bne.n	80097b4 <_strtod_l+0x73c>
 8009800:	e65d      	b.n	80094be <_strtod_l+0x446>
 8009802:	2e00      	cmp	r6, #0
 8009804:	dd07      	ble.n	8009816 <_strtod_l+0x79e>
 8009806:	4649      	mov	r1, r9
 8009808:	9805      	ldr	r0, [sp, #20]
 800980a:	4632      	mov	r2, r6
 800980c:	f7ff f9bc 	bl	8008b88 <__lshift>
 8009810:	4681      	mov	r9, r0
 8009812:	2800      	cmp	r0, #0
 8009814:	d0d8      	beq.n	80097c8 <_strtod_l+0x750>
 8009816:	2f00      	cmp	r7, #0
 8009818:	dd08      	ble.n	800982c <_strtod_l+0x7b4>
 800981a:	4641      	mov	r1, r8
 800981c:	9805      	ldr	r0, [sp, #20]
 800981e:	463a      	mov	r2, r7
 8009820:	f7ff f9b2 	bl	8008b88 <__lshift>
 8009824:	4680      	mov	r8, r0
 8009826:	2800      	cmp	r0, #0
 8009828:	f43f ae49 	beq.w	80094be <_strtod_l+0x446>
 800982c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800982e:	9805      	ldr	r0, [sp, #20]
 8009830:	464a      	mov	r2, r9
 8009832:	f7ff fa31 	bl	8008c98 <__mdiff>
 8009836:	4604      	mov	r4, r0
 8009838:	2800      	cmp	r0, #0
 800983a:	f43f ae40 	beq.w	80094be <_strtod_l+0x446>
 800983e:	68c3      	ldr	r3, [r0, #12]
 8009840:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009842:	2300      	movs	r3, #0
 8009844:	60c3      	str	r3, [r0, #12]
 8009846:	4641      	mov	r1, r8
 8009848:	f7ff fa0a 	bl	8008c60 <__mcmp>
 800984c:	2800      	cmp	r0, #0
 800984e:	da45      	bge.n	80098dc <_strtod_l+0x864>
 8009850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009852:	ea53 030a 	orrs.w	r3, r3, sl
 8009856:	d16b      	bne.n	8009930 <_strtod_l+0x8b8>
 8009858:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800985c:	2b00      	cmp	r3, #0
 800985e:	d167      	bne.n	8009930 <_strtod_l+0x8b8>
 8009860:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009864:	0d1b      	lsrs	r3, r3, #20
 8009866:	051b      	lsls	r3, r3, #20
 8009868:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800986c:	d960      	bls.n	8009930 <_strtod_l+0x8b8>
 800986e:	6963      	ldr	r3, [r4, #20]
 8009870:	b913      	cbnz	r3, 8009878 <_strtod_l+0x800>
 8009872:	6923      	ldr	r3, [r4, #16]
 8009874:	2b01      	cmp	r3, #1
 8009876:	dd5b      	ble.n	8009930 <_strtod_l+0x8b8>
 8009878:	4621      	mov	r1, r4
 800987a:	2201      	movs	r2, #1
 800987c:	9805      	ldr	r0, [sp, #20]
 800987e:	f7ff f983 	bl	8008b88 <__lshift>
 8009882:	4641      	mov	r1, r8
 8009884:	4604      	mov	r4, r0
 8009886:	f7ff f9eb 	bl	8008c60 <__mcmp>
 800988a:	2800      	cmp	r0, #0
 800988c:	dd50      	ble.n	8009930 <_strtod_l+0x8b8>
 800988e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009892:	9a08      	ldr	r2, [sp, #32]
 8009894:	0d1b      	lsrs	r3, r3, #20
 8009896:	051b      	lsls	r3, r3, #20
 8009898:	2a00      	cmp	r2, #0
 800989a:	d06a      	beq.n	8009972 <_strtod_l+0x8fa>
 800989c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80098a0:	d867      	bhi.n	8009972 <_strtod_l+0x8fa>
 80098a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80098a6:	f67f ae9d 	bls.w	80095e4 <_strtod_l+0x56c>
 80098aa:	4b0a      	ldr	r3, [pc, #40]	@ (80098d4 <_strtod_l+0x85c>)
 80098ac:	4650      	mov	r0, sl
 80098ae:	4659      	mov	r1, fp
 80098b0:	2200      	movs	r2, #0
 80098b2:	f7f6 fec1 	bl	8000638 <__aeabi_dmul>
 80098b6:	4b08      	ldr	r3, [pc, #32]	@ (80098d8 <_strtod_l+0x860>)
 80098b8:	400b      	ands	r3, r1
 80098ba:	4682      	mov	sl, r0
 80098bc:	468b      	mov	fp, r1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f47f ae08 	bne.w	80094d4 <_strtod_l+0x45c>
 80098c4:	9a05      	ldr	r2, [sp, #20]
 80098c6:	2322      	movs	r3, #34	@ 0x22
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	e603      	b.n	80094d4 <_strtod_l+0x45c>
 80098cc:	0800b1a8 	.word	0x0800b1a8
 80098d0:	fffffc02 	.word	0xfffffc02
 80098d4:	39500000 	.word	0x39500000
 80098d8:	7ff00000 	.word	0x7ff00000
 80098dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80098e0:	d165      	bne.n	80099ae <_strtod_l+0x936>
 80098e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098e8:	b35a      	cbz	r2, 8009942 <_strtod_l+0x8ca>
 80098ea:	4a9f      	ldr	r2, [pc, #636]	@ (8009b68 <_strtod_l+0xaf0>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d12b      	bne.n	8009948 <_strtod_l+0x8d0>
 80098f0:	9b08      	ldr	r3, [sp, #32]
 80098f2:	4651      	mov	r1, sl
 80098f4:	b303      	cbz	r3, 8009938 <_strtod_l+0x8c0>
 80098f6:	4b9d      	ldr	r3, [pc, #628]	@ (8009b6c <_strtod_l+0xaf4>)
 80098f8:	465a      	mov	r2, fp
 80098fa:	4013      	ands	r3, r2
 80098fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009900:	f04f 32ff 	mov.w	r2, #4294967295
 8009904:	d81b      	bhi.n	800993e <_strtod_l+0x8c6>
 8009906:	0d1b      	lsrs	r3, r3, #20
 8009908:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800990c:	fa02 f303 	lsl.w	r3, r2, r3
 8009910:	4299      	cmp	r1, r3
 8009912:	d119      	bne.n	8009948 <_strtod_l+0x8d0>
 8009914:	4b96      	ldr	r3, [pc, #600]	@ (8009b70 <_strtod_l+0xaf8>)
 8009916:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009918:	429a      	cmp	r2, r3
 800991a:	d102      	bne.n	8009922 <_strtod_l+0x8aa>
 800991c:	3101      	adds	r1, #1
 800991e:	f43f adce 	beq.w	80094be <_strtod_l+0x446>
 8009922:	4b92      	ldr	r3, [pc, #584]	@ (8009b6c <_strtod_l+0xaf4>)
 8009924:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009926:	401a      	ands	r2, r3
 8009928:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800992c:	f04f 0a00 	mov.w	sl, #0
 8009930:	9b08      	ldr	r3, [sp, #32]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1b9      	bne.n	80098aa <_strtod_l+0x832>
 8009936:	e5cd      	b.n	80094d4 <_strtod_l+0x45c>
 8009938:	f04f 33ff 	mov.w	r3, #4294967295
 800993c:	e7e8      	b.n	8009910 <_strtod_l+0x898>
 800993e:	4613      	mov	r3, r2
 8009940:	e7e6      	b.n	8009910 <_strtod_l+0x898>
 8009942:	ea53 030a 	orrs.w	r3, r3, sl
 8009946:	d0a2      	beq.n	800988e <_strtod_l+0x816>
 8009948:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800994a:	b1db      	cbz	r3, 8009984 <_strtod_l+0x90c>
 800994c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800994e:	4213      	tst	r3, r2
 8009950:	d0ee      	beq.n	8009930 <_strtod_l+0x8b8>
 8009952:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009954:	9a08      	ldr	r2, [sp, #32]
 8009956:	4650      	mov	r0, sl
 8009958:	4659      	mov	r1, fp
 800995a:	b1bb      	cbz	r3, 800998c <_strtod_l+0x914>
 800995c:	f7ff fb6e 	bl	800903c <sulp>
 8009960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009964:	ec53 2b10 	vmov	r2, r3, d0
 8009968:	f7f6 fcb0 	bl	80002cc <__adddf3>
 800996c:	4682      	mov	sl, r0
 800996e:	468b      	mov	fp, r1
 8009970:	e7de      	b.n	8009930 <_strtod_l+0x8b8>
 8009972:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009976:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800997a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800997e:	f04f 3aff 	mov.w	sl, #4294967295
 8009982:	e7d5      	b.n	8009930 <_strtod_l+0x8b8>
 8009984:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009986:	ea13 0f0a 	tst.w	r3, sl
 800998a:	e7e1      	b.n	8009950 <_strtod_l+0x8d8>
 800998c:	f7ff fb56 	bl	800903c <sulp>
 8009990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009994:	ec53 2b10 	vmov	r2, r3, d0
 8009998:	f7f6 fc96 	bl	80002c8 <__aeabi_dsub>
 800999c:	2200      	movs	r2, #0
 800999e:	2300      	movs	r3, #0
 80099a0:	4682      	mov	sl, r0
 80099a2:	468b      	mov	fp, r1
 80099a4:	f7f7 f8b0 	bl	8000b08 <__aeabi_dcmpeq>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d0c1      	beq.n	8009930 <_strtod_l+0x8b8>
 80099ac:	e61a      	b.n	80095e4 <_strtod_l+0x56c>
 80099ae:	4641      	mov	r1, r8
 80099b0:	4620      	mov	r0, r4
 80099b2:	f7ff facd 	bl	8008f50 <__ratio>
 80099b6:	ec57 6b10 	vmov	r6, r7, d0
 80099ba:	2200      	movs	r2, #0
 80099bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f7 f8b4 	bl	8000b30 <__aeabi_dcmple>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d06f      	beq.n	8009aac <_strtod_l+0xa34>
 80099cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d17a      	bne.n	8009ac8 <_strtod_l+0xa50>
 80099d2:	f1ba 0f00 	cmp.w	sl, #0
 80099d6:	d158      	bne.n	8009a8a <_strtod_l+0xa12>
 80099d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d15a      	bne.n	8009a98 <_strtod_l+0xa20>
 80099e2:	4b64      	ldr	r3, [pc, #400]	@ (8009b74 <_strtod_l+0xafc>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	4630      	mov	r0, r6
 80099e8:	4639      	mov	r1, r7
 80099ea:	f7f7 f897 	bl	8000b1c <__aeabi_dcmplt>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d159      	bne.n	8009aa6 <_strtod_l+0xa2e>
 80099f2:	4630      	mov	r0, r6
 80099f4:	4639      	mov	r1, r7
 80099f6:	4b60      	ldr	r3, [pc, #384]	@ (8009b78 <_strtod_l+0xb00>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	f7f6 fe1d 	bl	8000638 <__aeabi_dmul>
 80099fe:	4606      	mov	r6, r0
 8009a00:	460f      	mov	r7, r1
 8009a02:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009a06:	9606      	str	r6, [sp, #24]
 8009a08:	9307      	str	r3, [sp, #28]
 8009a0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a0e:	4d57      	ldr	r5, [pc, #348]	@ (8009b6c <_strtod_l+0xaf4>)
 8009a10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a16:	401d      	ands	r5, r3
 8009a18:	4b58      	ldr	r3, [pc, #352]	@ (8009b7c <_strtod_l+0xb04>)
 8009a1a:	429d      	cmp	r5, r3
 8009a1c:	f040 80b2 	bne.w	8009b84 <_strtod_l+0xb0c>
 8009a20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009a26:	ec4b ab10 	vmov	d0, sl, fp
 8009a2a:	f7ff f9c9 	bl	8008dc0 <__ulp>
 8009a2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a32:	ec51 0b10 	vmov	r0, r1, d0
 8009a36:	f7f6 fdff 	bl	8000638 <__aeabi_dmul>
 8009a3a:	4652      	mov	r2, sl
 8009a3c:	465b      	mov	r3, fp
 8009a3e:	f7f6 fc45 	bl	80002cc <__adddf3>
 8009a42:	460b      	mov	r3, r1
 8009a44:	4949      	ldr	r1, [pc, #292]	@ (8009b6c <_strtod_l+0xaf4>)
 8009a46:	4a4e      	ldr	r2, [pc, #312]	@ (8009b80 <_strtod_l+0xb08>)
 8009a48:	4019      	ands	r1, r3
 8009a4a:	4291      	cmp	r1, r2
 8009a4c:	4682      	mov	sl, r0
 8009a4e:	d942      	bls.n	8009ad6 <_strtod_l+0xa5e>
 8009a50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a52:	4b47      	ldr	r3, [pc, #284]	@ (8009b70 <_strtod_l+0xaf8>)
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d103      	bne.n	8009a60 <_strtod_l+0x9e8>
 8009a58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	f43f ad2f 	beq.w	80094be <_strtod_l+0x446>
 8009a60:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009b70 <_strtod_l+0xaf8>
 8009a64:	f04f 3aff 	mov.w	sl, #4294967295
 8009a68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a6a:	9805      	ldr	r0, [sp, #20]
 8009a6c:	f7fe fe7c 	bl	8008768 <_Bfree>
 8009a70:	9805      	ldr	r0, [sp, #20]
 8009a72:	4649      	mov	r1, r9
 8009a74:	f7fe fe78 	bl	8008768 <_Bfree>
 8009a78:	9805      	ldr	r0, [sp, #20]
 8009a7a:	4641      	mov	r1, r8
 8009a7c:	f7fe fe74 	bl	8008768 <_Bfree>
 8009a80:	9805      	ldr	r0, [sp, #20]
 8009a82:	4621      	mov	r1, r4
 8009a84:	f7fe fe70 	bl	8008768 <_Bfree>
 8009a88:	e619      	b.n	80096be <_strtod_l+0x646>
 8009a8a:	f1ba 0f01 	cmp.w	sl, #1
 8009a8e:	d103      	bne.n	8009a98 <_strtod_l+0xa20>
 8009a90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f43f ada6 	beq.w	80095e4 <_strtod_l+0x56c>
 8009a98:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009b48 <_strtod_l+0xad0>
 8009a9c:	4f35      	ldr	r7, [pc, #212]	@ (8009b74 <_strtod_l+0xafc>)
 8009a9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	e7b1      	b.n	8009a0a <_strtod_l+0x992>
 8009aa6:	4f34      	ldr	r7, [pc, #208]	@ (8009b78 <_strtod_l+0xb00>)
 8009aa8:	2600      	movs	r6, #0
 8009aaa:	e7aa      	b.n	8009a02 <_strtod_l+0x98a>
 8009aac:	4b32      	ldr	r3, [pc, #200]	@ (8009b78 <_strtod_l+0xb00>)
 8009aae:	4630      	mov	r0, r6
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f7f6 fdc0 	bl	8000638 <__aeabi_dmul>
 8009ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d09f      	beq.n	8009a02 <_strtod_l+0x98a>
 8009ac2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009ac6:	e7a0      	b.n	8009a0a <_strtod_l+0x992>
 8009ac8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009b50 <_strtod_l+0xad8>
 8009acc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ad0:	ec57 6b17 	vmov	r6, r7, d7
 8009ad4:	e799      	b.n	8009a0a <_strtod_l+0x992>
 8009ad6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009ada:	9b08      	ldr	r3, [sp, #32]
 8009adc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1c1      	bne.n	8009a68 <_strtod_l+0x9f0>
 8009ae4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ae8:	0d1b      	lsrs	r3, r3, #20
 8009aea:	051b      	lsls	r3, r3, #20
 8009aec:	429d      	cmp	r5, r3
 8009aee:	d1bb      	bne.n	8009a68 <_strtod_l+0x9f0>
 8009af0:	4630      	mov	r0, r6
 8009af2:	4639      	mov	r1, r7
 8009af4:	f7f7 f900 	bl	8000cf8 <__aeabi_d2lz>
 8009af8:	f7f6 fd70 	bl	80005dc <__aeabi_l2d>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4630      	mov	r0, r6
 8009b02:	4639      	mov	r1, r7
 8009b04:	f7f6 fbe0 	bl	80002c8 <__aeabi_dsub>
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009b10:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b16:	ea46 060a 	orr.w	r6, r6, sl
 8009b1a:	431e      	orrs	r6, r3
 8009b1c:	d06f      	beq.n	8009bfe <_strtod_l+0xb86>
 8009b1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b58 <_strtod_l+0xae0>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f7f6 fffa 	bl	8000b1c <__aeabi_dcmplt>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	f47f acd3 	bne.w	80094d4 <_strtod_l+0x45c>
 8009b2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009b60 <_strtod_l+0xae8>)
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b38:	f7f7 f80e 	bl	8000b58 <__aeabi_dcmpgt>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d093      	beq.n	8009a68 <_strtod_l+0x9f0>
 8009b40:	e4c8      	b.n	80094d4 <_strtod_l+0x45c>
 8009b42:	bf00      	nop
 8009b44:	f3af 8000 	nop.w
 8009b48:	00000000 	.word	0x00000000
 8009b4c:	bff00000 	.word	0xbff00000
 8009b50:	00000000 	.word	0x00000000
 8009b54:	3ff00000 	.word	0x3ff00000
 8009b58:	94a03595 	.word	0x94a03595
 8009b5c:	3fdfffff 	.word	0x3fdfffff
 8009b60:	35afe535 	.word	0x35afe535
 8009b64:	3fe00000 	.word	0x3fe00000
 8009b68:	000fffff 	.word	0x000fffff
 8009b6c:	7ff00000 	.word	0x7ff00000
 8009b70:	7fefffff 	.word	0x7fefffff
 8009b74:	3ff00000 	.word	0x3ff00000
 8009b78:	3fe00000 	.word	0x3fe00000
 8009b7c:	7fe00000 	.word	0x7fe00000
 8009b80:	7c9fffff 	.word	0x7c9fffff
 8009b84:	9b08      	ldr	r3, [sp, #32]
 8009b86:	b323      	cbz	r3, 8009bd2 <_strtod_l+0xb5a>
 8009b88:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009b8c:	d821      	bhi.n	8009bd2 <_strtod_l+0xb5a>
 8009b8e:	a328      	add	r3, pc, #160	@ (adr r3, 8009c30 <_strtod_l+0xbb8>)
 8009b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b94:	4630      	mov	r0, r6
 8009b96:	4639      	mov	r1, r7
 8009b98:	f7f6 ffca 	bl	8000b30 <__aeabi_dcmple>
 8009b9c:	b1a0      	cbz	r0, 8009bc8 <_strtod_l+0xb50>
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f7f7 f821 	bl	8000be8 <__aeabi_d2uiz>
 8009ba6:	2801      	cmp	r0, #1
 8009ba8:	bf38      	it	cc
 8009baa:	2001      	movcc	r0, #1
 8009bac:	f7f6 fcca 	bl	8000544 <__aeabi_ui2d>
 8009bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	460f      	mov	r7, r1
 8009bb6:	b9fb      	cbnz	r3, 8009bf8 <_strtod_l+0xb80>
 8009bb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009bbc:	9014      	str	r0, [sp, #80]	@ 0x50
 8009bbe:	9315      	str	r3, [sp, #84]	@ 0x54
 8009bc0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009bc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009bc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009bca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009bce:	1b5b      	subs	r3, r3, r5
 8009bd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009bd2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009bd6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009bda:	f7ff f8f1 	bl	8008dc0 <__ulp>
 8009bde:	4650      	mov	r0, sl
 8009be0:	ec53 2b10 	vmov	r2, r3, d0
 8009be4:	4659      	mov	r1, fp
 8009be6:	f7f6 fd27 	bl	8000638 <__aeabi_dmul>
 8009bea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009bee:	f7f6 fb6d 	bl	80002cc <__adddf3>
 8009bf2:	4682      	mov	sl, r0
 8009bf4:	468b      	mov	fp, r1
 8009bf6:	e770      	b.n	8009ada <_strtod_l+0xa62>
 8009bf8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009bfc:	e7e0      	b.n	8009bc0 <_strtod_l+0xb48>
 8009bfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c38 <_strtod_l+0xbc0>)
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f7f6 ff8a 	bl	8000b1c <__aeabi_dcmplt>
 8009c08:	e798      	b.n	8009b3c <_strtod_l+0xac4>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8009c0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009c10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	f7ff ba6d 	b.w	80090f2 <_strtod_l+0x7a>
 8009c18:	2a65      	cmp	r2, #101	@ 0x65
 8009c1a:	f43f ab68 	beq.w	80092ee <_strtod_l+0x276>
 8009c1e:	2a45      	cmp	r2, #69	@ 0x45
 8009c20:	f43f ab65 	beq.w	80092ee <_strtod_l+0x276>
 8009c24:	2301      	movs	r3, #1
 8009c26:	f7ff bba0 	b.w	800936a <_strtod_l+0x2f2>
 8009c2a:	bf00      	nop
 8009c2c:	f3af 8000 	nop.w
 8009c30:	ffc00000 	.word	0xffc00000
 8009c34:	41dfffff 	.word	0x41dfffff
 8009c38:	94a03595 	.word	0x94a03595
 8009c3c:	3fcfffff 	.word	0x3fcfffff

08009c40 <_strtod_r>:
 8009c40:	4b01      	ldr	r3, [pc, #4]	@ (8009c48 <_strtod_r+0x8>)
 8009c42:	f7ff ba19 	b.w	8009078 <_strtod_l>
 8009c46:	bf00      	nop
 8009c48:	20000098 	.word	0x20000098

08009c4c <__ssputs_r>:
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	688e      	ldr	r6, [r1, #8]
 8009c52:	461f      	mov	r7, r3
 8009c54:	42be      	cmp	r6, r7
 8009c56:	680b      	ldr	r3, [r1, #0]
 8009c58:	4682      	mov	sl, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	4690      	mov	r8, r2
 8009c5e:	d82d      	bhi.n	8009cbc <__ssputs_r+0x70>
 8009c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c68:	d026      	beq.n	8009cb8 <__ssputs_r+0x6c>
 8009c6a:	6965      	ldr	r5, [r4, #20]
 8009c6c:	6909      	ldr	r1, [r1, #16]
 8009c6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c72:	eba3 0901 	sub.w	r9, r3, r1
 8009c76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c7a:	1c7b      	adds	r3, r7, #1
 8009c7c:	444b      	add	r3, r9
 8009c7e:	106d      	asrs	r5, r5, #1
 8009c80:	429d      	cmp	r5, r3
 8009c82:	bf38      	it	cc
 8009c84:	461d      	movcc	r5, r3
 8009c86:	0553      	lsls	r3, r2, #21
 8009c88:	d527      	bpl.n	8009cda <__ssputs_r+0x8e>
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	f7fe fca0 	bl	80085d0 <_malloc_r>
 8009c90:	4606      	mov	r6, r0
 8009c92:	b360      	cbz	r0, 8009cee <__ssputs_r+0xa2>
 8009c94:	6921      	ldr	r1, [r4, #16]
 8009c96:	464a      	mov	r2, r9
 8009c98:	f000 fbde 	bl	800a458 <memcpy>
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ca6:	81a3      	strh	r3, [r4, #12]
 8009ca8:	6126      	str	r6, [r4, #16]
 8009caa:	6165      	str	r5, [r4, #20]
 8009cac:	444e      	add	r6, r9
 8009cae:	eba5 0509 	sub.w	r5, r5, r9
 8009cb2:	6026      	str	r6, [r4, #0]
 8009cb4:	60a5      	str	r5, [r4, #8]
 8009cb6:	463e      	mov	r6, r7
 8009cb8:	42be      	cmp	r6, r7
 8009cba:	d900      	bls.n	8009cbe <__ssputs_r+0x72>
 8009cbc:	463e      	mov	r6, r7
 8009cbe:	6820      	ldr	r0, [r4, #0]
 8009cc0:	4632      	mov	r2, r6
 8009cc2:	4641      	mov	r1, r8
 8009cc4:	f000 fb6a 	bl	800a39c <memmove>
 8009cc8:	68a3      	ldr	r3, [r4, #8]
 8009cca:	1b9b      	subs	r3, r3, r6
 8009ccc:	60a3      	str	r3, [r4, #8]
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	4433      	add	r3, r6
 8009cd2:	6023      	str	r3, [r4, #0]
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cda:	462a      	mov	r2, r5
 8009cdc:	f000 ff51 	bl	800ab82 <_realloc_r>
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d1e0      	bne.n	8009ca8 <__ssputs_r+0x5c>
 8009ce6:	6921      	ldr	r1, [r4, #16]
 8009ce8:	4650      	mov	r0, sl
 8009cea:	f7fe fbfd 	bl	80084e8 <_free_r>
 8009cee:	230c      	movs	r3, #12
 8009cf0:	f8ca 3000 	str.w	r3, [sl]
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	e7e9      	b.n	8009cd6 <__ssputs_r+0x8a>
	...

08009d04 <_svfiprintf_r>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	4698      	mov	r8, r3
 8009d0a:	898b      	ldrh	r3, [r1, #12]
 8009d0c:	061b      	lsls	r3, r3, #24
 8009d0e:	b09d      	sub	sp, #116	@ 0x74
 8009d10:	4607      	mov	r7, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	4614      	mov	r4, r2
 8009d16:	d510      	bpl.n	8009d3a <_svfiprintf_r+0x36>
 8009d18:	690b      	ldr	r3, [r1, #16]
 8009d1a:	b973      	cbnz	r3, 8009d3a <_svfiprintf_r+0x36>
 8009d1c:	2140      	movs	r1, #64	@ 0x40
 8009d1e:	f7fe fc57 	bl	80085d0 <_malloc_r>
 8009d22:	6028      	str	r0, [r5, #0]
 8009d24:	6128      	str	r0, [r5, #16]
 8009d26:	b930      	cbnz	r0, 8009d36 <_svfiprintf_r+0x32>
 8009d28:	230c      	movs	r3, #12
 8009d2a:	603b      	str	r3, [r7, #0]
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	b01d      	add	sp, #116	@ 0x74
 8009d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d36:	2340      	movs	r3, #64	@ 0x40
 8009d38:	616b      	str	r3, [r5, #20]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d3e:	2320      	movs	r3, #32
 8009d40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d48:	2330      	movs	r3, #48	@ 0x30
 8009d4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ee8 <_svfiprintf_r+0x1e4>
 8009d4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d52:	f04f 0901 	mov.w	r9, #1
 8009d56:	4623      	mov	r3, r4
 8009d58:	469a      	mov	sl, r3
 8009d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d5e:	b10a      	cbz	r2, 8009d64 <_svfiprintf_r+0x60>
 8009d60:	2a25      	cmp	r2, #37	@ 0x25
 8009d62:	d1f9      	bne.n	8009d58 <_svfiprintf_r+0x54>
 8009d64:	ebba 0b04 	subs.w	fp, sl, r4
 8009d68:	d00b      	beq.n	8009d82 <_svfiprintf_r+0x7e>
 8009d6a:	465b      	mov	r3, fp
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4638      	mov	r0, r7
 8009d72:	f7ff ff6b 	bl	8009c4c <__ssputs_r>
 8009d76:	3001      	adds	r0, #1
 8009d78:	f000 80a7 	beq.w	8009eca <_svfiprintf_r+0x1c6>
 8009d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d7e:	445a      	add	r2, fp
 8009d80:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d82:	f89a 3000 	ldrb.w	r3, [sl]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 809f 	beq.w	8009eca <_svfiprintf_r+0x1c6>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d96:	f10a 0a01 	add.w	sl, sl, #1
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	9307      	str	r3, [sp, #28]
 8009d9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009da2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009da4:	4654      	mov	r4, sl
 8009da6:	2205      	movs	r2, #5
 8009da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dac:	484e      	ldr	r0, [pc, #312]	@ (8009ee8 <_svfiprintf_r+0x1e4>)
 8009dae:	f7f6 fa2f 	bl	8000210 <memchr>
 8009db2:	9a04      	ldr	r2, [sp, #16]
 8009db4:	b9d8      	cbnz	r0, 8009dee <_svfiprintf_r+0xea>
 8009db6:	06d0      	lsls	r0, r2, #27
 8009db8:	bf44      	itt	mi
 8009dba:	2320      	movmi	r3, #32
 8009dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dc0:	0711      	lsls	r1, r2, #28
 8009dc2:	bf44      	itt	mi
 8009dc4:	232b      	movmi	r3, #43	@ 0x2b
 8009dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dca:	f89a 3000 	ldrb.w	r3, [sl]
 8009dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dd0:	d015      	beq.n	8009dfe <_svfiprintf_r+0xfa>
 8009dd2:	9a07      	ldr	r2, [sp, #28]
 8009dd4:	4654      	mov	r4, sl
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	f04f 0c0a 	mov.w	ip, #10
 8009ddc:	4621      	mov	r1, r4
 8009dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009de2:	3b30      	subs	r3, #48	@ 0x30
 8009de4:	2b09      	cmp	r3, #9
 8009de6:	d94b      	bls.n	8009e80 <_svfiprintf_r+0x17c>
 8009de8:	b1b0      	cbz	r0, 8009e18 <_svfiprintf_r+0x114>
 8009dea:	9207      	str	r2, [sp, #28]
 8009dec:	e014      	b.n	8009e18 <_svfiprintf_r+0x114>
 8009dee:	eba0 0308 	sub.w	r3, r0, r8
 8009df2:	fa09 f303 	lsl.w	r3, r9, r3
 8009df6:	4313      	orrs	r3, r2
 8009df8:	9304      	str	r3, [sp, #16]
 8009dfa:	46a2      	mov	sl, r4
 8009dfc:	e7d2      	b.n	8009da4 <_svfiprintf_r+0xa0>
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	1d19      	adds	r1, r3, #4
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	9103      	str	r1, [sp, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bfbb      	ittet	lt
 8009e0a:	425b      	neglt	r3, r3
 8009e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e10:	9307      	strge	r3, [sp, #28]
 8009e12:	9307      	strlt	r3, [sp, #28]
 8009e14:	bfb8      	it	lt
 8009e16:	9204      	strlt	r2, [sp, #16]
 8009e18:	7823      	ldrb	r3, [r4, #0]
 8009e1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e1c:	d10a      	bne.n	8009e34 <_svfiprintf_r+0x130>
 8009e1e:	7863      	ldrb	r3, [r4, #1]
 8009e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e22:	d132      	bne.n	8009e8a <_svfiprintf_r+0x186>
 8009e24:	9b03      	ldr	r3, [sp, #12]
 8009e26:	1d1a      	adds	r2, r3, #4
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	9203      	str	r2, [sp, #12]
 8009e2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e30:	3402      	adds	r4, #2
 8009e32:	9305      	str	r3, [sp, #20]
 8009e34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ef8 <_svfiprintf_r+0x1f4>
 8009e38:	7821      	ldrb	r1, [r4, #0]
 8009e3a:	2203      	movs	r2, #3
 8009e3c:	4650      	mov	r0, sl
 8009e3e:	f7f6 f9e7 	bl	8000210 <memchr>
 8009e42:	b138      	cbz	r0, 8009e54 <_svfiprintf_r+0x150>
 8009e44:	9b04      	ldr	r3, [sp, #16]
 8009e46:	eba0 000a 	sub.w	r0, r0, sl
 8009e4a:	2240      	movs	r2, #64	@ 0x40
 8009e4c:	4082      	lsls	r2, r0
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	3401      	adds	r4, #1
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e58:	4824      	ldr	r0, [pc, #144]	@ (8009eec <_svfiprintf_r+0x1e8>)
 8009e5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e5e:	2206      	movs	r2, #6
 8009e60:	f7f6 f9d6 	bl	8000210 <memchr>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d036      	beq.n	8009ed6 <_svfiprintf_r+0x1d2>
 8009e68:	4b21      	ldr	r3, [pc, #132]	@ (8009ef0 <_svfiprintf_r+0x1ec>)
 8009e6a:	bb1b      	cbnz	r3, 8009eb4 <_svfiprintf_r+0x1b0>
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	3307      	adds	r3, #7
 8009e70:	f023 0307 	bic.w	r3, r3, #7
 8009e74:	3308      	adds	r3, #8
 8009e76:	9303      	str	r3, [sp, #12]
 8009e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e7a:	4433      	add	r3, r6
 8009e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e7e:	e76a      	b.n	8009d56 <_svfiprintf_r+0x52>
 8009e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e84:	460c      	mov	r4, r1
 8009e86:	2001      	movs	r0, #1
 8009e88:	e7a8      	b.n	8009ddc <_svfiprintf_r+0xd8>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	3401      	adds	r4, #1
 8009e8e:	9305      	str	r3, [sp, #20]
 8009e90:	4619      	mov	r1, r3
 8009e92:	f04f 0c0a 	mov.w	ip, #10
 8009e96:	4620      	mov	r0, r4
 8009e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e9c:	3a30      	subs	r2, #48	@ 0x30
 8009e9e:	2a09      	cmp	r2, #9
 8009ea0:	d903      	bls.n	8009eaa <_svfiprintf_r+0x1a6>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0c6      	beq.n	8009e34 <_svfiprintf_r+0x130>
 8009ea6:	9105      	str	r1, [sp, #20]
 8009ea8:	e7c4      	b.n	8009e34 <_svfiprintf_r+0x130>
 8009eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eae:	4604      	mov	r4, r0
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e7f0      	b.n	8009e96 <_svfiprintf_r+0x192>
 8009eb4:	ab03      	add	r3, sp, #12
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	462a      	mov	r2, r5
 8009eba:	4b0e      	ldr	r3, [pc, #56]	@ (8009ef4 <_svfiprintf_r+0x1f0>)
 8009ebc:	a904      	add	r1, sp, #16
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f7fc fc42 	bl	8006748 <_printf_float>
 8009ec4:	1c42      	adds	r2, r0, #1
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	d1d6      	bne.n	8009e78 <_svfiprintf_r+0x174>
 8009eca:	89ab      	ldrh	r3, [r5, #12]
 8009ecc:	065b      	lsls	r3, r3, #25
 8009ece:	f53f af2d 	bmi.w	8009d2c <_svfiprintf_r+0x28>
 8009ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ed4:	e72c      	b.n	8009d30 <_svfiprintf_r+0x2c>
 8009ed6:	ab03      	add	r3, sp, #12
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	462a      	mov	r2, r5
 8009edc:	4b05      	ldr	r3, [pc, #20]	@ (8009ef4 <_svfiprintf_r+0x1f0>)
 8009ede:	a904      	add	r1, sp, #16
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f7fc fec9 	bl	8006c78 <_printf_i>
 8009ee6:	e7ed      	b.n	8009ec4 <_svfiprintf_r+0x1c0>
 8009ee8:	0800afca 	.word	0x0800afca
 8009eec:	0800afd4 	.word	0x0800afd4
 8009ef0:	08006749 	.word	0x08006749
 8009ef4:	08009c4d 	.word	0x08009c4d
 8009ef8:	0800afd0 	.word	0x0800afd0

08009efc <__sfputc_r>:
 8009efc:	6893      	ldr	r3, [r2, #8]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	b410      	push	{r4}
 8009f04:	6093      	str	r3, [r2, #8]
 8009f06:	da08      	bge.n	8009f1a <__sfputc_r+0x1e>
 8009f08:	6994      	ldr	r4, [r2, #24]
 8009f0a:	42a3      	cmp	r3, r4
 8009f0c:	db01      	blt.n	8009f12 <__sfputc_r+0x16>
 8009f0e:	290a      	cmp	r1, #10
 8009f10:	d103      	bne.n	8009f1a <__sfputc_r+0x1e>
 8009f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f16:	f7fd bb72 	b.w	80075fe <__swbuf_r>
 8009f1a:	6813      	ldr	r3, [r2, #0]
 8009f1c:	1c58      	adds	r0, r3, #1
 8009f1e:	6010      	str	r0, [r2, #0]
 8009f20:	7019      	strb	r1, [r3, #0]
 8009f22:	4608      	mov	r0, r1
 8009f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <__sfputs_r>:
 8009f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	460f      	mov	r7, r1
 8009f30:	4614      	mov	r4, r2
 8009f32:	18d5      	adds	r5, r2, r3
 8009f34:	42ac      	cmp	r4, r5
 8009f36:	d101      	bne.n	8009f3c <__sfputs_r+0x12>
 8009f38:	2000      	movs	r0, #0
 8009f3a:	e007      	b.n	8009f4c <__sfputs_r+0x22>
 8009f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f40:	463a      	mov	r2, r7
 8009f42:	4630      	mov	r0, r6
 8009f44:	f7ff ffda 	bl	8009efc <__sfputc_r>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d1f3      	bne.n	8009f34 <__sfputs_r+0xa>
 8009f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f50 <_vfiprintf_r>:
 8009f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	460d      	mov	r5, r1
 8009f56:	b09d      	sub	sp, #116	@ 0x74
 8009f58:	4614      	mov	r4, r2
 8009f5a:	4698      	mov	r8, r3
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	b118      	cbz	r0, 8009f68 <_vfiprintf_r+0x18>
 8009f60:	6a03      	ldr	r3, [r0, #32]
 8009f62:	b90b      	cbnz	r3, 8009f68 <_vfiprintf_r+0x18>
 8009f64:	f7fd fa40 	bl	80073e8 <__sinit>
 8009f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f6a:	07d9      	lsls	r1, r3, #31
 8009f6c:	d405      	bmi.n	8009f7a <_vfiprintf_r+0x2a>
 8009f6e:	89ab      	ldrh	r3, [r5, #12]
 8009f70:	059a      	lsls	r2, r3, #22
 8009f72:	d402      	bmi.n	8009f7a <_vfiprintf_r+0x2a>
 8009f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f76:	f7fd fc54 	bl	8007822 <__retarget_lock_acquire_recursive>
 8009f7a:	89ab      	ldrh	r3, [r5, #12]
 8009f7c:	071b      	lsls	r3, r3, #28
 8009f7e:	d501      	bpl.n	8009f84 <_vfiprintf_r+0x34>
 8009f80:	692b      	ldr	r3, [r5, #16]
 8009f82:	b99b      	cbnz	r3, 8009fac <_vfiprintf_r+0x5c>
 8009f84:	4629      	mov	r1, r5
 8009f86:	4630      	mov	r0, r6
 8009f88:	f7fd fb78 	bl	800767c <__swsetup_r>
 8009f8c:	b170      	cbz	r0, 8009fac <_vfiprintf_r+0x5c>
 8009f8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f90:	07dc      	lsls	r4, r3, #31
 8009f92:	d504      	bpl.n	8009f9e <_vfiprintf_r+0x4e>
 8009f94:	f04f 30ff 	mov.w	r0, #4294967295
 8009f98:	b01d      	add	sp, #116	@ 0x74
 8009f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9e:	89ab      	ldrh	r3, [r5, #12]
 8009fa0:	0598      	lsls	r0, r3, #22
 8009fa2:	d4f7      	bmi.n	8009f94 <_vfiprintf_r+0x44>
 8009fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fa6:	f7fd fc3d 	bl	8007824 <__retarget_lock_release_recursive>
 8009faa:	e7f3      	b.n	8009f94 <_vfiprintf_r+0x44>
 8009fac:	2300      	movs	r3, #0
 8009fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fba:	2330      	movs	r3, #48	@ 0x30
 8009fbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a16c <_vfiprintf_r+0x21c>
 8009fc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fc4:	f04f 0901 	mov.w	r9, #1
 8009fc8:	4623      	mov	r3, r4
 8009fca:	469a      	mov	sl, r3
 8009fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd0:	b10a      	cbz	r2, 8009fd6 <_vfiprintf_r+0x86>
 8009fd2:	2a25      	cmp	r2, #37	@ 0x25
 8009fd4:	d1f9      	bne.n	8009fca <_vfiprintf_r+0x7a>
 8009fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009fda:	d00b      	beq.n	8009ff4 <_vfiprintf_r+0xa4>
 8009fdc:	465b      	mov	r3, fp
 8009fde:	4622      	mov	r2, r4
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff ffa1 	bl	8009f2a <__sfputs_r>
 8009fe8:	3001      	adds	r0, #1
 8009fea:	f000 80a7 	beq.w	800a13c <_vfiprintf_r+0x1ec>
 8009fee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ff0:	445a      	add	r2, fp
 8009ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 809f 	beq.w	800a13c <_vfiprintf_r+0x1ec>
 8009ffe:	2300      	movs	r3, #0
 800a000:	f04f 32ff 	mov.w	r2, #4294967295
 800a004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a008:	f10a 0a01 	add.w	sl, sl, #1
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	9307      	str	r3, [sp, #28]
 800a010:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a014:	931a      	str	r3, [sp, #104]	@ 0x68
 800a016:	4654      	mov	r4, sl
 800a018:	2205      	movs	r2, #5
 800a01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01e:	4853      	ldr	r0, [pc, #332]	@ (800a16c <_vfiprintf_r+0x21c>)
 800a020:	f7f6 f8f6 	bl	8000210 <memchr>
 800a024:	9a04      	ldr	r2, [sp, #16]
 800a026:	b9d8      	cbnz	r0, 800a060 <_vfiprintf_r+0x110>
 800a028:	06d1      	lsls	r1, r2, #27
 800a02a:	bf44      	itt	mi
 800a02c:	2320      	movmi	r3, #32
 800a02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a032:	0713      	lsls	r3, r2, #28
 800a034:	bf44      	itt	mi
 800a036:	232b      	movmi	r3, #43	@ 0x2b
 800a038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a03c:	f89a 3000 	ldrb.w	r3, [sl]
 800a040:	2b2a      	cmp	r3, #42	@ 0x2a
 800a042:	d015      	beq.n	800a070 <_vfiprintf_r+0x120>
 800a044:	9a07      	ldr	r2, [sp, #28]
 800a046:	4654      	mov	r4, sl
 800a048:	2000      	movs	r0, #0
 800a04a:	f04f 0c0a 	mov.w	ip, #10
 800a04e:	4621      	mov	r1, r4
 800a050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a054:	3b30      	subs	r3, #48	@ 0x30
 800a056:	2b09      	cmp	r3, #9
 800a058:	d94b      	bls.n	800a0f2 <_vfiprintf_r+0x1a2>
 800a05a:	b1b0      	cbz	r0, 800a08a <_vfiprintf_r+0x13a>
 800a05c:	9207      	str	r2, [sp, #28]
 800a05e:	e014      	b.n	800a08a <_vfiprintf_r+0x13a>
 800a060:	eba0 0308 	sub.w	r3, r0, r8
 800a064:	fa09 f303 	lsl.w	r3, r9, r3
 800a068:	4313      	orrs	r3, r2
 800a06a:	9304      	str	r3, [sp, #16]
 800a06c:	46a2      	mov	sl, r4
 800a06e:	e7d2      	b.n	800a016 <_vfiprintf_r+0xc6>
 800a070:	9b03      	ldr	r3, [sp, #12]
 800a072:	1d19      	adds	r1, r3, #4
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	9103      	str	r1, [sp, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	bfbb      	ittet	lt
 800a07c:	425b      	neglt	r3, r3
 800a07e:	f042 0202 	orrlt.w	r2, r2, #2
 800a082:	9307      	strge	r3, [sp, #28]
 800a084:	9307      	strlt	r3, [sp, #28]
 800a086:	bfb8      	it	lt
 800a088:	9204      	strlt	r2, [sp, #16]
 800a08a:	7823      	ldrb	r3, [r4, #0]
 800a08c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a08e:	d10a      	bne.n	800a0a6 <_vfiprintf_r+0x156>
 800a090:	7863      	ldrb	r3, [r4, #1]
 800a092:	2b2a      	cmp	r3, #42	@ 0x2a
 800a094:	d132      	bne.n	800a0fc <_vfiprintf_r+0x1ac>
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	1d1a      	adds	r2, r3, #4
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	9203      	str	r2, [sp, #12]
 800a09e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0a2:	3402      	adds	r4, #2
 800a0a4:	9305      	str	r3, [sp, #20]
 800a0a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a17c <_vfiprintf_r+0x22c>
 800a0aa:	7821      	ldrb	r1, [r4, #0]
 800a0ac:	2203      	movs	r2, #3
 800a0ae:	4650      	mov	r0, sl
 800a0b0:	f7f6 f8ae 	bl	8000210 <memchr>
 800a0b4:	b138      	cbz	r0, 800a0c6 <_vfiprintf_r+0x176>
 800a0b6:	9b04      	ldr	r3, [sp, #16]
 800a0b8:	eba0 000a 	sub.w	r0, r0, sl
 800a0bc:	2240      	movs	r2, #64	@ 0x40
 800a0be:	4082      	lsls	r2, r0
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	3401      	adds	r4, #1
 800a0c4:	9304      	str	r3, [sp, #16]
 800a0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ca:	4829      	ldr	r0, [pc, #164]	@ (800a170 <_vfiprintf_r+0x220>)
 800a0cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0d0:	2206      	movs	r2, #6
 800a0d2:	f7f6 f89d 	bl	8000210 <memchr>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d03f      	beq.n	800a15a <_vfiprintf_r+0x20a>
 800a0da:	4b26      	ldr	r3, [pc, #152]	@ (800a174 <_vfiprintf_r+0x224>)
 800a0dc:	bb1b      	cbnz	r3, 800a126 <_vfiprintf_r+0x1d6>
 800a0de:	9b03      	ldr	r3, [sp, #12]
 800a0e0:	3307      	adds	r3, #7
 800a0e2:	f023 0307 	bic.w	r3, r3, #7
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	9303      	str	r3, [sp, #12]
 800a0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ec:	443b      	add	r3, r7
 800a0ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f0:	e76a      	b.n	8009fc8 <_vfiprintf_r+0x78>
 800a0f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	2001      	movs	r0, #1
 800a0fa:	e7a8      	b.n	800a04e <_vfiprintf_r+0xfe>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	3401      	adds	r4, #1
 800a100:	9305      	str	r3, [sp, #20]
 800a102:	4619      	mov	r1, r3
 800a104:	f04f 0c0a 	mov.w	ip, #10
 800a108:	4620      	mov	r0, r4
 800a10a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a10e:	3a30      	subs	r2, #48	@ 0x30
 800a110:	2a09      	cmp	r2, #9
 800a112:	d903      	bls.n	800a11c <_vfiprintf_r+0x1cc>
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0c6      	beq.n	800a0a6 <_vfiprintf_r+0x156>
 800a118:	9105      	str	r1, [sp, #20]
 800a11a:	e7c4      	b.n	800a0a6 <_vfiprintf_r+0x156>
 800a11c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a120:	4604      	mov	r4, r0
 800a122:	2301      	movs	r3, #1
 800a124:	e7f0      	b.n	800a108 <_vfiprintf_r+0x1b8>
 800a126:	ab03      	add	r3, sp, #12
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	462a      	mov	r2, r5
 800a12c:	4b12      	ldr	r3, [pc, #72]	@ (800a178 <_vfiprintf_r+0x228>)
 800a12e:	a904      	add	r1, sp, #16
 800a130:	4630      	mov	r0, r6
 800a132:	f7fc fb09 	bl	8006748 <_printf_float>
 800a136:	4607      	mov	r7, r0
 800a138:	1c78      	adds	r0, r7, #1
 800a13a:	d1d6      	bne.n	800a0ea <_vfiprintf_r+0x19a>
 800a13c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a13e:	07d9      	lsls	r1, r3, #31
 800a140:	d405      	bmi.n	800a14e <_vfiprintf_r+0x1fe>
 800a142:	89ab      	ldrh	r3, [r5, #12]
 800a144:	059a      	lsls	r2, r3, #22
 800a146:	d402      	bmi.n	800a14e <_vfiprintf_r+0x1fe>
 800a148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a14a:	f7fd fb6b 	bl	8007824 <__retarget_lock_release_recursive>
 800a14e:	89ab      	ldrh	r3, [r5, #12]
 800a150:	065b      	lsls	r3, r3, #25
 800a152:	f53f af1f 	bmi.w	8009f94 <_vfiprintf_r+0x44>
 800a156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a158:	e71e      	b.n	8009f98 <_vfiprintf_r+0x48>
 800a15a:	ab03      	add	r3, sp, #12
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	462a      	mov	r2, r5
 800a160:	4b05      	ldr	r3, [pc, #20]	@ (800a178 <_vfiprintf_r+0x228>)
 800a162:	a904      	add	r1, sp, #16
 800a164:	4630      	mov	r0, r6
 800a166:	f7fc fd87 	bl	8006c78 <_printf_i>
 800a16a:	e7e4      	b.n	800a136 <_vfiprintf_r+0x1e6>
 800a16c:	0800afca 	.word	0x0800afca
 800a170:	0800afd4 	.word	0x0800afd4
 800a174:	08006749 	.word	0x08006749
 800a178:	08009f2b 	.word	0x08009f2b
 800a17c:	0800afd0 	.word	0x0800afd0

0800a180 <__sflush_r>:
 800a180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a188:	0716      	lsls	r6, r2, #28
 800a18a:	4605      	mov	r5, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	d454      	bmi.n	800a23a <__sflush_r+0xba>
 800a190:	684b      	ldr	r3, [r1, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	dc02      	bgt.n	800a19c <__sflush_r+0x1c>
 800a196:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	dd48      	ble.n	800a22e <__sflush_r+0xae>
 800a19c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a19e:	2e00      	cmp	r6, #0
 800a1a0:	d045      	beq.n	800a22e <__sflush_r+0xae>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a1a8:	682f      	ldr	r7, [r5, #0]
 800a1aa:	6a21      	ldr	r1, [r4, #32]
 800a1ac:	602b      	str	r3, [r5, #0]
 800a1ae:	d030      	beq.n	800a212 <__sflush_r+0x92>
 800a1b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	0759      	lsls	r1, r3, #29
 800a1b6:	d505      	bpl.n	800a1c4 <__sflush_r+0x44>
 800a1b8:	6863      	ldr	r3, [r4, #4]
 800a1ba:	1ad2      	subs	r2, r2, r3
 800a1bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1be:	b10b      	cbz	r3, 800a1c4 <__sflush_r+0x44>
 800a1c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1c2:	1ad2      	subs	r2, r2, r3
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1c8:	6a21      	ldr	r1, [r4, #32]
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b0      	blx	r6
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	d106      	bne.n	800a1e2 <__sflush_r+0x62>
 800a1d4:	6829      	ldr	r1, [r5, #0]
 800a1d6:	291d      	cmp	r1, #29
 800a1d8:	d82b      	bhi.n	800a232 <__sflush_r+0xb2>
 800a1da:	4a2a      	ldr	r2, [pc, #168]	@ (800a284 <__sflush_r+0x104>)
 800a1dc:	40ca      	lsrs	r2, r1
 800a1de:	07d6      	lsls	r6, r2, #31
 800a1e0:	d527      	bpl.n	800a232 <__sflush_r+0xb2>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	6062      	str	r2, [r4, #4]
 800a1e6:	04d9      	lsls	r1, r3, #19
 800a1e8:	6922      	ldr	r2, [r4, #16]
 800a1ea:	6022      	str	r2, [r4, #0]
 800a1ec:	d504      	bpl.n	800a1f8 <__sflush_r+0x78>
 800a1ee:	1c42      	adds	r2, r0, #1
 800a1f0:	d101      	bne.n	800a1f6 <__sflush_r+0x76>
 800a1f2:	682b      	ldr	r3, [r5, #0]
 800a1f4:	b903      	cbnz	r3, 800a1f8 <__sflush_r+0x78>
 800a1f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1fa:	602f      	str	r7, [r5, #0]
 800a1fc:	b1b9      	cbz	r1, 800a22e <__sflush_r+0xae>
 800a1fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a202:	4299      	cmp	r1, r3
 800a204:	d002      	beq.n	800a20c <__sflush_r+0x8c>
 800a206:	4628      	mov	r0, r5
 800a208:	f7fe f96e 	bl	80084e8 <_free_r>
 800a20c:	2300      	movs	r3, #0
 800a20e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a210:	e00d      	b.n	800a22e <__sflush_r+0xae>
 800a212:	2301      	movs	r3, #1
 800a214:	4628      	mov	r0, r5
 800a216:	47b0      	blx	r6
 800a218:	4602      	mov	r2, r0
 800a21a:	1c50      	adds	r0, r2, #1
 800a21c:	d1c9      	bne.n	800a1b2 <__sflush_r+0x32>
 800a21e:	682b      	ldr	r3, [r5, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d0c6      	beq.n	800a1b2 <__sflush_r+0x32>
 800a224:	2b1d      	cmp	r3, #29
 800a226:	d001      	beq.n	800a22c <__sflush_r+0xac>
 800a228:	2b16      	cmp	r3, #22
 800a22a:	d11e      	bne.n	800a26a <__sflush_r+0xea>
 800a22c:	602f      	str	r7, [r5, #0]
 800a22e:	2000      	movs	r0, #0
 800a230:	e022      	b.n	800a278 <__sflush_r+0xf8>
 800a232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a236:	b21b      	sxth	r3, r3
 800a238:	e01b      	b.n	800a272 <__sflush_r+0xf2>
 800a23a:	690f      	ldr	r7, [r1, #16]
 800a23c:	2f00      	cmp	r7, #0
 800a23e:	d0f6      	beq.n	800a22e <__sflush_r+0xae>
 800a240:	0793      	lsls	r3, r2, #30
 800a242:	680e      	ldr	r6, [r1, #0]
 800a244:	bf08      	it	eq
 800a246:	694b      	ldreq	r3, [r1, #20]
 800a248:	600f      	str	r7, [r1, #0]
 800a24a:	bf18      	it	ne
 800a24c:	2300      	movne	r3, #0
 800a24e:	eba6 0807 	sub.w	r8, r6, r7
 800a252:	608b      	str	r3, [r1, #8]
 800a254:	f1b8 0f00 	cmp.w	r8, #0
 800a258:	dde9      	ble.n	800a22e <__sflush_r+0xae>
 800a25a:	6a21      	ldr	r1, [r4, #32]
 800a25c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a25e:	4643      	mov	r3, r8
 800a260:	463a      	mov	r2, r7
 800a262:	4628      	mov	r0, r5
 800a264:	47b0      	blx	r6
 800a266:	2800      	cmp	r0, #0
 800a268:	dc08      	bgt.n	800a27c <__sflush_r+0xfc>
 800a26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a27c:	4407      	add	r7, r0
 800a27e:	eba8 0800 	sub.w	r8, r8, r0
 800a282:	e7e7      	b.n	800a254 <__sflush_r+0xd4>
 800a284:	20400001 	.word	0x20400001

0800a288 <_fflush_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	690b      	ldr	r3, [r1, #16]
 800a28c:	4605      	mov	r5, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	b913      	cbnz	r3, 800a298 <_fflush_r+0x10>
 800a292:	2500      	movs	r5, #0
 800a294:	4628      	mov	r0, r5
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	b118      	cbz	r0, 800a2a2 <_fflush_r+0x1a>
 800a29a:	6a03      	ldr	r3, [r0, #32]
 800a29c:	b90b      	cbnz	r3, 800a2a2 <_fflush_r+0x1a>
 800a29e:	f7fd f8a3 	bl	80073e8 <__sinit>
 800a2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0f3      	beq.n	800a292 <_fflush_r+0xa>
 800a2aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a2ac:	07d0      	lsls	r0, r2, #31
 800a2ae:	d404      	bmi.n	800a2ba <_fflush_r+0x32>
 800a2b0:	0599      	lsls	r1, r3, #22
 800a2b2:	d402      	bmi.n	800a2ba <_fflush_r+0x32>
 800a2b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2b6:	f7fd fab4 	bl	8007822 <__retarget_lock_acquire_recursive>
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	4621      	mov	r1, r4
 800a2be:	f7ff ff5f 	bl	800a180 <__sflush_r>
 800a2c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2c4:	07da      	lsls	r2, r3, #31
 800a2c6:	4605      	mov	r5, r0
 800a2c8:	d4e4      	bmi.n	800a294 <_fflush_r+0xc>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	059b      	lsls	r3, r3, #22
 800a2ce:	d4e1      	bmi.n	800a294 <_fflush_r+0xc>
 800a2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2d2:	f7fd faa7 	bl	8007824 <__retarget_lock_release_recursive>
 800a2d6:	e7dd      	b.n	800a294 <_fflush_r+0xc>

0800a2d8 <__swhatbuf_r>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	460c      	mov	r4, r1
 800a2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e0:	2900      	cmp	r1, #0
 800a2e2:	b096      	sub	sp, #88	@ 0x58
 800a2e4:	4615      	mov	r5, r2
 800a2e6:	461e      	mov	r6, r3
 800a2e8:	da0d      	bge.n	800a306 <__swhatbuf_r+0x2e>
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a2f0:	f04f 0100 	mov.w	r1, #0
 800a2f4:	bf14      	ite	ne
 800a2f6:	2340      	movne	r3, #64	@ 0x40
 800a2f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	6031      	str	r1, [r6, #0]
 800a300:	602b      	str	r3, [r5, #0]
 800a302:	b016      	add	sp, #88	@ 0x58
 800a304:	bd70      	pop	{r4, r5, r6, pc}
 800a306:	466a      	mov	r2, sp
 800a308:	f000 f874 	bl	800a3f4 <_fstat_r>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	dbec      	blt.n	800a2ea <__swhatbuf_r+0x12>
 800a310:	9901      	ldr	r1, [sp, #4]
 800a312:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a316:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a31a:	4259      	negs	r1, r3
 800a31c:	4159      	adcs	r1, r3
 800a31e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a322:	e7eb      	b.n	800a2fc <__swhatbuf_r+0x24>

0800a324 <__smakebuf_r>:
 800a324:	898b      	ldrh	r3, [r1, #12]
 800a326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a328:	079d      	lsls	r5, r3, #30
 800a32a:	4606      	mov	r6, r0
 800a32c:	460c      	mov	r4, r1
 800a32e:	d507      	bpl.n	800a340 <__smakebuf_r+0x1c>
 800a330:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	6123      	str	r3, [r4, #16]
 800a338:	2301      	movs	r3, #1
 800a33a:	6163      	str	r3, [r4, #20]
 800a33c:	b003      	add	sp, #12
 800a33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a340:	ab01      	add	r3, sp, #4
 800a342:	466a      	mov	r2, sp
 800a344:	f7ff ffc8 	bl	800a2d8 <__swhatbuf_r>
 800a348:	9f00      	ldr	r7, [sp, #0]
 800a34a:	4605      	mov	r5, r0
 800a34c:	4639      	mov	r1, r7
 800a34e:	4630      	mov	r0, r6
 800a350:	f7fe f93e 	bl	80085d0 <_malloc_r>
 800a354:	b948      	cbnz	r0, 800a36a <__smakebuf_r+0x46>
 800a356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a35a:	059a      	lsls	r2, r3, #22
 800a35c:	d4ee      	bmi.n	800a33c <__smakebuf_r+0x18>
 800a35e:	f023 0303 	bic.w	r3, r3, #3
 800a362:	f043 0302 	orr.w	r3, r3, #2
 800a366:	81a3      	strh	r3, [r4, #12]
 800a368:	e7e2      	b.n	800a330 <__smakebuf_r+0xc>
 800a36a:	89a3      	ldrh	r3, [r4, #12]
 800a36c:	6020      	str	r0, [r4, #0]
 800a36e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a372:	81a3      	strh	r3, [r4, #12]
 800a374:	9b01      	ldr	r3, [sp, #4]
 800a376:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a37a:	b15b      	cbz	r3, 800a394 <__smakebuf_r+0x70>
 800a37c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a380:	4630      	mov	r0, r6
 800a382:	f000 f849 	bl	800a418 <_isatty_r>
 800a386:	b128      	cbz	r0, 800a394 <__smakebuf_r+0x70>
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	f023 0303 	bic.w	r3, r3, #3
 800a38e:	f043 0301 	orr.w	r3, r3, #1
 800a392:	81a3      	strh	r3, [r4, #12]
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	431d      	orrs	r5, r3
 800a398:	81a5      	strh	r5, [r4, #12]
 800a39a:	e7cf      	b.n	800a33c <__smakebuf_r+0x18>

0800a39c <memmove>:
 800a39c:	4288      	cmp	r0, r1
 800a39e:	b510      	push	{r4, lr}
 800a3a0:	eb01 0402 	add.w	r4, r1, r2
 800a3a4:	d902      	bls.n	800a3ac <memmove+0x10>
 800a3a6:	4284      	cmp	r4, r0
 800a3a8:	4623      	mov	r3, r4
 800a3aa:	d807      	bhi.n	800a3bc <memmove+0x20>
 800a3ac:	1e43      	subs	r3, r0, #1
 800a3ae:	42a1      	cmp	r1, r4
 800a3b0:	d008      	beq.n	800a3c4 <memmove+0x28>
 800a3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3ba:	e7f8      	b.n	800a3ae <memmove+0x12>
 800a3bc:	4402      	add	r2, r0
 800a3be:	4601      	mov	r1, r0
 800a3c0:	428a      	cmp	r2, r1
 800a3c2:	d100      	bne.n	800a3c6 <memmove+0x2a>
 800a3c4:	bd10      	pop	{r4, pc}
 800a3c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3ce:	e7f7      	b.n	800a3c0 <memmove+0x24>

0800a3d0 <strncmp>:
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	b16a      	cbz	r2, 800a3f0 <strncmp+0x20>
 800a3d4:	3901      	subs	r1, #1
 800a3d6:	1884      	adds	r4, r0, r2
 800a3d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d103      	bne.n	800a3ec <strncmp+0x1c>
 800a3e4:	42a0      	cmp	r0, r4
 800a3e6:	d001      	beq.n	800a3ec <strncmp+0x1c>
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	d1f5      	bne.n	800a3d8 <strncmp+0x8>
 800a3ec:	1ad0      	subs	r0, r2, r3
 800a3ee:	bd10      	pop	{r4, pc}
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	e7fc      	b.n	800a3ee <strncmp+0x1e>

0800a3f4 <_fstat_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d07      	ldr	r5, [pc, #28]	@ (800a414 <_fstat_r+0x20>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	4611      	mov	r1, r2
 800a400:	602b      	str	r3, [r5, #0]
 800a402:	f7f7 fe01 	bl	8002008 <_fstat>
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	d102      	bne.n	800a410 <_fstat_r+0x1c>
 800a40a:	682b      	ldr	r3, [r5, #0]
 800a40c:	b103      	cbz	r3, 800a410 <_fstat_r+0x1c>
 800a40e:	6023      	str	r3, [r4, #0]
 800a410:	bd38      	pop	{r3, r4, r5, pc}
 800a412:	bf00      	nop
 800a414:	2000063c 	.word	0x2000063c

0800a418 <_isatty_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d06      	ldr	r5, [pc, #24]	@ (800a434 <_isatty_r+0x1c>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	602b      	str	r3, [r5, #0]
 800a424:	f7f7 fe00 	bl	8002028 <_isatty>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_isatty_r+0x1a>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_isatty_r+0x1a>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	2000063c 	.word	0x2000063c

0800a438 <_sbrk_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d06      	ldr	r5, [pc, #24]	@ (800a454 <_sbrk_r+0x1c>)
 800a43c:	2300      	movs	r3, #0
 800a43e:	4604      	mov	r4, r0
 800a440:	4608      	mov	r0, r1
 800a442:	602b      	str	r3, [r5, #0]
 800a444:	f7f7 fe08 	bl	8002058 <_sbrk>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_sbrk_r+0x1a>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_sbrk_r+0x1a>
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	2000063c 	.word	0x2000063c

0800a458 <memcpy>:
 800a458:	440a      	add	r2, r1
 800a45a:	4291      	cmp	r1, r2
 800a45c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a460:	d100      	bne.n	800a464 <memcpy+0xc>
 800a462:	4770      	bx	lr
 800a464:	b510      	push	{r4, lr}
 800a466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a46a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a46e:	4291      	cmp	r1, r2
 800a470:	d1f9      	bne.n	800a466 <memcpy+0xe>
 800a472:	bd10      	pop	{r4, pc}
 800a474:	0000      	movs	r0, r0
	...

0800a478 <nan>:
 800a478:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a480 <nan+0x8>
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	00000000 	.word	0x00000000
 800a484:	7ff80000 	.word	0x7ff80000

0800a488 <__assert_func>:
 800a488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a48a:	4614      	mov	r4, r2
 800a48c:	461a      	mov	r2, r3
 800a48e:	4b09      	ldr	r3, [pc, #36]	@ (800a4b4 <__assert_func+0x2c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4605      	mov	r5, r0
 800a494:	68d8      	ldr	r0, [r3, #12]
 800a496:	b14c      	cbz	r4, 800a4ac <__assert_func+0x24>
 800a498:	4b07      	ldr	r3, [pc, #28]	@ (800a4b8 <__assert_func+0x30>)
 800a49a:	9100      	str	r1, [sp, #0]
 800a49c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4a0:	4906      	ldr	r1, [pc, #24]	@ (800a4bc <__assert_func+0x34>)
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	f000 fba8 	bl	800abf8 <fiprintf>
 800a4a8:	f000 fbb8 	bl	800ac1c <abort>
 800a4ac:	4b04      	ldr	r3, [pc, #16]	@ (800a4c0 <__assert_func+0x38>)
 800a4ae:	461c      	mov	r4, r3
 800a4b0:	e7f3      	b.n	800a49a <__assert_func+0x12>
 800a4b2:	bf00      	nop
 800a4b4:	20000048 	.word	0x20000048
 800a4b8:	0800afe3 	.word	0x0800afe3
 800a4bc:	0800aff0 	.word	0x0800aff0
 800a4c0:	0800b01e 	.word	0x0800b01e

0800a4c4 <_calloc_r>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	fba1 5402 	umull	r5, r4, r1, r2
 800a4ca:	b934      	cbnz	r4, 800a4da <_calloc_r+0x16>
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	f7fe f87f 	bl	80085d0 <_malloc_r>
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	b928      	cbnz	r0, 800a4e2 <_calloc_r+0x1e>
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	bd70      	pop	{r4, r5, r6, pc}
 800a4da:	220c      	movs	r2, #12
 800a4dc:	6002      	str	r2, [r0, #0]
 800a4de:	2600      	movs	r6, #0
 800a4e0:	e7f9      	b.n	800a4d6 <_calloc_r+0x12>
 800a4e2:	462a      	mov	r2, r5
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	f7fd f91f 	bl	8007728 <memset>
 800a4ea:	e7f4      	b.n	800a4d6 <_calloc_r+0x12>

0800a4ec <rshift>:
 800a4ec:	6903      	ldr	r3, [r0, #16]
 800a4ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4fa:	f100 0414 	add.w	r4, r0, #20
 800a4fe:	dd45      	ble.n	800a58c <rshift+0xa0>
 800a500:	f011 011f 	ands.w	r1, r1, #31
 800a504:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a508:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a50c:	d10c      	bne.n	800a528 <rshift+0x3c>
 800a50e:	f100 0710 	add.w	r7, r0, #16
 800a512:	4629      	mov	r1, r5
 800a514:	42b1      	cmp	r1, r6
 800a516:	d334      	bcc.n	800a582 <rshift+0x96>
 800a518:	1a9b      	subs	r3, r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	1eea      	subs	r2, r5, #3
 800a51e:	4296      	cmp	r6, r2
 800a520:	bf38      	it	cc
 800a522:	2300      	movcc	r3, #0
 800a524:	4423      	add	r3, r4
 800a526:	e015      	b.n	800a554 <rshift+0x68>
 800a528:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a52c:	f1c1 0820 	rsb	r8, r1, #32
 800a530:	40cf      	lsrs	r7, r1
 800a532:	f105 0e04 	add.w	lr, r5, #4
 800a536:	46a1      	mov	r9, r4
 800a538:	4576      	cmp	r6, lr
 800a53a:	46f4      	mov	ip, lr
 800a53c:	d815      	bhi.n	800a56a <rshift+0x7e>
 800a53e:	1a9a      	subs	r2, r3, r2
 800a540:	0092      	lsls	r2, r2, #2
 800a542:	3a04      	subs	r2, #4
 800a544:	3501      	adds	r5, #1
 800a546:	42ae      	cmp	r6, r5
 800a548:	bf38      	it	cc
 800a54a:	2200      	movcc	r2, #0
 800a54c:	18a3      	adds	r3, r4, r2
 800a54e:	50a7      	str	r7, [r4, r2]
 800a550:	b107      	cbz	r7, 800a554 <rshift+0x68>
 800a552:	3304      	adds	r3, #4
 800a554:	1b1a      	subs	r2, r3, r4
 800a556:	42a3      	cmp	r3, r4
 800a558:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a55c:	bf08      	it	eq
 800a55e:	2300      	moveq	r3, #0
 800a560:	6102      	str	r2, [r0, #16]
 800a562:	bf08      	it	eq
 800a564:	6143      	streq	r3, [r0, #20]
 800a566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a56a:	f8dc c000 	ldr.w	ip, [ip]
 800a56e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a572:	ea4c 0707 	orr.w	r7, ip, r7
 800a576:	f849 7b04 	str.w	r7, [r9], #4
 800a57a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a57e:	40cf      	lsrs	r7, r1
 800a580:	e7da      	b.n	800a538 <rshift+0x4c>
 800a582:	f851 cb04 	ldr.w	ip, [r1], #4
 800a586:	f847 cf04 	str.w	ip, [r7, #4]!
 800a58a:	e7c3      	b.n	800a514 <rshift+0x28>
 800a58c:	4623      	mov	r3, r4
 800a58e:	e7e1      	b.n	800a554 <rshift+0x68>

0800a590 <__hexdig_fun>:
 800a590:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a594:	2b09      	cmp	r3, #9
 800a596:	d802      	bhi.n	800a59e <__hexdig_fun+0xe>
 800a598:	3820      	subs	r0, #32
 800a59a:	b2c0      	uxtb	r0, r0
 800a59c:	4770      	bx	lr
 800a59e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a5a2:	2b05      	cmp	r3, #5
 800a5a4:	d801      	bhi.n	800a5aa <__hexdig_fun+0x1a>
 800a5a6:	3847      	subs	r0, #71	@ 0x47
 800a5a8:	e7f7      	b.n	800a59a <__hexdig_fun+0xa>
 800a5aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a5ae:	2b05      	cmp	r3, #5
 800a5b0:	d801      	bhi.n	800a5b6 <__hexdig_fun+0x26>
 800a5b2:	3827      	subs	r0, #39	@ 0x27
 800a5b4:	e7f1      	b.n	800a59a <__hexdig_fun+0xa>
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	4770      	bx	lr
	...

0800a5bc <__gethex>:
 800a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	b085      	sub	sp, #20
 800a5c2:	468a      	mov	sl, r1
 800a5c4:	9302      	str	r3, [sp, #8]
 800a5c6:	680b      	ldr	r3, [r1, #0]
 800a5c8:	9001      	str	r0, [sp, #4]
 800a5ca:	4690      	mov	r8, r2
 800a5cc:	1c9c      	adds	r4, r3, #2
 800a5ce:	46a1      	mov	r9, r4
 800a5d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a5d4:	2830      	cmp	r0, #48	@ 0x30
 800a5d6:	d0fa      	beq.n	800a5ce <__gethex+0x12>
 800a5d8:	eba9 0303 	sub.w	r3, r9, r3
 800a5dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a5e0:	f7ff ffd6 	bl	800a590 <__hexdig_fun>
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d168      	bne.n	800a6bc <__gethex+0x100>
 800a5ea:	49a0      	ldr	r1, [pc, #640]	@ (800a86c <__gethex+0x2b0>)
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	4648      	mov	r0, r9
 800a5f0:	f7ff feee 	bl	800a3d0 <strncmp>
 800a5f4:	4607      	mov	r7, r0
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d167      	bne.n	800a6ca <__gethex+0x10e>
 800a5fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a5fe:	4626      	mov	r6, r4
 800a600:	f7ff ffc6 	bl	800a590 <__hexdig_fun>
 800a604:	2800      	cmp	r0, #0
 800a606:	d062      	beq.n	800a6ce <__gethex+0x112>
 800a608:	4623      	mov	r3, r4
 800a60a:	7818      	ldrb	r0, [r3, #0]
 800a60c:	2830      	cmp	r0, #48	@ 0x30
 800a60e:	4699      	mov	r9, r3
 800a610:	f103 0301 	add.w	r3, r3, #1
 800a614:	d0f9      	beq.n	800a60a <__gethex+0x4e>
 800a616:	f7ff ffbb 	bl	800a590 <__hexdig_fun>
 800a61a:	fab0 f580 	clz	r5, r0
 800a61e:	096d      	lsrs	r5, r5, #5
 800a620:	f04f 0b01 	mov.w	fp, #1
 800a624:	464a      	mov	r2, r9
 800a626:	4616      	mov	r6, r2
 800a628:	3201      	adds	r2, #1
 800a62a:	7830      	ldrb	r0, [r6, #0]
 800a62c:	f7ff ffb0 	bl	800a590 <__hexdig_fun>
 800a630:	2800      	cmp	r0, #0
 800a632:	d1f8      	bne.n	800a626 <__gethex+0x6a>
 800a634:	498d      	ldr	r1, [pc, #564]	@ (800a86c <__gethex+0x2b0>)
 800a636:	2201      	movs	r2, #1
 800a638:	4630      	mov	r0, r6
 800a63a:	f7ff fec9 	bl	800a3d0 <strncmp>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d13f      	bne.n	800a6c2 <__gethex+0x106>
 800a642:	b944      	cbnz	r4, 800a656 <__gethex+0x9a>
 800a644:	1c74      	adds	r4, r6, #1
 800a646:	4622      	mov	r2, r4
 800a648:	4616      	mov	r6, r2
 800a64a:	3201      	adds	r2, #1
 800a64c:	7830      	ldrb	r0, [r6, #0]
 800a64e:	f7ff ff9f 	bl	800a590 <__hexdig_fun>
 800a652:	2800      	cmp	r0, #0
 800a654:	d1f8      	bne.n	800a648 <__gethex+0x8c>
 800a656:	1ba4      	subs	r4, r4, r6
 800a658:	00a7      	lsls	r7, r4, #2
 800a65a:	7833      	ldrb	r3, [r6, #0]
 800a65c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a660:	2b50      	cmp	r3, #80	@ 0x50
 800a662:	d13e      	bne.n	800a6e2 <__gethex+0x126>
 800a664:	7873      	ldrb	r3, [r6, #1]
 800a666:	2b2b      	cmp	r3, #43	@ 0x2b
 800a668:	d033      	beq.n	800a6d2 <__gethex+0x116>
 800a66a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a66c:	d034      	beq.n	800a6d8 <__gethex+0x11c>
 800a66e:	1c71      	adds	r1, r6, #1
 800a670:	2400      	movs	r4, #0
 800a672:	7808      	ldrb	r0, [r1, #0]
 800a674:	f7ff ff8c 	bl	800a590 <__hexdig_fun>
 800a678:	1e43      	subs	r3, r0, #1
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b18      	cmp	r3, #24
 800a67e:	d830      	bhi.n	800a6e2 <__gethex+0x126>
 800a680:	f1a0 0210 	sub.w	r2, r0, #16
 800a684:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a688:	f7ff ff82 	bl	800a590 <__hexdig_fun>
 800a68c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a690:	fa5f fc8c 	uxtb.w	ip, ip
 800a694:	f1bc 0f18 	cmp.w	ip, #24
 800a698:	f04f 030a 	mov.w	r3, #10
 800a69c:	d91e      	bls.n	800a6dc <__gethex+0x120>
 800a69e:	b104      	cbz	r4, 800a6a2 <__gethex+0xe6>
 800a6a0:	4252      	negs	r2, r2
 800a6a2:	4417      	add	r7, r2
 800a6a4:	f8ca 1000 	str.w	r1, [sl]
 800a6a8:	b1ed      	cbz	r5, 800a6e6 <__gethex+0x12a>
 800a6aa:	f1bb 0f00 	cmp.w	fp, #0
 800a6ae:	bf0c      	ite	eq
 800a6b0:	2506      	moveq	r5, #6
 800a6b2:	2500      	movne	r5, #0
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	b005      	add	sp, #20
 800a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6bc:	2500      	movs	r5, #0
 800a6be:	462c      	mov	r4, r5
 800a6c0:	e7b0      	b.n	800a624 <__gethex+0x68>
 800a6c2:	2c00      	cmp	r4, #0
 800a6c4:	d1c7      	bne.n	800a656 <__gethex+0x9a>
 800a6c6:	4627      	mov	r7, r4
 800a6c8:	e7c7      	b.n	800a65a <__gethex+0x9e>
 800a6ca:	464e      	mov	r6, r9
 800a6cc:	462f      	mov	r7, r5
 800a6ce:	2501      	movs	r5, #1
 800a6d0:	e7c3      	b.n	800a65a <__gethex+0x9e>
 800a6d2:	2400      	movs	r4, #0
 800a6d4:	1cb1      	adds	r1, r6, #2
 800a6d6:	e7cc      	b.n	800a672 <__gethex+0xb6>
 800a6d8:	2401      	movs	r4, #1
 800a6da:	e7fb      	b.n	800a6d4 <__gethex+0x118>
 800a6dc:	fb03 0002 	mla	r0, r3, r2, r0
 800a6e0:	e7ce      	b.n	800a680 <__gethex+0xc4>
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	e7de      	b.n	800a6a4 <__gethex+0xe8>
 800a6e6:	eba6 0309 	sub.w	r3, r6, r9
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	2b07      	cmp	r3, #7
 800a6f0:	dc0a      	bgt.n	800a708 <__gethex+0x14c>
 800a6f2:	9801      	ldr	r0, [sp, #4]
 800a6f4:	f7fd fff8 	bl	80086e8 <_Balloc>
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	b940      	cbnz	r0, 800a70e <__gethex+0x152>
 800a6fc:	4b5c      	ldr	r3, [pc, #368]	@ (800a870 <__gethex+0x2b4>)
 800a6fe:	4602      	mov	r2, r0
 800a700:	21e4      	movs	r1, #228	@ 0xe4
 800a702:	485c      	ldr	r0, [pc, #368]	@ (800a874 <__gethex+0x2b8>)
 800a704:	f7ff fec0 	bl	800a488 <__assert_func>
 800a708:	3101      	adds	r1, #1
 800a70a:	105b      	asrs	r3, r3, #1
 800a70c:	e7ef      	b.n	800a6ee <__gethex+0x132>
 800a70e:	f100 0a14 	add.w	sl, r0, #20
 800a712:	2300      	movs	r3, #0
 800a714:	4655      	mov	r5, sl
 800a716:	469b      	mov	fp, r3
 800a718:	45b1      	cmp	r9, r6
 800a71a:	d337      	bcc.n	800a78c <__gethex+0x1d0>
 800a71c:	f845 bb04 	str.w	fp, [r5], #4
 800a720:	eba5 050a 	sub.w	r5, r5, sl
 800a724:	10ad      	asrs	r5, r5, #2
 800a726:	6125      	str	r5, [r4, #16]
 800a728:	4658      	mov	r0, fp
 800a72a:	f7fe f8cf 	bl	80088cc <__hi0bits>
 800a72e:	016d      	lsls	r5, r5, #5
 800a730:	f8d8 6000 	ldr.w	r6, [r8]
 800a734:	1a2d      	subs	r5, r5, r0
 800a736:	42b5      	cmp	r5, r6
 800a738:	dd54      	ble.n	800a7e4 <__gethex+0x228>
 800a73a:	1bad      	subs	r5, r5, r6
 800a73c:	4629      	mov	r1, r5
 800a73e:	4620      	mov	r0, r4
 800a740:	f7fe fc5b 	bl	8008ffa <__any_on>
 800a744:	4681      	mov	r9, r0
 800a746:	b178      	cbz	r0, 800a768 <__gethex+0x1ac>
 800a748:	1e6b      	subs	r3, r5, #1
 800a74a:	1159      	asrs	r1, r3, #5
 800a74c:	f003 021f 	and.w	r2, r3, #31
 800a750:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a754:	f04f 0901 	mov.w	r9, #1
 800a758:	fa09 f202 	lsl.w	r2, r9, r2
 800a75c:	420a      	tst	r2, r1
 800a75e:	d003      	beq.n	800a768 <__gethex+0x1ac>
 800a760:	454b      	cmp	r3, r9
 800a762:	dc36      	bgt.n	800a7d2 <__gethex+0x216>
 800a764:	f04f 0902 	mov.w	r9, #2
 800a768:	4629      	mov	r1, r5
 800a76a:	4620      	mov	r0, r4
 800a76c:	f7ff febe 	bl	800a4ec <rshift>
 800a770:	442f      	add	r7, r5
 800a772:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a776:	42bb      	cmp	r3, r7
 800a778:	da42      	bge.n	800a800 <__gethex+0x244>
 800a77a:	9801      	ldr	r0, [sp, #4]
 800a77c:	4621      	mov	r1, r4
 800a77e:	f7fd fff3 	bl	8008768 <_Bfree>
 800a782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a784:	2300      	movs	r3, #0
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	25a3      	movs	r5, #163	@ 0xa3
 800a78a:	e793      	b.n	800a6b4 <__gethex+0xf8>
 800a78c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a790:	2a2e      	cmp	r2, #46	@ 0x2e
 800a792:	d012      	beq.n	800a7ba <__gethex+0x1fe>
 800a794:	2b20      	cmp	r3, #32
 800a796:	d104      	bne.n	800a7a2 <__gethex+0x1e6>
 800a798:	f845 bb04 	str.w	fp, [r5], #4
 800a79c:	f04f 0b00 	mov.w	fp, #0
 800a7a0:	465b      	mov	r3, fp
 800a7a2:	7830      	ldrb	r0, [r6, #0]
 800a7a4:	9303      	str	r3, [sp, #12]
 800a7a6:	f7ff fef3 	bl	800a590 <__hexdig_fun>
 800a7aa:	9b03      	ldr	r3, [sp, #12]
 800a7ac:	f000 000f 	and.w	r0, r0, #15
 800a7b0:	4098      	lsls	r0, r3
 800a7b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	e7ae      	b.n	800a718 <__gethex+0x15c>
 800a7ba:	45b1      	cmp	r9, r6
 800a7bc:	d8ea      	bhi.n	800a794 <__gethex+0x1d8>
 800a7be:	492b      	ldr	r1, [pc, #172]	@ (800a86c <__gethex+0x2b0>)
 800a7c0:	9303      	str	r3, [sp, #12]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7ff fe03 	bl	800a3d0 <strncmp>
 800a7ca:	9b03      	ldr	r3, [sp, #12]
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d1e1      	bne.n	800a794 <__gethex+0x1d8>
 800a7d0:	e7a2      	b.n	800a718 <__gethex+0x15c>
 800a7d2:	1ea9      	subs	r1, r5, #2
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7fe fc10 	bl	8008ffa <__any_on>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d0c2      	beq.n	800a764 <__gethex+0x1a8>
 800a7de:	f04f 0903 	mov.w	r9, #3
 800a7e2:	e7c1      	b.n	800a768 <__gethex+0x1ac>
 800a7e4:	da09      	bge.n	800a7fa <__gethex+0x23e>
 800a7e6:	1b75      	subs	r5, r6, r5
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	9801      	ldr	r0, [sp, #4]
 800a7ec:	462a      	mov	r2, r5
 800a7ee:	f7fe f9cb 	bl	8008b88 <__lshift>
 800a7f2:	1b7f      	subs	r7, r7, r5
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	f100 0a14 	add.w	sl, r0, #20
 800a7fa:	f04f 0900 	mov.w	r9, #0
 800a7fe:	e7b8      	b.n	800a772 <__gethex+0x1b6>
 800a800:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a804:	42bd      	cmp	r5, r7
 800a806:	dd6f      	ble.n	800a8e8 <__gethex+0x32c>
 800a808:	1bed      	subs	r5, r5, r7
 800a80a:	42ae      	cmp	r6, r5
 800a80c:	dc34      	bgt.n	800a878 <__gethex+0x2bc>
 800a80e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a812:	2b02      	cmp	r3, #2
 800a814:	d022      	beq.n	800a85c <__gethex+0x2a0>
 800a816:	2b03      	cmp	r3, #3
 800a818:	d024      	beq.n	800a864 <__gethex+0x2a8>
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d115      	bne.n	800a84a <__gethex+0x28e>
 800a81e:	42ae      	cmp	r6, r5
 800a820:	d113      	bne.n	800a84a <__gethex+0x28e>
 800a822:	2e01      	cmp	r6, #1
 800a824:	d10b      	bne.n	800a83e <__gethex+0x282>
 800a826:	9a02      	ldr	r2, [sp, #8]
 800a828:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a82c:	6013      	str	r3, [r2, #0]
 800a82e:	2301      	movs	r3, #1
 800a830:	6123      	str	r3, [r4, #16]
 800a832:	f8ca 3000 	str.w	r3, [sl]
 800a836:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a838:	2562      	movs	r5, #98	@ 0x62
 800a83a:	601c      	str	r4, [r3, #0]
 800a83c:	e73a      	b.n	800a6b4 <__gethex+0xf8>
 800a83e:	1e71      	subs	r1, r6, #1
 800a840:	4620      	mov	r0, r4
 800a842:	f7fe fbda 	bl	8008ffa <__any_on>
 800a846:	2800      	cmp	r0, #0
 800a848:	d1ed      	bne.n	800a826 <__gethex+0x26a>
 800a84a:	9801      	ldr	r0, [sp, #4]
 800a84c:	4621      	mov	r1, r4
 800a84e:	f7fd ff8b 	bl	8008768 <_Bfree>
 800a852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a854:	2300      	movs	r3, #0
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	2550      	movs	r5, #80	@ 0x50
 800a85a:	e72b      	b.n	800a6b4 <__gethex+0xf8>
 800a85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1f3      	bne.n	800a84a <__gethex+0x28e>
 800a862:	e7e0      	b.n	800a826 <__gethex+0x26a>
 800a864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1dd      	bne.n	800a826 <__gethex+0x26a>
 800a86a:	e7ee      	b.n	800a84a <__gethex+0x28e>
 800a86c:	0800afc8 	.word	0x0800afc8
 800a870:	0800af5e 	.word	0x0800af5e
 800a874:	0800b01f 	.word	0x0800b01f
 800a878:	1e6f      	subs	r7, r5, #1
 800a87a:	f1b9 0f00 	cmp.w	r9, #0
 800a87e:	d130      	bne.n	800a8e2 <__gethex+0x326>
 800a880:	b127      	cbz	r7, 800a88c <__gethex+0x2d0>
 800a882:	4639      	mov	r1, r7
 800a884:	4620      	mov	r0, r4
 800a886:	f7fe fbb8 	bl	8008ffa <__any_on>
 800a88a:	4681      	mov	r9, r0
 800a88c:	117a      	asrs	r2, r7, #5
 800a88e:	2301      	movs	r3, #1
 800a890:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a894:	f007 071f 	and.w	r7, r7, #31
 800a898:	40bb      	lsls	r3, r7
 800a89a:	4213      	tst	r3, r2
 800a89c:	4629      	mov	r1, r5
 800a89e:	4620      	mov	r0, r4
 800a8a0:	bf18      	it	ne
 800a8a2:	f049 0902 	orrne.w	r9, r9, #2
 800a8a6:	f7ff fe21 	bl	800a4ec <rshift>
 800a8aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a8ae:	1b76      	subs	r6, r6, r5
 800a8b0:	2502      	movs	r5, #2
 800a8b2:	f1b9 0f00 	cmp.w	r9, #0
 800a8b6:	d047      	beq.n	800a948 <__gethex+0x38c>
 800a8b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d015      	beq.n	800a8ec <__gethex+0x330>
 800a8c0:	2b03      	cmp	r3, #3
 800a8c2:	d017      	beq.n	800a8f4 <__gethex+0x338>
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d109      	bne.n	800a8dc <__gethex+0x320>
 800a8c8:	f019 0f02 	tst.w	r9, #2
 800a8cc:	d006      	beq.n	800a8dc <__gethex+0x320>
 800a8ce:	f8da 3000 	ldr.w	r3, [sl]
 800a8d2:	ea49 0903 	orr.w	r9, r9, r3
 800a8d6:	f019 0f01 	tst.w	r9, #1
 800a8da:	d10e      	bne.n	800a8fa <__gethex+0x33e>
 800a8dc:	f045 0510 	orr.w	r5, r5, #16
 800a8e0:	e032      	b.n	800a948 <__gethex+0x38c>
 800a8e2:	f04f 0901 	mov.w	r9, #1
 800a8e6:	e7d1      	b.n	800a88c <__gethex+0x2d0>
 800a8e8:	2501      	movs	r5, #1
 800a8ea:	e7e2      	b.n	800a8b2 <__gethex+0x2f6>
 800a8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ee:	f1c3 0301 	rsb	r3, r3, #1
 800a8f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d0f0      	beq.n	800a8dc <__gethex+0x320>
 800a8fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8fe:	f104 0314 	add.w	r3, r4, #20
 800a902:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a906:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a90a:	f04f 0c00 	mov.w	ip, #0
 800a90e:	4618      	mov	r0, r3
 800a910:	f853 2b04 	ldr.w	r2, [r3], #4
 800a914:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a918:	d01b      	beq.n	800a952 <__gethex+0x396>
 800a91a:	3201      	adds	r2, #1
 800a91c:	6002      	str	r2, [r0, #0]
 800a91e:	2d02      	cmp	r5, #2
 800a920:	f104 0314 	add.w	r3, r4, #20
 800a924:	d13c      	bne.n	800a9a0 <__gethex+0x3e4>
 800a926:	f8d8 2000 	ldr.w	r2, [r8]
 800a92a:	3a01      	subs	r2, #1
 800a92c:	42b2      	cmp	r2, r6
 800a92e:	d109      	bne.n	800a944 <__gethex+0x388>
 800a930:	1171      	asrs	r1, r6, #5
 800a932:	2201      	movs	r2, #1
 800a934:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a938:	f006 061f 	and.w	r6, r6, #31
 800a93c:	fa02 f606 	lsl.w	r6, r2, r6
 800a940:	421e      	tst	r6, r3
 800a942:	d13a      	bne.n	800a9ba <__gethex+0x3fe>
 800a944:	f045 0520 	orr.w	r5, r5, #32
 800a948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a94a:	601c      	str	r4, [r3, #0]
 800a94c:	9b02      	ldr	r3, [sp, #8]
 800a94e:	601f      	str	r7, [r3, #0]
 800a950:	e6b0      	b.n	800a6b4 <__gethex+0xf8>
 800a952:	4299      	cmp	r1, r3
 800a954:	f843 cc04 	str.w	ip, [r3, #-4]
 800a958:	d8d9      	bhi.n	800a90e <__gethex+0x352>
 800a95a:	68a3      	ldr	r3, [r4, #8]
 800a95c:	459b      	cmp	fp, r3
 800a95e:	db17      	blt.n	800a990 <__gethex+0x3d4>
 800a960:	6861      	ldr	r1, [r4, #4]
 800a962:	9801      	ldr	r0, [sp, #4]
 800a964:	3101      	adds	r1, #1
 800a966:	f7fd febf 	bl	80086e8 <_Balloc>
 800a96a:	4681      	mov	r9, r0
 800a96c:	b918      	cbnz	r0, 800a976 <__gethex+0x3ba>
 800a96e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9d8 <__gethex+0x41c>)
 800a970:	4602      	mov	r2, r0
 800a972:	2184      	movs	r1, #132	@ 0x84
 800a974:	e6c5      	b.n	800a702 <__gethex+0x146>
 800a976:	6922      	ldr	r2, [r4, #16]
 800a978:	3202      	adds	r2, #2
 800a97a:	f104 010c 	add.w	r1, r4, #12
 800a97e:	0092      	lsls	r2, r2, #2
 800a980:	300c      	adds	r0, #12
 800a982:	f7ff fd69 	bl	800a458 <memcpy>
 800a986:	4621      	mov	r1, r4
 800a988:	9801      	ldr	r0, [sp, #4]
 800a98a:	f7fd feed 	bl	8008768 <_Bfree>
 800a98e:	464c      	mov	r4, r9
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a998:	6122      	str	r2, [r4, #16]
 800a99a:	2201      	movs	r2, #1
 800a99c:	615a      	str	r2, [r3, #20]
 800a99e:	e7be      	b.n	800a91e <__gethex+0x362>
 800a9a0:	6922      	ldr	r2, [r4, #16]
 800a9a2:	455a      	cmp	r2, fp
 800a9a4:	dd0b      	ble.n	800a9be <__gethex+0x402>
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f7ff fd9f 	bl	800a4ec <rshift>
 800a9ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9b2:	3701      	adds	r7, #1
 800a9b4:	42bb      	cmp	r3, r7
 800a9b6:	f6ff aee0 	blt.w	800a77a <__gethex+0x1be>
 800a9ba:	2501      	movs	r5, #1
 800a9bc:	e7c2      	b.n	800a944 <__gethex+0x388>
 800a9be:	f016 061f 	ands.w	r6, r6, #31
 800a9c2:	d0fa      	beq.n	800a9ba <__gethex+0x3fe>
 800a9c4:	4453      	add	r3, sl
 800a9c6:	f1c6 0620 	rsb	r6, r6, #32
 800a9ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a9ce:	f7fd ff7d 	bl	80088cc <__hi0bits>
 800a9d2:	42b0      	cmp	r0, r6
 800a9d4:	dbe7      	blt.n	800a9a6 <__gethex+0x3ea>
 800a9d6:	e7f0      	b.n	800a9ba <__gethex+0x3fe>
 800a9d8:	0800af5e 	.word	0x0800af5e

0800a9dc <L_shift>:
 800a9dc:	f1c2 0208 	rsb	r2, r2, #8
 800a9e0:	0092      	lsls	r2, r2, #2
 800a9e2:	b570      	push	{r4, r5, r6, lr}
 800a9e4:	f1c2 0620 	rsb	r6, r2, #32
 800a9e8:	6843      	ldr	r3, [r0, #4]
 800a9ea:	6804      	ldr	r4, [r0, #0]
 800a9ec:	fa03 f506 	lsl.w	r5, r3, r6
 800a9f0:	432c      	orrs	r4, r5
 800a9f2:	40d3      	lsrs	r3, r2
 800a9f4:	6004      	str	r4, [r0, #0]
 800a9f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9fa:	4288      	cmp	r0, r1
 800a9fc:	d3f4      	bcc.n	800a9e8 <L_shift+0xc>
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}

0800aa00 <__match>:
 800aa00:	b530      	push	{r4, r5, lr}
 800aa02:	6803      	ldr	r3, [r0, #0]
 800aa04:	3301      	adds	r3, #1
 800aa06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa0a:	b914      	cbnz	r4, 800aa12 <__match+0x12>
 800aa0c:	6003      	str	r3, [r0, #0]
 800aa0e:	2001      	movs	r0, #1
 800aa10:	bd30      	pop	{r4, r5, pc}
 800aa12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aa1a:	2d19      	cmp	r5, #25
 800aa1c:	bf98      	it	ls
 800aa1e:	3220      	addls	r2, #32
 800aa20:	42a2      	cmp	r2, r4
 800aa22:	d0f0      	beq.n	800aa06 <__match+0x6>
 800aa24:	2000      	movs	r0, #0
 800aa26:	e7f3      	b.n	800aa10 <__match+0x10>

0800aa28 <__hexnan>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	680b      	ldr	r3, [r1, #0]
 800aa2e:	6801      	ldr	r1, [r0, #0]
 800aa30:	115e      	asrs	r6, r3, #5
 800aa32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa36:	f013 031f 	ands.w	r3, r3, #31
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	bf18      	it	ne
 800aa3e:	3604      	addne	r6, #4
 800aa40:	2500      	movs	r5, #0
 800aa42:	1f37      	subs	r7, r6, #4
 800aa44:	4682      	mov	sl, r0
 800aa46:	4690      	mov	r8, r2
 800aa48:	9301      	str	r3, [sp, #4]
 800aa4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa4e:	46b9      	mov	r9, r7
 800aa50:	463c      	mov	r4, r7
 800aa52:	9502      	str	r5, [sp, #8]
 800aa54:	46ab      	mov	fp, r5
 800aa56:	784a      	ldrb	r2, [r1, #1]
 800aa58:	1c4b      	adds	r3, r1, #1
 800aa5a:	9303      	str	r3, [sp, #12]
 800aa5c:	b342      	cbz	r2, 800aab0 <__hexnan+0x88>
 800aa5e:	4610      	mov	r0, r2
 800aa60:	9105      	str	r1, [sp, #20]
 800aa62:	9204      	str	r2, [sp, #16]
 800aa64:	f7ff fd94 	bl	800a590 <__hexdig_fun>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d151      	bne.n	800ab10 <__hexnan+0xe8>
 800aa6c:	9a04      	ldr	r2, [sp, #16]
 800aa6e:	9905      	ldr	r1, [sp, #20]
 800aa70:	2a20      	cmp	r2, #32
 800aa72:	d818      	bhi.n	800aaa6 <__hexnan+0x7e>
 800aa74:	9b02      	ldr	r3, [sp, #8]
 800aa76:	459b      	cmp	fp, r3
 800aa78:	dd13      	ble.n	800aaa2 <__hexnan+0x7a>
 800aa7a:	454c      	cmp	r4, r9
 800aa7c:	d206      	bcs.n	800aa8c <__hexnan+0x64>
 800aa7e:	2d07      	cmp	r5, #7
 800aa80:	dc04      	bgt.n	800aa8c <__hexnan+0x64>
 800aa82:	462a      	mov	r2, r5
 800aa84:	4649      	mov	r1, r9
 800aa86:	4620      	mov	r0, r4
 800aa88:	f7ff ffa8 	bl	800a9dc <L_shift>
 800aa8c:	4544      	cmp	r4, r8
 800aa8e:	d952      	bls.n	800ab36 <__hexnan+0x10e>
 800aa90:	2300      	movs	r3, #0
 800aa92:	f1a4 0904 	sub.w	r9, r4, #4
 800aa96:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa9a:	f8cd b008 	str.w	fp, [sp, #8]
 800aa9e:	464c      	mov	r4, r9
 800aaa0:	461d      	mov	r5, r3
 800aaa2:	9903      	ldr	r1, [sp, #12]
 800aaa4:	e7d7      	b.n	800aa56 <__hexnan+0x2e>
 800aaa6:	2a29      	cmp	r2, #41	@ 0x29
 800aaa8:	d157      	bne.n	800ab5a <__hexnan+0x132>
 800aaaa:	3102      	adds	r1, #2
 800aaac:	f8ca 1000 	str.w	r1, [sl]
 800aab0:	f1bb 0f00 	cmp.w	fp, #0
 800aab4:	d051      	beq.n	800ab5a <__hexnan+0x132>
 800aab6:	454c      	cmp	r4, r9
 800aab8:	d206      	bcs.n	800aac8 <__hexnan+0xa0>
 800aaba:	2d07      	cmp	r5, #7
 800aabc:	dc04      	bgt.n	800aac8 <__hexnan+0xa0>
 800aabe:	462a      	mov	r2, r5
 800aac0:	4649      	mov	r1, r9
 800aac2:	4620      	mov	r0, r4
 800aac4:	f7ff ff8a 	bl	800a9dc <L_shift>
 800aac8:	4544      	cmp	r4, r8
 800aaca:	d936      	bls.n	800ab3a <__hexnan+0x112>
 800aacc:	f1a8 0204 	sub.w	r2, r8, #4
 800aad0:	4623      	mov	r3, r4
 800aad2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aad6:	f842 1f04 	str.w	r1, [r2, #4]!
 800aada:	429f      	cmp	r7, r3
 800aadc:	d2f9      	bcs.n	800aad2 <__hexnan+0xaa>
 800aade:	1b3b      	subs	r3, r7, r4
 800aae0:	f023 0303 	bic.w	r3, r3, #3
 800aae4:	3304      	adds	r3, #4
 800aae6:	3401      	adds	r4, #1
 800aae8:	3e03      	subs	r6, #3
 800aaea:	42b4      	cmp	r4, r6
 800aaec:	bf88      	it	hi
 800aaee:	2304      	movhi	r3, #4
 800aaf0:	4443      	add	r3, r8
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f843 2b04 	str.w	r2, [r3], #4
 800aaf8:	429f      	cmp	r7, r3
 800aafa:	d2fb      	bcs.n	800aaf4 <__hexnan+0xcc>
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	b91b      	cbnz	r3, 800ab08 <__hexnan+0xe0>
 800ab00:	4547      	cmp	r7, r8
 800ab02:	d128      	bne.n	800ab56 <__hexnan+0x12e>
 800ab04:	2301      	movs	r3, #1
 800ab06:	603b      	str	r3, [r7, #0]
 800ab08:	2005      	movs	r0, #5
 800ab0a:	b007      	add	sp, #28
 800ab0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab10:	3501      	adds	r5, #1
 800ab12:	2d08      	cmp	r5, #8
 800ab14:	f10b 0b01 	add.w	fp, fp, #1
 800ab18:	dd06      	ble.n	800ab28 <__hexnan+0x100>
 800ab1a:	4544      	cmp	r4, r8
 800ab1c:	d9c1      	bls.n	800aaa2 <__hexnan+0x7a>
 800ab1e:	2300      	movs	r3, #0
 800ab20:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab24:	2501      	movs	r5, #1
 800ab26:	3c04      	subs	r4, #4
 800ab28:	6822      	ldr	r2, [r4, #0]
 800ab2a:	f000 000f 	and.w	r0, r0, #15
 800ab2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab32:	6020      	str	r0, [r4, #0]
 800ab34:	e7b5      	b.n	800aaa2 <__hexnan+0x7a>
 800ab36:	2508      	movs	r5, #8
 800ab38:	e7b3      	b.n	800aaa2 <__hexnan+0x7a>
 800ab3a:	9b01      	ldr	r3, [sp, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0dd      	beq.n	800aafc <__hexnan+0xd4>
 800ab40:	f1c3 0320 	rsb	r3, r3, #32
 800ab44:	f04f 32ff 	mov.w	r2, #4294967295
 800ab48:	40da      	lsrs	r2, r3
 800ab4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab54:	e7d2      	b.n	800aafc <__hexnan+0xd4>
 800ab56:	3f04      	subs	r7, #4
 800ab58:	e7d0      	b.n	800aafc <__hexnan+0xd4>
 800ab5a:	2004      	movs	r0, #4
 800ab5c:	e7d5      	b.n	800ab0a <__hexnan+0xe2>

0800ab5e <__ascii_mbtowc>:
 800ab5e:	b082      	sub	sp, #8
 800ab60:	b901      	cbnz	r1, 800ab64 <__ascii_mbtowc+0x6>
 800ab62:	a901      	add	r1, sp, #4
 800ab64:	b142      	cbz	r2, 800ab78 <__ascii_mbtowc+0x1a>
 800ab66:	b14b      	cbz	r3, 800ab7c <__ascii_mbtowc+0x1e>
 800ab68:	7813      	ldrb	r3, [r2, #0]
 800ab6a:	600b      	str	r3, [r1, #0]
 800ab6c:	7812      	ldrb	r2, [r2, #0]
 800ab6e:	1e10      	subs	r0, r2, #0
 800ab70:	bf18      	it	ne
 800ab72:	2001      	movne	r0, #1
 800ab74:	b002      	add	sp, #8
 800ab76:	4770      	bx	lr
 800ab78:	4610      	mov	r0, r2
 800ab7a:	e7fb      	b.n	800ab74 <__ascii_mbtowc+0x16>
 800ab7c:	f06f 0001 	mvn.w	r0, #1
 800ab80:	e7f8      	b.n	800ab74 <__ascii_mbtowc+0x16>

0800ab82 <_realloc_r>:
 800ab82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab86:	4607      	mov	r7, r0
 800ab88:	4614      	mov	r4, r2
 800ab8a:	460d      	mov	r5, r1
 800ab8c:	b921      	cbnz	r1, 800ab98 <_realloc_r+0x16>
 800ab8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	4611      	mov	r1, r2
 800ab94:	f7fd bd1c 	b.w	80085d0 <_malloc_r>
 800ab98:	b92a      	cbnz	r2, 800aba6 <_realloc_r+0x24>
 800ab9a:	f7fd fca5 	bl	80084e8 <_free_r>
 800ab9e:	4625      	mov	r5, r4
 800aba0:	4628      	mov	r0, r5
 800aba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba6:	f000 f840 	bl	800ac2a <_malloc_usable_size_r>
 800abaa:	4284      	cmp	r4, r0
 800abac:	4606      	mov	r6, r0
 800abae:	d802      	bhi.n	800abb6 <_realloc_r+0x34>
 800abb0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abb4:	d8f4      	bhi.n	800aba0 <_realloc_r+0x1e>
 800abb6:	4621      	mov	r1, r4
 800abb8:	4638      	mov	r0, r7
 800abba:	f7fd fd09 	bl	80085d0 <_malloc_r>
 800abbe:	4680      	mov	r8, r0
 800abc0:	b908      	cbnz	r0, 800abc6 <_realloc_r+0x44>
 800abc2:	4645      	mov	r5, r8
 800abc4:	e7ec      	b.n	800aba0 <_realloc_r+0x1e>
 800abc6:	42b4      	cmp	r4, r6
 800abc8:	4622      	mov	r2, r4
 800abca:	4629      	mov	r1, r5
 800abcc:	bf28      	it	cs
 800abce:	4632      	movcs	r2, r6
 800abd0:	f7ff fc42 	bl	800a458 <memcpy>
 800abd4:	4629      	mov	r1, r5
 800abd6:	4638      	mov	r0, r7
 800abd8:	f7fd fc86 	bl	80084e8 <_free_r>
 800abdc:	e7f1      	b.n	800abc2 <_realloc_r+0x40>

0800abde <__ascii_wctomb>:
 800abde:	4603      	mov	r3, r0
 800abe0:	4608      	mov	r0, r1
 800abe2:	b141      	cbz	r1, 800abf6 <__ascii_wctomb+0x18>
 800abe4:	2aff      	cmp	r2, #255	@ 0xff
 800abe6:	d904      	bls.n	800abf2 <__ascii_wctomb+0x14>
 800abe8:	228a      	movs	r2, #138	@ 0x8a
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	f04f 30ff 	mov.w	r0, #4294967295
 800abf0:	4770      	bx	lr
 800abf2:	700a      	strb	r2, [r1, #0]
 800abf4:	2001      	movs	r0, #1
 800abf6:	4770      	bx	lr

0800abf8 <fiprintf>:
 800abf8:	b40e      	push	{r1, r2, r3}
 800abfa:	b503      	push	{r0, r1, lr}
 800abfc:	4601      	mov	r1, r0
 800abfe:	ab03      	add	r3, sp, #12
 800ac00:	4805      	ldr	r0, [pc, #20]	@ (800ac18 <fiprintf+0x20>)
 800ac02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac06:	6800      	ldr	r0, [r0, #0]
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	f7ff f9a1 	bl	8009f50 <_vfiprintf_r>
 800ac0e:	b002      	add	sp, #8
 800ac10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac14:	b003      	add	sp, #12
 800ac16:	4770      	bx	lr
 800ac18:	20000048 	.word	0x20000048

0800ac1c <abort>:
 800ac1c:	b508      	push	{r3, lr}
 800ac1e:	2006      	movs	r0, #6
 800ac20:	f000 f834 	bl	800ac8c <raise>
 800ac24:	2001      	movs	r0, #1
 800ac26:	f7f7 f99f 	bl	8001f68 <_exit>

0800ac2a <_malloc_usable_size_r>:
 800ac2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac2e:	1f18      	subs	r0, r3, #4
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	bfbc      	itt	lt
 800ac34:	580b      	ldrlt	r3, [r1, r0]
 800ac36:	18c0      	addlt	r0, r0, r3
 800ac38:	4770      	bx	lr

0800ac3a <_raise_r>:
 800ac3a:	291f      	cmp	r1, #31
 800ac3c:	b538      	push	{r3, r4, r5, lr}
 800ac3e:	4605      	mov	r5, r0
 800ac40:	460c      	mov	r4, r1
 800ac42:	d904      	bls.n	800ac4e <_raise_r+0x14>
 800ac44:	2316      	movs	r3, #22
 800ac46:	6003      	str	r3, [r0, #0]
 800ac48:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4c:	bd38      	pop	{r3, r4, r5, pc}
 800ac4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ac50:	b112      	cbz	r2, 800ac58 <_raise_r+0x1e>
 800ac52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac56:	b94b      	cbnz	r3, 800ac6c <_raise_r+0x32>
 800ac58:	4628      	mov	r0, r5
 800ac5a:	f000 f831 	bl	800acc0 <_getpid_r>
 800ac5e:	4622      	mov	r2, r4
 800ac60:	4601      	mov	r1, r0
 800ac62:	4628      	mov	r0, r5
 800ac64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac68:	f000 b818 	b.w	800ac9c <_kill_r>
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d00a      	beq.n	800ac86 <_raise_r+0x4c>
 800ac70:	1c59      	adds	r1, r3, #1
 800ac72:	d103      	bne.n	800ac7c <_raise_r+0x42>
 800ac74:	2316      	movs	r3, #22
 800ac76:	6003      	str	r3, [r0, #0]
 800ac78:	2001      	movs	r0, #1
 800ac7a:	e7e7      	b.n	800ac4c <_raise_r+0x12>
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac82:	4620      	mov	r0, r4
 800ac84:	4798      	blx	r3
 800ac86:	2000      	movs	r0, #0
 800ac88:	e7e0      	b.n	800ac4c <_raise_r+0x12>
	...

0800ac8c <raise>:
 800ac8c:	4b02      	ldr	r3, [pc, #8]	@ (800ac98 <raise+0xc>)
 800ac8e:	4601      	mov	r1, r0
 800ac90:	6818      	ldr	r0, [r3, #0]
 800ac92:	f7ff bfd2 	b.w	800ac3a <_raise_r>
 800ac96:	bf00      	nop
 800ac98:	20000048 	.word	0x20000048

0800ac9c <_kill_r>:
 800ac9c:	b538      	push	{r3, r4, r5, lr}
 800ac9e:	4d07      	ldr	r5, [pc, #28]	@ (800acbc <_kill_r+0x20>)
 800aca0:	2300      	movs	r3, #0
 800aca2:	4604      	mov	r4, r0
 800aca4:	4608      	mov	r0, r1
 800aca6:	4611      	mov	r1, r2
 800aca8:	602b      	str	r3, [r5, #0]
 800acaa:	f7f7 f94d 	bl	8001f48 <_kill>
 800acae:	1c43      	adds	r3, r0, #1
 800acb0:	d102      	bne.n	800acb8 <_kill_r+0x1c>
 800acb2:	682b      	ldr	r3, [r5, #0]
 800acb4:	b103      	cbz	r3, 800acb8 <_kill_r+0x1c>
 800acb6:	6023      	str	r3, [r4, #0]
 800acb8:	bd38      	pop	{r3, r4, r5, pc}
 800acba:	bf00      	nop
 800acbc:	2000063c 	.word	0x2000063c

0800acc0 <_getpid_r>:
 800acc0:	f7f7 b93a 	b.w	8001f38 <_getpid>

0800acc4 <_init>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	bf00      	nop
 800acc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acca:	bc08      	pop	{r3}
 800accc:	469e      	mov	lr, r3
 800acce:	4770      	bx	lr

0800acd0 <_fini>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	bf00      	nop
 800acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd6:	bc08      	pop	{r3}
 800acd8:	469e      	mov	lr, r3
 800acda:	4770      	bx	lr
