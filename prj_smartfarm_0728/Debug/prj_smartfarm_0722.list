
prj_smartfarm_0722.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b53c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800b710  0800b710  0000c710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd78  0800bd78  0000d21c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bd78  0800bd78  0000cd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd80  0800bd80  0000d21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd80  0800bd80  0000cd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd84  0800bd84  0000cd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800bd88  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  2000021c  0800bfa4  0000d21c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  0800bfa4  0000d630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d21c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113c7  00000000  00000000  0000d24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a06  00000000  00000000  0001e613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00021020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c21  00000000  00000000  00021fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cad  00000000  00000000  00022be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136f3  00000000  00000000  00047896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e050b  00000000  00000000  0005af89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b494  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005958  00000000  00000000  0013b4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00140e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b6f4 	.word	0x0800b6f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000220 	.word	0x20000220
 800020c:	0800b6f4 	.word	0x0800b6f4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <MX_ADC1_Init+0x9c>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_ADC1_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b0:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c0:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <MX_ADC1_Init+0xa0>)
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010da:	2201      	movs	r2, #1
 80010dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010de:	480e      	ldr	r0, [pc, #56]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010e0:	f001 fd6a 	bl	8002bb8 <HAL_ADC_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ea:	f001 f893 	bl	8002214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001100:	f001 ff3c 	bl	8002f7c <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800110a:	f001 f883 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000238 	.word	0x20000238
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_ADC_MspInit+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d127      	bne.n	8001196 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800117e:	2373      	movs	r3, #115	@ 0x73
 8001180:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_ADC_MspInit+0x84>)
 8001192:	f002 fa03 	bl	800359c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012000 	.word	0x40012000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000

080011ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b47      	ldr	r3, [pc, #284]	@ (80012e4 <MX_GPIO_Init+0x138>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a46      	ldr	r2, [pc, #280]	@ (80012e4 <MX_GPIO_Init+0x138>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b44      	ldr	r3, [pc, #272]	@ (80012e4 <MX_GPIO_Init+0x138>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b40      	ldr	r3, [pc, #256]	@ (80012e4 <MX_GPIO_Init+0x138>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a3f      	ldr	r2, [pc, #252]	@ (80012e4 <MX_GPIO_Init+0x138>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b3d      	ldr	r3, [pc, #244]	@ (80012e4 <MX_GPIO_Init+0x138>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b39      	ldr	r3, [pc, #228]	@ (80012e4 <MX_GPIO_Init+0x138>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a38      	ldr	r2, [pc, #224]	@ (80012e4 <MX_GPIO_Init+0x138>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b36      	ldr	r3, [pc, #216]	@ (80012e4 <MX_GPIO_Init+0x138>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b32      	ldr	r3, [pc, #200]	@ (80012e4 <MX_GPIO_Init+0x138>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a31      	ldr	r2, [pc, #196]	@ (80012e4 <MX_GPIO_Init+0x138>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <MX_GPIO_Init+0x138>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Peltier1_Pin|Peltier2_Pin|led1_Pin|Fan_On_Pin
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8001238:	482b      	ldr	r0, [pc, #172]	@ (80012e8 <MX_GPIO_Init+0x13c>)
 800123a:	f002 fb5b 	bl	80038f4 <HAL_GPIO_WritePin>
                          |Water_P2_Pin|Water_P1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DHT11_Pin|Fan_Peltier1_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 8001244:	4829      	ldr	r0, [pc, #164]	@ (80012ec <MX_GPIO_Init+0x140>)
 8001246:	f002 fb55 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Peltier1_Pin Peltier2_Pin Fan_On_Pin */
  GPIO_InitStruct.Pin = Peltier1_Pin|Peltier2_Pin|Fan_On_Pin;
 800124a:	234c      	movs	r3, #76	@ 0x4c
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4821      	ldr	r0, [pc, #132]	@ (80012e8 <MX_GPIO_Init+0x13c>)
 8001262:	f002 f99b 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin Water_P2_Pin Water_P1_Pin */
  GPIO_InitStruct.Pin = led1_Pin|Water_P2_Pin|Water_P1_Pin;
 8001266:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	481a      	ldr	r0, [pc, #104]	@ (80012e8 <MX_GPIO_Init+0x13c>)
 8001280:	f002 f98c 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4813      	ldr	r0, [pc, #76]	@ (80012ec <MX_GPIO_Init+0x140>)
 800129e:	f002 f97d 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : Water_Chk_Pin */
  GPIO_InitStruct.Pin = Water_Chk_Pin;
 80012a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Water_Chk_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	480d      	ldr	r0, [pc, #52]	@ (80012ec <MX_GPIO_Init+0x140>)
 80012b8:	f002 f970 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : Fan_Peltier1_Pin */
  GPIO_InitStruct.Pin = Fan_Peltier1_Pin;
 80012bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fan_Peltier1_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	@ (80012ec <MX_GPIO_Init+0x140>)
 80012d6:	f002 f961 	bl	800359c <HAL_GPIO_Init>

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	@ 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020400 	.word	0x40020400

080012f0 <__io_putchar>:
// ============================================printf문 =======================================================
//============================================================================================================

#if printf_en
extern int __io_putchar(int ch)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
    //UART_HandleTypeDef huart1;
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);

#elif Console_Ch2
    //UART_HandleTypeDef huart2;
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80012f8:	1d39      	adds	r1, r7, #4
 80012fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012fe:	2201      	movs	r2, #1
 8001300:	4804      	ldr	r0, [pc, #16]	@ (8001314 <__io_putchar+0x24>)
 8001302:	f004 fa5f 	bl	80057c4 <HAL_UART_Transmit>

#elif Console_Ch6
    //UART_HandleTypeDef huart3;
    HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
#endif
    __NOP();
 8001306:	bf00      	nop
  return ch;
 8001308:	687b      	ldr	r3, [r7, #4]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000498 	.word	0x20000498

08001318 <delay>:
  #define DHT11_PORT  DHT11_GPIO_Port // main.h 참고
  #define DHT11_PIN   DHT11_Pin       // main.h 참고

// usec delay
void delay (uint16_t time)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
 /* change your code here for the delay in microseconds */
 __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <delay+0x30>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
 while ((__HAL_TIM_GET_COUNTER(&htim6)) < time);  // 타이머 7
 800132a:	bf00      	nop
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <delay+0x30>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3f9      	bcc.n	800132c <delay+0x14>
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000408 	.word	0x20000408

0800134c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
 GPIO_InitStruct.Pin = GPIO_Pin;
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
 HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f002 f90e 	bl	800359c <HAL_GPIO_Init>
}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
 GPIO_InitStruct.Pin = GPIO_Pin;
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f002 f8f0 	bl	800359c <HAL_GPIO_Init>
}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <DHT11_Start>:

void DHT11_Start (void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
 if(dht_ch1 -> dht11_ch == 1)
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <DHT11_Start+0x50>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f993 3000 	ldrsb.w	r3, [r3]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d11c      	bne.n	800140e <DHT11_Start+0x4a>
   { //ch1
   Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80013d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013d8:	480f      	ldr	r0, [pc, #60]	@ (8001418 <DHT11_Start+0x54>)
 80013da:	f7ff ffb7 	bl	800134c <Set_Pin_Output>
   HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <DHT11_Start+0x54>)
 80013e6:	f002 fa85 	bl	80038f4 <HAL_GPIO_WritePin>
   delay(18000);   // wait for 18ms
 80013ea:	f244 6050 	movw	r0, #18000	@ 0x4650
 80013ee:	f7ff ff93 	bl	8001318 <delay>
   HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013f8:	4807      	ldr	r0, [pc, #28]	@ (8001418 <DHT11_Start+0x54>)
 80013fa:	f002 fa7b 	bl	80038f4 <HAL_GPIO_WritePin>
   delay (20);   // wait for 20us
 80013fe:	2014      	movs	r0, #20
 8001400:	f7ff ff8a 	bl	8001318 <delay>
   Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001404:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001408:	4803      	ldr	r0, [pc, #12]	@ (8001418 <DHT11_Start+0x54>)
 800140a:	f7ff ffbd 	bl	8001388 <Set_Pin_Input>
   }
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000010 	.word	0x20000010
 8001418:	40020400 	.word	0x40020400

0800141c <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 uint8_t Response = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	71fb      	strb	r3, [r7, #7]
 delay (40);
 8001426:	2028      	movs	r0, #40	@ 0x28
 8001428:	f7ff ff76 	bl	8001318 <delay>
 if(dht_ch1 -> dht11_ch == 1)
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <DHT11_Check_Response+0x94>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f993 3000 	ldrsb.w	r3, [r3]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d136      	bne.n	80014a6 <DHT11_Check_Response+0x8a>
  { //ch1
   if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001438:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800143c:	481d      	ldr	r0, [pc, #116]	@ (80014b4 <DHT11_Check_Response+0x98>)
 800143e:	f002 fa41 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d120      	bne.n	800148a <DHT11_Check_Response+0x6e>
    {
     delay (80);
 8001448:	2050      	movs	r0, #80	@ 0x50
 800144a:	f7ff ff65 	bl	8001318 <delay>
     if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800144e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001452:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <DHT11_Check_Response+0x98>)
 8001454:	f002 fa36 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <DHT11_Check_Response+0x48>
 800145e:	2301      	movs	r3, #1
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	e012      	b.n	800148a <DHT11_Check_Response+0x6e>
     else Response = -1; // 255
 8001464:	23ff      	movs	r3, #255	@ 0xff
 8001466:	71fb      	strb	r3, [r7, #7]
    }
   while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001468:	e00f      	b.n	800148a <DHT11_Check_Response+0x6e>
     {
	   // wait for the pin to go low
	   dht_ch1 -> while_cnt++;
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <DHT11_Check_Response+0x94>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001472:	b292      	uxth	r2, r2
 8001474:	3201      	adds	r2, #1
 8001476:	b292      	uxth	r2, r2
 8001478:	b212      	sxth	r2, r2
 800147a:	805a      	strh	r2, [r3, #2]
	   if( dht_ch1 -> while_cnt > 500) break;
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <DHT11_Check_Response+0x94>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001484:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001488:	dc08      	bgt.n	800149c <DHT11_Check_Response+0x80>
   while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800148a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800148e:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <DHT11_Check_Response+0x98>)
 8001490:	f002 fa18 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e7      	bne.n	800146a <DHT11_Check_Response+0x4e>
 800149a:	e000      	b.n	800149e <DHT11_Check_Response+0x82>
	   if( dht_ch1 -> while_cnt > 500) break;
 800149c:	bf00      	nop
     }
   dht_ch1 -> while_cnt = 0;
 800149e:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <DHT11_Check_Response+0x94>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	805a      	strh	r2, [r3, #2]
  }
#endif
 return Response;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000010 	.word	0x20000010
 80014b4:	40020400 	.word	0x40020400

080014b8 <DHT11_Read>:
uint8_t DHT11_Read ()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 uint8_t i,j;
 if(dht_ch1 -> dht11_ch == 1)
 80014be:	4b3b      	ldr	r3, [pc, #236]	@ (80015ac <DHT11_Read+0xf4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f993 3000 	ldrsb.w	r3, [r3]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d16b      	bne.n	80015a2 <DHT11_Read+0xea>
  {
   for (j=0;j<8;j++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	71bb      	strb	r3, [r7, #6]
 80014ce:	e065      	b.n	800159c <DHT11_Read+0xe4>
    {
	  while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
	   {
		  dht_ch1 -> while_cnt++;
 80014d0:	4b36      	ldr	r3, [pc, #216]	@ (80015ac <DHT11_Read+0xf4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80014d8:	b292      	uxth	r2, r2
 80014da:	3201      	adds	r2, #1
 80014dc:	b292      	uxth	r2, r2
 80014de:	b212      	sxth	r2, r2
 80014e0:	805a      	strh	r2, [r3, #2]
		// wait for the pin to go high
		if(dht_ch1 -> while_cnt > 500) break;
 80014e2:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <DHT11_Read+0xf4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014ee:	dc08      	bgt.n	8001502 <DHT11_Read+0x4a>
	  while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80014f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014f4:	482e      	ldr	r0, [pc, #184]	@ (80015b0 <DHT11_Read+0xf8>)
 80014f6:	f002 f9e5 	bl	80038c4 <HAL_GPIO_ReadPin>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0e7      	beq.n	80014d0 <DHT11_Read+0x18>
 8001500:	e000      	b.n	8001504 <DHT11_Read+0x4c>
		if(dht_ch1 -> while_cnt > 500) break;
 8001502:	bf00      	nop
	   }
	  dht_ch1 -> while_cnt = 0;
 8001504:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <DHT11_Read+0xf4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2200      	movs	r2, #0
 800150a:	805a      	strh	r2, [r3, #2]
	  delay (40);   // wait for 40 us
 800150c:	2028      	movs	r0, #40	@ 0x28
 800150e:	f7ff ff03 	bl	8001318 <delay>
	  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001512:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001516:	4826      	ldr	r0, [pc, #152]	@ (80015b0 <DHT11_Read+0xf8>)
 8001518:	f002 f9d4 	bl	80038c4 <HAL_GPIO_ReadPin>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10e      	bne.n	8001540 <DHT11_Read+0x88>
	   {
	    i&= ~(1<<(7-j));   // write 0
 8001522:	79bb      	ldrb	r3, [r7, #6]
 8001524:	f1c3 0307 	rsb	r3, r3, #7
 8001528:	2201      	movs	r2, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	b25b      	sxtb	r3, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	b25a      	sxtb	r2, r3
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4013      	ands	r3, r2
 800153a:	b25b      	sxtb	r3, r3
 800153c:	71fb      	strb	r3, [r7, #7]
 800153e:	e01c      	b.n	800157a <DHT11_Read+0xc2>
	   }
	  else i|= (1<<(7-j));  // if the pin is high, write 1
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2201      	movs	r2, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	b25a      	sxtb	r2, r3
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	4313      	orrs	r3, r2
 8001554:	b25b      	sxtb	r3, r3
 8001556:	71fb      	strb	r3, [r7, #7]
	  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001558:	e00f      	b.n	800157a <DHT11_Read+0xc2>
	   {
		  dht_ch1 -> while_cnt++;
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <DHT11_Read+0xf4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001562:	b292      	uxth	r2, r2
 8001564:	3201      	adds	r2, #1
 8001566:	b292      	uxth	r2, r2
 8001568:	b212      	sxth	r2, r2
 800156a:	805a      	strh	r2, [r3, #2]
		// wait for the pin to go low
		if(dht_ch1 -> while_cnt > 500) break;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <DHT11_Read+0xf4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001574:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001578:	dc08      	bgt.n	800158c <DHT11_Read+0xd4>
	  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800157a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800157e:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <DHT11_Read+0xf8>)
 8001580:	f002 f9a0 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1e7      	bne.n	800155a <DHT11_Read+0xa2>
 800158a:	e000      	b.n	800158e <DHT11_Read+0xd6>
		if(dht_ch1 -> while_cnt > 500) break;
 800158c:	bf00      	nop
	   }
	  dht_ch1 -> while_cnt =  0;
 800158e:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <DHT11_Read+0xf4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2200      	movs	r2, #0
 8001594:	805a      	strh	r2, [r3, #2]
   for (j=0;j<8;j++)
 8001596:	79bb      	ldrb	r3, [r7, #6]
 8001598:	3301      	adds	r3, #1
 800159a:	71bb      	strb	r3, [r7, #6]
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	2b07      	cmp	r3, #7
 80015a0:	d9a6      	bls.n	80014f0 <DHT11_Read+0x38>
    } // for end
  } // if-end
 return i;
 80015a2:	79fb      	ldrb	r3, [r7, #7]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000010 	.word	0x20000010
 80015b0:	40020400 	.word	0x40020400

080015b4 <DHT11_Sensor_Test>:

uint8_t DHT11_Sensor_Test()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
	uint16_t SUM, RH, TEMP;
	float Temperature = 0;
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
	float Humidity = 0;
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
	uint8_t Presence = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
 // DHT11 Run == Main
 DHT11_Start();
 80015ca:	f7ff fefb 	bl	80013c4 <DHT11_Start>
 Presence = DHT11_Check_Response();
 80015ce:	f7ff ff25 	bl	800141c <DHT11_Check_Response>
 80015d2:	4603      	mov	r3, r0
 80015d4:	75fb      	strb	r3, [r7, #23]
 Rh_byte1 = DHT11_Read ();
 80015d6:	f7ff ff6f 	bl	80014b8 <DHT11_Read>
 80015da:	4603      	mov	r3, r0
 80015dc:	75bb      	strb	r3, [r7, #22]
 Rh_byte2 = DHT11_Read ();
 80015de:	f7ff ff6b 	bl	80014b8 <DHT11_Read>
 80015e2:	4603      	mov	r3, r0
 80015e4:	757b      	strb	r3, [r7, #21]
 Temp_byte1 = DHT11_Read ();
 80015e6:	f7ff ff67 	bl	80014b8 <DHT11_Read>
 80015ea:	4603      	mov	r3, r0
 80015ec:	753b      	strb	r3, [r7, #20]
 Temp_byte2 = DHT11_Read ();
 80015ee:	f7ff ff63 	bl	80014b8 <DHT11_Read>
 80015f2:	4603      	mov	r3, r0
 80015f4:	74fb      	strb	r3, [r7, #19]
 SUM = DHT11_Read();
 80015f6:	f7ff ff5f 	bl	80014b8 <DHT11_Read>
 80015fa:	4603      	mov	r3, r0
 80015fc:	823b      	strh	r3, [r7, #16]

 // 정수부만 출력 됨
 TEMP = Temp_byte1;
 80015fe:	7d3b      	ldrb	r3, [r7, #20]
 8001600:	81fb      	strh	r3, [r7, #14]
 RH = Rh_byte1;
 8001602:	7dbb      	ldrb	r3, [r7, #22]
 8001604:	81bb      	strh	r3, [r7, #12]
 // 소수점 부도 출력 됨
 Temperature = (float) TEMP;
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001610:	edc7 7a07 	vstr	s15, [r7, #28]
 Humidity = (float) RH;
 8001614:	89bb      	ldrh	r3, [r7, #12]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161e:	edc7 7a06 	vstr	s15, [r7, #24]

 if(dht_ch1 -> dht11_ch == 1)
 8001622:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <DHT11_Sensor_Test+0x124>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f993 3000 	ldrsb.w	r3, [r3]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d143      	bne.n	80016b6 <DHT11_Sensor_Test+0x102>
  {
	if(TEMP >= 255) Temperature = dht_ch1 -> old_temp;
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	2bfe      	cmp	r3, #254	@ 0xfe
 8001632:	d909      	bls.n	8001648 <DHT11_Sensor_Test+0x94>
 8001634:	4b28      	ldr	r3, [pc, #160]	@ (80016d8 <DHT11_Sensor_Test+0x124>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	889b      	ldrh	r3, [r3, #4]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001642:	edc7 7a07 	vstr	s15, [r7, #28]
 8001646:	e009      	b.n	800165c <DHT11_Sensor_Test+0xa8>
	else dht_ch1 -> old_temp = Temperature;
 8001648:	4b23      	ldr	r3, [pc, #140]	@ (80016d8 <DHT11_Sensor_Test+0x124>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001654:	ee17 2a90 	vmov	r2, s15
 8001658:	b292      	uxth	r2, r2
 800165a:	809a      	strh	r2, [r3, #4]

	if(RH >= 255) Humidity =dht_ch1 -> old_rh;
 800165c:	89bb      	ldrh	r3, [r7, #12]
 800165e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001660:	d909      	bls.n	8001676 <DHT11_Sensor_Test+0xc2>
 8001662:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <DHT11_Sensor_Test+0x124>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	88db      	ldrh	r3, [r3, #6]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001670:	edc7 7a06 	vstr	s15, [r7, #24]
 8001674:	e009      	b.n	800168a <DHT11_Sensor_Test+0xd6>
	else dht_ch1 -> old_rh = Humidity;
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <DHT11_Sensor_Test+0x124>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	edd7 7a06 	vldr	s15, [r7, #24]
 800167e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001682:	ee17 2a90 	vmov	r2, s15
 8001686:	b292      	uxth	r2, r2
 8001688:	80da      	strh	r2, [r3, #6]

	dht_ch1 -> Temp_Ch1_dis = Temperature;
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <DHT11_Sensor_Test+0x124>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001696:	edc7 7a01 	vstr	s15, [r7, #4]
 800169a:	793a      	ldrb	r2, [r7, #4]
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	729a      	strb	r2, [r3, #10]
	dht_ch1 -> Hum_Ch1_dis = Humidity;
 80016a0:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <DHT11_Sensor_Test+0x124>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80016b0:	793a      	ldrb	r2, [r7, #4]
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	72da      	strb	r2, [r3, #11]
  }
 HAL_Delay(500);
 80016b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016ba:	f001 fa59 	bl	8002b70 <HAL_Delay>
 if (TEMP != 0 ||  RH != 0) return 1;
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <DHT11_Sensor_Test+0x116>
 80016c4:	89bb      	ldrh	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <DHT11_Sensor_Test+0x11a>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e7ff      	b.n	80016ce <DHT11_Sensor_Test+0x11a>


}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000010 	.word	0x20000010

080016dc <DHT11_Run_RH>:
float DHT11_Run_RH()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	if(DHT11_Sensor_Test()) return dht_ch1 -> Hum_Ch1_dis;
 80016e0:	f7ff ff68 	bl	80015b4 <DHT11_Sensor_Test>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d007      	beq.n	80016fa <DHT11_Run_RH+0x1e>
 80016ea:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <DHT11_Run_RH+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	7adb      	ldrb	r3, [r3, #11]
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f8:	e7ff      	b.n	80016fa <DHT11_Run_RH+0x1e>
}
 80016fa:	eeb0 0a67 	vmov.f32	s0, s15
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000010 	.word	0x20000010

08001704 <DHT11_Run_TEMP>:

float DHT11_Run_TEMP()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	if(DHT11_Sensor_Test()) return dht_ch1 -> Temp_Ch1_dis;
 8001708:	f7ff ff54 	bl	80015b4 <DHT11_Sensor_Test>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <DHT11_Run_TEMP+0x1e>
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <DHT11_Run_TEMP+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	7a9b      	ldrb	r3, [r3, #10]
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001720:	e7ff      	b.n	8001722 <DHT11_Run_TEMP+0x1e>
}
 8001722:	eeb0 0a67 	vmov.f32	s0, s15
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000010 	.word	0x20000010
 800172c:	00000000 	.word	0x00000000

08001730 <check_light>:
  uint16_t old_ch2;
  float cds_Ch1_dis;
  float cds_Ch2_dis;
}Cds_ch1 = {1, 0, 0, 0,0};
struct cds *cds_ch1 = &Cds_ch1;
uint8_t check_light(){
 8001730:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001734:	b09a      	sub	sp, #104	@ 0x68
 8001736:	af00      	add	r7, sp, #0
	uint32_t adc_val = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	667b      	str	r3, [r7, #100]	@ 0x64
	float lux = 0.0;
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	663b      	str	r3, [r7, #96]	@ 0x60
	char light_msg[64];
	float r_fixed = 10000.0f; // 10kΩ 고정 저항
 8001742:	4b5b      	ldr	r3, [pc, #364]	@ (80018b0 <check_light+0x180>)
 8001744:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if(cds_ch1 -> cds_ch == 1){
 8001746:	4b5b      	ldr	r3, [pc, #364]	@ (80018b4 <check_light+0x184>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f993 3000 	ldrsb.w	r3, [r3]
 800174e:	2b01      	cmp	r3, #1
 8001750:	f040 808d 	bne.w	800186e <check_light+0x13e>
    	ADC_ChannelConfTypeDef sConfig = {0};
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
    	sConfig.Channel = ADC_CHANNEL_0;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
    	sConfig.Rank = 1;
 8001764:	2301      	movs	r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
    	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001768:	2301      	movs	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
    	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4851      	ldr	r0, [pc, #324]	@ (80018b8 <check_light+0x188>)
 8001772:	f001 fc03 	bl	8002f7c <HAL_ADC_ConfigChannel>
    	HAL_ADC_Start(&hadc1);
 8001776:	4850      	ldr	r0, [pc, #320]	@ (80018b8 <check_light+0x188>)
 8001778:	f001 fa62 	bl	8002c40 <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 800177c:	210a      	movs	r1, #10
 800177e:	484e      	ldr	r0, [pc, #312]	@ (80018b8 <check_light+0x188>)
 8001780:	f001 fb63 	bl	8002e4a <HAL_ADC_PollForConversion>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d171      	bne.n	800186e <check_light+0x13e>
        {
    	adc_val = HAL_ADC_GetValue(&hadc1);
 800178a:	484b      	ldr	r0, [pc, #300]	@ (80018b8 <check_light+0x188>)
 800178c:	f001 fbe8 	bl	8002f60 <HAL_ADC_GetValue>
 8001790:	6678      	str	r0, [r7, #100]	@ 0x64
    	if(adc_val == 4095 || adc_val == 0) adc_val = cds_ch1 -> old_ch1;
 8001792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001794:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001798:	4293      	cmp	r3, r2
 800179a:	d002      	beq.n	80017a2 <check_light+0x72>
 800179c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d104      	bne.n	80017ac <check_light+0x7c>
 80017a2:	4b44      	ldr	r3, [pc, #272]	@ (80018b4 <check_light+0x184>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	885b      	ldrh	r3, [r3, #2]
 80017a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80017aa:	e004      	b.n	80017b6 <check_light+0x86>
    	else cds_ch1 -> old_ch1 = adc_val;
 80017ac:	4b41      	ldr	r3, [pc, #260]	@ (80018b4 <check_light+0x184>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80017b2:	b292      	uxth	r2, r2
 80017b4:	805a      	strh	r2, [r3, #2]
    	float vout = ((float)adc_val * 3.3f) / 4095.0f;
 80017b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c0:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80018bc <check_light+0x18c>
 80017c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017c8:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80018c0 <check_light+0x190>
 80017cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		float R_CDS = r_fixed * ((3.3 - vout) / vout);
 80017d4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80017d6:	f7fe fee7 	bl	80005a8 <__aeabi_f2d>
 80017da:	4604      	mov	r4, r0
 80017dc:	460d      	mov	r5, r1
 80017de:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80017e0:	f7fe fee2 	bl	80005a8 <__aeabi_f2d>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	a12d      	add	r1, pc, #180	@ (adr r1, 80018a0 <check_light+0x170>)
 80017ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ee:	f7fe fd7b 	bl	80002e8 <__aeabi_dsub>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4690      	mov	r8, r2
 80017f8:	4699      	mov	r9, r3
 80017fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80017fc:	f7fe fed4 	bl	80005a8 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4640      	mov	r0, r8
 8001806:	4649      	mov	r1, r9
 8001808:	f7ff f850 	bl	80008ac <__aeabi_ddiv>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4620      	mov	r0, r4
 8001812:	4629      	mov	r1, r5
 8001814:	f7fe ff20 	bl	8000658 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff fa12 	bl	8000c48 <__aeabi_d2f>
 8001824:	4603      	mov	r3, r0
 8001826:	657b      	str	r3, [r7, #84]	@ 0x54
		cds_ch1 ->  cds_Ch1_dis = 500 / pow(R_CDS / 1000.0f, 1.4);
 8001828:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800182c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80018c4 <check_light+0x194>
 8001830:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001834:	ee16 0a90 	vmov	r0, s13
 8001838:	f7fe feb6 	bl	80005a8 <__aeabi_f2d>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 80018a8 <check_light+0x178>
 8001844:	ec43 2b10 	vmov	d0, r2, r3
 8001848:	f004 fc0e 	bl	8006068 <pow>
 800184c:	ec53 2b10 	vmov	r2, r3, d0
 8001850:	f04f 0000 	mov.w	r0, #0
 8001854:	491c      	ldr	r1, [pc, #112]	@ (80018c8 <check_light+0x198>)
 8001856:	f7ff f829 	bl	80008ac <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4915      	ldr	r1, [pc, #84]	@ (80018b4 <check_light+0x184>)
 8001860:	680c      	ldr	r4, [r1, #0]
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f9ef 	bl	8000c48 <__aeabi_d2f>
 800186a:	4603      	mov	r3, r0
 800186c:	60a3      	str	r3, [r4, #8]

    	}
     }
    HAL_ADC_Stop(&hadc1);
 800186e:	4812      	ldr	r0, [pc, #72]	@ (80018b8 <check_light+0x188>)
 8001870:	f001 fab8 	bl	8002de4 <HAL_ADC_Stop>
    printf("adc_val1=%d\r\n", adc_val);
 8001874:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001876:	4815      	ldr	r0, [pc, #84]	@ (80018cc <check_light+0x19c>)
 8001878:	f006 fb04 	bl	8007e84 <iprintf>
    if(adc_val != 4095 || adc_val != 0) return 1;
 800187c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800187e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001882:	4293      	cmp	r3, r2
 8001884:	d102      	bne.n	800188c <check_light+0x15c>
 8001886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <check_light+0x160>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <check_light+0x162>
    else return 0;
 8001890:	2300      	movs	r3, #0
    }
 8001892:	4618      	mov	r0, r3
 8001894:	3768      	adds	r7, #104	@ 0x68
 8001896:	46bd      	mov	sp, r7
 8001898:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800189c:	f3af 8000 	nop.w
 80018a0:	66666666 	.word	0x66666666
 80018a4:	400a6666 	.word	0x400a6666
 80018a8:	66666666 	.word	0x66666666
 80018ac:	3ff66666 	.word	0x3ff66666
 80018b0:	461c4000 	.word	0x461c4000
 80018b4:	20000024 	.word	0x20000024
 80018b8:	20000238 	.word	0x20000238
 80018bc:	40533333 	.word	0x40533333
 80018c0:	457ff000 	.word	0x457ff000
 80018c4:	447a0000 	.word	0x447a0000
 80018c8:	407f4000 	.word	0x407f4000
 80018cc:	0800b710 	.word	0x0800b710

080018d0 <read_light>:
float read_light(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	if(check_light()) return cds_ch1 ->  cds_Ch1_dis;
 80018d4:	f7ff ff2c 	bl	8001730 <check_light>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <read_light+0x1a>
 80018de:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <read_light+0x20>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	e7ff      	b.n	80018ea <read_light+0x1a>
}
 80018ea:	eeb0 0a67 	vmov.f32	s0, s15
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000024 	.word	0x20000024
 80018f4:	00000000 	.word	0x00000000

080018f8 <get_co2_step>:
  float co2_Ch2_dis;
}Co2_ch1 = {1, 0, 0, 0,0};
struct co2 *co2_ch1 = &Co2_ch1;


float get_co2_step(uint32_t adc_val) {
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	6078      	str	r0, [r7, #4]
    // 12비트 ADC 기준 (0~4095)
//    if (adc_val < 1000) return 0;           //0: < 약 700 ppm  //
//    else if (adc_val < 2000) return 1;      //1: 700~1000 ppm
//    else if (adc_val < 3000) return 2;      //2: 1000~2000 ppm
    float Vref = 3.3; // OR 5.0
 8001900:	4b39      	ldr	r3, [pc, #228]	@ (80019e8 <get_co2_step+0xf0>)
 8001902:	617b      	str	r3, [r7, #20]
	float Vout;
	float CO2_ppm;


	Vout = (adc_val / 4095.0) * Vref;
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7fe fe2d 	bl	8000564 <__aeabi_ui2d>
 800190a:	a32f      	add	r3, pc, #188	@ (adr r3, 80019c8 <get_co2_step+0xd0>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe ffcc 	bl	80008ac <__aeabi_ddiv>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4614      	mov	r4, r2
 800191a:	461d      	mov	r5, r3
 800191c:	6978      	ldr	r0, [r7, #20]
 800191e:	f7fe fe43 	bl	80005a8 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe fe95 	bl	8000658 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f987 	bl	8000c48 <__aeabi_d2f>
 800193a:	4603      	mov	r3, r0
 800193c:	613b      	str	r3, [r7, #16]

	//센서를 만든 회사가 배포하는 PDF 문서에서 확인합니다.PWM 출력에 대한 예시:0.4V = 400 ppm2.0V = 5000 ppm
	CO2_ppm = ((Vout - 0.4) / (2.0 - 0.4) ) * (5000 - 400) + 400;
 800193e:	6938      	ldr	r0, [r7, #16]
 8001940:	f7fe fe32 	bl	80005a8 <__aeabi_f2d>
 8001944:	a322      	add	r3, pc, #136	@ (adr r3, 80019d0 <get_co2_step+0xd8>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fccd 	bl	80002e8 <__aeabi_dsub>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	a320      	add	r3, pc, #128	@ (adr r3, 80019d8 <get_co2_step+0xe0>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe ffa6 	bl	80008ac <__aeabi_ddiv>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	a31d      	add	r3, pc, #116	@ (adr r3, 80019e0 <get_co2_step+0xe8>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7fe fe73 	bl	8000658 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <get_co2_step+0xf4>)
 8001980:	f7fe fcb4 	bl	80002ec <__adddf3>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f95c 	bl	8000c48 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]
	printf("vout = %.1f ,Co2 ppm = %.1f\r\n",Vout, CO2_ppm);
 8001994:	6938      	ldr	r0, [r7, #16]
 8001996:	f7fe fe07 	bl	80005a8 <__aeabi_f2d>
 800199a:	4604      	mov	r4, r0
 800199c:	460d      	mov	r5, r1
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7fe fe02 	bl	80005a8 <__aeabi_f2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	e9cd 2300 	strd	r2, r3, [sp]
 80019ac:	4622      	mov	r2, r4
 80019ae:	462b      	mov	r3, r5
 80019b0:	480f      	ldr	r0, [pc, #60]	@ (80019f0 <get_co2_step+0xf8>)
 80019b2:	f006 fa67 	bl	8007e84 <iprintf>
	return CO2_ppm;                        //3: >2000 ppm
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	ee07 3a90 	vmov	s15, r3
}
 80019bc:	eeb0 0a67 	vmov.f32	s0, s15
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bdb0      	pop	{r4, r5, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	00000000 	.word	0x00000000
 80019cc:	40affe00 	.word	0x40affe00
 80019d0:	9999999a 	.word	0x9999999a
 80019d4:	3fd99999 	.word	0x3fd99999
 80019d8:	9999999a 	.word	0x9999999a
 80019dc:	3ff99999 	.word	0x3ff99999
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40b1f800 	.word	0x40b1f800
 80019e8:	40533333 	.word	0x40533333
 80019ec:	40790000 	.word	0x40790000
 80019f0:	0800b720 	.word	0x0800b720

080019f4 <check_co2>:



uint8_t check_co2() {
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
	uint32_t adc_val = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001a12:	2301      	movs	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4821      	ldr	r0, [pc, #132]	@ (8001aa0 <check_co2+0xac>)
 8001a1c:	f001 faae 	bl	8002f7c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001a20:	481f      	ldr	r0, [pc, #124]	@ (8001aa0 <check_co2+0xac>)
 8001a22:	f001 f90d 	bl	8002c40 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001a26:	210a      	movs	r1, #10
 8001a28:	481d      	ldr	r0, [pc, #116]	@ (8001aa0 <check_co2+0xac>)
 8001a2a:	f001 fa0e 	bl	8002e4a <HAL_ADC_PollForConversion>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d11e      	bne.n	8001a72 <check_co2+0x7e>
    {
    	adc_val = HAL_ADC_GetValue(&hadc1);
 8001a34:	481a      	ldr	r0, [pc, #104]	@ (8001aa0 <check_co2+0xac>)
 8001a36:	f001 fa93 	bl	8002f60 <HAL_ADC_GetValue>
 8001a3a:	6178      	str	r0, [r7, #20]


    	if(adc_val == 4095 || adc_val == 0) adc_val = co2_ch1 -> old_ch1;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d002      	beq.n	8001a4c <check_co2+0x58>
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d104      	bne.n	8001a56 <check_co2+0x62>
 8001a4c:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <check_co2+0xb0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	885b      	ldrh	r3, [r3, #2]
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e004      	b.n	8001a60 <check_co2+0x6c>
    	else co2_ch1 -> old_ch1 = adc_val;
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <check_co2+0xb0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	b292      	uxth	r2, r2
 8001a5e:	805a      	strh	r2, [r3, #2]

    	co2_ch1 ->  co2_Ch1_dis = get_co2_step(adc_val);
 8001a60:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <check_co2+0xb0>)
 8001a62:	681c      	ldr	r4, [r3, #0]
 8001a64:	6978      	ldr	r0, [r7, #20]
 8001a66:	f7ff ff47 	bl	80018f8 <get_co2_step>
 8001a6a:	eef0 7a40 	vmov.f32	s15, s0
 8001a6e:	edc4 7a02 	vstr	s15, [r4, #8]
	}
    HAL_ADC_Stop(&hadc1);
 8001a72:	480b      	ldr	r0, [pc, #44]	@ (8001aa0 <check_co2+0xac>)
 8001a74:	f001 f9b6 	bl	8002de4 <HAL_ADC_Stop>
    printf("adc_val2=%d\r\n", adc_val);
 8001a78:	6979      	ldr	r1, [r7, #20]
 8001a7a:	480b      	ldr	r0, [pc, #44]	@ (8001aa8 <check_co2+0xb4>)
 8001a7c:	f006 fa02 	bl	8007e84 <iprintf>
    //printf("CO2 PP, = %0.1f\r\n",co2_ch1 ->  co2_Ch1_dis);
    if(adc_val != 4095 || adc_val != 0) return 1;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d102      	bne.n	8001a90 <check_co2+0x9c>
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <check_co2+0xa0>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <check_co2+0xa2>
    else return 0;
 8001a94:	2300      	movs	r3, #0
    }
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000238 	.word	0x20000238
 8001aa4:	20000038 	.word	0x20000038
 8001aa8:	0800b740 	.word	0x0800b740

08001aac <read_co2>:
float read_co2(){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	if(check_co2()) return co2_ch1 ->  co2_Ch1_dis;
 8001ab0:	f7ff ffa0 	bl	80019f4 <check_co2>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <read_co2+0x1a>
 8001aba:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <read_co2+0x20>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	e7ff      	b.n	8001ac6 <read_co2+0x1a>
}
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000038 	.word	0x20000038

08001ad0 <isWaterDetected1>:
}


//비접촉 방식
float isWaterDetected1()
{
 8001ad0:	b598      	push	{r3, r4, r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	w_h->w1_h = HAL_GPIO_ReadPin(Water_Chk_GPIO_Port, Water_Chk_Pin);
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <isWaterDetected1+0x44>)
 8001ad6:	681c      	ldr	r4, [r3, #0]
 8001ad8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001adc:	480e      	ldr	r0, [pc, #56]	@ (8001b18 <isWaterDetected1+0x48>)
 8001ade:	f001 fef1 	bl	80038c4 <HAL_GPIO_ReadPin>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	7023      	strb	r3, [r4, #0]

	printf("Water sensor state = %d\r\n", w_h->w1_h);
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <isWaterDetected1+0x44>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	480b      	ldr	r0, [pc, #44]	@ (8001b1c <isWaterDetected1+0x4c>)
 8001af0:	f006 f9c8 	bl	8007e84 <iprintf>

	return (float)(w_h->w1_h == GPIO_PIN_SET);
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <isWaterDetected1+0x44>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d102      	bne.n	8001b04 <isWaterDetected1+0x34>
 8001afe:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001b02:	e001      	b.n	8001b08 <isWaterDetected1+0x38>
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	ee07 3a90 	vmov	s15, r3
}
 8001b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b10:	bd98      	pop	{r3, r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000003c 	.word	0x2000003c
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	0800b770 	.word	0x0800b770

08001b20 <parse_fixed_csv>:
//
#endif
//===========================================ETC===================================
//===========================================Parsing===================================
extern char Cmd_values[4] = {};
void parse_fixed_csv(char* input) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    char temp[10] = {0};
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	811a      	strh	r2, [r3, #8]
    int temp_idx = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
    int val_idx = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]

    for (int i = 0; input[i] != '\0' && val_idx < 4; i++) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e042      	b.n	8001bc8 <parse_fixed_csv+0xa8>
        if (input[i] == ',' || input[i] == '\n' || input[i] == '\r') {
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b4c:	d00b      	beq.n	8001b66 <parse_fixed_csv+0x46>
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b0a      	cmp	r3, #10
 8001b58:	d005      	beq.n	8001b66 <parse_fixed_csv+0x46>
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b0d      	cmp	r3, #13
 8001b64:	d11f      	bne.n	8001ba6 <parse_fixed_csv+0x86>
            if (temp_idx > 0) {
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	dd2a      	ble.n	8001bc2 <parse_fixed_csv+0xa2>
            	Cmd_values[val_idx++] = atoi(temp);
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	4618      	mov	r0, r3
 8001b72:	f005 f9d7 	bl	8006f24 <atoi>
 8001b76:	4601      	mov	r1, r0
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	61ba      	str	r2, [r7, #24]
 8001b7e:	b2c9      	uxtb	r1, r1
 8001b80:	4a21      	ldr	r2, [pc, #132]	@ (8001c08 <parse_fixed_csv+0xe8>)
 8001b82:	54d1      	strb	r1, [r2, r3]
            	printf(Cmd_values[val_idx-1]);
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	4a1f      	ldr	r2, [pc, #124]	@ (8001c08 <parse_fixed_csv+0xe8>)
 8001b8a:	5cd3      	ldrb	r3, [r2, r3]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f006 f979 	bl	8007e84 <iprintf>
                temp_idx = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
                memset(temp, 0, sizeof(temp));
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	220a      	movs	r2, #10
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f006 fada 	bl	8008158 <memset>
            if (temp_idx > 0) {
 8001ba4:	e00d      	b.n	8001bc2 <parse_fixed_csv+0xa2>
            }
        } else {
            if (temp_idx < sizeof(temp) - 1) {
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d80a      	bhi.n	8001bc2 <parse_fixed_csv+0xa2>
                temp[temp_idx++] = input[i];
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	441a      	add	r2, r3
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	1c59      	adds	r1, r3, #1
 8001bb6:	61f9      	str	r1, [r7, #28]
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	3320      	adds	r3, #32
 8001bbc:	443b      	add	r3, r7
 8001bbe:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (int i = 0; input[i] != '\0' && val_idx < 4; i++) {
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <parse_fixed_csv+0xba>
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	ddb3      	ble.n	8001b42 <parse_fixed_csv+0x22>
            }
        }
    }
    // 마지막 값 처리
    if (temp_idx > 0 && val_idx < 5) {
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	dd0e      	ble.n	8001bfe <parse_fixed_csv+0xde>
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	dc0b      	bgt.n	8001bfe <parse_fixed_csv+0xde>
    	Cmd_values[val_idx++] = atoi(temp);
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4618      	mov	r0, r3
 8001bec:	f005 f99a 	bl	8006f24 <atoi>
 8001bf0:	4601      	mov	r1, r0
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	61ba      	str	r2, [r7, #24]
 8001bf8:	b2c9      	uxtb	r1, r1
 8001bfa:	4a03      	ldr	r2, [pc, #12]	@ (8001c08 <parse_fixed_csv+0xe8>)
 8001bfc:	54d1      	strb	r1, [r2, r3]
    }
}
 8001bfe:	bf00      	nop
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000284 	.word	0x20000284

08001c0c <fan_on>:
//fan3개
//mode 1 co2 로 인해 환기 시스템
//fan1 = 온도로 인해
#if fan_en

void fan_on(){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(Fan_On_GPIO_Port, Fan_On_Pin, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	2140      	movs	r1, #64	@ 0x40
 8001c14:	4803      	ldr	r0, [pc, #12]	@ (8001c24 <fan_on+0x18>)
 8001c16:	f001 fe6d 	bl	80038f4 <HAL_GPIO_WritePin>
	  printf("Fan_on\r\n");
 8001c1a:	4803      	ldr	r0, [pc, #12]	@ (8001c28 <fan_on+0x1c>)
 8001c1c:	f006 f99a 	bl	8007f54 <puts>

}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40020800 	.word	0x40020800
 8001c28:	0800b78c 	.word	0x0800b78c

08001c2c <fan_off>:

void fan_off(){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(Fan_On_GPIO_Port, Fan_On_Pin, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2140      	movs	r1, #64	@ 0x40
 8001c34:	4803      	ldr	r0, [pc, #12]	@ (8001c44 <fan_off+0x18>)
 8001c36:	f001 fe5d 	bl	80038f4 <HAL_GPIO_WritePin>
	  printf("Fan_off\r\n");
 8001c3a:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <fan_off+0x1c>)
 8001c3c:	f006 f98a 	bl	8007f54 <puts>

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40020800 	.word	0x40020800
 8001c48:	0800b794 	.word	0x0800b794

08001c4c <light_on>:

#endif


#if light_en
void light_on(){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin,GPIO_PIN_SET );
 8001c50:	2201      	movs	r2, #1
 8001c52:	2120      	movs	r1, #32
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <light_on+0x14>)
 8001c56:	f001 fe4d 	bl	80038f4 <HAL_GPIO_WritePin>
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40020800 	.word	0x40020800

08001c64 <light_off>:
void light_off(){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin,GPIO_PIN_RESET );
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2120      	movs	r1, #32
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <light_off+0x14>)
 8001c6e:	f001 fe41 	bl	80038f4 <HAL_GPIO_WritePin>
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40020800 	.word	0x40020800

08001c7c <process_commands>:

//


//제어 명령어 -  팬+팰티어, led. 팬, 모터 센서(급수)
void process_commands(int* Cmd_values) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e0a8      	b.n	8001ddc <process_commands+0x160>
        switch (i) {
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	f200 80a2 	bhi.w	8001dd6 <process_commands+0x15a>
 8001c92:	a201      	add	r2, pc, #4	@ (adr r2, 8001c98 <process_commands+0x1c>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001cf1 	.word	0x08001cf1
 8001ca0:	08001d39 	.word	0x08001d39
 8001ca4:	08001d81 	.word	0x08001d81
            case 0: // 온도 관련
                if (Cmd_values[i] == "INCREASE" ) {
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8001df0 <process_commands+0x174>)
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d102      	bne.n	8001cc0 <process_commands+0x44>
                	Peltier_Cooling();
 8001cba:	f000 f89f 	bl	8001dfc <Peltier_Cooling>
                	Peltier_Heating();
                }
                else if(Cmd_values[i] == "NORMAL") {
                    Peltier_Normal();
                }
                break;
 8001cbe:	e083      	b.n	8001dc8 <process_commands+0x14c>
                else if(Cmd_values[i] == "DECREASE") {
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b49      	ldr	r3, [pc, #292]	@ (8001df4 <process_commands+0x178>)
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d102      	bne.n	8001cd8 <process_commands+0x5c>
                	Peltier_Heating();
 8001cd2:	f000 f8b1 	bl	8001e38 <Peltier_Heating>
                break;
 8001cd6:	e077      	b.n	8001dc8 <process_commands+0x14c>
                else if(Cmd_values[i] == "NORMAL") {
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b44      	ldr	r3, [pc, #272]	@ (8001df8 <process_commands+0x17c>)
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d16e      	bne.n	8001dc8 <process_commands+0x14c>
                    Peltier_Normal();
 8001cea:	f000 f8c3 	bl	8001e74 <Peltier_Normal>
                break;
 8001cee:	e06b      	b.n	8001dc8 <process_commands+0x14c>
            case 1: // 습도 관련
                if (Cmd_values[i] == "INCREASE" ) {
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8001df0 <process_commands+0x174>)
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d102      	bne.n	8001d08 <process_commands+0x8c>
                	fan_on();
 8001d02:	f7ff ff83 	bl	8001c0c <fan_on>
                	fan_off();
                }
                else if(Cmd_values[i] == "NORMAL") {
                	fan_off();
                }
                break;
 8001d06:	e061      	b.n	8001dcc <process_commands+0x150>
                else if(Cmd_values[i] == "DECREASE") {
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b37      	ldr	r3, [pc, #220]	@ (8001df4 <process_commands+0x178>)
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d102      	bne.n	8001d20 <process_commands+0xa4>
                	fan_off();
 8001d1a:	f7ff ff87 	bl	8001c2c <fan_off>
                break;
 8001d1e:	e055      	b.n	8001dcc <process_commands+0x150>
                else if(Cmd_values[i] == "NORMAL") {
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b32      	ldr	r3, [pc, #200]	@ (8001df8 <process_commands+0x17c>)
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d14c      	bne.n	8001dcc <process_commands+0x150>
                	fan_off();
 8001d32:	f7ff ff7b 	bl	8001c2c <fan_off>
                break;
 8001d36:	e049      	b.n	8001dcc <process_commands+0x150>
            case 2: // Light 관련
                if (Cmd_values[i] == "INCREASE" ) {
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b2a      	ldr	r3, [pc, #168]	@ (8001df0 <process_commands+0x174>)
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d102      	bne.n	8001d50 <process_commands+0xd4>
                	light_on();
 8001d4a:	f7ff ff7f 	bl	8001c4c <light_on>
                	light_off();
                }
                else if(Cmd_values[i] == "NORMAL") {
                	light_off();
                }
                break;
 8001d4e:	e03f      	b.n	8001dd0 <process_commands+0x154>
                else if(Cmd_values[i] == "DECREASE") {
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <process_commands+0x178>)
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d102      	bne.n	8001d68 <process_commands+0xec>
                	light_off();
 8001d62:	f7ff ff7f 	bl	8001c64 <light_off>
                break;
 8001d66:	e033      	b.n	8001dd0 <process_commands+0x154>
                else if(Cmd_values[i] == "NORMAL") {
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <process_commands+0x17c>)
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d12a      	bne.n	8001dd0 <process_commands+0x154>
                	light_off();
 8001d7a:	f7ff ff73 	bl	8001c64 <light_off>
                break;
 8001d7e:	e027      	b.n	8001dd0 <process_commands+0x154>

            case 3: // CO2 관련
                if (Cmd_values[i] == "INCREASE" ) {
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <process_commands+0x174>)
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d102      	bne.n	8001d98 <process_commands+0x11c>
                	fan_on();
 8001d92:	f7ff ff3b 	bl	8001c0c <fan_on>
                	fan_off();
                }
                else if(Cmd_values[i] == "NORMAL") {
                	fan_off();
                }
                break;
 8001d96:	e01d      	b.n	8001dd4 <process_commands+0x158>
                else if(Cmd_values[i] == "DECREASE") {
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <process_commands+0x178>)
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d102      	bne.n	8001db0 <process_commands+0x134>
                	fan_off();
 8001daa:	f7ff ff3f 	bl	8001c2c <fan_off>
                break;
 8001dae:	e011      	b.n	8001dd4 <process_commands+0x158>
                else if(Cmd_values[i] == "NORMAL") {
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <process_commands+0x17c>)
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d108      	bne.n	8001dd4 <process_commands+0x158>
                	fan_off();
 8001dc2:	f7ff ff33 	bl	8001c2c <fan_off>
                break;
 8001dc6:	e005      	b.n	8001dd4 <process_commands+0x158>
                break;
 8001dc8:	bf00      	nop
 8001dca:	e004      	b.n	8001dd6 <process_commands+0x15a>
                break;
 8001dcc:	bf00      	nop
 8001dce:	e002      	b.n	8001dd6 <process_commands+0x15a>
                break;
 8001dd0:	bf00      	nop
 8001dd2:	e000      	b.n	8001dd6 <process_commands+0x15a>
                break;
 8001dd4:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	f77f af53 	ble.w	8001c8a <process_commands+0xe>
        }
    }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	0800b7dc 	.word	0x0800b7dc
 8001df4:	0800b7e8 	.word	0x0800b7e8
 8001df8:	0800b7f4 	.word	0x0800b7f4

08001dfc <Peltier_Cooling>:
//펠티어 소자

#if pelt_en
void Peltier_Cooling()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	printf("Cooling Mode\r\n");
 8001e00:	480a      	ldr	r0, [pc, #40]	@ (8001e2c <Peltier_Cooling+0x30>)
 8001e02:	f006 f8a7 	bl	8007f54 <puts>
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_SET);   // IN1 = HIGH
 8001e06:	2201      	movs	r2, #1
 8001e08:	2104      	movs	r1, #4
 8001e0a:	4809      	ldr	r0, [pc, #36]	@ (8001e30 <Peltier_Cooling+0x34>)
 8001e0c:	f001 fd72 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Peltier2_GPIO_Port, Peltier2_Pin, GPIO_PIN_RESET); // IN2 = LOW
 8001e10:	2200      	movs	r2, #0
 8001e12:	2108      	movs	r1, #8
 8001e14:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <Peltier_Cooling+0x34>)
 8001e16:	f001 fd6d 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Fan_Peltier1_GPIO_Port, Fan_Peltier1_Pin, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e20:	4804      	ldr	r0, [pc, #16]	@ (8001e34 <Peltier_Cooling+0x38>)
 8001e22:	f001 fd67 	bl	80038f4 <HAL_GPIO_WritePin>
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	0800b7fc 	.word	0x0800b7fc
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020400 	.word	0x40020400

08001e38 <Peltier_Heating>:

// 난방 모드
void Peltier_Heating()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	printf("Heating Mode\r\n");
 8001e3c:	480a      	ldr	r0, [pc, #40]	@ (8001e68 <Peltier_Heating+0x30>)
 8001e3e:	f006 f889 	bl	8007f54 <puts>
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2104      	movs	r1, #4
 8001e46:	4809      	ldr	r0, [pc, #36]	@ (8001e6c <Peltier_Heating+0x34>)
 8001e48:	f001 fd54 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Peltier2_GPIO_Port, Peltier2_Pin, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2108      	movs	r1, #8
 8001e50:	4806      	ldr	r0, [pc, #24]	@ (8001e6c <Peltier_Heating+0x34>)
 8001e52:	f001 fd4f 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Fan_Peltier1_GPIO_Port, Fan_Peltier1_Pin, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e5c:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <Peltier_Heating+0x38>)
 8001e5e:	f001 fd49 	bl	80038f4 <HAL_GPIO_WritePin>
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	0800b80c 	.word	0x0800b80c
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020400 	.word	0x40020400

08001e74 <Peltier_Normal>:

void Peltier_Normal()
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	printf("Normal Mode\r\n");
 8001e78:	480a      	ldr	r0, [pc, #40]	@ (8001ea4 <Peltier_Normal+0x30>)
 8001e7a:	f006 f86b 	bl	8007f54 <puts>
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2104      	movs	r1, #4
 8001e82:	4809      	ldr	r0, [pc, #36]	@ (8001ea8 <Peltier_Normal+0x34>)
 8001e84:	f001 fd36 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	4806      	ldr	r0, [pc, #24]	@ (8001ea8 <Peltier_Normal+0x34>)
 8001e8e:	f001 fd31 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Fan_Peltier1_GPIO_Port, Fan_Peltier1_Pin, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e98:	4804      	ldr	r0, [pc, #16]	@ (8001eac <Peltier_Normal+0x38>)
 8001e9a:	f001 fd2b 	bl	80038f4 <HAL_GPIO_WritePin>
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	0800b81c 	.word	0x0800b81c
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	40020400 	.word	0x40020400

08001eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb4:	b090      	sub	sp, #64	@ 0x40
 8001eb6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eb8:	f000 fe18 	bl	8002aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ebc:	f000 f92a 	bl	8002114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec0:	f7ff f974 	bl	80011ac <MX_GPIO_Init>
  MX_TIM6_Init();
 8001ec4:	f000 fc5c 	bl	8002780 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001ec8:	f000 fd16 	bl	80028f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ecc:	f000 fd3e 	bl	800294c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001ed0:	f7ff f8d6 	bl	8001080 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001ed4:	f000 fb5a 	bl	800258c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ed8:	f000 fc04 	bl	80026e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8001edc:	4879      	ldr	r0, [pc, #484]	@ (80020c4 <main+0x214>)
 8001ede:	f002 fb8d 	bl	80045fc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8001ee2:	4879      	ldr	r0, [pc, #484]	@ (80020c8 <main+0x218>)
 8001ee4:	f002 fb8a 	bl	80045fc <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 8001ee8:	4878      	ldr	r0, [pc, #480]	@ (80020cc <main+0x21c>)
 8001eea:	f000 fea9 	bl	8002c40 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001eee:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef2:	4876      	ldr	r0, [pc, #472]	@ (80020cc <main+0x21c>)
 8001ef4:	f000 ffa9 	bl	8002e4a <HAL_ADC_PollForConversion>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4873      	ldr	r0, [pc, #460]	@ (80020c8 <main+0x218>)
 8001efc:	f002 fcb0 	bl	8004860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001f00:	210c      	movs	r1, #12
 8001f02:	4871      	ldr	r0, [pc, #452]	@ (80020c8 <main+0x218>)
 8001f04:	f002 fcac 	bl	8004860 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001f08:	4871      	ldr	r0, [pc, #452]	@ (80020d0 <main+0x220>)
 8001f0a:	f002 fbdf 	bl	80046cc <HAL_TIM_Base_Start_IT>
  {


	  //receive start data	= STM32 Test Mode\n

	  if( Sensor_flag == 0)
 8001f0e:	4b71      	ldr	r3, [pc, #452]	@ (80020d4 <main+0x224>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d135      	bne.n	8001f82 <main+0xd2>
	  {
		  printf("Waiting Rpi Test Mode Msg\r\n");
 8001f16:	4870      	ldr	r0, [pc, #448]	@ (80020d8 <main+0x228>)
 8001f18:	f006 f81c 	bl	8007f54 <puts>
		  if(HAL_UART_Receive(&huart1, (uint8_t *)Test_Msg, 16, 1000)== HAL_OK)
 8001f1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f20:	2210      	movs	r2, #16
 8001f22:	496e      	ldr	r1, [pc, #440]	@ (80020dc <main+0x22c>)
 8001f24:	486e      	ldr	r0, [pc, #440]	@ (80020e0 <main+0x230>)
 8001f26:	f003 fcd8 	bl	80058da <HAL_UART_Receive>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f040 80c3 	bne.w	80020b8 <main+0x208>
		  {
			  Test_Msg[15] = '\0'; // 강제로 문자열 종료
 8001f32:	4b6a      	ldr	r3, [pc, #424]	@ (80020dc <main+0x22c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	73da      	strb	r2, [r3, #15]
			  if (strcmp(Test_Msg, "STM32 Test Mode") == 0)
 8001f38:	496a      	ldr	r1, [pc, #424]	@ (80020e4 <main+0x234>)
 8001f3a:	4868      	ldr	r0, [pc, #416]	@ (80020dc <main+0x22c>)
 8001f3c:	f7fe f968 	bl	8000210 <strcmp>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 80b8 	bne.w	80020b8 <main+0x208>
			  {
				  if(DHT11_Sensor_Test()&&check_light())
 8001f48:	f7ff fb34 	bl	80015b4 <DHT11_Sensor_Test>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80b2 	beq.w	80020b8 <main+0x208>
 8001f54:	f7ff fbec 	bl	8001730 <check_light>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80ac 	beq.w	80020b8 <main+0x208>
				  {
					  Sensor_flag = 1;
 8001f60:	4b5c      	ldr	r3, [pc, #368]	@ (80020d4 <main+0x224>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
					  printf("Sensor Check Complete\r\n");
 8001f66:	4860      	ldr	r0, [pc, #384]	@ (80020e8 <main+0x238>)
 8001f68:	f005 fff4 	bl	8007f54 <puts>
					  HAL_UART_Transmit(&huart1, (uint8_t*)pass_sig, strlen(pass_sig), 10);
 8001f6c:	485f      	ldr	r0, [pc, #380]	@ (80020ec <main+0x23c>)
 8001f6e:	f7fe f9af 	bl	80002d0 <strlen>
 8001f72:	4603      	mov	r3, r0
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	230a      	movs	r3, #10
 8001f78:	495c      	ldr	r1, [pc, #368]	@ (80020ec <main+0x23c>)
 8001f7a:	4859      	ldr	r0, [pc, #356]	@ (80020e0 <main+0x230>)
 8001f7c:	f003 fc22 	bl	80057c4 <HAL_UART_Transmit>
 8001f80:	e09a      	b.n	80020b8 <main+0x208>
	  }
	  else
	  {
		  //물 순환 시작
		  //인터럽트로 1분마다 읽게 만들거
		  float TEMP = DHT11_Run_TEMP();		// 온도
 8001f82:	f7ff fbbf 	bl	8001704 <DHT11_Run_TEMP>
 8001f86:	ed87 0a06 	vstr	s0, [r7, #24]
		  float RH = DHT11_Run_RH();			// 습도
 8001f8a:	f7ff fba7 	bl	80016dc <DHT11_Run_RH>
 8001f8e:	ed87 0a05 	vstr	s0, [r7, #20]
		  float lux = read_light();				// 밝기
 8001f92:	f7ff fc9d 	bl	80018d0 <read_light>
 8001f96:	ed87 0a04 	vstr	s0, [r7, #16]
		  float co2 = read_co2();				// c02 ppm
 8001f9a:	f7ff fd87 	bl	8001aac <read_co2>
 8001f9e:	ed87 0a03 	vstr	s0, [r7, #12]
	  	  float w_1 = isWaterDetected1();		// 둘 중 하나 -> 타이머 인터럽트
 8001fa2:	f7ff fd95 	bl	8001ad0 <isWaterDetected1>
 8001fa6:	ed87 0a02 	vstr	s0, [r7, #8]

	  	  act_flag = 0;
 8001faa:	4b51      	ldr	r3, [pc, #324]	@ (80020f0 <main+0x240>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]

		  // 보내야할 값 4개
		  // 둘 중 하나 사용
		  printf("TEMP : %.1f RH : %.1f co2 : %.1f lux : %.1f\r\n", TEMP, RH, co2, lux);
 8001fb0:	69b8      	ldr	r0, [r7, #24]
 8001fb2:	f7fe faf9 	bl	80005a8 <__aeabi_f2d>
 8001fb6:	4682      	mov	sl, r0
 8001fb8:	468b      	mov	fp, r1
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7fe faf4 	bl	80005a8 <__aeabi_f2d>
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	460d      	mov	r5, r1
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7fe faef 	bl	80005a8 <__aeabi_f2d>
 8001fca:	4680      	mov	r8, r0
 8001fcc:	4689      	mov	r9, r1
 8001fce:	6938      	ldr	r0, [r7, #16]
 8001fd0:	f7fe faea 	bl	80005a8 <__aeabi_f2d>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001fdc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001fe0:	e9cd 4500 	strd	r4, r5, [sp]
 8001fe4:	4652      	mov	r2, sl
 8001fe6:	465b      	mov	r3, fp
 8001fe8:	4842      	ldr	r0, [pc, #264]	@ (80020f4 <main+0x244>)
 8001fea:	f005 ff4b 	bl	8007e84 <iprintf>

		  //tim 인터럽트로 인해 flag ==1로 만들어서 값 보내기
		  if(TEMP){
 8001fee:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ff2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	d030      	beq.n	800205e <main+0x1ae>
			  // co2,w_height level 반환 대신 그냥 adc값 반환하도록 변경해야됨
			  // 둘 중 하나 사용
			  sprintf(msg_to_Rpi, "%.1f,%.1f,%.1f,%.1f,%.lf\r\n", TEMP, RH,co2,lux,w_1);
 8001ffc:	69b8      	ldr	r0, [r7, #24]
 8001ffe:	f7fe fad3 	bl	80005a8 <__aeabi_f2d>
 8002002:	e9c7 0100 	strd	r0, r1, [r7]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7fe face 	bl	80005a8 <__aeabi_f2d>
 800200c:	4604      	mov	r4, r0
 800200e:	460d      	mov	r5, r1
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7fe fac9 	bl	80005a8 <__aeabi_f2d>
 8002016:	4680      	mov	r8, r0
 8002018:	4689      	mov	r9, r1
 800201a:	6938      	ldr	r0, [r7, #16]
 800201c:	f7fe fac4 	bl	80005a8 <__aeabi_f2d>
 8002020:	4682      	mov	sl, r0
 8002022:	468b      	mov	fp, r1
 8002024:	68b8      	ldr	r0, [r7, #8]
 8002026:	f7fe fabf 	bl	80005a8 <__aeabi_f2d>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002032:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002036:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800203a:	e9cd 4500 	strd	r4, r5, [sp]
 800203e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002042:	492d      	ldr	r1, [pc, #180]	@ (80020f8 <main+0x248>)
 8002044:	482d      	ldr	r0, [pc, #180]	@ (80020fc <main+0x24c>)
 8002046:	f005 ff8d 	bl	8007f64 <siprintf>
			  HAL_UART_Transmit(&huart1, (char *)msg_to_Rpi, strlen(msg_to_Rpi), 10);
 800204a:	482c      	ldr	r0, [pc, #176]	@ (80020fc <main+0x24c>)
 800204c:	f7fe f940 	bl	80002d0 <strlen>
 8002050:	4603      	mov	r3, r0
 8002052:	b29a      	uxth	r2, r3
 8002054:	230a      	movs	r3, #10
 8002056:	4929      	ldr	r1, [pc, #164]	@ (80020fc <main+0x24c>)
 8002058:	4821      	ldr	r0, [pc, #132]	@ (80020e0 <main+0x230>)
 800205a:	f003 fbb3 	bl	80057c4 <HAL_UART_Transmit>
		  }
		  	  // 제어 신호 받으면?????
		  if(HAL_UART_Receive(&huart1, (uint8_t *)Cmd_Msg, 80, 1000)== HAL_OK)
 800205e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002062:	2250      	movs	r2, #80	@ 0x50
 8002064:	4926      	ldr	r1, [pc, #152]	@ (8002100 <main+0x250>)
 8002066:	481e      	ldr	r0, [pc, #120]	@ (80020e0 <main+0x230>)
 8002068:	f003 fc37 	bl	80058da <HAL_UART_Receive>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d122      	bne.n	80020b8 <main+0x208>
		  {
			  //제어 명령어 -  팬+팰티어, led. 팬, 모터 센서(급수)
			  printf("Received data\r\n");
 8002072:	4824      	ldr	r0, [pc, #144]	@ (8002104 <main+0x254>)
 8002074:	f005 ff6e 	bl	8007f54 <puts>
			  Cmd_Msg[79] = '\0';
 8002078:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <main+0x250>)
 800207a:	2200      	movs	r2, #0
 800207c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
			  printf("Cmd_Msg = %s",Cmd_Msg); // 강제로 문자열 종료
 8002080:	491f      	ldr	r1, [pc, #124]	@ (8002100 <main+0x250>)
 8002082:	4821      	ldr	r0, [pc, #132]	@ (8002108 <main+0x258>)
 8002084:	f005 fefe 	bl	8007e84 <iprintf>
			  parse_fixed_csv(Cmd_Msg);
 8002088:	481d      	ldr	r0, [pc, #116]	@ (8002100 <main+0x250>)
 800208a:	f7ff fd49 	bl	8001b20 <parse_fixed_csv>
			  for (int i = 0; i < 4; i++)
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e00b      	b.n	80020ac <main+0x1fc>
			  {
				  printf("Cmd_values[%d] = %d\r\n", i, Cmd_values[i]);  // 문제 잡기 물 센서 위치에 따라
 8002094:	4a1d      	ldr	r2, [pc, #116]	@ (800210c <main+0x25c>)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	4413      	add	r3, r2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	69f9      	ldr	r1, [r7, #28]
 80020a0:	481b      	ldr	r0, [pc, #108]	@ (8002110 <main+0x260>)
 80020a2:	f005 feef 	bl	8007e84 <iprintf>
			  for (int i = 0; i < 4; i++)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3301      	adds	r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	ddf0      	ble.n	8002094 <main+0x1e4>
			  }
	  	  	  process_commands(Cmd_values);
 80020b2:	4816      	ldr	r0, [pc, #88]	@ (800210c <main+0x25c>)
 80020b4:	f7ff fde2 	bl	8001c7c <process_commands>

		  }
	  }
	  HAL_Delay(30000);
 80020b8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80020bc:	f000 fd58 	bl	8002b70 <HAL_Delay>
	  if( Sensor_flag == 0)
 80020c0:	e725      	b.n	8001f0e <main+0x5e>
 80020c2:	bf00      	nop
 80020c4:	20000408 	.word	0x20000408
 80020c8:	20000378 	.word	0x20000378
 80020cc:	20000238 	.word	0x20000238
 80020d0:	200003c0 	.word	0x200003c0
 80020d4:	20000328 	.word	0x20000328
 80020d8:	0800b82c 	.word	0x0800b82c
 80020dc:	20000288 	.word	0x20000288
 80020e0:	20000450 	.word	0x20000450
 80020e4:	0800b848 	.word	0x0800b848
 80020e8:	0800b858 	.word	0x0800b858
 80020ec:	20000040 	.word	0x20000040
 80020f0:	20000329 	.word	0x20000329
 80020f4:	0800b870 	.word	0x0800b870
 80020f8:	0800b8a0 	.word	0x0800b8a0
 80020fc:	20000298 	.word	0x20000298
 8002100:	200002d8 	.word	0x200002d8
 8002104:	0800b8bc 	.word	0x0800b8bc
 8002108:	0800b8cc 	.word	0x0800b8cc
 800210c:	20000284 	.word	0x20000284
 8002110:	0800b8dc 	.word	0x0800b8dc

08002114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b094      	sub	sp, #80	@ 0x50
 8002118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	2234      	movs	r2, #52	@ 0x34
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f006 f818 	bl	8008158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <SystemClock_Config+0xd4>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	4a29      	ldr	r2, [pc, #164]	@ (80021e8 <SystemClock_Config+0xd4>)
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002146:	6413      	str	r3, [r2, #64]	@ 0x40
 8002148:	4b27      	ldr	r3, [pc, #156]	@ (80021e8 <SystemClock_Config+0xd4>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002154:	2300      	movs	r3, #0
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <SystemClock_Config+0xd8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002160:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <SystemClock_Config+0xd8>)
 8002162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <SystemClock_Config+0xd8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002174:	2301      	movs	r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002178:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800217c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217e:	2302      	movs	r3, #2
 8002180:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002182:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002186:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002188:	2308      	movs	r3, #8
 800218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800218c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8002190:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002192:	2302      	movs	r3, #2
 8002194:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002196:	2302      	movs	r3, #2
 8002198:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800219a:	2302      	movs	r3, #2
 800219c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 ff3c 	bl	8004020 <HAL_RCC_OscConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80021ae:	f000 f831 	bl	8002214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b2:	230f      	movs	r3, #15
 80021b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b6:	2302      	movs	r3, #2
 80021b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	2102      	movs	r1, #2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 fba9 	bl	8003928 <HAL_RCC_ClockConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80021dc:	f000 f81a 	bl	8002214 <Error_Handler>
  }
}
 80021e0:	bf00      	nop
 80021e2:	3750      	adds	r7, #80	@ 0x50
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40007000 	.word	0x40007000

080021f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002202:	f000 fc95 	bl	8002b30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40002000 	.word	0x40002000

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <Error_Handler+0x8>

08002220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <HAL_MspInit+0x4c>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	4a0f      	ldr	r2, [pc, #60]	@ (800226c <HAL_MspInit+0x4c>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002234:	6453      	str	r3, [r2, #68]	@ 0x44
 8002236:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <HAL_MspInit+0x4c>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_MspInit+0x4c>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	4a08      	ldr	r2, [pc, #32]	@ (800226c <HAL_MspInit+0x4c>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	@ 0x40
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_MspInit+0x4c>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800

08002270 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08e      	sub	sp, #56	@ 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	4b33      	ldr	r3, [pc, #204]	@ (8002354 <HAL_InitTick+0xe4>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	4a32      	ldr	r2, [pc, #200]	@ (8002354 <HAL_InitTick+0xe4>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002290:	4b30      	ldr	r3, [pc, #192]	@ (8002354 <HAL_InitTick+0xe4>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800229c:	f107 0210 	add.w	r2, r7, #16
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 fc58 	bl	8003b5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80022b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d103      	bne.n	80022be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022b6:	f001 fc29 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 80022ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80022bc:	e004      	b.n	80022c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80022be:	f001 fc25 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 80022c2:	4603      	mov	r3, r0
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ca:	4a23      	ldr	r2, [pc, #140]	@ (8002358 <HAL_InitTick+0xe8>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	0c9b      	lsrs	r3, r3, #18
 80022d2:	3b01      	subs	r3, #1
 80022d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80022d6:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_InitTick+0xec>)
 80022d8:	4a21      	ldr	r2, [pc, #132]	@ (8002360 <HAL_InitTick+0xf0>)
 80022da:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80022dc:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <HAL_InitTick+0xec>)
 80022de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022e2:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80022e4:	4a1d      	ldr	r2, [pc, #116]	@ (800235c <HAL_InitTick+0xec>)
 80022e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e8:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80022ea:	4b1c      	ldr	r3, [pc, #112]	@ (800235c <HAL_InitTick+0xec>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <HAL_InitTick+0xec>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f6:	4b19      	ldr	r3, [pc, #100]	@ (800235c <HAL_InitTick+0xec>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80022fc:	4817      	ldr	r0, [pc, #92]	@ (800235c <HAL_InitTick+0xec>)
 80022fe:	f002 f92d 	bl	800455c <HAL_TIM_Base_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002308:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11b      	bne.n	8002348 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002310:	4812      	ldr	r0, [pc, #72]	@ (800235c <HAL_InitTick+0xec>)
 8002312:	f002 f9db 	bl	80046cc <HAL_TIM_Base_Start_IT>
 8002316:	4603      	mov	r3, r0
 8002318:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800231c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002320:	2b00      	cmp	r3, #0
 8002322:	d111      	bne.n	8002348 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002324:	202d      	movs	r0, #45	@ 0x2d
 8002326:	f001 f92b 	bl	8003580 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b0f      	cmp	r3, #15
 800232e:	d808      	bhi.n	8002342 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002330:	2200      	movs	r2, #0
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	202d      	movs	r0, #45	@ 0x2d
 8002336:	f001 f907 	bl	8003548 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800233a:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <HAL_InitTick+0xf4>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	e002      	b.n	8002348 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002348:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800234c:	4618      	mov	r0, r3
 800234e:	3738      	adds	r7, #56	@ 0x38
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40023800 	.word	0x40023800
 8002358:	431bde83 	.word	0x431bde83
 800235c:	2000032c 	.word	0x2000032c
 8002360:	40002000 	.word	0x40002000
 8002364:	2000004c 	.word	0x2000004c

08002368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <NMI_Handler+0x4>

08002370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <HardFault_Handler+0x4>

08002378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <MemManage_Handler+0x4>

08002380 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <BusFault_Handler+0x4>

08002388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <UsageFault_Handler+0x4>

08002390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80023cc:	4802      	ldr	r0, [pc, #8]	@ (80023d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80023ce:	f002 fb0f 	bl	80049f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000032c 	.word	0x2000032c

080023dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return 1;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_kill>:

int _kill(int pid, int sig)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023f6:	f005 ff01 	bl	80081fc <__errno>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2216      	movs	r2, #22
 80023fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_exit>:

void _exit (int status)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffe7 	bl	80023ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800241e:	bf00      	nop
 8002420:	e7fd      	b.n	800241e <_exit+0x12>

08002422 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e00a      	b.n	800244a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002434:	f3af 8000 	nop.w
 8002438:	4601      	mov	r1, r0
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	60ba      	str	r2, [r7, #8]
 8002440:	b2ca      	uxtb	r2, r1
 8002442:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	3301      	adds	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	429a      	cmp	r2, r3
 8002450:	dbf0      	blt.n	8002434 <_read+0x12>
  }

  return len;
 8002452:	687b      	ldr	r3, [r7, #4]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e009      	b.n	8002482 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	60ba      	str	r2, [r7, #8]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe ff3a 	bl	80012f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3301      	adds	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	429a      	cmp	r2, r3
 8002488:	dbf1      	blt.n	800246e <_write+0x12>
  }
  return len;
 800248a:	687b      	ldr	r3, [r7, #4]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_close>:

int _close(int file)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024bc:	605a      	str	r2, [r3, #4]
  return 0;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <_isatty>:

int _isatty(int file)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024d4:	2301      	movs	r3, #1
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002504:	4a14      	ldr	r2, [pc, #80]	@ (8002558 <_sbrk+0x5c>)
 8002506:	4b15      	ldr	r3, [pc, #84]	@ (800255c <_sbrk+0x60>)
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002510:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <_sbrk+0x64>)
 800251a:	4a12      	ldr	r2, [pc, #72]	@ (8002564 <_sbrk+0x68>)
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <_sbrk+0x64>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	429a      	cmp	r2, r3
 800252a:	d207      	bcs.n	800253c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800252c:	f005 fe66 	bl	80081fc <__errno>
 8002530:	4603      	mov	r3, r0
 8002532:	220c      	movs	r2, #12
 8002534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	e009      	b.n	8002550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800253c:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <_sbrk+0x64>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002542:	4b07      	ldr	r3, [pc, #28]	@ (8002560 <_sbrk+0x64>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	4a05      	ldr	r2, [pc, #20]	@ (8002560 <_sbrk+0x64>)
 800254c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20020000 	.word	0x20020000
 800255c:	00000400 	.word	0x00000400
 8002560:	20000374 	.word	0x20000374
 8002564:	20000630 	.word	0x20000630

08002568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <SystemInit+0x20>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002572:	4a05      	ldr	r2, [pc, #20]	@ (8002588 <SystemInit+0x20>)
 8002574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b096      	sub	sp, #88	@ 0x58
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002592:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
 80025b8:	611a      	str	r2, [r3, #16]
 80025ba:	615a      	str	r2, [r3, #20]
 80025bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	2220      	movs	r2, #32
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f005 fdc7 	bl	8008158 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025ca:	4b44      	ldr	r3, [pc, #272]	@ (80026dc <MX_TIM1_Init+0x150>)
 80025cc:	4a44      	ldr	r2, [pc, #272]	@ (80026e0 <MX_TIM1_Init+0x154>)
 80025ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 80025d0:	4b42      	ldr	r3, [pc, #264]	@ (80026dc <MX_TIM1_Init+0x150>)
 80025d2:	2259      	movs	r2, #89	@ 0x59
 80025d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d6:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <MX_TIM1_Init+0x150>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80025dc:	4b3f      	ldr	r3, [pc, #252]	@ (80026dc <MX_TIM1_Init+0x150>)
 80025de:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80025e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e4:	4b3d      	ldr	r3, [pc, #244]	@ (80026dc <MX_TIM1_Init+0x150>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025ea:	4b3c      	ldr	r3, [pc, #240]	@ (80026dc <MX_TIM1_Init+0x150>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f0:	4b3a      	ldr	r3, [pc, #232]	@ (80026dc <MX_TIM1_Init+0x150>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025f6:	4839      	ldr	r0, [pc, #228]	@ (80026dc <MX_TIM1_Init+0x150>)
 80025f8:	f001 ffb0 	bl	800455c <HAL_TIM_Base_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002602:	f7ff fe07 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002606:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800260a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800260c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002610:	4619      	mov	r1, r3
 8002612:	4832      	ldr	r0, [pc, #200]	@ (80026dc <MX_TIM1_Init+0x150>)
 8002614:	f002 fb9e 	bl	8004d54 <HAL_TIM_ConfigClockSource>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800261e:	f7ff fdf9 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002622:	482e      	ldr	r0, [pc, #184]	@ (80026dc <MX_TIM1_Init+0x150>)
 8002624:	f002 f8c2 	bl	80047ac <HAL_TIM_PWM_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800262e:	f7ff fdf1 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800263a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800263e:	4619      	mov	r1, r3
 8002640:	4826      	ldr	r0, [pc, #152]	@ (80026dc <MX_TIM1_Init+0x150>)
 8002642:	f002 ff8d 	bl	8005560 <HAL_TIMEx_MasterConfigSynchronization>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800264c:	f7ff fde2 	bl	8002214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002650:	2360      	movs	r3, #96	@ 0x60
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800265c:	2300      	movs	r3, #0
 800265e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800266c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002670:	2200      	movs	r2, #0
 8002672:	4619      	mov	r1, r3
 8002674:	4819      	ldr	r0, [pc, #100]	@ (80026dc <MX_TIM1_Init+0x150>)
 8002676:	f002 faab 	bl	8004bd0 <HAL_TIM_PWM_ConfigChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002680:	f7ff fdc8 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002688:	220c      	movs	r2, #12
 800268a:	4619      	mov	r1, r3
 800268c:	4813      	ldr	r0, [pc, #76]	@ (80026dc <MX_TIM1_Init+0x150>)
 800268e:	f002 fa9f 	bl	8004bd0 <HAL_TIM_PWM_ConfigChannel>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002698:	f7ff fdbc 	bl	8002214 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	4619      	mov	r1, r3
 80026be:	4807      	ldr	r0, [pc, #28]	@ (80026dc <MX_TIM1_Init+0x150>)
 80026c0:	f002 ffca 	bl	8005658 <HAL_TIMEx_ConfigBreakDeadTime>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80026ca:	f7ff fda3 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026ce:	4803      	ldr	r0, [pc, #12]	@ (80026dc <MX_TIM1_Init+0x150>)
 80026d0:	f000 f8d8 	bl	8002884 <HAL_TIM_MspPostInit>

}
 80026d4:	bf00      	nop
 80026d6:	3758      	adds	r7, #88	@ 0x58
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000378 	.word	0x20000378
 80026e0:	40010000 	.word	0x40010000

080026e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ea:	f107 0308 	add.w	r3, r7, #8
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f8:	463b      	mov	r3, r7
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002700:	4b1d      	ldr	r3, [pc, #116]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002702:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000-1;
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <MX_TIM2_Init+0x94>)
 800270a:	f242 3227 	movw	r2, #8999	@ 0x2327
 800270e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002710:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600000-1;
 8002716:	4b18      	ldr	r3, [pc, #96]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002718:	4a18      	ldr	r2, [pc, #96]	@ (800277c <MX_TIM2_Init+0x98>)
 800271a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271c:	4b16      	ldr	r3, [pc, #88]	@ (8002778 <MX_TIM2_Init+0x94>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002724:	2280      	movs	r2, #128	@ 0x80
 8002726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002728:	4813      	ldr	r0, [pc, #76]	@ (8002778 <MX_TIM2_Init+0x94>)
 800272a:	f001 ff17 	bl	800455c <HAL_TIM_Base_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002734:	f7ff fd6e 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800273c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	4619      	mov	r1, r3
 8002744:	480c      	ldr	r0, [pc, #48]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002746:	f002 fb05 	bl	8004d54 <HAL_TIM_ConfigClockSource>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002750:	f7ff fd60 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800275c:	463b      	mov	r3, r7
 800275e:	4619      	mov	r1, r3
 8002760:	4805      	ldr	r0, [pc, #20]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002762:	f002 fefd 	bl	8005560 <HAL_TIMEx_MasterConfigSynchronization>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800276c:	f7ff fd52 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200003c0 	.word	0x200003c0
 800277c:	000927bf 	.word	0x000927bf

08002780 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002786:	463b      	mov	r3, r7
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800278e:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <MX_TIM6_Init+0x64>)
 8002790:	4a15      	ldr	r2, [pc, #84]	@ (80027e8 <MX_TIM6_Init+0x68>)
 8002792:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8002794:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <MX_TIM6_Init+0x64>)
 8002796:	2259      	movs	r2, #89	@ 0x59
 8002798:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <MX_TIM6_Init+0x64>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535-1;
 80027a0:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <MX_TIM6_Init+0x64>)
 80027a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80027a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a8:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <MX_TIM6_Init+0x64>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027ae:	480d      	ldr	r0, [pc, #52]	@ (80027e4 <MX_TIM6_Init+0x64>)
 80027b0:	f001 fed4 	bl	800455c <HAL_TIM_Base_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80027ba:	f7ff fd2b 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027c6:	463b      	mov	r3, r7
 80027c8:	4619      	mov	r1, r3
 80027ca:	4806      	ldr	r0, [pc, #24]	@ (80027e4 <MX_TIM6_Init+0x64>)
 80027cc:	f002 fec8 	bl	8005560 <HAL_TIMEx_MasterConfigSynchronization>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80027d6:	f7ff fd1d 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000408 	.word	0x20000408
 80027e8:	40001000 	.word	0x40001000

080027ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002878 <HAL_TIM_Base_MspInit+0x8c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <HAL_TIM_Base_MspInit+0x90>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	4a1d      	ldr	r2, [pc, #116]	@ (800287c <HAL_TIM_Base_MspInit+0x90>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6453      	str	r3, [r2, #68]	@ 0x44
 800280e:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <HAL_TIM_Base_MspInit+0x90>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800281a:	e026      	b.n	800286a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4b14      	ldr	r3, [pc, #80]	@ (800287c <HAL_TIM_Base_MspInit+0x90>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	4a13      	ldr	r2, [pc, #76]	@ (800287c <HAL_TIM_Base_MspInit+0x90>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6413      	str	r3, [r2, #64]	@ 0x40
 8002836:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_TIM_Base_MspInit+0x90>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]
}
 8002842:	e012      	b.n	800286a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0d      	ldr	r2, [pc, #52]	@ (8002880 <HAL_TIM_Base_MspInit+0x94>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10d      	bne.n	800286a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <HAL_TIM_Base_MspInit+0x90>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	4a09      	ldr	r2, [pc, #36]	@ (800287c <HAL_TIM_Base_MspInit+0x90>)
 8002858:	f043 0310 	orr.w	r3, r3, #16
 800285c:	6413      	str	r3, [r2, #64]	@ 0x40
 800285e:	4b07      	ldr	r3, [pc, #28]	@ (800287c <HAL_TIM_Base_MspInit+0x90>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40010000 	.word	0x40010000
 800287c:	40023800 	.word	0x40023800
 8002880:	40001000 	.word	0x40001000

08002884 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <HAL_TIM_MspPostInit+0x68>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d11e      	bne.n	80028e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <HAL_TIM_MspPostInit+0x6c>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	4a10      	ldr	r2, [pc, #64]	@ (80028f0 <HAL_TIM_MspPostInit+0x6c>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b6:	4b0e      	ldr	r3, [pc, #56]	@ (80028f0 <HAL_TIM_MspPostInit+0x6c>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80028c2:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80028c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028d0:	2302      	movs	r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	4619      	mov	r1, r3
 80028de:	4805      	ldr	r0, [pc, #20]	@ (80028f4 <HAL_TIM_MspPostInit+0x70>)
 80028e0:	f000 fe5c 	bl	800359c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028e4:	bf00      	nop
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020000 	.word	0x40020000

080028f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <MX_USART1_UART_Init+0x4c>)
 80028fe:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <MX_USART1_UART_Init+0x50>)
 8002900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002902:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <MX_USART1_UART_Init+0x4c>)
 8002904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800290a:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <MX_USART1_UART_Init+0x4c>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <MX_USART1_UART_Init+0x4c>)
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002916:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <MX_USART1_UART_Init+0x4c>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800291c:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <MX_USART1_UART_Init+0x4c>)
 800291e:	220c      	movs	r2, #12
 8002920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002922:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <MX_USART1_UART_Init+0x4c>)
 8002924:	2200      	movs	r2, #0
 8002926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <MX_USART1_UART_Init+0x4c>)
 800292a:	2200      	movs	r2, #0
 800292c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800292e:	4805      	ldr	r0, [pc, #20]	@ (8002944 <MX_USART1_UART_Init+0x4c>)
 8002930:	f002 fef8 	bl	8005724 <HAL_UART_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800293a:	f7ff fc6b 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000450 	.word	0x20000450
 8002948:	40011000 	.word	0x40011000

0800294c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <MX_USART2_UART_Init+0x4c>)
 8002952:	4a12      	ldr	r2, [pc, #72]	@ (800299c <MX_USART2_UART_Init+0x50>)
 8002954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <MX_USART2_UART_Init+0x4c>)
 8002958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800295c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800295e:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <MX_USART2_UART_Init+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <MX_USART2_UART_Init+0x4c>)
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800296a:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <MX_USART2_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002970:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <MX_USART2_UART_Init+0x4c>)
 8002972:	220c      	movs	r2, #12
 8002974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002976:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <MX_USART2_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <MX_USART2_UART_Init+0x4c>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002982:	4805      	ldr	r0, [pc, #20]	@ (8002998 <MX_USART2_UART_Init+0x4c>)
 8002984:	f002 fece 	bl	8005724 <HAL_UART_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800298e:	f7ff fc41 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000498 	.word	0x20000498
 800299c:	40004400 	.word	0x40004400

080029a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	@ 0x30
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a32      	ldr	r2, [pc, #200]	@ (8002a88 <HAL_UART_MspInit+0xe8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d12d      	bne.n	8002a1e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	4b31      	ldr	r3, [pc, #196]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	4a30      	ldr	r2, [pc, #192]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 80029cc:	f043 0310 	orr.w	r3, r3, #16
 80029d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029d2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4a29      	ldr	r2, [pc, #164]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ee:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a0c:	2307      	movs	r3, #7
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 031c 	add.w	r3, r7, #28
 8002a14:	4619      	mov	r1, r3
 8002a16:	481e      	ldr	r0, [pc, #120]	@ (8002a90 <HAL_UART_MspInit+0xf0>)
 8002a18:	f000 fdc0 	bl	800359c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a1c:	e030      	b.n	8002a80 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1c      	ldr	r2, [pc, #112]	@ (8002a94 <HAL_UART_MspInit+0xf4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d12b      	bne.n	8002a80 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	4a16      	ldr	r2, [pc, #88]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 8002a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a38:	4b14      	ldr	r3, [pc, #80]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	4b10      	ldr	r3, [pc, #64]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a54:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <HAL_UART_MspInit+0xec>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a60:	230c      	movs	r3, #12
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a70:	2307      	movs	r3, #7
 8002a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a74:	f107 031c 	add.w	r3, r7, #28
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4805      	ldr	r0, [pc, #20]	@ (8002a90 <HAL_UART_MspInit+0xf0>)
 8002a7c:	f000 fd8e 	bl	800359c <HAL_GPIO_Init>
}
 8002a80:	bf00      	nop
 8002a82:	3730      	adds	r7, #48	@ 0x30
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40011000 	.word	0x40011000
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40004400 	.word	0x40004400

08002a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ad0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a9c:	f7ff fd64 	bl	8002568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa0:	480c      	ldr	r0, [pc, #48]	@ (8002ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aa2:	490d      	ldr	r1, [pc, #52]	@ (8002ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa8:	e002      	b.n	8002ab0 <LoopCopyDataInit>

08002aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aae:	3304      	adds	r3, #4

08002ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab4:	d3f9      	bcc.n	8002aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002abc:	e001      	b.n	8002ac2 <LoopFillZerobss>

08002abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac0:	3204      	adds	r2, #4

08002ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ac6:	f005 fb9f 	bl	8008208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aca:	f7ff f9f1 	bl	8001eb0 <main>
  bx  lr    
 8002ace:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad8:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8002adc:	0800bd88 	.word	0x0800bd88
  ldr r2, =_sbss
 8002ae0:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8002ae4:	20000630 	.word	0x20000630

08002ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ae8:	e7fe      	b.n	8002ae8 <ADC_IRQHandler>
	...

08002aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <HAL_Init+0x40>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b2c <HAL_Init+0x40>)
 8002af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_Init+0x40>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <HAL_Init+0x40>)
 8002b02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b08:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <HAL_Init+0x40>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a07      	ldr	r2, [pc, #28]	@ (8002b2c <HAL_Init+0x40>)
 8002b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b14:	2003      	movs	r0, #3
 8002b16:	f000 fd0c 	bl	8003532 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1a:	200f      	movs	r0, #15
 8002b1c:	f7ff fba8 	bl	8002270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b20:	f7ff fb7e 	bl	8002220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00

08002b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_IncTick+0x20>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000050 	.word	0x20000050
 8002b54:	200004e0 	.word	0x200004e0

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <HAL_GetTick+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	200004e0 	.word	0x200004e0

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff ffee 	bl	8002b58 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_Delay+0x44>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b96:	bf00      	nop
 8002b98:	f7ff ffde 	bl	8002b58 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000050 	.word	0x20000050

08002bb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e033      	b.n	8002c36 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe faa4 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d118      	bne.n	8002c28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bfe:	f023 0302 	bic.w	r3, r3, #2
 8002c02:	f043 0202 	orr.w	r2, r3, #2
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fae8 	bl	80031e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f023 0303 	bic.w	r3, r3, #3
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c26:	e001      	b.n	8002c2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_Start+0x1a>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0b2      	b.n	8002dc0 <HAL_ADC_Start+0x180>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d018      	beq.n	8002ca2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c80:	4b52      	ldr	r3, [pc, #328]	@ (8002dcc <HAL_ADC_Start+0x18c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a52      	ldr	r2, [pc, #328]	@ (8002dd0 <HAL_ADC_Start+0x190>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0c9a      	lsrs	r2, r3, #18
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c94:	e002      	b.n	8002c9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f9      	bne.n	8002c96 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d17a      	bne.n	8002da6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cda:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cee:	d106      	bne.n	8002cfe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	f023 0206 	bic.w	r2, r3, #6
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cfc:	e002      	b.n	8002d04 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d0c:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <HAL_ADC_Start+0x194>)
 8002d0e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002d18:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d12a      	bne.n	8002d7c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8002dd8 <HAL_ADC_Start+0x198>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d015      	beq.n	8002d5c <HAL_ADC_Start+0x11c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a29      	ldr	r2, [pc, #164]	@ (8002ddc <HAL_ADC_Start+0x19c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d105      	bne.n	8002d46 <HAL_ADC_Start+0x106>
 8002d3a:	4b26      	ldr	r3, [pc, #152]	@ (8002dd4 <HAL_ADC_Start+0x194>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a25      	ldr	r2, [pc, #148]	@ (8002de0 <HAL_ADC_Start+0x1a0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d136      	bne.n	8002dbe <HAL_ADC_Start+0x17e>
 8002d50:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <HAL_ADC_Start+0x194>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d130      	bne.n	8002dbe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d129      	bne.n	8002dbe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	e020      	b.n	8002dbe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a15      	ldr	r2, [pc, #84]	@ (8002dd8 <HAL_ADC_Start+0x198>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d11b      	bne.n	8002dbe <HAL_ADC_Start+0x17e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d114      	bne.n	8002dbe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	e00b      	b.n	8002dbe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	f043 0210 	orr.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	20000048 	.word	0x20000048
 8002dd0:	431bde83 	.word	0x431bde83
 8002dd4:	40012300 	.word	0x40012300
 8002dd8:	40012000 	.word	0x40012000
 8002ddc:	40012100 	.word	0x40012100
 8002de0:	40012200 	.word	0x40012200

08002de4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_Stop+0x16>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e021      	b.n	8002e3e <HAL_ADC_Stop+0x5a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e66:	d113      	bne.n	8002e90 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e76:	d10b      	bne.n	8002e90 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e063      	b.n	8002f58 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e90:	f7ff fe62 	bl	8002b58 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e96:	e021      	b.n	8002edc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d01d      	beq.n	8002edc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_ADC_PollForConversion+0x6c>
 8002ea6:	f7ff fe57 	bl	8002b58 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d212      	bcs.n	8002edc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d00b      	beq.n	8002edc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e03d      	b.n	8002f58 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d1d6      	bne.n	8002e98 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f06f 0212 	mvn.w	r2, #18
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d123      	bne.n	8002f56 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11f      	bne.n	8002f56 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d111      	bne.n	8002f56 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x1c>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e113      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x244>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b09      	cmp	r3, #9
 8002fa6:	d925      	bls.n	8002ff4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68d9      	ldr	r1, [r3, #12]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	3b1e      	subs	r3, #30
 8002fbe:	2207      	movs	r2, #7
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	400a      	ands	r2, r1
 8002fcc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68d9      	ldr	r1, [r3, #12]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4403      	add	r3, r0
 8002fe6:	3b1e      	subs	r3, #30
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	e022      	b.n	800303a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6919      	ldr	r1, [r3, #16]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	2207      	movs	r2, #7
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	400a      	ands	r2, r1
 8003016:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6919      	ldr	r1, [r3, #16]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	4618      	mov	r0, r3
 800302a:	4603      	mov	r3, r0
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4403      	add	r3, r0
 8003030:	409a      	lsls	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b06      	cmp	r3, #6
 8003040:	d824      	bhi.n	800308c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	3b05      	subs	r3, #5
 8003054:	221f      	movs	r2, #31
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	400a      	ands	r2, r1
 8003062:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	4618      	mov	r0, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	3b05      	subs	r3, #5
 800307e:	fa00 f203 	lsl.w	r2, r0, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	635a      	str	r2, [r3, #52]	@ 0x34
 800308a:	e04c      	b.n	8003126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d824      	bhi.n	80030de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	3b23      	subs	r3, #35	@ 0x23
 80030a6:	221f      	movs	r2, #31
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43da      	mvns	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	400a      	ands	r2, r1
 80030b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	3b23      	subs	r3, #35	@ 0x23
 80030d0:	fa00 f203 	lsl.w	r2, r0, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	631a      	str	r2, [r3, #48]	@ 0x30
 80030dc:	e023      	b.n	8003126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	3b41      	subs	r3, #65	@ 0x41
 80030f0:	221f      	movs	r2, #31
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43da      	mvns	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	400a      	ands	r2, r1
 80030fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	4618      	mov	r0, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	3b41      	subs	r3, #65	@ 0x41
 800311a:	fa00 f203 	lsl.w	r2, r0, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003126:	4b29      	ldr	r3, [pc, #164]	@ (80031cc <HAL_ADC_ConfigChannel+0x250>)
 8003128:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a28      	ldr	r2, [pc, #160]	@ (80031d0 <HAL_ADC_ConfigChannel+0x254>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d10f      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x1d8>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b12      	cmp	r3, #18
 800313a:	d10b      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1d      	ldr	r2, [pc, #116]	@ (80031d0 <HAL_ADC_ConfigChannel+0x254>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d12b      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x23a>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1c      	ldr	r2, [pc, #112]	@ (80031d4 <HAL_ADC_ConfigChannel+0x258>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <HAL_ADC_ConfigChannel+0x1f4>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b11      	cmp	r3, #17
 800316e:	d122      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a11      	ldr	r2, [pc, #68]	@ (80031d4 <HAL_ADC_ConfigChannel+0x258>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d111      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003192:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <HAL_ADC_ConfigChannel+0x25c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a11      	ldr	r2, [pc, #68]	@ (80031dc <HAL_ADC_ConfigChannel+0x260>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	0c9a      	lsrs	r2, r3, #18
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031a8:	e002      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f9      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40012300 	.word	0x40012300
 80031d0:	40012000 	.word	0x40012000
 80031d4:	10000012 	.word	0x10000012
 80031d8:	20000048 	.word	0x20000048
 80031dc:	431bde83 	.word	0x431bde83

080031e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031e8:	4b79      	ldr	r3, [pc, #484]	@ (80033d0 <ADC_Init+0x1f0>)
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	431a      	orrs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	021a      	lsls	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800325a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003272:	4a58      	ldr	r2, [pc, #352]	@ (80033d4 <ADC_Init+0x1f4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003286:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6899      	ldr	r1, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	e00f      	b.n	80032de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0202 	bic.w	r2, r2, #2
 80032ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6899      	ldr	r1, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7e1b      	ldrb	r3, [r3, #24]
 80032f8:	005a      	lsls	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01b      	beq.n	8003344 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800331a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800332a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	3b01      	subs	r3, #1
 8003338:	035a      	lsls	r2, r3, #13
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	e007      	b.n	8003354 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003352:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003362:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	3b01      	subs	r3, #1
 8003370:	051a      	lsls	r2, r3, #20
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003396:	025a      	lsls	r2, r3, #9
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6899      	ldr	r1, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	029a      	lsls	r2, r3, #10
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40012300 	.word	0x40012300
 80033d4:	0f000001 	.word	0x0f000001

080033d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <__NVIC_SetPriorityGrouping+0x44>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033f4:	4013      	ands	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003400:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340a:	4a04      	ldr	r2, [pc, #16]	@ (800341c <__NVIC_SetPriorityGrouping+0x44>)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	60d3      	str	r3, [r2, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003424:	4b04      	ldr	r3, [pc, #16]	@ (8003438 <__NVIC_GetPriorityGrouping+0x18>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	f003 0307 	and.w	r3, r3, #7
}
 800342e:	4618      	mov	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	2b00      	cmp	r3, #0
 800344c:	db0b      	blt.n	8003466 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	4907      	ldr	r1, [pc, #28]	@ (8003474 <__NVIC_EnableIRQ+0x38>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2001      	movs	r0, #1
 800345e:	fa00 f202 	lsl.w	r2, r0, r2
 8003462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000e100 	.word	0xe000e100

08003478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	6039      	str	r1, [r7, #0]
 8003482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003488:	2b00      	cmp	r3, #0
 800348a:	db0a      	blt.n	80034a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	b2da      	uxtb	r2, r3
 8003490:	490c      	ldr	r1, [pc, #48]	@ (80034c4 <__NVIC_SetPriority+0x4c>)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	0112      	lsls	r2, r2, #4
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	440b      	add	r3, r1
 800349c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a0:	e00a      	b.n	80034b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4908      	ldr	r1, [pc, #32]	@ (80034c8 <__NVIC_SetPriority+0x50>)
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	3b04      	subs	r3, #4
 80034b0:	0112      	lsls	r2, r2, #4
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	440b      	add	r3, r1
 80034b6:	761a      	strb	r2, [r3, #24]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000e100 	.word	0xe000e100
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	@ 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f1c3 0307 	rsb	r3, r3, #7
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	bf28      	it	cs
 80034ea:	2304      	movcs	r3, #4
 80034ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3304      	adds	r3, #4
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d902      	bls.n	80034fc <NVIC_EncodePriority+0x30>
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3b03      	subs	r3, #3
 80034fa:	e000      	b.n	80034fe <NVIC_EncodePriority+0x32>
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003500:	f04f 32ff 	mov.w	r2, #4294967295
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	401a      	ands	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003514:	f04f 31ff 	mov.w	r1, #4294967295
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fa01 f303 	lsl.w	r3, r1, r3
 800351e:	43d9      	mvns	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	4313      	orrs	r3, r2
         );
}
 8003526:	4618      	mov	r0, r3
 8003528:	3724      	adds	r7, #36	@ 0x24
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ff4c 	bl	80033d8 <__NVIC_SetPriorityGrouping>
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800355a:	f7ff ff61 	bl	8003420 <__NVIC_GetPriorityGrouping>
 800355e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	6978      	ldr	r0, [r7, #20]
 8003566:	f7ff ffb1 	bl	80034cc <NVIC_EncodePriority>
 800356a:	4602      	mov	r2, r0
 800356c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff80 	bl	8003478 <__NVIC_SetPriority>
}
 8003578:	bf00      	nop
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff54 	bl	800343c <__NVIC_EnableIRQ>
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	@ 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	e165      	b.n	8003884 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b8:	2201      	movs	r2, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f040 8154 	bne.w	800387e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d005      	beq.n	80035ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d130      	bne.n	8003650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003624:	2201      	movs	r2, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 0201 	and.w	r2, r3, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b03      	cmp	r3, #3
 800365a:	d017      	beq.n	800368c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d123      	bne.n	80036e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	220f      	movs	r2, #15
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	08da      	lsrs	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3208      	adds	r2, #8
 80036da:	69b9      	ldr	r1, [r7, #24]
 80036dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0203 	and.w	r2, r3, #3
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80ae 	beq.w	800387e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b5d      	ldr	r3, [pc, #372]	@ (800389c <HAL_GPIO_Init+0x300>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	4a5c      	ldr	r2, [pc, #368]	@ (800389c <HAL_GPIO_Init+0x300>)
 800372c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003730:	6453      	str	r3, [r2, #68]	@ 0x44
 8003732:	4b5a      	ldr	r3, [pc, #360]	@ (800389c <HAL_GPIO_Init+0x300>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800373e:	4a58      	ldr	r2, [pc, #352]	@ (80038a0 <HAL_GPIO_Init+0x304>)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	3302      	adds	r3, #2
 8003746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	220f      	movs	r2, #15
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a4f      	ldr	r2, [pc, #316]	@ (80038a4 <HAL_GPIO_Init+0x308>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d025      	beq.n	80037b6 <HAL_GPIO_Init+0x21a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a4e      	ldr	r2, [pc, #312]	@ (80038a8 <HAL_GPIO_Init+0x30c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01f      	beq.n	80037b2 <HAL_GPIO_Init+0x216>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4d      	ldr	r2, [pc, #308]	@ (80038ac <HAL_GPIO_Init+0x310>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d019      	beq.n	80037ae <HAL_GPIO_Init+0x212>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a4c      	ldr	r2, [pc, #304]	@ (80038b0 <HAL_GPIO_Init+0x314>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0x20e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4b      	ldr	r2, [pc, #300]	@ (80038b4 <HAL_GPIO_Init+0x318>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00d      	beq.n	80037a6 <HAL_GPIO_Init+0x20a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4a      	ldr	r2, [pc, #296]	@ (80038b8 <HAL_GPIO_Init+0x31c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_Init+0x206>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a49      	ldr	r2, [pc, #292]	@ (80038bc <HAL_GPIO_Init+0x320>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_GPIO_Init+0x202>
 800379a:	2306      	movs	r3, #6
 800379c:	e00c      	b.n	80037b8 <HAL_GPIO_Init+0x21c>
 800379e:	2307      	movs	r3, #7
 80037a0:	e00a      	b.n	80037b8 <HAL_GPIO_Init+0x21c>
 80037a2:	2305      	movs	r3, #5
 80037a4:	e008      	b.n	80037b8 <HAL_GPIO_Init+0x21c>
 80037a6:	2304      	movs	r3, #4
 80037a8:	e006      	b.n	80037b8 <HAL_GPIO_Init+0x21c>
 80037aa:	2303      	movs	r3, #3
 80037ac:	e004      	b.n	80037b8 <HAL_GPIO_Init+0x21c>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e002      	b.n	80037b8 <HAL_GPIO_Init+0x21c>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_GPIO_Init+0x21c>
 80037b6:	2300      	movs	r3, #0
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	f002 0203 	and.w	r2, r2, #3
 80037be:	0092      	lsls	r2, r2, #2
 80037c0:	4093      	lsls	r3, r2
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c8:	4935      	ldr	r1, [pc, #212]	@ (80038a0 <HAL_GPIO_Init+0x304>)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	3302      	adds	r3, #2
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037d6:	4b3a      	ldr	r3, [pc, #232]	@ (80038c0 <HAL_GPIO_Init+0x324>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037fa:	4a31      	ldr	r2, [pc, #196]	@ (80038c0 <HAL_GPIO_Init+0x324>)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003800:	4b2f      	ldr	r3, [pc, #188]	@ (80038c0 <HAL_GPIO_Init+0x324>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003824:	4a26      	ldr	r2, [pc, #152]	@ (80038c0 <HAL_GPIO_Init+0x324>)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800382a:	4b25      	ldr	r3, [pc, #148]	@ (80038c0 <HAL_GPIO_Init+0x324>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800384e:	4a1c      	ldr	r2, [pc, #112]	@ (80038c0 <HAL_GPIO_Init+0x324>)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003854:	4b1a      	ldr	r3, [pc, #104]	@ (80038c0 <HAL_GPIO_Init+0x324>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003878:	4a11      	ldr	r2, [pc, #68]	@ (80038c0 <HAL_GPIO_Init+0x324>)
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3301      	adds	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b0f      	cmp	r3, #15
 8003888:	f67f ae96 	bls.w	80035b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	3724      	adds	r7, #36	@ 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	40013800 	.word	0x40013800
 80038a4:	40020000 	.word	0x40020000
 80038a8:	40020400 	.word	0x40020400
 80038ac:	40020800 	.word	0x40020800
 80038b0:	40020c00 	.word	0x40020c00
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40021400 	.word	0x40021400
 80038bc:	40021800 	.word	0x40021800
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
 80038e0:	e001      	b.n	80038e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003910:	e003      	b.n	800391a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	041a      	lsls	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	619a      	str	r2, [r3, #24]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0cc      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800393c:	4b68      	ldr	r3, [pc, #416]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d90c      	bls.n	8003964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b65      	ldr	r3, [pc, #404]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b63      	ldr	r3, [pc, #396]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0b8      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800397c:	4b59      	ldr	r3, [pc, #356]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a58      	ldr	r2, [pc, #352]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003986:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003994:	4b53      	ldr	r3, [pc, #332]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4a52      	ldr	r2, [pc, #328]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800399e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a0:	4b50      	ldr	r3, [pc, #320]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	494d      	ldr	r1, [pc, #308]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d044      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d119      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e07f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e06f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e067      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a06:	4b37      	ldr	r3, [pc, #220]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f023 0203 	bic.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4934      	ldr	r1, [pc, #208]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a18:	f7ff f89e 	bl	8002b58 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a20:	f7ff f89a 	bl	8002b58 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e04f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 020c 	and.w	r2, r3, #12
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d1eb      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a48:	4b25      	ldr	r3, [pc, #148]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d20c      	bcs.n	8003a70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b22      	ldr	r3, [pc, #136]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e032      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4916      	ldr	r1, [pc, #88]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	490e      	ldr	r1, [pc, #56]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aae:	f000 f887 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	490a      	ldr	r1, [pc, #40]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	5ccb      	ldrb	r3, [r1, r3]
 8003ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac6:	4a09      	ldr	r2, [pc, #36]	@ (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003aca:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fbce 	bl	8002270 <HAL_InitTick>

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023c00 	.word	0x40023c00
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	0800b8f4 	.word	0x0800b8f4
 8003aec:	20000048 	.word	0x20000048
 8003af0:	2000004c 	.word	0x2000004c

08003af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af8:	4b03      	ldr	r3, [pc, #12]	@ (8003b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000048 	.word	0x20000048

08003b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b10:	f7ff fff0 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	0a9b      	lsrs	r3, r3, #10
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4903      	ldr	r1, [pc, #12]	@ (8003b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	0800b904 	.word	0x0800b904

08003b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b38:	f7ff ffdc 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	0b5b      	lsrs	r3, r3, #13
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4903      	ldr	r1, [pc, #12]	@ (8003b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	0800b904 	.word	0x0800b904

08003b5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	220f      	movs	r2, #15
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b6c:	4b12      	ldr	r3, [pc, #72]	@ (8003bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0203 	and.w	r2, r3, #3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b78:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b84:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b90:	4b09      	ldr	r3, [pc, #36]	@ (8003bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	08db      	lsrs	r3, r3, #3
 8003b96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b9e:	4b07      	ldr	r3, [pc, #28]	@ (8003bbc <HAL_RCC_GetClockConfig+0x60>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 020f 	and.w	r2, r3, #15
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	601a      	str	r2, [r3, #0]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40023c00 	.word	0x40023c00

08003bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc4:	b0ae      	sub	sp, #184	@ 0xb8
 8003bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be6:	4bcb      	ldr	r3, [pc, #812]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	f200 8206 	bhi.w	8004000 <HAL_RCC_GetSysClockFreq+0x440>
 8003bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c31 	.word	0x08003c31
 8003c00:	08004001 	.word	0x08004001
 8003c04:	08004001 	.word	0x08004001
 8003c08:	08004001 	.word	0x08004001
 8003c0c:	08003c39 	.word	0x08003c39
 8003c10:	08004001 	.word	0x08004001
 8003c14:	08004001 	.word	0x08004001
 8003c18:	08004001 	.word	0x08004001
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08004001 	.word	0x08004001
 8003c24:	08004001 	.word	0x08004001
 8003c28:	08004001 	.word	0x08004001
 8003c2c:	08003e31 	.word	0x08003e31
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c30:	4bb9      	ldr	r3, [pc, #740]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c36:	e1e7      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c38:	4bb8      	ldr	r3, [pc, #736]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c3e:	e1e3      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c40:	4bb4      	ldr	r3, [pc, #720]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4c:	4bb1      	ldr	r3, [pc, #708]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d071      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c58:	4bae      	ldr	r3, [pc, #696]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c64:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c7e:	4622      	mov	r2, r4
 8003c80:	462b      	mov	r3, r5
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f04f 0100 	mov.w	r1, #0
 8003c8a:	0159      	lsls	r1, r3, #5
 8003c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c90:	0150      	lsls	r0, r2, #5
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4621      	mov	r1, r4
 8003c98:	1a51      	subs	r1, r2, r1
 8003c9a:	6439      	str	r1, [r7, #64]	@ 0x40
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	018b      	lsls	r3, r1, #6
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cba:	4641      	mov	r1, r8
 8003cbc:	018a      	lsls	r2, r1, #6
 8003cbe:	4641      	mov	r1, r8
 8003cc0:	1a51      	subs	r1, r2, r1
 8003cc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003cd8:	4649      	mov	r1, r9
 8003cda:	00cb      	lsls	r3, r1, #3
 8003cdc:	4641      	mov	r1, r8
 8003cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	00ca      	lsls	r2, r1, #3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	4622      	mov	r2, r4
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cf2:	462b      	mov	r3, r5
 8003cf4:	460a      	mov	r2, r1
 8003cf6:	eb42 0303 	adc.w	r3, r2, r3
 8003cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d08:	4629      	mov	r1, r5
 8003d0a:	024b      	lsls	r3, r1, #9
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d12:	4621      	mov	r1, r4
 8003d14:	024a      	lsls	r2, r1, #9
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003d2c:	f7fc ffdc 	bl	8000ce8 <__aeabi_uldivmod>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4613      	mov	r3, r2
 8003d36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d3a:	e067      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3c:	4b75      	ldr	r3, [pc, #468]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	099b      	lsrs	r3, r3, #6
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d48:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d56:	2300      	movs	r3, #0
 8003d58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d5a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003d5e:	4622      	mov	r2, r4
 8003d60:	462b      	mov	r3, r5
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	0159      	lsls	r1, r3, #5
 8003d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d70:	0150      	lsls	r0, r2, #5
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4621      	mov	r1, r4
 8003d78:	1a51      	subs	r1, r2, r1
 8003d7a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003d90:	4649      	mov	r1, r9
 8003d92:	018b      	lsls	r3, r1, #6
 8003d94:	4641      	mov	r1, r8
 8003d96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	018a      	lsls	r2, r1, #6
 8003d9e:	4641      	mov	r1, r8
 8003da0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003da4:	4649      	mov	r1, r9
 8003da6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003db6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dbe:	4692      	mov	sl, r2
 8003dc0:	469b      	mov	fp, r3
 8003dc2:	4623      	mov	r3, r4
 8003dc4:	eb1a 0303 	adds.w	r3, sl, r3
 8003dc8:	623b      	str	r3, [r7, #32]
 8003dca:	462b      	mov	r3, r5
 8003dcc:	eb4b 0303 	adc.w	r3, fp, r3
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003dde:	4629      	mov	r1, r5
 8003de0:	028b      	lsls	r3, r1, #10
 8003de2:	4621      	mov	r1, r4
 8003de4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003de8:	4621      	mov	r1, r4
 8003dea:	028a      	lsls	r2, r1, #10
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003df4:	2200      	movs	r2, #0
 8003df6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003df8:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dfa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003dfe:	f7fc ff73 	bl	8000ce8 <__aeabi_uldivmod>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4613      	mov	r3, r2
 8003e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e0c:	4b41      	ldr	r3, [pc, #260]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	3301      	adds	r3, #1
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e2e:	e0eb      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e30:	4b38      	ldr	r3, [pc, #224]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e3c:	4b35      	ldr	r3, [pc, #212]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d06b      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e48:	4b32      	ldr	r3, [pc, #200]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	099b      	lsrs	r3, r3, #6
 8003e4e:	2200      	movs	r2, #0
 8003e50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e60:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003e64:	4622      	mov	r2, r4
 8003e66:	462b      	mov	r3, r5
 8003e68:	f04f 0000 	mov.w	r0, #0
 8003e6c:	f04f 0100 	mov.w	r1, #0
 8003e70:	0159      	lsls	r1, r3, #5
 8003e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e76:	0150      	lsls	r0, r2, #5
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	1a51      	subs	r1, r2, r1
 8003e80:	61b9      	str	r1, [r7, #24]
 8003e82:	4629      	mov	r1, r5
 8003e84:	eb63 0301 	sbc.w	r3, r3, r1
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e96:	4659      	mov	r1, fp
 8003e98:	018b      	lsls	r3, r1, #6
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	018a      	lsls	r2, r1, #6
 8003ea4:	4651      	mov	r1, sl
 8003ea6:	ebb2 0801 	subs.w	r8, r2, r1
 8003eaa:	4659      	mov	r1, fp
 8003eac:	eb63 0901 	sbc.w	r9, r3, r1
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ebc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ec0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ec4:	4690      	mov	r8, r2
 8003ec6:	4699      	mov	r9, r3
 8003ec8:	4623      	mov	r3, r4
 8003eca:	eb18 0303 	adds.w	r3, r8, r3
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	eb49 0303 	adc.w	r3, r9, r3
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	024b      	lsls	r3, r1, #9
 8003ee8:	4621      	mov	r1, r4
 8003eea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003eee:	4621      	mov	r1, r4
 8003ef0:	024a      	lsls	r2, r1, #9
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003efa:	2200      	movs	r2, #0
 8003efc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003efe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003f00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f04:	f7fc fef0 	bl	8000ce8 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f12:	e065      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x420>
 8003f14:	40023800 	.word	0x40023800
 8003f18:	00f42400 	.word	0x00f42400
 8003f1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f20:	4b3d      	ldr	r3, [pc, #244]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	099b      	lsrs	r3, r3, #6
 8003f26:	2200      	movs	r2, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f30:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f32:	2300      	movs	r3, #0
 8003f34:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003f3a:	4642      	mov	r2, r8
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	0159      	lsls	r1, r3, #5
 8003f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f4c:	0150      	lsls	r0, r2, #5
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4641      	mov	r1, r8
 8003f54:	1a51      	subs	r1, r2, r1
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	4649      	mov	r1, r9
 8003f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	018b      	lsls	r3, r1, #6
 8003f70:	4651      	mov	r1, sl
 8003f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f76:	4651      	mov	r1, sl
 8003f78:	018a      	lsls	r2, r1, #6
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	1a54      	subs	r4, r2, r1
 8003f7e:	4659      	mov	r1, fp
 8003f80:	eb63 0501 	sbc.w	r5, r3, r1
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	00eb      	lsls	r3, r5, #3
 8003f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f92:	00e2      	lsls	r2, r4, #3
 8003f94:	4614      	mov	r4, r2
 8003f96:	461d      	mov	r5, r3
 8003f98:	4643      	mov	r3, r8
 8003f9a:	18e3      	adds	r3, r4, r3
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	eb45 0303 	adc.w	r3, r5, r3
 8003fa4:	607b      	str	r3, [r7, #4]
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	028b      	lsls	r3, r1, #10
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	028a      	lsls	r2, r1, #10
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fc8:	2200      	movs	r2, #0
 8003fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fcc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003fce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fd2:	f7fc fe89 	bl	8000ce8 <__aeabi_uldivmod>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4613      	mov	r3, r2
 8003fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x458>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	0f1b      	lsrs	r3, r3, #28
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ffe:	e003      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b06      	ldr	r3, [pc, #24]	@ (800401c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004002:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004006:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004008:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800400c:	4618      	mov	r0, r3
 800400e:	37b8      	adds	r7, #184	@ 0xb8
 8004010:	46bd      	mov	sp, r7
 8004012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	00f42400 	.word	0x00f42400

08004020 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e28d      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8083 	beq.w	8004146 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004040:	4b94      	ldr	r3, [pc, #592]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b04      	cmp	r3, #4
 800404a:	d019      	beq.n	8004080 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800404c:	4b91      	ldr	r3, [pc, #580]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 030c 	and.w	r3, r3, #12
        || \
 8004054:	2b08      	cmp	r3, #8
 8004056:	d106      	bne.n	8004066 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004058:	4b8e      	ldr	r3, [pc, #568]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004060:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004064:	d00c      	beq.n	8004080 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004066:	4b8b      	ldr	r3, [pc, #556]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800406e:	2b0c      	cmp	r3, #12
 8004070:	d112      	bne.n	8004098 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004072:	4b88      	ldr	r3, [pc, #544]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800407a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800407e:	d10b      	bne.n	8004098 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004080:	4b84      	ldr	r3, [pc, #528]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d05b      	beq.n	8004144 <HAL_RCC_OscConfig+0x124>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d157      	bne.n	8004144 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e25a      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a0:	d106      	bne.n	80040b0 <HAL_RCC_OscConfig+0x90>
 80040a2:	4b7c      	ldr	r3, [pc, #496]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a7b      	ldr	r2, [pc, #492]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e01d      	b.n	80040ec <HAL_RCC_OscConfig+0xcc>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCC_OscConfig+0xb4>
 80040ba:	4b76      	ldr	r3, [pc, #472]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a75      	ldr	r2, [pc, #468]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80040c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	4b73      	ldr	r3, [pc, #460]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a72      	ldr	r2, [pc, #456]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80040cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	e00b      	b.n	80040ec <HAL_RCC_OscConfig+0xcc>
 80040d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80040da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80040e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d013      	beq.n	800411c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fe fd30 	bl	8002b58 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040fc:	f7fe fd2c 	bl	8002b58 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b64      	cmp	r3, #100	@ 0x64
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e21f      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	4b61      	ldr	r3, [pc, #388]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0xdc>
 800411a:	e014      	b.n	8004146 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fe fd1c 	bl	8002b58 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004124:	f7fe fd18 	bl	8002b58 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	@ 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e20b      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004136:	4b57      	ldr	r3, [pc, #348]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x104>
 8004142:	e000      	b.n	8004146 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d06f      	beq.n	8004232 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004152:	4b50      	ldr	r3, [pc, #320]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b00      	cmp	r3, #0
 800415c:	d017      	beq.n	800418e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800415e:	4b4d      	ldr	r3, [pc, #308]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
        || \
 8004166:	2b08      	cmp	r3, #8
 8004168:	d105      	bne.n	8004176 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800416a:	4b4a      	ldr	r3, [pc, #296]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00b      	beq.n	800418e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004176:	4b47      	ldr	r3, [pc, #284]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d11c      	bne.n	80041bc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004182:	4b44      	ldr	r3, [pc, #272]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d116      	bne.n	80041bc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418e:	4b41      	ldr	r3, [pc, #260]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_RCC_OscConfig+0x186>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d001      	beq.n	80041a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e1d3      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	4937      	ldr	r1, [pc, #220]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ba:	e03a      	b.n	8004232 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d020      	beq.n	8004206 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c4:	4b34      	ldr	r3, [pc, #208]	@ (8004298 <HAL_RCC_OscConfig+0x278>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ca:	f7fe fcc5 	bl	8002b58 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d2:	f7fe fcc1 	bl	8002b58 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e1b4      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f0:	4b28      	ldr	r3, [pc, #160]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4925      	ldr	r1, [pc, #148]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004200:	4313      	orrs	r3, r2
 8004202:	600b      	str	r3, [r1, #0]
 8004204:	e015      	b.n	8004232 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004206:	4b24      	ldr	r3, [pc, #144]	@ (8004298 <HAL_RCC_OscConfig+0x278>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fe fca4 	bl	8002b58 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004214:	f7fe fca0 	bl	8002b58 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e193      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004226:	4b1b      	ldr	r3, [pc, #108]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d036      	beq.n	80042ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004246:	4b15      	ldr	r3, [pc, #84]	@ (800429c <HAL_RCC_OscConfig+0x27c>)
 8004248:	2201      	movs	r2, #1
 800424a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424c:	f7fe fc84 	bl	8002b58 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004254:	f7fe fc80 	bl	8002b58 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e173      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004266:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x234>
 8004272:	e01b      	b.n	80042ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004274:	4b09      	ldr	r3, [pc, #36]	@ (800429c <HAL_RCC_OscConfig+0x27c>)
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427a:	f7fe fc6d 	bl	8002b58 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004280:	e00e      	b.n	80042a0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004282:	f7fe fc69 	bl	8002b58 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d907      	bls.n	80042a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e15c      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
 8004294:	40023800 	.word	0x40023800
 8004298:	42470000 	.word	0x42470000
 800429c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a0:	4b8a      	ldr	r3, [pc, #552]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 80042a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1ea      	bne.n	8004282 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8097 	beq.w	80043e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042be:	4b83      	ldr	r3, [pc, #524]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10f      	bne.n	80042ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	4b7f      	ldr	r3, [pc, #508]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d2:	4a7e      	ldr	r2, [pc, #504]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042da:	4b7c      	ldr	r3, [pc, #496]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ea:	4b79      	ldr	r3, [pc, #484]	@ (80044d0 <HAL_RCC_OscConfig+0x4b0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d118      	bne.n	8004328 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f6:	4b76      	ldr	r3, [pc, #472]	@ (80044d0 <HAL_RCC_OscConfig+0x4b0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a75      	ldr	r2, [pc, #468]	@ (80044d0 <HAL_RCC_OscConfig+0x4b0>)
 80042fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004302:	f7fe fc29 	bl	8002b58 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430a:	f7fe fc25 	bl	8002b58 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e118      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431c:	4b6c      	ldr	r3, [pc, #432]	@ (80044d0 <HAL_RCC_OscConfig+0x4b0>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d106      	bne.n	800433e <HAL_RCC_OscConfig+0x31e>
 8004330:	4b66      	ldr	r3, [pc, #408]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004334:	4a65      	ldr	r2, [pc, #404]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6713      	str	r3, [r2, #112]	@ 0x70
 800433c:	e01c      	b.n	8004378 <HAL_RCC_OscConfig+0x358>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b05      	cmp	r3, #5
 8004344:	d10c      	bne.n	8004360 <HAL_RCC_OscConfig+0x340>
 8004346:	4b61      	ldr	r3, [pc, #388]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434a:	4a60      	ldr	r2, [pc, #384]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 800434c:	f043 0304 	orr.w	r3, r3, #4
 8004350:	6713      	str	r3, [r2, #112]	@ 0x70
 8004352:	4b5e      	ldr	r3, [pc, #376]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004356:	4a5d      	ldr	r2, [pc, #372]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	6713      	str	r3, [r2, #112]	@ 0x70
 800435e:	e00b      	b.n	8004378 <HAL_RCC_OscConfig+0x358>
 8004360:	4b5a      	ldr	r3, [pc, #360]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004364:	4a59      	ldr	r2, [pc, #356]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	6713      	str	r3, [r2, #112]	@ 0x70
 800436c:	4b57      	ldr	r3, [pc, #348]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004370:	4a56      	ldr	r2, [pc, #344]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 8004372:	f023 0304 	bic.w	r3, r3, #4
 8004376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d015      	beq.n	80043ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004380:	f7fe fbea 	bl	8002b58 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004386:	e00a      	b.n	800439e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004388:	f7fe fbe6 	bl	8002b58 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e0d7      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439e:	4b4b      	ldr	r3, [pc, #300]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ee      	beq.n	8004388 <HAL_RCC_OscConfig+0x368>
 80043aa:	e014      	b.n	80043d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fe fbd4 	bl	8002b58 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b4:	f7fe fbd0 	bl	8002b58 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e0c1      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ca:	4b40      	ldr	r3, [pc, #256]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1ee      	bne.n	80043b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043d6:	7dfb      	ldrb	r3, [r7, #23]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d105      	bne.n	80043e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043dc:	4b3b      	ldr	r3, [pc, #236]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 80043de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e0:	4a3a      	ldr	r2, [pc, #232]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 80043e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80ad 	beq.w	800454c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043f2:	4b36      	ldr	r3, [pc, #216]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d060      	beq.n	80044c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d145      	bne.n	8004492 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004406:	4b33      	ldr	r3, [pc, #204]	@ (80044d4 <HAL_RCC_OscConfig+0x4b4>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fe fba4 	bl	8002b58 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004414:	f7fe fba0 	bl	8002b58 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e093      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	4b29      	ldr	r3, [pc, #164]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	019b      	lsls	r3, r3, #6
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	3b01      	subs	r3, #1
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	061b      	lsls	r3, r3, #24
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445c:	071b      	lsls	r3, r3, #28
 800445e:	491b      	ldr	r1, [pc, #108]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004464:	4b1b      	ldr	r3, [pc, #108]	@ (80044d4 <HAL_RCC_OscConfig+0x4b4>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fe fb75 	bl	8002b58 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004472:	f7fe fb71 	bl	8002b58 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e064      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004484:	4b11      	ldr	r3, [pc, #68]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x452>
 8004490:	e05c      	b.n	800454c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004492:	4b10      	ldr	r3, [pc, #64]	@ (80044d4 <HAL_RCC_OscConfig+0x4b4>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fe fb5e 	bl	8002b58 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fe fb5a 	bl	8002b58 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e04d      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <HAL_RCC_OscConfig+0x4ac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x480>
 80044be:	e045      	b.n	800454c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e040      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40007000 	.word	0x40007000
 80044d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004558 <HAL_RCC_OscConfig+0x538>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d030      	beq.n	8004548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d129      	bne.n	8004548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d122      	bne.n	8004548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800450e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004510:	4293      	cmp	r3, r2
 8004512:	d119      	bne.n	8004548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	3b01      	subs	r3, #1
 8004522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d10f      	bne.n	8004548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d107      	bne.n	8004548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004542:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800

0800455c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e041      	b.n	80045f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fe f932 	bl	80027ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f000 fcca 	bl	8004f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d001      	beq.n	8004614 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e046      	b.n	80046a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a23      	ldr	r2, [pc, #140]	@ (80046b0 <HAL_TIM_Base_Start+0xb4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d022      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462e:	d01d      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1f      	ldr	r2, [pc, #124]	@ (80046b4 <HAL_TIM_Base_Start+0xb8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d018      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1e      	ldr	r2, [pc, #120]	@ (80046b8 <HAL_TIM_Base_Start+0xbc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d013      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1c      	ldr	r2, [pc, #112]	@ (80046bc <HAL_TIM_Base_Start+0xc0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1b      	ldr	r2, [pc, #108]	@ (80046c0 <HAL_TIM_Base_Start+0xc4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a19      	ldr	r2, [pc, #100]	@ (80046c4 <HAL_TIM_Base_Start+0xc8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_Base_Start+0x70>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a18      	ldr	r2, [pc, #96]	@ (80046c8 <HAL_TIM_Base_Start+0xcc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d111      	bne.n	8004690 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d010      	beq.n	80046a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	e007      	b.n	80046a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40010400 	.word	0x40010400
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40001800 	.word	0x40001800

080046cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d001      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e04e      	b.n	8004782 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a23      	ldr	r2, [pc, #140]	@ (8004790 <HAL_TIM_Base_Start_IT+0xc4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d022      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470e:	d01d      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1f      	ldr	r2, [pc, #124]	@ (8004794 <HAL_TIM_Base_Start_IT+0xc8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d018      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1e      	ldr	r2, [pc, #120]	@ (8004798 <HAL_TIM_Base_Start_IT+0xcc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d013      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1c      	ldr	r2, [pc, #112]	@ (800479c <HAL_TIM_Base_Start_IT+0xd0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00e      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1b      	ldr	r2, [pc, #108]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d009      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a19      	ldr	r2, [pc, #100]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a18      	ldr	r2, [pc, #96]	@ (80047a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d111      	bne.n	8004770 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b06      	cmp	r3, #6
 800475c:	d010      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476e:	e007      	b.n	8004780 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40010400 	.word	0x40010400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40001800 	.word	0x40001800

080047ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e041      	b.n	8004842 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f839 	bl	800484a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f000 fba2 	bl	8004f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <HAL_TIM_PWM_Start+0x24>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e022      	b.n	80048ca <HAL_TIM_PWM_Start+0x6a>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b04      	cmp	r3, #4
 8004888:	d109      	bne.n	800489e <HAL_TIM_PWM_Start+0x3e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	bf14      	ite	ne
 8004896:	2301      	movne	r3, #1
 8004898:	2300      	moveq	r3, #0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	e015      	b.n	80048ca <HAL_TIM_PWM_Start+0x6a>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d109      	bne.n	80048b8 <HAL_TIM_PWM_Start+0x58>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	bf14      	ite	ne
 80048b0:	2301      	movne	r3, #1
 80048b2:	2300      	moveq	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e008      	b.n	80048ca <HAL_TIM_PWM_Start+0x6a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e07c      	b.n	80049cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d104      	bne.n	80048e2 <HAL_TIM_PWM_Start+0x82>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048e0:	e013      	b.n	800490a <HAL_TIM_PWM_Start+0xaa>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d104      	bne.n	80048f2 <HAL_TIM_PWM_Start+0x92>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048f0:	e00b      	b.n	800490a <HAL_TIM_PWM_Start+0xaa>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d104      	bne.n	8004902 <HAL_TIM_PWM_Start+0xa2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004900:	e003      	b.n	800490a <HAL_TIM_PWM_Start+0xaa>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2201      	movs	r2, #1
 8004910:	6839      	ldr	r1, [r7, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fdfe 	bl	8005514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2d      	ldr	r2, [pc, #180]	@ (80049d4 <HAL_TIM_PWM_Start+0x174>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIM_PWM_Start+0xcc>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2c      	ldr	r2, [pc, #176]	@ (80049d8 <HAL_TIM_PWM_Start+0x178>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <HAL_TIM_PWM_Start+0xd0>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <HAL_TIM_PWM_Start+0xd2>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004944:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a22      	ldr	r2, [pc, #136]	@ (80049d4 <HAL_TIM_PWM_Start+0x174>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <HAL_TIM_PWM_Start+0x136>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004958:	d01d      	beq.n	8004996 <HAL_TIM_PWM_Start+0x136>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1f      	ldr	r2, [pc, #124]	@ (80049dc <HAL_TIM_PWM_Start+0x17c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <HAL_TIM_PWM_Start+0x136>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1d      	ldr	r2, [pc, #116]	@ (80049e0 <HAL_TIM_PWM_Start+0x180>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_TIM_PWM_Start+0x136>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1c      	ldr	r2, [pc, #112]	@ (80049e4 <HAL_TIM_PWM_Start+0x184>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_TIM_PWM_Start+0x136>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a16      	ldr	r2, [pc, #88]	@ (80049d8 <HAL_TIM_PWM_Start+0x178>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_TIM_PWM_Start+0x136>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a18      	ldr	r2, [pc, #96]	@ (80049e8 <HAL_TIM_PWM_Start+0x188>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_TIM_PWM_Start+0x136>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <HAL_TIM_PWM_Start+0x18c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d111      	bne.n	80049ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b06      	cmp	r3, #6
 80049a6:	d010      	beq.n	80049ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b8:	e007      	b.n	80049ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40010000 	.word	0x40010000
 80049d8:	40010400 	.word	0x40010400
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40001800 	.word	0x40001800

080049f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d020      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01b      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0202 	mvn.w	r2, #2
 8004a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa5b 	bl	8004ef6 <HAL_TIM_IC_CaptureCallback>
 8004a40:	e005      	b.n	8004a4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fa4d 	bl	8004ee2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fa5e 	bl	8004f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d020      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01b      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0204 	mvn.w	r2, #4
 8004a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa35 	bl	8004ef6 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa27 	bl	8004ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fa38 	bl	8004f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d020      	beq.n	8004aec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01b      	beq.n	8004aec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0208 	mvn.w	r2, #8
 8004abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa0f 	bl	8004ef6 <HAL_TIM_IC_CaptureCallback>
 8004ad8:	e005      	b.n	8004ae6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa01 	bl	8004ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fa12 	bl	8004f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d020      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0210 	mvn.w	r2, #16
 8004b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f9e9 	bl	8004ef6 <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f9db 	bl	8004ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f9ec 	bl	8004f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00c      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0201 	mvn.w	r2, #1
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fd fb4a 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00c      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fdc8 	bl	8005710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00c      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f9bd 	bl	8004f1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00c      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0220 	mvn.w	r2, #32
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fd9a 	bl	80056fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e0ae      	b.n	8004d4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b0c      	cmp	r3, #12
 8004bfa:	f200 809f 	bhi.w	8004d3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8004c04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c39 	.word	0x08004c39
 8004c08:	08004d3d 	.word	0x08004d3d
 8004c0c:	08004d3d 	.word	0x08004d3d
 8004c10:	08004d3d 	.word	0x08004d3d
 8004c14:	08004c79 	.word	0x08004c79
 8004c18:	08004d3d 	.word	0x08004d3d
 8004c1c:	08004d3d 	.word	0x08004d3d
 8004c20:	08004d3d 	.word	0x08004d3d
 8004c24:	08004cbb 	.word	0x08004cbb
 8004c28:	08004d3d 	.word	0x08004d3d
 8004c2c:	08004d3d 	.word	0x08004d3d
 8004c30:	08004d3d 	.word	0x08004d3d
 8004c34:	08004cfb 	.word	0x08004cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fa1e 	bl	8005080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0208 	orr.w	r2, r2, #8
 8004c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
 8004c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6999      	ldr	r1, [r3, #24]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	619a      	str	r2, [r3, #24]
      break;
 8004c76:	e064      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fa6e 	bl	8005160 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6999      	ldr	r1, [r3, #24]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	021a      	lsls	r2, r3, #8
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	619a      	str	r2, [r3, #24]
      break;
 8004cb8:	e043      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fac3 	bl	800524c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0208 	orr.w	r2, r2, #8
 8004cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0204 	bic.w	r2, r2, #4
 8004ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69d9      	ldr	r1, [r3, #28]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	61da      	str	r2, [r3, #28]
      break;
 8004cf8:	e023      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fb17 	bl	8005334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69d9      	ldr	r1, [r3, #28]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	021a      	lsls	r2, r3, #8
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	61da      	str	r2, [r3, #28]
      break;
 8004d3a:	e002      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIM_ConfigClockSource+0x1c>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e0b4      	b.n	8004eda <HAL_TIM_ConfigClockSource+0x186>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da8:	d03e      	beq.n	8004e28 <HAL_TIM_ConfigClockSource+0xd4>
 8004daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dae:	f200 8087 	bhi.w	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db6:	f000 8086 	beq.w	8004ec6 <HAL_TIM_ConfigClockSource+0x172>
 8004dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dbe:	d87f      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b70      	cmp	r3, #112	@ 0x70
 8004dc2:	d01a      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0xa6>
 8004dc4:	2b70      	cmp	r3, #112	@ 0x70
 8004dc6:	d87b      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b60      	cmp	r3, #96	@ 0x60
 8004dca:	d050      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x11a>
 8004dcc:	2b60      	cmp	r3, #96	@ 0x60
 8004dce:	d877      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd0:	2b50      	cmp	r3, #80	@ 0x50
 8004dd2:	d03c      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0xfa>
 8004dd4:	2b50      	cmp	r3, #80	@ 0x50
 8004dd6:	d873      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	2b40      	cmp	r3, #64	@ 0x40
 8004dda:	d058      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x13a>
 8004ddc:	2b40      	cmp	r3, #64	@ 0x40
 8004dde:	d86f      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b30      	cmp	r3, #48	@ 0x30
 8004de2:	d064      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x15a>
 8004de4:	2b30      	cmp	r3, #48	@ 0x30
 8004de6:	d86b      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d060      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x15a>
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d867      	bhi.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d05c      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x15a>
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d05a      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x15a>
 8004df8:	e062      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e0a:	f000 fb63 	bl	80054d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	609a      	str	r2, [r3, #8]
      break;
 8004e26:	e04f      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e38:	f000 fb4c 	bl	80054d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e4a:	609a      	str	r2, [r3, #8]
      break;
 8004e4c:	e03c      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f000 fac0 	bl	80053e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2150      	movs	r1, #80	@ 0x50
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fb19 	bl	800549e <TIM_ITRx_SetConfig>
      break;
 8004e6c:	e02c      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f000 fadf 	bl	800543e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2160      	movs	r1, #96	@ 0x60
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fb09 	bl	800549e <TIM_ITRx_SetConfig>
      break;
 8004e8c:	e01c      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f000 faa0 	bl	80053e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2140      	movs	r1, #64	@ 0x40
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 faf9 	bl	800549e <TIM_ITRx_SetConfig>
      break;
 8004eac:	e00c      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f000 faf0 	bl	800549e <TIM_ITRx_SetConfig>
      break;
 8004ebe:	e003      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec4:	e000      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ec6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a43      	ldr	r2, [pc, #268]	@ (8005054 <TIM_Base_SetConfig+0x120>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d013      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f52:	d00f      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a40      	ldr	r2, [pc, #256]	@ (8005058 <TIM_Base_SetConfig+0x124>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00b      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800505c <TIM_Base_SetConfig+0x128>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d007      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a3e      	ldr	r2, [pc, #248]	@ (8005060 <TIM_Base_SetConfig+0x12c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8005064 <TIM_Base_SetConfig+0x130>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d108      	bne.n	8004f86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a32      	ldr	r2, [pc, #200]	@ (8005054 <TIM_Base_SetConfig+0x120>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d02b      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f94:	d027      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2f      	ldr	r2, [pc, #188]	@ (8005058 <TIM_Base_SetConfig+0x124>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d023      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800505c <TIM_Base_SetConfig+0x128>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01f      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8005060 <TIM_Base_SetConfig+0x12c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01b      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8005064 <TIM_Base_SetConfig+0x130>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d017      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8005068 <TIM_Base_SetConfig+0x134>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800506c <TIM_Base_SetConfig+0x138>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00f      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a29      	ldr	r2, [pc, #164]	@ (8005070 <TIM_Base_SetConfig+0x13c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a28      	ldr	r2, [pc, #160]	@ (8005074 <TIM_Base_SetConfig+0x140>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d007      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a27      	ldr	r2, [pc, #156]	@ (8005078 <TIM_Base_SetConfig+0x144>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d003      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a26      	ldr	r2, [pc, #152]	@ (800507c <TIM_Base_SetConfig+0x148>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d108      	bne.n	8004ff8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a0e      	ldr	r2, [pc, #56]	@ (8005054 <TIM_Base_SetConfig+0x120>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_Base_SetConfig+0xf2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a10      	ldr	r2, [pc, #64]	@ (8005064 <TIM_Base_SetConfig+0x130>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d103      	bne.n	800502e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f043 0204 	orr.w	r2, r3, #4
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]
}
 8005046:	bf00      	nop
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40010000 	.word	0x40010000
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800
 8005060:	40000c00 	.word	0x40000c00
 8005064:	40010400 	.word	0x40010400
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800
 8005074:	40001800 	.word	0x40001800
 8005078:	40001c00 	.word	0x40001c00
 800507c:	40002000 	.word	0x40002000

08005080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f023 0201 	bic.w	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 0302 	bic.w	r3, r3, #2
 80050c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a20      	ldr	r2, [pc, #128]	@ (8005158 <TIM_OC1_SetConfig+0xd8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_OC1_SetConfig+0x64>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a1f      	ldr	r2, [pc, #124]	@ (800515c <TIM_OC1_SetConfig+0xdc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d10c      	bne.n	80050fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0308 	bic.w	r3, r3, #8
 80050ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 0304 	bic.w	r3, r3, #4
 80050fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a15      	ldr	r2, [pc, #84]	@ (8005158 <TIM_OC1_SetConfig+0xd8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <TIM_OC1_SetConfig+0x8e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a14      	ldr	r2, [pc, #80]	@ (800515c <TIM_OC1_SetConfig+0xdc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d111      	bne.n	8005132 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800511c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40010000 	.word	0x40010000
 800515c:	40010400 	.word	0x40010400

08005160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	f023 0210 	bic.w	r2, r3, #16
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800518e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f023 0320 	bic.w	r3, r3, #32
 80051aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a22      	ldr	r2, [pc, #136]	@ (8005244 <TIM_OC2_SetConfig+0xe4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <TIM_OC2_SetConfig+0x68>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a21      	ldr	r2, [pc, #132]	@ (8005248 <TIM_OC2_SetConfig+0xe8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d10d      	bne.n	80051e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a17      	ldr	r2, [pc, #92]	@ (8005244 <TIM_OC2_SetConfig+0xe4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_OC2_SetConfig+0x94>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a16      	ldr	r2, [pc, #88]	@ (8005248 <TIM_OC2_SetConfig+0xe8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d113      	bne.n	800521c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000
 8005248:	40010400 	.word	0x40010400

0800524c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a21      	ldr	r2, [pc, #132]	@ (800532c <TIM_OC3_SetConfig+0xe0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_OC3_SetConfig+0x66>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a20      	ldr	r2, [pc, #128]	@ (8005330 <TIM_OC3_SetConfig+0xe4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10d      	bne.n	80052ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a16      	ldr	r2, [pc, #88]	@ (800532c <TIM_OC3_SetConfig+0xe0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_OC3_SetConfig+0x92>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a15      	ldr	r2, [pc, #84]	@ (8005330 <TIM_OC3_SetConfig+0xe4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d113      	bne.n	8005306 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	621a      	str	r2, [r3, #32]
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	40010000 	.word	0x40010000
 8005330:	40010400 	.word	0x40010400

08005334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800536a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800537e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	031b      	lsls	r3, r3, #12
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a12      	ldr	r2, [pc, #72]	@ (80053d8 <TIM_OC4_SetConfig+0xa4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_OC4_SetConfig+0x68>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a11      	ldr	r2, [pc, #68]	@ (80053dc <TIM_OC4_SetConfig+0xa8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d109      	bne.n	80053b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	019b      	lsls	r3, r3, #6
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40010400 	.word	0x40010400

080053e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0201 	bic.w	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800540a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f023 030a 	bic.w	r3, r3, #10
 800541c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800543e:	b480      	push	{r7}
 8005440:	b087      	sub	sp, #28
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f023 0210 	bic.w	r2, r3, #16
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	031b      	lsls	r3, r3, #12
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800547a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f043 0307 	orr.w	r3, r3, #7
 80054c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	609a      	str	r2, [r3, #8]
}
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	609a      	str	r2, [r3, #8]
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	2201      	movs	r2, #1
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	43db      	mvns	r3, r3
 8005536:	401a      	ands	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	431a      	orrs	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
	...

08005560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005574:	2302      	movs	r3, #2
 8005576:	e05a      	b.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a21      	ldr	r2, [pc, #132]	@ (800563c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d022      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c4:	d01d      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d018      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1a      	ldr	r2, [pc, #104]	@ (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00e      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a18      	ldr	r2, [pc, #96]	@ (800564c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d009      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a17      	ldr	r2, [pc, #92]	@ (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a15      	ldr	r2, [pc, #84]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d10c      	bne.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	4313      	orrs	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40010000 	.word	0x40010000
 8005640:	40000400 	.word	0x40000400
 8005644:	40000800 	.word	0x40000800
 8005648:	40000c00 	.word	0x40000c00
 800564c:	40010400 	.word	0x40010400
 8005650:	40014000 	.word	0x40014000
 8005654:	40001800 	.word	0x40001800

08005658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005670:	2302      	movs	r3, #2
 8005672:	e03d      	b.n	80056f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e042      	b.n	80057bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fd f928 	bl	80029a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2224      	movs	r2, #36	@ 0x24
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fa09 	bl	8005b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800577c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695a      	ldr	r2, [r3, #20]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800578c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800579c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	@ 0x28
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d175      	bne.n	80058d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_UART_Transmit+0x2c>
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e06e      	b.n	80058d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2221      	movs	r2, #33	@ 0x21
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005802:	f7fd f9a9 	bl	8002b58 <HAL_GetTick>
 8005806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	88fa      	ldrh	r2, [r7, #6]
 800580c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	88fa      	ldrh	r2, [r7, #6]
 8005812:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800581c:	d108      	bne.n	8005830 <HAL_UART_Transmit+0x6c>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d104      	bne.n	8005830 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	e003      	b.n	8005838 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005834:	2300      	movs	r3, #0
 8005836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005838:	e02e      	b.n	8005898 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	2180      	movs	r1, #128	@ 0x80
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f8df 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e03a      	b.n	80058d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005870:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	3302      	adds	r3, #2
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	e007      	b.n	800588a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	781a      	ldrb	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	3301      	adds	r3, #1
 8005888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1cb      	bne.n	800583a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2200      	movs	r2, #0
 80058aa:	2140      	movs	r1, #64	@ 0x40
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f8ab 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e006      	b.n	80058d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e000      	b.n	80058d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058d0:	2302      	movs	r3, #2
  }
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b08a      	sub	sp, #40	@ 0x28
 80058de:	af02      	add	r7, sp, #8
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	603b      	str	r3, [r7, #0]
 80058e6:	4613      	mov	r3, r2
 80058e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	f040 8081 	bne.w	80059fe <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_UART_Receive+0x2e>
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e079      	b.n	8005a00 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2222      	movs	r2, #34	@ 0x22
 8005916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005920:	f7fd f91a 	bl	8002b58 <HAL_GetTick>
 8005924:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	88fa      	ldrh	r2, [r7, #6]
 800592a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	88fa      	ldrh	r2, [r7, #6]
 8005930:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800593a:	d108      	bne.n	800594e <HAL_UART_Receive+0x74>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d104      	bne.n	800594e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	e003      	b.n	8005956 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005956:	e047      	b.n	80059e8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	2120      	movs	r1, #32
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f850 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e042      	b.n	8005a00 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10c      	bne.n	800599a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598c:	b29a      	uxth	r2, r3
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	3302      	adds	r3, #2
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	e01f      	b.n	80059da <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059a2:	d007      	beq.n	80059b4 <HAL_UART_Receive+0xda>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <HAL_UART_Receive+0xe8>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e008      	b.n	80059d4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	3301      	adds	r3, #1
 80059d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1b2      	bne.n	8005958 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e000      	b.n	8005a00 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80059fe:	2302      	movs	r3, #2
  }
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3720      	adds	r7, #32
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a18:	e03b      	b.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d037      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fd f899 	bl	8002b58 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	6a3a      	ldr	r2, [r7, #32]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e03a      	b.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d023      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b80      	cmp	r3, #128	@ 0x80
 8005a4e:	d020      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b40      	cmp	r3, #64	@ 0x40
 8005a54:	d01d      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d116      	bne.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f81d 	bl	8005aba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2208      	movs	r2, #8
 8005a84:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e00f      	b.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	bf0c      	ite	eq
 8005aa2:	2301      	moveq	r3, #1
 8005aa4:	2300      	movne	r3, #0
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d0b4      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b095      	sub	sp, #84	@ 0x54
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	330c      	adds	r3, #12
 8005ae0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ae2:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ae8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e5      	bne.n	8005ac2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3314      	adds	r3, #20
 8005afc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3314      	adds	r3, #20
 8005b14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e5      	bne.n	8005af6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d119      	bne.n	8005b66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f023 0310 	bic.w	r3, r3, #16
 8005b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	330c      	adds	r3, #12
 8005b50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b52:	61ba      	str	r2, [r7, #24]
 8005b54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6979      	ldr	r1, [r7, #20]
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e5      	bne.n	8005b32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b74:	bf00      	nop
 8005b76:	3754      	adds	r7, #84	@ 0x54
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b84:	b0c0      	sub	sp, #256	@ 0x100
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9c:	68d9      	ldr	r1, [r3, #12]
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	ea40 0301 	orr.w	r3, r0, r1
 8005ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005bd8:	f021 010c 	bic.w	r1, r1, #12
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005be6:	430b      	orrs	r3, r1
 8005be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	6999      	ldr	r1, [r3, #24]
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	ea40 0301 	orr.w	r3, r0, r1
 8005c06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b8f      	ldr	r3, [pc, #572]	@ (8005e4c <UART_SetConfig+0x2cc>)
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d005      	beq.n	8005c20 <UART_SetConfig+0xa0>
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8005e50 <UART_SetConfig+0x2d0>)
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d104      	bne.n	8005c2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c20:	f7fd ff88 	bl	8003b34 <HAL_RCC_GetPCLK2Freq>
 8005c24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c28:	e003      	b.n	8005c32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c2a:	f7fd ff6f 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8005c2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c3c:	f040 810c 	bne.w	8005e58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c44:	2200      	movs	r2, #0
 8005c46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c52:	4622      	mov	r2, r4
 8005c54:	462b      	mov	r3, r5
 8005c56:	1891      	adds	r1, r2, r2
 8005c58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c5a:	415b      	adcs	r3, r3
 8005c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c62:	4621      	mov	r1, r4
 8005c64:	eb12 0801 	adds.w	r8, r2, r1
 8005c68:	4629      	mov	r1, r5
 8005c6a:	eb43 0901 	adc.w	r9, r3, r1
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	f04f 0300 	mov.w	r3, #0
 8005c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c82:	4690      	mov	r8, r2
 8005c84:	4699      	mov	r9, r3
 8005c86:	4623      	mov	r3, r4
 8005c88:	eb18 0303 	adds.w	r3, r8, r3
 8005c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c90:	462b      	mov	r3, r5
 8005c92:	eb49 0303 	adc.w	r3, r9, r3
 8005c96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cae:	460b      	mov	r3, r1
 8005cb0:	18db      	adds	r3, r3, r3
 8005cb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	eb42 0303 	adc.w	r3, r2, r3
 8005cba:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cc4:	f7fb f810 	bl	8000ce8 <__aeabi_uldivmod>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4b61      	ldr	r3, [pc, #388]	@ (8005e54 <UART_SetConfig+0x2d4>)
 8005cce:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	011c      	lsls	r4, r3, #4
 8005cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ce0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ce4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ce8:	4642      	mov	r2, r8
 8005cea:	464b      	mov	r3, r9
 8005cec:	1891      	adds	r1, r2, r2
 8005cee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005cf0:	415b      	adcs	r3, r3
 8005cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	eb12 0a01 	adds.w	sl, r2, r1
 8005cfe:	4649      	mov	r1, r9
 8005d00:	eb43 0b01 	adc.w	fp, r3, r1
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d18:	4692      	mov	sl, r2
 8005d1a:	469b      	mov	fp, r3
 8005d1c:	4643      	mov	r3, r8
 8005d1e:	eb1a 0303 	adds.w	r3, sl, r3
 8005d22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d26:	464b      	mov	r3, r9
 8005d28:	eb4b 0303 	adc.w	r3, fp, r3
 8005d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d44:	460b      	mov	r3, r1
 8005d46:	18db      	adds	r3, r3, r3
 8005d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	eb42 0303 	adc.w	r3, r2, r3
 8005d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d5a:	f7fa ffc5 	bl	8000ce8 <__aeabi_uldivmod>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	4611      	mov	r1, r2
 8005d64:	4b3b      	ldr	r3, [pc, #236]	@ (8005e54 <UART_SetConfig+0x2d4>)
 8005d66:	fba3 2301 	umull	r2, r3, r3, r1
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2264      	movs	r2, #100	@ 0x64
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
 8005d72:	1acb      	subs	r3, r1, r3
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d7a:	4b36      	ldr	r3, [pc, #216]	@ (8005e54 <UART_SetConfig+0x2d4>)
 8005d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d88:	441c      	add	r4, r3
 8005d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	464b      	mov	r3, r9
 8005da0:	1891      	adds	r1, r2, r2
 8005da2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005da4:	415b      	adcs	r3, r3
 8005da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005dac:	4641      	mov	r1, r8
 8005dae:	1851      	adds	r1, r2, r1
 8005db0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005db2:	4649      	mov	r1, r9
 8005db4:	414b      	adcs	r3, r1
 8005db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	00cb      	lsls	r3, r1, #3
 8005dc8:	4651      	mov	r1, sl
 8005dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dce:	4651      	mov	r1, sl
 8005dd0:	00ca      	lsls	r2, r1, #3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4642      	mov	r2, r8
 8005dda:	189b      	adds	r3, r3, r2
 8005ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005de0:	464b      	mov	r3, r9
 8005de2:	460a      	mov	r2, r1
 8005de4:	eb42 0303 	adc.w	r3, r2, r3
 8005de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005df8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e00:	460b      	mov	r3, r1
 8005e02:	18db      	adds	r3, r3, r3
 8005e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e06:	4613      	mov	r3, r2
 8005e08:	eb42 0303 	adc.w	r3, r2, r3
 8005e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e16:	f7fa ff67 	bl	8000ce8 <__aeabi_uldivmod>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <UART_SetConfig+0x2d4>)
 8005e20:	fba3 1302 	umull	r1, r3, r3, r2
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	2164      	movs	r1, #100	@ 0x64
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	3332      	adds	r3, #50	@ 0x32
 8005e32:	4a08      	ldr	r2, [pc, #32]	@ (8005e54 <UART_SetConfig+0x2d4>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	f003 0207 	and.w	r2, r3, #7
 8005e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4422      	add	r2, r4
 8005e46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e48:	e106      	b.n	8006058 <UART_SetConfig+0x4d8>
 8005e4a:	bf00      	nop
 8005e4c:	40011000 	.word	0x40011000
 8005e50:	40011400 	.word	0x40011400
 8005e54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e6a:	4642      	mov	r2, r8
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	1891      	adds	r1, r2, r2
 8005e70:	6239      	str	r1, [r7, #32]
 8005e72:	415b      	adcs	r3, r3
 8005e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	1854      	adds	r4, r2, r1
 8005e7e:	4649      	mov	r1, r9
 8005e80:	eb43 0501 	adc.w	r5, r3, r1
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	00eb      	lsls	r3, r5, #3
 8005e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e92:	00e2      	lsls	r2, r4, #3
 8005e94:	4614      	mov	r4, r2
 8005e96:	461d      	mov	r5, r3
 8005e98:	4643      	mov	r3, r8
 8005e9a:	18e3      	adds	r3, r4, r3
 8005e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	eb45 0303 	adc.w	r3, r5, r3
 8005ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005eb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	008b      	lsls	r3, r1, #2
 8005eca:	4621      	mov	r1, r4
 8005ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	008a      	lsls	r2, r1, #2
 8005ed4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ed8:	f7fa ff06 	bl	8000ce8 <__aeabi_uldivmod>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4b60      	ldr	r3, [pc, #384]	@ (8006064 <UART_SetConfig+0x4e4>)
 8005ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	011c      	lsls	r4, r3, #4
 8005eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ef4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ef8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005efc:	4642      	mov	r2, r8
 8005efe:	464b      	mov	r3, r9
 8005f00:	1891      	adds	r1, r2, r2
 8005f02:	61b9      	str	r1, [r7, #24]
 8005f04:	415b      	adcs	r3, r3
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f0c:	4641      	mov	r1, r8
 8005f0e:	1851      	adds	r1, r2, r1
 8005f10:	6139      	str	r1, [r7, #16]
 8005f12:	4649      	mov	r1, r9
 8005f14:	414b      	adcs	r3, r1
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f24:	4659      	mov	r1, fp
 8005f26:	00cb      	lsls	r3, r1, #3
 8005f28:	4651      	mov	r1, sl
 8005f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f2e:	4651      	mov	r1, sl
 8005f30:	00ca      	lsls	r2, r1, #3
 8005f32:	4610      	mov	r0, r2
 8005f34:	4619      	mov	r1, r3
 8005f36:	4603      	mov	r3, r0
 8005f38:	4642      	mov	r2, r8
 8005f3a:	189b      	adds	r3, r3, r2
 8005f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f40:	464b      	mov	r3, r9
 8005f42:	460a      	mov	r2, r1
 8005f44:	eb42 0303 	adc.w	r3, r2, r3
 8005f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f64:	4649      	mov	r1, r9
 8005f66:	008b      	lsls	r3, r1, #2
 8005f68:	4641      	mov	r1, r8
 8005f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f6e:	4641      	mov	r1, r8
 8005f70:	008a      	lsls	r2, r1, #2
 8005f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f76:	f7fa feb7 	bl	8000ce8 <__aeabi_uldivmod>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4b38      	ldr	r3, [pc, #224]	@ (8006064 <UART_SetConfig+0x4e4>)
 8005f82:	fba3 2301 	umull	r2, r3, r3, r1
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	2264      	movs	r2, #100	@ 0x64
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	1acb      	subs	r3, r1, r3
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	3332      	adds	r3, #50	@ 0x32
 8005f94:	4a33      	ldr	r2, [pc, #204]	@ (8006064 <UART_SetConfig+0x4e4>)
 8005f96:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fa0:	441c      	add	r4, r3
 8005fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005faa:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	1891      	adds	r1, r2, r2
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	415b      	adcs	r3, r3
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fc0:	4641      	mov	r1, r8
 8005fc2:	1851      	adds	r1, r2, r1
 8005fc4:	6039      	str	r1, [r7, #0]
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	414b      	adcs	r3, r1
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fd8:	4659      	mov	r1, fp
 8005fda:	00cb      	lsls	r3, r1, #3
 8005fdc:	4651      	mov	r1, sl
 8005fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fe2:	4651      	mov	r1, sl
 8005fe4:	00ca      	lsls	r2, r1, #3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4603      	mov	r3, r0
 8005fec:	4642      	mov	r2, r8
 8005fee:	189b      	adds	r3, r3, r2
 8005ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	460a      	mov	r2, r1
 8005ff6:	eb42 0303 	adc.w	r3, r2, r3
 8005ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	663b      	str	r3, [r7, #96]	@ 0x60
 8006006:	667a      	str	r2, [r7, #100]	@ 0x64
 8006008:	f04f 0200 	mov.w	r2, #0
 800600c:	f04f 0300 	mov.w	r3, #0
 8006010:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006014:	4649      	mov	r1, r9
 8006016:	008b      	lsls	r3, r1, #2
 8006018:	4641      	mov	r1, r8
 800601a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800601e:	4641      	mov	r1, r8
 8006020:	008a      	lsls	r2, r1, #2
 8006022:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006026:	f7fa fe5f 	bl	8000ce8 <__aeabi_uldivmod>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4b0d      	ldr	r3, [pc, #52]	@ (8006064 <UART_SetConfig+0x4e4>)
 8006030:	fba3 1302 	umull	r1, r3, r3, r2
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	2164      	movs	r1, #100	@ 0x64
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	3332      	adds	r3, #50	@ 0x32
 8006042:	4a08      	ldr	r2, [pc, #32]	@ (8006064 <UART_SetConfig+0x4e4>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	f003 020f 	and.w	r2, r3, #15
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4422      	add	r2, r4
 8006056:	609a      	str	r2, [r3, #8]
}
 8006058:	bf00      	nop
 800605a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800605e:	46bd      	mov	sp, r7
 8006060:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006064:	51eb851f 	.word	0x51eb851f

08006068 <pow>:
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	ed2d 8b02 	vpush	{d8}
 800606e:	eeb0 8a40 	vmov.f32	s16, s0
 8006072:	eef0 8a60 	vmov.f32	s17, s1
 8006076:	ec55 4b11 	vmov	r4, r5, d1
 800607a:	f000 f871 	bl	8006160 <__ieee754_pow>
 800607e:	4622      	mov	r2, r4
 8006080:	462b      	mov	r3, r5
 8006082:	4620      	mov	r0, r4
 8006084:	4629      	mov	r1, r5
 8006086:	ec57 6b10 	vmov	r6, r7, d0
 800608a:	f7fa fd7f 	bl	8000b8c <__aeabi_dcmpun>
 800608e:	2800      	cmp	r0, #0
 8006090:	d13b      	bne.n	800610a <pow+0xa2>
 8006092:	ec51 0b18 	vmov	r0, r1, d8
 8006096:	2200      	movs	r2, #0
 8006098:	2300      	movs	r3, #0
 800609a:	f7fa fd45 	bl	8000b28 <__aeabi_dcmpeq>
 800609e:	b1b8      	cbz	r0, 80060d0 <pow+0x68>
 80060a0:	2200      	movs	r2, #0
 80060a2:	2300      	movs	r3, #0
 80060a4:	4620      	mov	r0, r4
 80060a6:	4629      	mov	r1, r5
 80060a8:	f7fa fd3e 	bl	8000b28 <__aeabi_dcmpeq>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d146      	bne.n	800613e <pow+0xd6>
 80060b0:	ec45 4b10 	vmov	d0, r4, r5
 80060b4:	f000 f848 	bl	8006148 <finite>
 80060b8:	b338      	cbz	r0, 800610a <pow+0xa2>
 80060ba:	2200      	movs	r2, #0
 80060bc:	2300      	movs	r3, #0
 80060be:	4620      	mov	r0, r4
 80060c0:	4629      	mov	r1, r5
 80060c2:	f7fa fd3b 	bl	8000b3c <__aeabi_dcmplt>
 80060c6:	b300      	cbz	r0, 800610a <pow+0xa2>
 80060c8:	f002 f898 	bl	80081fc <__errno>
 80060cc:	2322      	movs	r3, #34	@ 0x22
 80060ce:	e01b      	b.n	8006108 <pow+0xa0>
 80060d0:	ec47 6b10 	vmov	d0, r6, r7
 80060d4:	f000 f838 	bl	8006148 <finite>
 80060d8:	b9e0      	cbnz	r0, 8006114 <pow+0xac>
 80060da:	eeb0 0a48 	vmov.f32	s0, s16
 80060de:	eef0 0a68 	vmov.f32	s1, s17
 80060e2:	f000 f831 	bl	8006148 <finite>
 80060e6:	b1a8      	cbz	r0, 8006114 <pow+0xac>
 80060e8:	ec45 4b10 	vmov	d0, r4, r5
 80060ec:	f000 f82c 	bl	8006148 <finite>
 80060f0:	b180      	cbz	r0, 8006114 <pow+0xac>
 80060f2:	4632      	mov	r2, r6
 80060f4:	463b      	mov	r3, r7
 80060f6:	4630      	mov	r0, r6
 80060f8:	4639      	mov	r1, r7
 80060fa:	f7fa fd47 	bl	8000b8c <__aeabi_dcmpun>
 80060fe:	2800      	cmp	r0, #0
 8006100:	d0e2      	beq.n	80060c8 <pow+0x60>
 8006102:	f002 f87b 	bl	80081fc <__errno>
 8006106:	2321      	movs	r3, #33	@ 0x21
 8006108:	6003      	str	r3, [r0, #0]
 800610a:	ecbd 8b02 	vpop	{d8}
 800610e:	ec47 6b10 	vmov	d0, r6, r7
 8006112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006114:	2200      	movs	r2, #0
 8006116:	2300      	movs	r3, #0
 8006118:	4630      	mov	r0, r6
 800611a:	4639      	mov	r1, r7
 800611c:	f7fa fd04 	bl	8000b28 <__aeabi_dcmpeq>
 8006120:	2800      	cmp	r0, #0
 8006122:	d0f2      	beq.n	800610a <pow+0xa2>
 8006124:	eeb0 0a48 	vmov.f32	s0, s16
 8006128:	eef0 0a68 	vmov.f32	s1, s17
 800612c:	f000 f80c 	bl	8006148 <finite>
 8006130:	2800      	cmp	r0, #0
 8006132:	d0ea      	beq.n	800610a <pow+0xa2>
 8006134:	ec45 4b10 	vmov	d0, r4, r5
 8006138:	f000 f806 	bl	8006148 <finite>
 800613c:	e7c3      	b.n	80060c6 <pow+0x5e>
 800613e:	4f01      	ldr	r7, [pc, #4]	@ (8006144 <pow+0xdc>)
 8006140:	2600      	movs	r6, #0
 8006142:	e7e2      	b.n	800610a <pow+0xa2>
 8006144:	3ff00000 	.word	0x3ff00000

08006148 <finite>:
 8006148:	b082      	sub	sp, #8
 800614a:	ed8d 0b00 	vstr	d0, [sp]
 800614e:	9801      	ldr	r0, [sp, #4]
 8006150:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006154:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006158:	0fc0      	lsrs	r0, r0, #31
 800615a:	b002      	add	sp, #8
 800615c:	4770      	bx	lr
	...

08006160 <__ieee754_pow>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	b091      	sub	sp, #68	@ 0x44
 8006166:	ed8d 1b00 	vstr	d1, [sp]
 800616a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800616e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006172:	ea5a 0001 	orrs.w	r0, sl, r1
 8006176:	ec57 6b10 	vmov	r6, r7, d0
 800617a:	d113      	bne.n	80061a4 <__ieee754_pow+0x44>
 800617c:	19b3      	adds	r3, r6, r6
 800617e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006182:	4152      	adcs	r2, r2
 8006184:	4298      	cmp	r0, r3
 8006186:	4b9a      	ldr	r3, [pc, #616]	@ (80063f0 <__ieee754_pow+0x290>)
 8006188:	4193      	sbcs	r3, r2
 800618a:	f080 84ee 	bcs.w	8006b6a <__ieee754_pow+0xa0a>
 800618e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006192:	4630      	mov	r0, r6
 8006194:	4639      	mov	r1, r7
 8006196:	f7fa f8a9 	bl	80002ec <__adddf3>
 800619a:	ec41 0b10 	vmov	d0, r0, r1
 800619e:	b011      	add	sp, #68	@ 0x44
 80061a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	4a93      	ldr	r2, [pc, #588]	@ (80063f4 <__ieee754_pow+0x294>)
 80061a6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80061aa:	4295      	cmp	r5, r2
 80061ac:	46b8      	mov	r8, r7
 80061ae:	4633      	mov	r3, r6
 80061b0:	d80a      	bhi.n	80061c8 <__ieee754_pow+0x68>
 80061b2:	d104      	bne.n	80061be <__ieee754_pow+0x5e>
 80061b4:	2e00      	cmp	r6, #0
 80061b6:	d1ea      	bne.n	800618e <__ieee754_pow+0x2e>
 80061b8:	45aa      	cmp	sl, r5
 80061ba:	d8e8      	bhi.n	800618e <__ieee754_pow+0x2e>
 80061bc:	e001      	b.n	80061c2 <__ieee754_pow+0x62>
 80061be:	4592      	cmp	sl, r2
 80061c0:	d802      	bhi.n	80061c8 <__ieee754_pow+0x68>
 80061c2:	4592      	cmp	sl, r2
 80061c4:	d10f      	bne.n	80061e6 <__ieee754_pow+0x86>
 80061c6:	b171      	cbz	r1, 80061e6 <__ieee754_pow+0x86>
 80061c8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80061cc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80061d0:	ea58 0803 	orrs.w	r8, r8, r3
 80061d4:	d1db      	bne.n	800618e <__ieee754_pow+0x2e>
 80061d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80061da:	18db      	adds	r3, r3, r3
 80061dc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80061e0:	4152      	adcs	r2, r2
 80061e2:	4598      	cmp	r8, r3
 80061e4:	e7cf      	b.n	8006186 <__ieee754_pow+0x26>
 80061e6:	f1b8 0f00 	cmp.w	r8, #0
 80061ea:	46ab      	mov	fp, r5
 80061ec:	da43      	bge.n	8006276 <__ieee754_pow+0x116>
 80061ee:	4a82      	ldr	r2, [pc, #520]	@ (80063f8 <__ieee754_pow+0x298>)
 80061f0:	4592      	cmp	sl, r2
 80061f2:	d856      	bhi.n	80062a2 <__ieee754_pow+0x142>
 80061f4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80061f8:	4592      	cmp	sl, r2
 80061fa:	f240 84c5 	bls.w	8006b88 <__ieee754_pow+0xa28>
 80061fe:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006202:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006206:	2a14      	cmp	r2, #20
 8006208:	dd18      	ble.n	800623c <__ieee754_pow+0xdc>
 800620a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800620e:	fa21 f402 	lsr.w	r4, r1, r2
 8006212:	fa04 f202 	lsl.w	r2, r4, r2
 8006216:	428a      	cmp	r2, r1
 8006218:	f040 84b6 	bne.w	8006b88 <__ieee754_pow+0xa28>
 800621c:	f004 0401 	and.w	r4, r4, #1
 8006220:	f1c4 0402 	rsb	r4, r4, #2
 8006224:	2900      	cmp	r1, #0
 8006226:	d159      	bne.n	80062dc <__ieee754_pow+0x17c>
 8006228:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800622c:	d148      	bne.n	80062c0 <__ieee754_pow+0x160>
 800622e:	4632      	mov	r2, r6
 8006230:	463b      	mov	r3, r7
 8006232:	4630      	mov	r0, r6
 8006234:	4639      	mov	r1, r7
 8006236:	f7fa fa0f 	bl	8000658 <__aeabi_dmul>
 800623a:	e7ae      	b.n	800619a <__ieee754_pow+0x3a>
 800623c:	2900      	cmp	r1, #0
 800623e:	d14c      	bne.n	80062da <__ieee754_pow+0x17a>
 8006240:	f1c2 0214 	rsb	r2, r2, #20
 8006244:	fa4a f402 	asr.w	r4, sl, r2
 8006248:	fa04 f202 	lsl.w	r2, r4, r2
 800624c:	4552      	cmp	r2, sl
 800624e:	f040 8498 	bne.w	8006b82 <__ieee754_pow+0xa22>
 8006252:	f004 0401 	and.w	r4, r4, #1
 8006256:	f1c4 0402 	rsb	r4, r4, #2
 800625a:	4a68      	ldr	r2, [pc, #416]	@ (80063fc <__ieee754_pow+0x29c>)
 800625c:	4592      	cmp	sl, r2
 800625e:	d1e3      	bne.n	8006228 <__ieee754_pow+0xc8>
 8006260:	f1b9 0f00 	cmp.w	r9, #0
 8006264:	f280 8489 	bge.w	8006b7a <__ieee754_pow+0xa1a>
 8006268:	4964      	ldr	r1, [pc, #400]	@ (80063fc <__ieee754_pow+0x29c>)
 800626a:	4632      	mov	r2, r6
 800626c:	463b      	mov	r3, r7
 800626e:	2000      	movs	r0, #0
 8006270:	f7fa fb1c 	bl	80008ac <__aeabi_ddiv>
 8006274:	e791      	b.n	800619a <__ieee754_pow+0x3a>
 8006276:	2400      	movs	r4, #0
 8006278:	bb81      	cbnz	r1, 80062dc <__ieee754_pow+0x17c>
 800627a:	4a5e      	ldr	r2, [pc, #376]	@ (80063f4 <__ieee754_pow+0x294>)
 800627c:	4592      	cmp	sl, r2
 800627e:	d1ec      	bne.n	800625a <__ieee754_pow+0xfa>
 8006280:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8006284:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006288:	431a      	orrs	r2, r3
 800628a:	f000 846e 	beq.w	8006b6a <__ieee754_pow+0xa0a>
 800628e:	4b5c      	ldr	r3, [pc, #368]	@ (8006400 <__ieee754_pow+0x2a0>)
 8006290:	429d      	cmp	r5, r3
 8006292:	d908      	bls.n	80062a6 <__ieee754_pow+0x146>
 8006294:	f1b9 0f00 	cmp.w	r9, #0
 8006298:	f280 846b 	bge.w	8006b72 <__ieee754_pow+0xa12>
 800629c:	2000      	movs	r0, #0
 800629e:	2100      	movs	r1, #0
 80062a0:	e77b      	b.n	800619a <__ieee754_pow+0x3a>
 80062a2:	2402      	movs	r4, #2
 80062a4:	e7e8      	b.n	8006278 <__ieee754_pow+0x118>
 80062a6:	f1b9 0f00 	cmp.w	r9, #0
 80062aa:	f04f 0000 	mov.w	r0, #0
 80062ae:	f04f 0100 	mov.w	r1, #0
 80062b2:	f6bf af72 	bge.w	800619a <__ieee754_pow+0x3a>
 80062b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80062ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80062be:	e76c      	b.n	800619a <__ieee754_pow+0x3a>
 80062c0:	4a50      	ldr	r2, [pc, #320]	@ (8006404 <__ieee754_pow+0x2a4>)
 80062c2:	4591      	cmp	r9, r2
 80062c4:	d10a      	bne.n	80062dc <__ieee754_pow+0x17c>
 80062c6:	f1b8 0f00 	cmp.w	r8, #0
 80062ca:	db07      	blt.n	80062dc <__ieee754_pow+0x17c>
 80062cc:	ec47 6b10 	vmov	d0, r6, r7
 80062d0:	b011      	add	sp, #68	@ 0x44
 80062d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d6:	f000 bd4f 	b.w	8006d78 <__ieee754_sqrt>
 80062da:	2400      	movs	r4, #0
 80062dc:	ec47 6b10 	vmov	d0, r6, r7
 80062e0:	9302      	str	r3, [sp, #8]
 80062e2:	f000 fc87 	bl	8006bf4 <fabs>
 80062e6:	9b02      	ldr	r3, [sp, #8]
 80062e8:	ec51 0b10 	vmov	r0, r1, d0
 80062ec:	bb43      	cbnz	r3, 8006340 <__ieee754_pow+0x1e0>
 80062ee:	4b43      	ldr	r3, [pc, #268]	@ (80063fc <__ieee754_pow+0x29c>)
 80062f0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d000      	beq.n	80062fa <__ieee754_pow+0x19a>
 80062f8:	bb15      	cbnz	r5, 8006340 <__ieee754_pow+0x1e0>
 80062fa:	f1b9 0f00 	cmp.w	r9, #0
 80062fe:	da05      	bge.n	800630c <__ieee754_pow+0x1ac>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	2000      	movs	r0, #0
 8006306:	493d      	ldr	r1, [pc, #244]	@ (80063fc <__ieee754_pow+0x29c>)
 8006308:	f7fa fad0 	bl	80008ac <__aeabi_ddiv>
 800630c:	f1b8 0f00 	cmp.w	r8, #0
 8006310:	f6bf af43 	bge.w	800619a <__ieee754_pow+0x3a>
 8006314:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006318:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800631c:	4325      	orrs	r5, r4
 800631e:	d108      	bne.n	8006332 <__ieee754_pow+0x1d2>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4610      	mov	r0, r2
 8006326:	4619      	mov	r1, r3
 8006328:	f7f9 ffde 	bl	80002e8 <__aeabi_dsub>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	e79e      	b.n	8006270 <__ieee754_pow+0x110>
 8006332:	2c01      	cmp	r4, #1
 8006334:	f47f af31 	bne.w	800619a <__ieee754_pow+0x3a>
 8006338:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800633c:	4619      	mov	r1, r3
 800633e:	e72c      	b.n	800619a <__ieee754_pow+0x3a>
 8006340:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8006344:	3b01      	subs	r3, #1
 8006346:	ea53 0204 	orrs.w	r2, r3, r4
 800634a:	d102      	bne.n	8006352 <__ieee754_pow+0x1f2>
 800634c:	4632      	mov	r2, r6
 800634e:	463b      	mov	r3, r7
 8006350:	e7e8      	b.n	8006324 <__ieee754_pow+0x1c4>
 8006352:	3c01      	subs	r4, #1
 8006354:	431c      	orrs	r4, r3
 8006356:	d016      	beq.n	8006386 <__ieee754_pow+0x226>
 8006358:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80063e0 <__ieee754_pow+0x280>
 800635c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006360:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006364:	f240 8110 	bls.w	8006588 <__ieee754_pow+0x428>
 8006368:	4b27      	ldr	r3, [pc, #156]	@ (8006408 <__ieee754_pow+0x2a8>)
 800636a:	459a      	cmp	sl, r3
 800636c:	4b24      	ldr	r3, [pc, #144]	@ (8006400 <__ieee754_pow+0x2a0>)
 800636e:	d916      	bls.n	800639e <__ieee754_pow+0x23e>
 8006370:	429d      	cmp	r5, r3
 8006372:	d80b      	bhi.n	800638c <__ieee754_pow+0x22c>
 8006374:	f1b9 0f00 	cmp.w	r9, #0
 8006378:	da0b      	bge.n	8006392 <__ieee754_pow+0x232>
 800637a:	2000      	movs	r0, #0
 800637c:	b011      	add	sp, #68	@ 0x44
 800637e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006382:	f000 bcf1 	b.w	8006d68 <__math_oflow>
 8006386:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80063e8 <__ieee754_pow+0x288>
 800638a:	e7e7      	b.n	800635c <__ieee754_pow+0x1fc>
 800638c:	f1b9 0f00 	cmp.w	r9, #0
 8006390:	dcf3      	bgt.n	800637a <__ieee754_pow+0x21a>
 8006392:	2000      	movs	r0, #0
 8006394:	b011      	add	sp, #68	@ 0x44
 8006396:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	f000 bcdd 	b.w	8006d58 <__math_uflow>
 800639e:	429d      	cmp	r5, r3
 80063a0:	d20c      	bcs.n	80063bc <__ieee754_pow+0x25c>
 80063a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063a6:	2200      	movs	r2, #0
 80063a8:	2300      	movs	r3, #0
 80063aa:	f7fa fbc7 	bl	8000b3c <__aeabi_dcmplt>
 80063ae:	3800      	subs	r0, #0
 80063b0:	bf18      	it	ne
 80063b2:	2001      	movne	r0, #1
 80063b4:	f1b9 0f00 	cmp.w	r9, #0
 80063b8:	daec      	bge.n	8006394 <__ieee754_pow+0x234>
 80063ba:	e7df      	b.n	800637c <__ieee754_pow+0x21c>
 80063bc:	4b0f      	ldr	r3, [pc, #60]	@ (80063fc <__ieee754_pow+0x29c>)
 80063be:	429d      	cmp	r5, r3
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	d922      	bls.n	800640c <__ieee754_pow+0x2ac>
 80063c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ca:	2300      	movs	r3, #0
 80063cc:	f7fa fbb6 	bl	8000b3c <__aeabi_dcmplt>
 80063d0:	3800      	subs	r0, #0
 80063d2:	bf18      	it	ne
 80063d4:	2001      	movne	r0, #1
 80063d6:	f1b9 0f00 	cmp.w	r9, #0
 80063da:	dccf      	bgt.n	800637c <__ieee754_pow+0x21c>
 80063dc:	e7da      	b.n	8006394 <__ieee754_pow+0x234>
 80063de:	bf00      	nop
 80063e0:	00000000 	.word	0x00000000
 80063e4:	3ff00000 	.word	0x3ff00000
 80063e8:	00000000 	.word	0x00000000
 80063ec:	bff00000 	.word	0xbff00000
 80063f0:	fff00000 	.word	0xfff00000
 80063f4:	7ff00000 	.word	0x7ff00000
 80063f8:	433fffff 	.word	0x433fffff
 80063fc:	3ff00000 	.word	0x3ff00000
 8006400:	3fefffff 	.word	0x3fefffff
 8006404:	3fe00000 	.word	0x3fe00000
 8006408:	43f00000 	.word	0x43f00000
 800640c:	4b5a      	ldr	r3, [pc, #360]	@ (8006578 <__ieee754_pow+0x418>)
 800640e:	f7f9 ff6b 	bl	80002e8 <__aeabi_dsub>
 8006412:	a351      	add	r3, pc, #324	@ (adr r3, 8006558 <__ieee754_pow+0x3f8>)
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	4604      	mov	r4, r0
 800641a:	460d      	mov	r5, r1
 800641c:	f7fa f91c 	bl	8000658 <__aeabi_dmul>
 8006420:	a34f      	add	r3, pc, #316	@ (adr r3, 8006560 <__ieee754_pow+0x400>)
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	4606      	mov	r6, r0
 8006428:	460f      	mov	r7, r1
 800642a:	4620      	mov	r0, r4
 800642c:	4629      	mov	r1, r5
 800642e:	f7fa f913 	bl	8000658 <__aeabi_dmul>
 8006432:	4b52      	ldr	r3, [pc, #328]	@ (800657c <__ieee754_pow+0x41c>)
 8006434:	4682      	mov	sl, r0
 8006436:	468b      	mov	fp, r1
 8006438:	2200      	movs	r2, #0
 800643a:	4620      	mov	r0, r4
 800643c:	4629      	mov	r1, r5
 800643e:	f7fa f90b 	bl	8000658 <__aeabi_dmul>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	a148      	add	r1, pc, #288	@ (adr r1, 8006568 <__ieee754_pow+0x408>)
 8006448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800644c:	f7f9 ff4c 	bl	80002e8 <__aeabi_dsub>
 8006450:	4622      	mov	r2, r4
 8006452:	462b      	mov	r3, r5
 8006454:	f7fa f900 	bl	8000658 <__aeabi_dmul>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	2000      	movs	r0, #0
 800645e:	4948      	ldr	r1, [pc, #288]	@ (8006580 <__ieee754_pow+0x420>)
 8006460:	f7f9 ff42 	bl	80002e8 <__aeabi_dsub>
 8006464:	4622      	mov	r2, r4
 8006466:	4680      	mov	r8, r0
 8006468:	4689      	mov	r9, r1
 800646a:	462b      	mov	r3, r5
 800646c:	4620      	mov	r0, r4
 800646e:	4629      	mov	r1, r5
 8006470:	f7fa f8f2 	bl	8000658 <__aeabi_dmul>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	f7fa f8ec 	bl	8000658 <__aeabi_dmul>
 8006480:	a33b      	add	r3, pc, #236	@ (adr r3, 8006570 <__ieee754_pow+0x410>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7fa f8e7 	bl	8000658 <__aeabi_dmul>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4650      	mov	r0, sl
 8006490:	4659      	mov	r1, fp
 8006492:	f7f9 ff29 	bl	80002e8 <__aeabi_dsub>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4680      	mov	r8, r0
 800649c:	4689      	mov	r9, r1
 800649e:	4630      	mov	r0, r6
 80064a0:	4639      	mov	r1, r7
 80064a2:	f7f9 ff23 	bl	80002ec <__adddf3>
 80064a6:	2400      	movs	r4, #0
 80064a8:	4632      	mov	r2, r6
 80064aa:	463b      	mov	r3, r7
 80064ac:	4620      	mov	r0, r4
 80064ae:	460d      	mov	r5, r1
 80064b0:	f7f9 ff1a 	bl	80002e8 <__aeabi_dsub>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4640      	mov	r0, r8
 80064ba:	4649      	mov	r1, r9
 80064bc:	f7f9 ff14 	bl	80002e8 <__aeabi_dsub>
 80064c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064c8:	2300      	movs	r3, #0
 80064ca:	9304      	str	r3, [sp, #16]
 80064cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80064d0:	4606      	mov	r6, r0
 80064d2:	460f      	mov	r7, r1
 80064d4:	465b      	mov	r3, fp
 80064d6:	4652      	mov	r2, sl
 80064d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064dc:	f7f9 ff04 	bl	80002e8 <__aeabi_dsub>
 80064e0:	4622      	mov	r2, r4
 80064e2:	462b      	mov	r3, r5
 80064e4:	f7fa f8b8 	bl	8000658 <__aeabi_dmul>
 80064e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064ec:	4680      	mov	r8, r0
 80064ee:	4689      	mov	r9, r1
 80064f0:	4630      	mov	r0, r6
 80064f2:	4639      	mov	r1, r7
 80064f4:	f7fa f8b0 	bl	8000658 <__aeabi_dmul>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4640      	mov	r0, r8
 80064fe:	4649      	mov	r1, r9
 8006500:	f7f9 fef4 	bl	80002ec <__adddf3>
 8006504:	465b      	mov	r3, fp
 8006506:	4606      	mov	r6, r0
 8006508:	460f      	mov	r7, r1
 800650a:	4652      	mov	r2, sl
 800650c:	4620      	mov	r0, r4
 800650e:	4629      	mov	r1, r5
 8006510:	f7fa f8a2 	bl	8000658 <__aeabi_dmul>
 8006514:	460b      	mov	r3, r1
 8006516:	4602      	mov	r2, r0
 8006518:	4680      	mov	r8, r0
 800651a:	4689      	mov	r9, r1
 800651c:	4630      	mov	r0, r6
 800651e:	4639      	mov	r1, r7
 8006520:	f7f9 fee4 	bl	80002ec <__adddf3>
 8006524:	4b17      	ldr	r3, [pc, #92]	@ (8006584 <__ieee754_pow+0x424>)
 8006526:	4299      	cmp	r1, r3
 8006528:	4604      	mov	r4, r0
 800652a:	460d      	mov	r5, r1
 800652c:	468b      	mov	fp, r1
 800652e:	f340 820b 	ble.w	8006948 <__ieee754_pow+0x7e8>
 8006532:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006536:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800653a:	4303      	orrs	r3, r0
 800653c:	f000 81ea 	beq.w	8006914 <__ieee754_pow+0x7b4>
 8006540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006544:	2200      	movs	r2, #0
 8006546:	2300      	movs	r3, #0
 8006548:	f7fa faf8 	bl	8000b3c <__aeabi_dcmplt>
 800654c:	3800      	subs	r0, #0
 800654e:	bf18      	it	ne
 8006550:	2001      	movne	r0, #1
 8006552:	e713      	b.n	800637c <__ieee754_pow+0x21c>
 8006554:	f3af 8000 	nop.w
 8006558:	60000000 	.word	0x60000000
 800655c:	3ff71547 	.word	0x3ff71547
 8006560:	f85ddf44 	.word	0xf85ddf44
 8006564:	3e54ae0b 	.word	0x3e54ae0b
 8006568:	55555555 	.word	0x55555555
 800656c:	3fd55555 	.word	0x3fd55555
 8006570:	652b82fe 	.word	0x652b82fe
 8006574:	3ff71547 	.word	0x3ff71547
 8006578:	3ff00000 	.word	0x3ff00000
 800657c:	3fd00000 	.word	0x3fd00000
 8006580:	3fe00000 	.word	0x3fe00000
 8006584:	408fffff 	.word	0x408fffff
 8006588:	4bd5      	ldr	r3, [pc, #852]	@ (80068e0 <__ieee754_pow+0x780>)
 800658a:	ea08 0303 	and.w	r3, r8, r3
 800658e:	2200      	movs	r2, #0
 8006590:	b92b      	cbnz	r3, 800659e <__ieee754_pow+0x43e>
 8006592:	4bd4      	ldr	r3, [pc, #848]	@ (80068e4 <__ieee754_pow+0x784>)
 8006594:	f7fa f860 	bl	8000658 <__aeabi_dmul>
 8006598:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800659c:	468b      	mov	fp, r1
 800659e:	ea4f 532b 	mov.w	r3, fp, asr #20
 80065a2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80065a6:	4413      	add	r3, r2
 80065a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065aa:	4bcf      	ldr	r3, [pc, #828]	@ (80068e8 <__ieee754_pow+0x788>)
 80065ac:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80065b0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80065b4:	459b      	cmp	fp, r3
 80065b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80065ba:	dd08      	ble.n	80065ce <__ieee754_pow+0x46e>
 80065bc:	4bcb      	ldr	r3, [pc, #812]	@ (80068ec <__ieee754_pow+0x78c>)
 80065be:	459b      	cmp	fp, r3
 80065c0:	f340 81a5 	ble.w	800690e <__ieee754_pow+0x7ae>
 80065c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065c6:	3301      	adds	r3, #1
 80065c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065ca:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80065ce:	f04f 0a00 	mov.w	sl, #0
 80065d2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80065d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065d8:	4bc5      	ldr	r3, [pc, #788]	@ (80068f0 <__ieee754_pow+0x790>)
 80065da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065de:	ed93 7b00 	vldr	d7, [r3]
 80065e2:	4629      	mov	r1, r5
 80065e4:	ec53 2b17 	vmov	r2, r3, d7
 80065e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80065ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80065f0:	f7f9 fe7a 	bl	80002e8 <__aeabi_dsub>
 80065f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065f8:	4606      	mov	r6, r0
 80065fa:	460f      	mov	r7, r1
 80065fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006600:	f7f9 fe74 	bl	80002ec <__adddf3>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	2000      	movs	r0, #0
 800660a:	49ba      	ldr	r1, [pc, #744]	@ (80068f4 <__ieee754_pow+0x794>)
 800660c:	f7fa f94e 	bl	80008ac <__aeabi_ddiv>
 8006610:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4630      	mov	r0, r6
 800661a:	4639      	mov	r1, r7
 800661c:	f7fa f81c 	bl	8000658 <__aeabi_dmul>
 8006620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006624:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8006628:	106d      	asrs	r5, r5, #1
 800662a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800662e:	f04f 0b00 	mov.w	fp, #0
 8006632:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006636:	4661      	mov	r1, ip
 8006638:	2200      	movs	r2, #0
 800663a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800663e:	4658      	mov	r0, fp
 8006640:	46e1      	mov	r9, ip
 8006642:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8006646:	4614      	mov	r4, r2
 8006648:	461d      	mov	r5, r3
 800664a:	f7fa f805 	bl	8000658 <__aeabi_dmul>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4630      	mov	r0, r6
 8006654:	4639      	mov	r1, r7
 8006656:	f7f9 fe47 	bl	80002e8 <__aeabi_dsub>
 800665a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800665e:	4606      	mov	r6, r0
 8006660:	460f      	mov	r7, r1
 8006662:	4620      	mov	r0, r4
 8006664:	4629      	mov	r1, r5
 8006666:	f7f9 fe3f 	bl	80002e8 <__aeabi_dsub>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006672:	f7f9 fe39 	bl	80002e8 <__aeabi_dsub>
 8006676:	465a      	mov	r2, fp
 8006678:	464b      	mov	r3, r9
 800667a:	f7f9 ffed 	bl	8000658 <__aeabi_dmul>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4630      	mov	r0, r6
 8006684:	4639      	mov	r1, r7
 8006686:	f7f9 fe2f 	bl	80002e8 <__aeabi_dsub>
 800668a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800668e:	f7f9 ffe3 	bl	8000658 <__aeabi_dmul>
 8006692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006696:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800669a:	4610      	mov	r0, r2
 800669c:	4619      	mov	r1, r3
 800669e:	f7f9 ffdb 	bl	8000658 <__aeabi_dmul>
 80066a2:	a37d      	add	r3, pc, #500	@ (adr r3, 8006898 <__ieee754_pow+0x738>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	4604      	mov	r4, r0
 80066aa:	460d      	mov	r5, r1
 80066ac:	f7f9 ffd4 	bl	8000658 <__aeabi_dmul>
 80066b0:	a37b      	add	r3, pc, #492	@ (adr r3, 80068a0 <__ieee754_pow+0x740>)
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f7f9 fe19 	bl	80002ec <__adddf3>
 80066ba:	4622      	mov	r2, r4
 80066bc:	462b      	mov	r3, r5
 80066be:	f7f9 ffcb 	bl	8000658 <__aeabi_dmul>
 80066c2:	a379      	add	r3, pc, #484	@ (adr r3, 80068a8 <__ieee754_pow+0x748>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 fe10 	bl	80002ec <__adddf3>
 80066cc:	4622      	mov	r2, r4
 80066ce:	462b      	mov	r3, r5
 80066d0:	f7f9 ffc2 	bl	8000658 <__aeabi_dmul>
 80066d4:	a376      	add	r3, pc, #472	@ (adr r3, 80068b0 <__ieee754_pow+0x750>)
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f7f9 fe07 	bl	80002ec <__adddf3>
 80066de:	4622      	mov	r2, r4
 80066e0:	462b      	mov	r3, r5
 80066e2:	f7f9 ffb9 	bl	8000658 <__aeabi_dmul>
 80066e6:	a374      	add	r3, pc, #464	@ (adr r3, 80068b8 <__ieee754_pow+0x758>)
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	f7f9 fdfe 	bl	80002ec <__adddf3>
 80066f0:	4622      	mov	r2, r4
 80066f2:	462b      	mov	r3, r5
 80066f4:	f7f9 ffb0 	bl	8000658 <__aeabi_dmul>
 80066f8:	a371      	add	r3, pc, #452	@ (adr r3, 80068c0 <__ieee754_pow+0x760>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f7f9 fdf5 	bl	80002ec <__adddf3>
 8006702:	4622      	mov	r2, r4
 8006704:	4606      	mov	r6, r0
 8006706:	460f      	mov	r7, r1
 8006708:	462b      	mov	r3, r5
 800670a:	4620      	mov	r0, r4
 800670c:	4629      	mov	r1, r5
 800670e:	f7f9 ffa3 	bl	8000658 <__aeabi_dmul>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4630      	mov	r0, r6
 8006718:	4639      	mov	r1, r7
 800671a:	f7f9 ff9d 	bl	8000658 <__aeabi_dmul>
 800671e:	465a      	mov	r2, fp
 8006720:	4604      	mov	r4, r0
 8006722:	460d      	mov	r5, r1
 8006724:	464b      	mov	r3, r9
 8006726:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800672a:	f7f9 fddf 	bl	80002ec <__adddf3>
 800672e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006732:	f7f9 ff91 	bl	8000658 <__aeabi_dmul>
 8006736:	4622      	mov	r2, r4
 8006738:	462b      	mov	r3, r5
 800673a:	f7f9 fdd7 	bl	80002ec <__adddf3>
 800673e:	465a      	mov	r2, fp
 8006740:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006744:	464b      	mov	r3, r9
 8006746:	4658      	mov	r0, fp
 8006748:	4649      	mov	r1, r9
 800674a:	f7f9 ff85 	bl	8000658 <__aeabi_dmul>
 800674e:	4b6a      	ldr	r3, [pc, #424]	@ (80068f8 <__ieee754_pow+0x798>)
 8006750:	2200      	movs	r2, #0
 8006752:	4606      	mov	r6, r0
 8006754:	460f      	mov	r7, r1
 8006756:	f7f9 fdc9 	bl	80002ec <__adddf3>
 800675a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800675e:	f7f9 fdc5 	bl	80002ec <__adddf3>
 8006762:	46d8      	mov	r8, fp
 8006764:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8006768:	460d      	mov	r5, r1
 800676a:	465a      	mov	r2, fp
 800676c:	460b      	mov	r3, r1
 800676e:	4640      	mov	r0, r8
 8006770:	4649      	mov	r1, r9
 8006772:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8006776:	f7f9 ff6f 	bl	8000658 <__aeabi_dmul>
 800677a:	465c      	mov	r4, fp
 800677c:	4680      	mov	r8, r0
 800677e:	4689      	mov	r9, r1
 8006780:	4b5d      	ldr	r3, [pc, #372]	@ (80068f8 <__ieee754_pow+0x798>)
 8006782:	2200      	movs	r2, #0
 8006784:	4620      	mov	r0, r4
 8006786:	4629      	mov	r1, r5
 8006788:	f7f9 fdae 	bl	80002e8 <__aeabi_dsub>
 800678c:	4632      	mov	r2, r6
 800678e:	463b      	mov	r3, r7
 8006790:	f7f9 fdaa 	bl	80002e8 <__aeabi_dsub>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800679c:	f7f9 fda4 	bl	80002e8 <__aeabi_dsub>
 80067a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067a4:	f7f9 ff58 	bl	8000658 <__aeabi_dmul>
 80067a8:	4622      	mov	r2, r4
 80067aa:	4606      	mov	r6, r0
 80067ac:	460f      	mov	r7, r1
 80067ae:	462b      	mov	r3, r5
 80067b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067b4:	f7f9 ff50 	bl	8000658 <__aeabi_dmul>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4630      	mov	r0, r6
 80067be:	4639      	mov	r1, r7
 80067c0:	f7f9 fd94 	bl	80002ec <__adddf3>
 80067c4:	4606      	mov	r6, r0
 80067c6:	460f      	mov	r7, r1
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4640      	mov	r0, r8
 80067ce:	4649      	mov	r1, r9
 80067d0:	f7f9 fd8c 	bl	80002ec <__adddf3>
 80067d4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80067d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80068c8 <__ieee754_pow+0x768>)
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	4658      	mov	r0, fp
 80067e0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80067e4:	460d      	mov	r5, r1
 80067e6:	f7f9 ff37 	bl	8000658 <__aeabi_dmul>
 80067ea:	465c      	mov	r4, fp
 80067ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	4620      	mov	r0, r4
 80067f6:	4629      	mov	r1, r5
 80067f8:	f7f9 fd76 	bl	80002e8 <__aeabi_dsub>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4630      	mov	r0, r6
 8006802:	4639      	mov	r1, r7
 8006804:	f7f9 fd70 	bl	80002e8 <__aeabi_dsub>
 8006808:	a331      	add	r3, pc, #196	@ (adr r3, 80068d0 <__ieee754_pow+0x770>)
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	f7f9 ff23 	bl	8000658 <__aeabi_dmul>
 8006812:	a331      	add	r3, pc, #196	@ (adr r3, 80068d8 <__ieee754_pow+0x778>)
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	4606      	mov	r6, r0
 800681a:	460f      	mov	r7, r1
 800681c:	4620      	mov	r0, r4
 800681e:	4629      	mov	r1, r5
 8006820:	f7f9 ff1a 	bl	8000658 <__aeabi_dmul>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4630      	mov	r0, r6
 800682a:	4639      	mov	r1, r7
 800682c:	f7f9 fd5e 	bl	80002ec <__adddf3>
 8006830:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006832:	4b32      	ldr	r3, [pc, #200]	@ (80068fc <__ieee754_pow+0x79c>)
 8006834:	4413      	add	r3, r2
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	f7f9 fd57 	bl	80002ec <__adddf3>
 800683e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006842:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006844:	f7f9 fe9e 	bl	8000584 <__aeabi_i2d>
 8006848:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800684a:	4b2d      	ldr	r3, [pc, #180]	@ (8006900 <__ieee754_pow+0x7a0>)
 800684c:	4413      	add	r3, r2
 800684e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006852:	4606      	mov	r6, r0
 8006854:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006858:	460f      	mov	r7, r1
 800685a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800685e:	f7f9 fd45 	bl	80002ec <__adddf3>
 8006862:	4642      	mov	r2, r8
 8006864:	464b      	mov	r3, r9
 8006866:	f7f9 fd41 	bl	80002ec <__adddf3>
 800686a:	4632      	mov	r2, r6
 800686c:	463b      	mov	r3, r7
 800686e:	f7f9 fd3d 	bl	80002ec <__adddf3>
 8006872:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8006876:	4632      	mov	r2, r6
 8006878:	463b      	mov	r3, r7
 800687a:	4658      	mov	r0, fp
 800687c:	460d      	mov	r5, r1
 800687e:	f7f9 fd33 	bl	80002e8 <__aeabi_dsub>
 8006882:	4642      	mov	r2, r8
 8006884:	464b      	mov	r3, r9
 8006886:	f7f9 fd2f 	bl	80002e8 <__aeabi_dsub>
 800688a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800688e:	f7f9 fd2b 	bl	80002e8 <__aeabi_dsub>
 8006892:	465c      	mov	r4, fp
 8006894:	e036      	b.n	8006904 <__ieee754_pow+0x7a4>
 8006896:	bf00      	nop
 8006898:	4a454eef 	.word	0x4a454eef
 800689c:	3fca7e28 	.word	0x3fca7e28
 80068a0:	93c9db65 	.word	0x93c9db65
 80068a4:	3fcd864a 	.word	0x3fcd864a
 80068a8:	a91d4101 	.word	0xa91d4101
 80068ac:	3fd17460 	.word	0x3fd17460
 80068b0:	518f264d 	.word	0x518f264d
 80068b4:	3fd55555 	.word	0x3fd55555
 80068b8:	db6fabff 	.word	0xdb6fabff
 80068bc:	3fdb6db6 	.word	0x3fdb6db6
 80068c0:	33333303 	.word	0x33333303
 80068c4:	3fe33333 	.word	0x3fe33333
 80068c8:	e0000000 	.word	0xe0000000
 80068cc:	3feec709 	.word	0x3feec709
 80068d0:	dc3a03fd 	.word	0xdc3a03fd
 80068d4:	3feec709 	.word	0x3feec709
 80068d8:	145b01f5 	.word	0x145b01f5
 80068dc:	be3e2fe0 	.word	0xbe3e2fe0
 80068e0:	7ff00000 	.word	0x7ff00000
 80068e4:	43400000 	.word	0x43400000
 80068e8:	0003988e 	.word	0x0003988e
 80068ec:	000bb679 	.word	0x000bb679
 80068f0:	0800b930 	.word	0x0800b930
 80068f4:	3ff00000 	.word	0x3ff00000
 80068f8:	40080000 	.word	0x40080000
 80068fc:	0800b910 	.word	0x0800b910
 8006900:	0800b920 	.word	0x0800b920
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800690c:	e5d6      	b.n	80064bc <__ieee754_pow+0x35c>
 800690e:	f04f 0a01 	mov.w	sl, #1
 8006912:	e65e      	b.n	80065d2 <__ieee754_pow+0x472>
 8006914:	a3b5      	add	r3, pc, #724	@ (adr r3, 8006bec <__ieee754_pow+0xa8c>)
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	4630      	mov	r0, r6
 800691c:	4639      	mov	r1, r7
 800691e:	f7f9 fce5 	bl	80002ec <__adddf3>
 8006922:	4642      	mov	r2, r8
 8006924:	e9cd 0100 	strd	r0, r1, [sp]
 8006928:	464b      	mov	r3, r9
 800692a:	4620      	mov	r0, r4
 800692c:	4629      	mov	r1, r5
 800692e:	f7f9 fcdb 	bl	80002e8 <__aeabi_dsub>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800693a:	f7fa f91d 	bl	8000b78 <__aeabi_dcmpgt>
 800693e:	2800      	cmp	r0, #0
 8006940:	f47f adfe 	bne.w	8006540 <__ieee754_pow+0x3e0>
 8006944:	4ba2      	ldr	r3, [pc, #648]	@ (8006bd0 <__ieee754_pow+0xa70>)
 8006946:	e022      	b.n	800698e <__ieee754_pow+0x82e>
 8006948:	4ca2      	ldr	r4, [pc, #648]	@ (8006bd4 <__ieee754_pow+0xa74>)
 800694a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800694e:	42a3      	cmp	r3, r4
 8006950:	d919      	bls.n	8006986 <__ieee754_pow+0x826>
 8006952:	4ba1      	ldr	r3, [pc, #644]	@ (8006bd8 <__ieee754_pow+0xa78>)
 8006954:	440b      	add	r3, r1
 8006956:	4303      	orrs	r3, r0
 8006958:	d009      	beq.n	800696e <__ieee754_pow+0x80e>
 800695a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800695e:	2200      	movs	r2, #0
 8006960:	2300      	movs	r3, #0
 8006962:	f7fa f8eb 	bl	8000b3c <__aeabi_dcmplt>
 8006966:	3800      	subs	r0, #0
 8006968:	bf18      	it	ne
 800696a:	2001      	movne	r0, #1
 800696c:	e512      	b.n	8006394 <__ieee754_pow+0x234>
 800696e:	4642      	mov	r2, r8
 8006970:	464b      	mov	r3, r9
 8006972:	f7f9 fcb9 	bl	80002e8 <__aeabi_dsub>
 8006976:	4632      	mov	r2, r6
 8006978:	463b      	mov	r3, r7
 800697a:	f7fa f8f3 	bl	8000b64 <__aeabi_dcmpge>
 800697e:	2800      	cmp	r0, #0
 8006980:	d1eb      	bne.n	800695a <__ieee754_pow+0x7fa>
 8006982:	4b96      	ldr	r3, [pc, #600]	@ (8006bdc <__ieee754_pow+0xa7c>)
 8006984:	e003      	b.n	800698e <__ieee754_pow+0x82e>
 8006986:	4a96      	ldr	r2, [pc, #600]	@ (8006be0 <__ieee754_pow+0xa80>)
 8006988:	4293      	cmp	r3, r2
 800698a:	f240 80e7 	bls.w	8006b5c <__ieee754_pow+0x9fc>
 800698e:	151b      	asrs	r3, r3, #20
 8006990:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8006994:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8006998:	fa4a fa03 	asr.w	sl, sl, r3
 800699c:	44da      	add	sl, fp
 800699e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80069a2:	4890      	ldr	r0, [pc, #576]	@ (8006be4 <__ieee754_pow+0xa84>)
 80069a4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80069a8:	4108      	asrs	r0, r1
 80069aa:	ea00 030a 	and.w	r3, r0, sl
 80069ae:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80069b2:	f1c1 0114 	rsb	r1, r1, #20
 80069b6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80069ba:	fa4a fa01 	asr.w	sl, sl, r1
 80069be:	f1bb 0f00 	cmp.w	fp, #0
 80069c2:	4640      	mov	r0, r8
 80069c4:	4649      	mov	r1, r9
 80069c6:	f04f 0200 	mov.w	r2, #0
 80069ca:	bfb8      	it	lt
 80069cc:	f1ca 0a00 	rsblt	sl, sl, #0
 80069d0:	f7f9 fc8a 	bl	80002e8 <__aeabi_dsub>
 80069d4:	4680      	mov	r8, r0
 80069d6:	4689      	mov	r9, r1
 80069d8:	4632      	mov	r2, r6
 80069da:	463b      	mov	r3, r7
 80069dc:	4640      	mov	r0, r8
 80069de:	4649      	mov	r1, r9
 80069e0:	f7f9 fc84 	bl	80002ec <__adddf3>
 80069e4:	2400      	movs	r4, #0
 80069e6:	a36a      	add	r3, pc, #424	@ (adr r3, 8006b90 <__ieee754_pow+0xa30>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	4620      	mov	r0, r4
 80069ee:	460d      	mov	r5, r1
 80069f0:	f7f9 fe32 	bl	8000658 <__aeabi_dmul>
 80069f4:	4642      	mov	r2, r8
 80069f6:	e9cd 0100 	strd	r0, r1, [sp]
 80069fa:	464b      	mov	r3, r9
 80069fc:	4620      	mov	r0, r4
 80069fe:	4629      	mov	r1, r5
 8006a00:	f7f9 fc72 	bl	80002e8 <__aeabi_dsub>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4630      	mov	r0, r6
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	f7f9 fc6c 	bl	80002e8 <__aeabi_dsub>
 8006a10:	a361      	add	r3, pc, #388	@ (adr r3, 8006b98 <__ieee754_pow+0xa38>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7f9 fe1f 	bl	8000658 <__aeabi_dmul>
 8006a1a:	a361      	add	r3, pc, #388	@ (adr r3, 8006ba0 <__ieee754_pow+0xa40>)
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	4680      	mov	r8, r0
 8006a22:	4689      	mov	r9, r1
 8006a24:	4620      	mov	r0, r4
 8006a26:	4629      	mov	r1, r5
 8006a28:	f7f9 fe16 	bl	8000658 <__aeabi_dmul>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4640      	mov	r0, r8
 8006a32:	4649      	mov	r1, r9
 8006a34:	f7f9 fc5a 	bl	80002ec <__adddf3>
 8006a38:	4604      	mov	r4, r0
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a44:	f7f9 fc52 	bl	80002ec <__adddf3>
 8006a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	4689      	mov	r9, r1
 8006a50:	f7f9 fc4a 	bl	80002e8 <__aeabi_dsub>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4620      	mov	r0, r4
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	f7f9 fc44 	bl	80002e8 <__aeabi_dsub>
 8006a60:	4642      	mov	r2, r8
 8006a62:	4606      	mov	r6, r0
 8006a64:	460f      	mov	r7, r1
 8006a66:	464b      	mov	r3, r9
 8006a68:	4640      	mov	r0, r8
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	f7f9 fdf4 	bl	8000658 <__aeabi_dmul>
 8006a70:	a34d      	add	r3, pc, #308	@ (adr r3, 8006ba8 <__ieee754_pow+0xa48>)
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	4604      	mov	r4, r0
 8006a78:	460d      	mov	r5, r1
 8006a7a:	f7f9 fded 	bl	8000658 <__aeabi_dmul>
 8006a7e:	a34c      	add	r3, pc, #304	@ (adr r3, 8006bb0 <__ieee754_pow+0xa50>)
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f7f9 fc30 	bl	80002e8 <__aeabi_dsub>
 8006a88:	4622      	mov	r2, r4
 8006a8a:	462b      	mov	r3, r5
 8006a8c:	f7f9 fde4 	bl	8000658 <__aeabi_dmul>
 8006a90:	a349      	add	r3, pc, #292	@ (adr r3, 8006bb8 <__ieee754_pow+0xa58>)
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	f7f9 fc29 	bl	80002ec <__adddf3>
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	f7f9 fddb 	bl	8000658 <__aeabi_dmul>
 8006aa2:	a347      	add	r3, pc, #284	@ (adr r3, 8006bc0 <__ieee754_pow+0xa60>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f7f9 fc1e 	bl	80002e8 <__aeabi_dsub>
 8006aac:	4622      	mov	r2, r4
 8006aae:	462b      	mov	r3, r5
 8006ab0:	f7f9 fdd2 	bl	8000658 <__aeabi_dmul>
 8006ab4:	a344      	add	r3, pc, #272	@ (adr r3, 8006bc8 <__ieee754_pow+0xa68>)
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	f7f9 fc17 	bl	80002ec <__adddf3>
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	f7f9 fdc9 	bl	8000658 <__aeabi_dmul>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4640      	mov	r0, r8
 8006acc:	4649      	mov	r1, r9
 8006ace:	f7f9 fc0b 	bl	80002e8 <__aeabi_dsub>
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	460d      	mov	r5, r1
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4640      	mov	r0, r8
 8006adc:	4649      	mov	r1, r9
 8006ade:	f7f9 fdbb 	bl	8000658 <__aeabi_dmul>
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	e9cd 0100 	strd	r0, r1, [sp]
 8006ae8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7f9 fbfa 	bl	80002e8 <__aeabi_dsub>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006afc:	f7f9 fed6 	bl	80008ac <__aeabi_ddiv>
 8006b00:	4632      	mov	r2, r6
 8006b02:	4604      	mov	r4, r0
 8006b04:	460d      	mov	r5, r1
 8006b06:	463b      	mov	r3, r7
 8006b08:	4640      	mov	r0, r8
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	f7f9 fda4 	bl	8000658 <__aeabi_dmul>
 8006b10:	4632      	mov	r2, r6
 8006b12:	463b      	mov	r3, r7
 8006b14:	f7f9 fbea 	bl	80002ec <__adddf3>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	4629      	mov	r1, r5
 8006b20:	f7f9 fbe2 	bl	80002e8 <__aeabi_dsub>
 8006b24:	4642      	mov	r2, r8
 8006b26:	464b      	mov	r3, r9
 8006b28:	f7f9 fbde 	bl	80002e8 <__aeabi_dsub>
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4602      	mov	r2, r0
 8006b30:	492d      	ldr	r1, [pc, #180]	@ (8006be8 <__ieee754_pow+0xa88>)
 8006b32:	2000      	movs	r0, #0
 8006b34:	f7f9 fbd8 	bl	80002e8 <__aeabi_dsub>
 8006b38:	ec41 0b10 	vmov	d0, r0, r1
 8006b3c:	ee10 3a90 	vmov	r3, s1
 8006b40:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006b44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b48:	da0b      	bge.n	8006b62 <__ieee754_pow+0xa02>
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	f000 f85c 	bl	8006c08 <scalbn>
 8006b50:	ec51 0b10 	vmov	r0, r1, d0
 8006b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b58:	f7ff bb6d 	b.w	8006236 <__ieee754_pow+0xd6>
 8006b5c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006b60:	e73a      	b.n	80069d8 <__ieee754_pow+0x878>
 8006b62:	ec51 0b10 	vmov	r0, r1, d0
 8006b66:	4619      	mov	r1, r3
 8006b68:	e7f4      	b.n	8006b54 <__ieee754_pow+0x9f4>
 8006b6a:	491f      	ldr	r1, [pc, #124]	@ (8006be8 <__ieee754_pow+0xa88>)
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	f7ff bb14 	b.w	800619a <__ieee754_pow+0x3a>
 8006b72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b76:	f7ff bb10 	b.w	800619a <__ieee754_pow+0x3a>
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	f7ff bb0c 	b.w	800619a <__ieee754_pow+0x3a>
 8006b82:	460c      	mov	r4, r1
 8006b84:	f7ff bb69 	b.w	800625a <__ieee754_pow+0xfa>
 8006b88:	2400      	movs	r4, #0
 8006b8a:	f7ff bb4b 	b.w	8006224 <__ieee754_pow+0xc4>
 8006b8e:	bf00      	nop
 8006b90:	00000000 	.word	0x00000000
 8006b94:	3fe62e43 	.word	0x3fe62e43
 8006b98:	fefa39ef 	.word	0xfefa39ef
 8006b9c:	3fe62e42 	.word	0x3fe62e42
 8006ba0:	0ca86c39 	.word	0x0ca86c39
 8006ba4:	be205c61 	.word	0xbe205c61
 8006ba8:	72bea4d0 	.word	0x72bea4d0
 8006bac:	3e663769 	.word	0x3e663769
 8006bb0:	c5d26bf1 	.word	0xc5d26bf1
 8006bb4:	3ebbbd41 	.word	0x3ebbbd41
 8006bb8:	af25de2c 	.word	0xaf25de2c
 8006bbc:	3f11566a 	.word	0x3f11566a
 8006bc0:	16bebd93 	.word	0x16bebd93
 8006bc4:	3f66c16c 	.word	0x3f66c16c
 8006bc8:	5555553e 	.word	0x5555553e
 8006bcc:	3fc55555 	.word	0x3fc55555
 8006bd0:	40900000 	.word	0x40900000
 8006bd4:	4090cbff 	.word	0x4090cbff
 8006bd8:	3f6f3400 	.word	0x3f6f3400
 8006bdc:	4090cc00 	.word	0x4090cc00
 8006be0:	3fe00000 	.word	0x3fe00000
 8006be4:	fff00000 	.word	0xfff00000
 8006be8:	3ff00000 	.word	0x3ff00000
 8006bec:	652b82fe 	.word	0x652b82fe
 8006bf0:	3c971547 	.word	0x3c971547

08006bf4 <fabs>:
 8006bf4:	ec51 0b10 	vmov	r0, r1, d0
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006bfe:	ec43 2b10 	vmov	d0, r2, r3
 8006c02:	4770      	bx	lr
 8006c04:	0000      	movs	r0, r0
	...

08006c08 <scalbn>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	ec55 4b10 	vmov	r4, r5, d0
 8006c0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006c12:	4606      	mov	r6, r0
 8006c14:	462b      	mov	r3, r5
 8006c16:	b991      	cbnz	r1, 8006c3e <scalbn+0x36>
 8006c18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006c1c:	4323      	orrs	r3, r4
 8006c1e:	d03b      	beq.n	8006c98 <scalbn+0x90>
 8006c20:	4b33      	ldr	r3, [pc, #204]	@ (8006cf0 <scalbn+0xe8>)
 8006c22:	4620      	mov	r0, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	2200      	movs	r2, #0
 8006c28:	f7f9 fd16 	bl	8000658 <__aeabi_dmul>
 8006c2c:	4b31      	ldr	r3, [pc, #196]	@ (8006cf4 <scalbn+0xec>)
 8006c2e:	429e      	cmp	r6, r3
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	da0f      	bge.n	8006c56 <scalbn+0x4e>
 8006c36:	a326      	add	r3, pc, #152	@ (adr r3, 8006cd0 <scalbn+0xc8>)
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	e01e      	b.n	8006c7c <scalbn+0x74>
 8006c3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006c42:	4291      	cmp	r1, r2
 8006c44:	d10b      	bne.n	8006c5e <scalbn+0x56>
 8006c46:	4622      	mov	r2, r4
 8006c48:	4620      	mov	r0, r4
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	f7f9 fb4e 	bl	80002ec <__adddf3>
 8006c50:	4604      	mov	r4, r0
 8006c52:	460d      	mov	r5, r1
 8006c54:	e020      	b.n	8006c98 <scalbn+0x90>
 8006c56:	460b      	mov	r3, r1
 8006c58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006c5c:	3936      	subs	r1, #54	@ 0x36
 8006c5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006c62:	4296      	cmp	r6, r2
 8006c64:	dd0d      	ble.n	8006c82 <scalbn+0x7a>
 8006c66:	2d00      	cmp	r5, #0
 8006c68:	a11b      	add	r1, pc, #108	@ (adr r1, 8006cd8 <scalbn+0xd0>)
 8006c6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c6e:	da02      	bge.n	8006c76 <scalbn+0x6e>
 8006c70:	a11b      	add	r1, pc, #108	@ (adr r1, 8006ce0 <scalbn+0xd8>)
 8006c72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c76:	a318      	add	r3, pc, #96	@ (adr r3, 8006cd8 <scalbn+0xd0>)
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f7f9 fcec 	bl	8000658 <__aeabi_dmul>
 8006c80:	e7e6      	b.n	8006c50 <scalbn+0x48>
 8006c82:	1872      	adds	r2, r6, r1
 8006c84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006c88:	428a      	cmp	r2, r1
 8006c8a:	dcec      	bgt.n	8006c66 <scalbn+0x5e>
 8006c8c:	2a00      	cmp	r2, #0
 8006c8e:	dd06      	ble.n	8006c9e <scalbn+0x96>
 8006c90:	f36f 531e 	bfc	r3, #20, #11
 8006c94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006c98:	ec45 4b10 	vmov	d0, r4, r5
 8006c9c:	bd70      	pop	{r4, r5, r6, pc}
 8006c9e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006ca2:	da08      	bge.n	8006cb6 <scalbn+0xae>
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	a10a      	add	r1, pc, #40	@ (adr r1, 8006cd0 <scalbn+0xc8>)
 8006ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cac:	dac3      	bge.n	8006c36 <scalbn+0x2e>
 8006cae:	a10e      	add	r1, pc, #56	@ (adr r1, 8006ce8 <scalbn+0xe0>)
 8006cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb4:	e7bf      	b.n	8006c36 <scalbn+0x2e>
 8006cb6:	3236      	adds	r2, #54	@ 0x36
 8006cb8:	f36f 531e 	bfc	r3, #20, #11
 8006cbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <scalbn+0xf0>)
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	e7d8      	b.n	8006c7c <scalbn+0x74>
 8006cca:	bf00      	nop
 8006ccc:	f3af 8000 	nop.w
 8006cd0:	c2f8f359 	.word	0xc2f8f359
 8006cd4:	01a56e1f 	.word	0x01a56e1f
 8006cd8:	8800759c 	.word	0x8800759c
 8006cdc:	7e37e43c 	.word	0x7e37e43c
 8006ce0:	8800759c 	.word	0x8800759c
 8006ce4:	fe37e43c 	.word	0xfe37e43c
 8006ce8:	c2f8f359 	.word	0xc2f8f359
 8006cec:	81a56e1f 	.word	0x81a56e1f
 8006cf0:	43500000 	.word	0x43500000
 8006cf4:	ffff3cb0 	.word	0xffff3cb0
 8006cf8:	3c900000 	.word	0x3c900000

08006cfc <with_errno>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	ed2d 8b02 	vpush	{d8}
 8006d02:	eeb0 8a40 	vmov.f32	s16, s0
 8006d06:	eef0 8a60 	vmov.f32	s17, s1
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	f001 fa76 	bl	80081fc <__errno>
 8006d10:	eeb0 0a48 	vmov.f32	s0, s16
 8006d14:	eef0 0a68 	vmov.f32	s1, s17
 8006d18:	ecbd 8b02 	vpop	{d8}
 8006d1c:	6004      	str	r4, [r0, #0]
 8006d1e:	bd10      	pop	{r4, pc}

08006d20 <xflow>:
 8006d20:	4603      	mov	r3, r0
 8006d22:	b507      	push	{r0, r1, r2, lr}
 8006d24:	ec51 0b10 	vmov	r0, r1, d0
 8006d28:	b183      	cbz	r3, 8006d4c <xflow+0x2c>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d30:	e9cd 2300 	strd	r2, r3, [sp]
 8006d34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d38:	f7f9 fc8e 	bl	8000658 <__aeabi_dmul>
 8006d3c:	ec41 0b10 	vmov	d0, r0, r1
 8006d40:	2022      	movs	r0, #34	@ 0x22
 8006d42:	b003      	add	sp, #12
 8006d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d48:	f7ff bfd8 	b.w	8006cfc <with_errno>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	e7ee      	b.n	8006d30 <xflow+0x10>
 8006d52:	0000      	movs	r0, r0
 8006d54:	0000      	movs	r0, r0
	...

08006d58 <__math_uflow>:
 8006d58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006d60 <__math_uflow+0x8>
 8006d5c:	f7ff bfe0 	b.w	8006d20 <xflow>
 8006d60:	00000000 	.word	0x00000000
 8006d64:	10000000 	.word	0x10000000

08006d68 <__math_oflow>:
 8006d68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006d70 <__math_oflow+0x8>
 8006d6c:	f7ff bfd8 	b.w	8006d20 <xflow>
 8006d70:	00000000 	.word	0x00000000
 8006d74:	70000000 	.word	0x70000000

08006d78 <__ieee754_sqrt>:
 8006d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	4a66      	ldr	r2, [pc, #408]	@ (8006f18 <__ieee754_sqrt+0x1a0>)
 8006d7e:	ec55 4b10 	vmov	r4, r5, d0
 8006d82:	43aa      	bics	r2, r5
 8006d84:	462b      	mov	r3, r5
 8006d86:	4621      	mov	r1, r4
 8006d88:	d110      	bne.n	8006dac <__ieee754_sqrt+0x34>
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 fc62 	bl	8000658 <__aeabi_dmul>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4620      	mov	r0, r4
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	f7f9 faa6 	bl	80002ec <__adddf3>
 8006da0:	4604      	mov	r4, r0
 8006da2:	460d      	mov	r5, r1
 8006da4:	ec45 4b10 	vmov	d0, r4, r5
 8006da8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	dc0e      	bgt.n	8006dce <__ieee754_sqrt+0x56>
 8006db0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006db4:	4322      	orrs	r2, r4
 8006db6:	d0f5      	beq.n	8006da4 <__ieee754_sqrt+0x2c>
 8006db8:	b19d      	cbz	r5, 8006de2 <__ieee754_sqrt+0x6a>
 8006dba:	4622      	mov	r2, r4
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	f7f9 fa92 	bl	80002e8 <__aeabi_dsub>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	f7f9 fd70 	bl	80008ac <__aeabi_ddiv>
 8006dcc:	e7e8      	b.n	8006da0 <__ieee754_sqrt+0x28>
 8006dce:	152a      	asrs	r2, r5, #20
 8006dd0:	d115      	bne.n	8006dfe <__ieee754_sqrt+0x86>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e009      	b.n	8006dea <__ieee754_sqrt+0x72>
 8006dd6:	0acb      	lsrs	r3, r1, #11
 8006dd8:	3a15      	subs	r2, #21
 8006dda:	0549      	lsls	r1, r1, #21
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0fa      	beq.n	8006dd6 <__ieee754_sqrt+0x5e>
 8006de0:	e7f7      	b.n	8006dd2 <__ieee754_sqrt+0x5a>
 8006de2:	462a      	mov	r2, r5
 8006de4:	e7fa      	b.n	8006ddc <__ieee754_sqrt+0x64>
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	3001      	adds	r0, #1
 8006dea:	02dc      	lsls	r4, r3, #11
 8006dec:	d5fb      	bpl.n	8006de6 <__ieee754_sqrt+0x6e>
 8006dee:	1e44      	subs	r4, r0, #1
 8006df0:	1b12      	subs	r2, r2, r4
 8006df2:	f1c0 0420 	rsb	r4, r0, #32
 8006df6:	fa21 f404 	lsr.w	r4, r1, r4
 8006dfa:	4323      	orrs	r3, r4
 8006dfc:	4081      	lsls	r1, r0
 8006dfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e02:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e0a:	07d2      	lsls	r2, r2, #31
 8006e0c:	bf5c      	itt	pl
 8006e0e:	005b      	lslpl	r3, r3, #1
 8006e10:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006e14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006e18:	bf58      	it	pl
 8006e1a:	0049      	lslpl	r1, r1, #1
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006e22:	107f      	asrs	r7, r7, #1
 8006e24:	0049      	lsls	r1, r1, #1
 8006e26:	2016      	movs	r0, #22
 8006e28:	4632      	mov	r2, r6
 8006e2a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006e2e:	1915      	adds	r5, r2, r4
 8006e30:	429d      	cmp	r5, r3
 8006e32:	bfde      	ittt	le
 8006e34:	192a      	addle	r2, r5, r4
 8006e36:	1b5b      	suble	r3, r3, r5
 8006e38:	1936      	addle	r6, r6, r4
 8006e3a:	0fcd      	lsrs	r5, r1, #31
 8006e3c:	3801      	subs	r0, #1
 8006e3e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006e42:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006e46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006e4a:	d1f0      	bne.n	8006e2e <__ieee754_sqrt+0xb6>
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	2420      	movs	r4, #32
 8006e50:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006e54:	4293      	cmp	r3, r2
 8006e56:	eb0c 0e00 	add.w	lr, ip, r0
 8006e5a:	dc02      	bgt.n	8006e62 <__ieee754_sqrt+0xea>
 8006e5c:	d113      	bne.n	8006e86 <__ieee754_sqrt+0x10e>
 8006e5e:	458e      	cmp	lr, r1
 8006e60:	d811      	bhi.n	8006e86 <__ieee754_sqrt+0x10e>
 8006e62:	f1be 0f00 	cmp.w	lr, #0
 8006e66:	eb0e 000c 	add.w	r0, lr, ip
 8006e6a:	da3f      	bge.n	8006eec <__ieee754_sqrt+0x174>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	db3d      	blt.n	8006eec <__ieee754_sqrt+0x174>
 8006e70:	f102 0801 	add.w	r8, r2, #1
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	458e      	cmp	lr, r1
 8006e78:	bf88      	it	hi
 8006e7a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006e7e:	eba1 010e 	sub.w	r1, r1, lr
 8006e82:	4465      	add	r5, ip
 8006e84:	4642      	mov	r2, r8
 8006e86:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006e8a:	3c01      	subs	r4, #1
 8006e8c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006e90:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006e94:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006e98:	d1dc      	bne.n	8006e54 <__ieee754_sqrt+0xdc>
 8006e9a:	4319      	orrs	r1, r3
 8006e9c:	d01b      	beq.n	8006ed6 <__ieee754_sqrt+0x15e>
 8006e9e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8006f1c <__ieee754_sqrt+0x1a4>
 8006ea2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8006f20 <__ieee754_sqrt+0x1a8>
 8006ea6:	e9da 0100 	ldrd	r0, r1, [sl]
 8006eaa:	e9db 2300 	ldrd	r2, r3, [fp]
 8006eae:	f7f9 fa1b 	bl	80002e8 <__aeabi_dsub>
 8006eb2:	e9da 8900 	ldrd	r8, r9, [sl]
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	f7f9 fe47 	bl	8000b50 <__aeabi_dcmple>
 8006ec2:	b140      	cbz	r0, 8006ed6 <__ieee754_sqrt+0x15e>
 8006ec4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006ec8:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ecc:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ed0:	d10e      	bne.n	8006ef0 <__ieee754_sqrt+0x178>
 8006ed2:	3601      	adds	r6, #1
 8006ed4:	4625      	mov	r5, r4
 8006ed6:	1073      	asrs	r3, r6, #1
 8006ed8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006edc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006ee0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8006ee4:	086b      	lsrs	r3, r5, #1
 8006ee6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8006eea:	e759      	b.n	8006da0 <__ieee754_sqrt+0x28>
 8006eec:	4690      	mov	r8, r2
 8006eee:	e7c1      	b.n	8006e74 <__ieee754_sqrt+0xfc>
 8006ef0:	f7f9 f9fc 	bl	80002ec <__adddf3>
 8006ef4:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4640      	mov	r0, r8
 8006efe:	4649      	mov	r1, r9
 8006f00:	f7f9 fe1c 	bl	8000b3c <__aeabi_dcmplt>
 8006f04:	b120      	cbz	r0, 8006f10 <__ieee754_sqrt+0x198>
 8006f06:	1cab      	adds	r3, r5, #2
 8006f08:	bf08      	it	eq
 8006f0a:	3601      	addeq	r6, #1
 8006f0c:	3502      	adds	r5, #2
 8006f0e:	e7e2      	b.n	8006ed6 <__ieee754_sqrt+0x15e>
 8006f10:	1c6b      	adds	r3, r5, #1
 8006f12:	f023 0501 	bic.w	r5, r3, #1
 8006f16:	e7de      	b.n	8006ed6 <__ieee754_sqrt+0x15e>
 8006f18:	7ff00000 	.word	0x7ff00000
 8006f1c:	0800b948 	.word	0x0800b948
 8006f20:	0800b940 	.word	0x0800b940

08006f24 <atoi>:
 8006f24:	220a      	movs	r2, #10
 8006f26:	2100      	movs	r1, #0
 8006f28:	f000 b87c 	b.w	8007024 <strtol>

08006f2c <_strtol_l.isra.0>:
 8006f2c:	2b24      	cmp	r3, #36	@ 0x24
 8006f2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f32:	4686      	mov	lr, r0
 8006f34:	4690      	mov	r8, r2
 8006f36:	d801      	bhi.n	8006f3c <_strtol_l.isra.0+0x10>
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d106      	bne.n	8006f4a <_strtol_l.isra.0+0x1e>
 8006f3c:	f001 f95e 	bl	80081fc <__errno>
 8006f40:	2316      	movs	r3, #22
 8006f42:	6003      	str	r3, [r0, #0]
 8006f44:	2000      	movs	r0, #0
 8006f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4a:	4834      	ldr	r0, [pc, #208]	@ (800701c <_strtol_l.isra.0+0xf0>)
 8006f4c:	460d      	mov	r5, r1
 8006f4e:	462a      	mov	r2, r5
 8006f50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f54:	5d06      	ldrb	r6, [r0, r4]
 8006f56:	f016 0608 	ands.w	r6, r6, #8
 8006f5a:	d1f8      	bne.n	8006f4e <_strtol_l.isra.0+0x22>
 8006f5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006f5e:	d110      	bne.n	8006f82 <_strtol_l.isra.0+0x56>
 8006f60:	782c      	ldrb	r4, [r5, #0]
 8006f62:	2601      	movs	r6, #1
 8006f64:	1c95      	adds	r5, r2, #2
 8006f66:	f033 0210 	bics.w	r2, r3, #16
 8006f6a:	d115      	bne.n	8006f98 <_strtol_l.isra.0+0x6c>
 8006f6c:	2c30      	cmp	r4, #48	@ 0x30
 8006f6e:	d10d      	bne.n	8006f8c <_strtol_l.isra.0+0x60>
 8006f70:	782a      	ldrb	r2, [r5, #0]
 8006f72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006f76:	2a58      	cmp	r2, #88	@ 0x58
 8006f78:	d108      	bne.n	8006f8c <_strtol_l.isra.0+0x60>
 8006f7a:	786c      	ldrb	r4, [r5, #1]
 8006f7c:	3502      	adds	r5, #2
 8006f7e:	2310      	movs	r3, #16
 8006f80:	e00a      	b.n	8006f98 <_strtol_l.isra.0+0x6c>
 8006f82:	2c2b      	cmp	r4, #43	@ 0x2b
 8006f84:	bf04      	itt	eq
 8006f86:	782c      	ldrbeq	r4, [r5, #0]
 8006f88:	1c95      	addeq	r5, r2, #2
 8006f8a:	e7ec      	b.n	8006f66 <_strtol_l.isra.0+0x3a>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1f6      	bne.n	8006f7e <_strtol_l.isra.0+0x52>
 8006f90:	2c30      	cmp	r4, #48	@ 0x30
 8006f92:	bf14      	ite	ne
 8006f94:	230a      	movne	r3, #10
 8006f96:	2308      	moveq	r3, #8
 8006f98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006f9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	fbbc f9f3 	udiv	r9, ip, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	fb03 ca19 	mls	sl, r3, r9, ip
 8006fac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006fb0:	2f09      	cmp	r7, #9
 8006fb2:	d80f      	bhi.n	8006fd4 <_strtol_l.isra.0+0xa8>
 8006fb4:	463c      	mov	r4, r7
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	dd1b      	ble.n	8006ff2 <_strtol_l.isra.0+0xc6>
 8006fba:	1c57      	adds	r7, r2, #1
 8006fbc:	d007      	beq.n	8006fce <_strtol_l.isra.0+0xa2>
 8006fbe:	4581      	cmp	r9, r0
 8006fc0:	d314      	bcc.n	8006fec <_strtol_l.isra.0+0xc0>
 8006fc2:	d101      	bne.n	8006fc8 <_strtol_l.isra.0+0x9c>
 8006fc4:	45a2      	cmp	sl, r4
 8006fc6:	db11      	blt.n	8006fec <_strtol_l.isra.0+0xc0>
 8006fc8:	fb00 4003 	mla	r0, r0, r3, r4
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fd2:	e7eb      	b.n	8006fac <_strtol_l.isra.0+0x80>
 8006fd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006fd8:	2f19      	cmp	r7, #25
 8006fda:	d801      	bhi.n	8006fe0 <_strtol_l.isra.0+0xb4>
 8006fdc:	3c37      	subs	r4, #55	@ 0x37
 8006fde:	e7ea      	b.n	8006fb6 <_strtol_l.isra.0+0x8a>
 8006fe0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006fe4:	2f19      	cmp	r7, #25
 8006fe6:	d804      	bhi.n	8006ff2 <_strtol_l.isra.0+0xc6>
 8006fe8:	3c57      	subs	r4, #87	@ 0x57
 8006fea:	e7e4      	b.n	8006fb6 <_strtol_l.isra.0+0x8a>
 8006fec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff0:	e7ed      	b.n	8006fce <_strtol_l.isra.0+0xa2>
 8006ff2:	1c53      	adds	r3, r2, #1
 8006ff4:	d108      	bne.n	8007008 <_strtol_l.isra.0+0xdc>
 8006ff6:	2322      	movs	r3, #34	@ 0x22
 8006ff8:	f8ce 3000 	str.w	r3, [lr]
 8006ffc:	4660      	mov	r0, ip
 8006ffe:	f1b8 0f00 	cmp.w	r8, #0
 8007002:	d0a0      	beq.n	8006f46 <_strtol_l.isra.0+0x1a>
 8007004:	1e69      	subs	r1, r5, #1
 8007006:	e006      	b.n	8007016 <_strtol_l.isra.0+0xea>
 8007008:	b106      	cbz	r6, 800700c <_strtol_l.isra.0+0xe0>
 800700a:	4240      	negs	r0, r0
 800700c:	f1b8 0f00 	cmp.w	r8, #0
 8007010:	d099      	beq.n	8006f46 <_strtol_l.isra.0+0x1a>
 8007012:	2a00      	cmp	r2, #0
 8007014:	d1f6      	bne.n	8007004 <_strtol_l.isra.0+0xd8>
 8007016:	f8c8 1000 	str.w	r1, [r8]
 800701a:	e794      	b.n	8006f46 <_strtol_l.isra.0+0x1a>
 800701c:	0800b951 	.word	0x0800b951

08007020 <_strtol_r>:
 8007020:	f7ff bf84 	b.w	8006f2c <_strtol_l.isra.0>

08007024 <strtol>:
 8007024:	4613      	mov	r3, r2
 8007026:	460a      	mov	r2, r1
 8007028:	4601      	mov	r1, r0
 800702a:	4802      	ldr	r0, [pc, #8]	@ (8007034 <strtol+0x10>)
 800702c:	6800      	ldr	r0, [r0, #0]
 800702e:	f7ff bf7d 	b.w	8006f2c <_strtol_l.isra.0>
 8007032:	bf00      	nop
 8007034:	20000060 	.word	0x20000060

08007038 <__cvt>:
 8007038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800703c:	ec57 6b10 	vmov	r6, r7, d0
 8007040:	2f00      	cmp	r7, #0
 8007042:	460c      	mov	r4, r1
 8007044:	4619      	mov	r1, r3
 8007046:	463b      	mov	r3, r7
 8007048:	bfbb      	ittet	lt
 800704a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800704e:	461f      	movlt	r7, r3
 8007050:	2300      	movge	r3, #0
 8007052:	232d      	movlt	r3, #45	@ 0x2d
 8007054:	700b      	strb	r3, [r1, #0]
 8007056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007058:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800705c:	4691      	mov	r9, r2
 800705e:	f023 0820 	bic.w	r8, r3, #32
 8007062:	bfbc      	itt	lt
 8007064:	4632      	movlt	r2, r6
 8007066:	4616      	movlt	r6, r2
 8007068:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800706c:	d005      	beq.n	800707a <__cvt+0x42>
 800706e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007072:	d100      	bne.n	8007076 <__cvt+0x3e>
 8007074:	3401      	adds	r4, #1
 8007076:	2102      	movs	r1, #2
 8007078:	e000      	b.n	800707c <__cvt+0x44>
 800707a:	2103      	movs	r1, #3
 800707c:	ab03      	add	r3, sp, #12
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	ab02      	add	r3, sp, #8
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	ec47 6b10 	vmov	d0, r6, r7
 8007088:	4653      	mov	r3, sl
 800708a:	4622      	mov	r2, r4
 800708c:	f001 f974 	bl	8008378 <_dtoa_r>
 8007090:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007094:	4605      	mov	r5, r0
 8007096:	d119      	bne.n	80070cc <__cvt+0x94>
 8007098:	f019 0f01 	tst.w	r9, #1
 800709c:	d00e      	beq.n	80070bc <__cvt+0x84>
 800709e:	eb00 0904 	add.w	r9, r0, r4
 80070a2:	2200      	movs	r2, #0
 80070a4:	2300      	movs	r3, #0
 80070a6:	4630      	mov	r0, r6
 80070a8:	4639      	mov	r1, r7
 80070aa:	f7f9 fd3d 	bl	8000b28 <__aeabi_dcmpeq>
 80070ae:	b108      	cbz	r0, 80070b4 <__cvt+0x7c>
 80070b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80070b4:	2230      	movs	r2, #48	@ 0x30
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	454b      	cmp	r3, r9
 80070ba:	d31e      	bcc.n	80070fa <__cvt+0xc2>
 80070bc:	9b03      	ldr	r3, [sp, #12]
 80070be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070c0:	1b5b      	subs	r3, r3, r5
 80070c2:	4628      	mov	r0, r5
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	b004      	add	sp, #16
 80070c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070d0:	eb00 0904 	add.w	r9, r0, r4
 80070d4:	d1e5      	bne.n	80070a2 <__cvt+0x6a>
 80070d6:	7803      	ldrb	r3, [r0, #0]
 80070d8:	2b30      	cmp	r3, #48	@ 0x30
 80070da:	d10a      	bne.n	80070f2 <__cvt+0xba>
 80070dc:	2200      	movs	r2, #0
 80070de:	2300      	movs	r3, #0
 80070e0:	4630      	mov	r0, r6
 80070e2:	4639      	mov	r1, r7
 80070e4:	f7f9 fd20 	bl	8000b28 <__aeabi_dcmpeq>
 80070e8:	b918      	cbnz	r0, 80070f2 <__cvt+0xba>
 80070ea:	f1c4 0401 	rsb	r4, r4, #1
 80070ee:	f8ca 4000 	str.w	r4, [sl]
 80070f2:	f8da 3000 	ldr.w	r3, [sl]
 80070f6:	4499      	add	r9, r3
 80070f8:	e7d3      	b.n	80070a2 <__cvt+0x6a>
 80070fa:	1c59      	adds	r1, r3, #1
 80070fc:	9103      	str	r1, [sp, #12]
 80070fe:	701a      	strb	r2, [r3, #0]
 8007100:	e7d9      	b.n	80070b6 <__cvt+0x7e>

08007102 <__exponent>:
 8007102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007104:	2900      	cmp	r1, #0
 8007106:	bfba      	itte	lt
 8007108:	4249      	neglt	r1, r1
 800710a:	232d      	movlt	r3, #45	@ 0x2d
 800710c:	232b      	movge	r3, #43	@ 0x2b
 800710e:	2909      	cmp	r1, #9
 8007110:	7002      	strb	r2, [r0, #0]
 8007112:	7043      	strb	r3, [r0, #1]
 8007114:	dd29      	ble.n	800716a <__exponent+0x68>
 8007116:	f10d 0307 	add.w	r3, sp, #7
 800711a:	461d      	mov	r5, r3
 800711c:	270a      	movs	r7, #10
 800711e:	461a      	mov	r2, r3
 8007120:	fbb1 f6f7 	udiv	r6, r1, r7
 8007124:	fb07 1416 	mls	r4, r7, r6, r1
 8007128:	3430      	adds	r4, #48	@ 0x30
 800712a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800712e:	460c      	mov	r4, r1
 8007130:	2c63      	cmp	r4, #99	@ 0x63
 8007132:	f103 33ff 	add.w	r3, r3, #4294967295
 8007136:	4631      	mov	r1, r6
 8007138:	dcf1      	bgt.n	800711e <__exponent+0x1c>
 800713a:	3130      	adds	r1, #48	@ 0x30
 800713c:	1e94      	subs	r4, r2, #2
 800713e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007142:	1c41      	adds	r1, r0, #1
 8007144:	4623      	mov	r3, r4
 8007146:	42ab      	cmp	r3, r5
 8007148:	d30a      	bcc.n	8007160 <__exponent+0x5e>
 800714a:	f10d 0309 	add.w	r3, sp, #9
 800714e:	1a9b      	subs	r3, r3, r2
 8007150:	42ac      	cmp	r4, r5
 8007152:	bf88      	it	hi
 8007154:	2300      	movhi	r3, #0
 8007156:	3302      	adds	r3, #2
 8007158:	4403      	add	r3, r0
 800715a:	1a18      	subs	r0, r3, r0
 800715c:	b003      	add	sp, #12
 800715e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007160:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007164:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007168:	e7ed      	b.n	8007146 <__exponent+0x44>
 800716a:	2330      	movs	r3, #48	@ 0x30
 800716c:	3130      	adds	r1, #48	@ 0x30
 800716e:	7083      	strb	r3, [r0, #2]
 8007170:	70c1      	strb	r1, [r0, #3]
 8007172:	1d03      	adds	r3, r0, #4
 8007174:	e7f1      	b.n	800715a <__exponent+0x58>
	...

08007178 <_printf_float>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	b08d      	sub	sp, #52	@ 0x34
 800717e:	460c      	mov	r4, r1
 8007180:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007184:	4616      	mov	r6, r2
 8007186:	461f      	mov	r7, r3
 8007188:	4605      	mov	r5, r0
 800718a:	f000 ffed 	bl	8008168 <_localeconv_r>
 800718e:	6803      	ldr	r3, [r0, #0]
 8007190:	9304      	str	r3, [sp, #16]
 8007192:	4618      	mov	r0, r3
 8007194:	f7f9 f89c 	bl	80002d0 <strlen>
 8007198:	2300      	movs	r3, #0
 800719a:	930a      	str	r3, [sp, #40]	@ 0x28
 800719c:	f8d8 3000 	ldr.w	r3, [r8]
 80071a0:	9005      	str	r0, [sp, #20]
 80071a2:	3307      	adds	r3, #7
 80071a4:	f023 0307 	bic.w	r3, r3, #7
 80071a8:	f103 0208 	add.w	r2, r3, #8
 80071ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071b0:	f8d4 b000 	ldr.w	fp, [r4]
 80071b4:	f8c8 2000 	str.w	r2, [r8]
 80071b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80071c0:	9307      	str	r3, [sp, #28]
 80071c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80071c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80071ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ce:	4b9c      	ldr	r3, [pc, #624]	@ (8007440 <_printf_float+0x2c8>)
 80071d0:	f04f 32ff 	mov.w	r2, #4294967295
 80071d4:	f7f9 fcda 	bl	8000b8c <__aeabi_dcmpun>
 80071d8:	bb70      	cbnz	r0, 8007238 <_printf_float+0xc0>
 80071da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071de:	4b98      	ldr	r3, [pc, #608]	@ (8007440 <_printf_float+0x2c8>)
 80071e0:	f04f 32ff 	mov.w	r2, #4294967295
 80071e4:	f7f9 fcb4 	bl	8000b50 <__aeabi_dcmple>
 80071e8:	bb30      	cbnz	r0, 8007238 <_printf_float+0xc0>
 80071ea:	2200      	movs	r2, #0
 80071ec:	2300      	movs	r3, #0
 80071ee:	4640      	mov	r0, r8
 80071f0:	4649      	mov	r1, r9
 80071f2:	f7f9 fca3 	bl	8000b3c <__aeabi_dcmplt>
 80071f6:	b110      	cbz	r0, 80071fe <_printf_float+0x86>
 80071f8:	232d      	movs	r3, #45	@ 0x2d
 80071fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071fe:	4a91      	ldr	r2, [pc, #580]	@ (8007444 <_printf_float+0x2cc>)
 8007200:	4b91      	ldr	r3, [pc, #580]	@ (8007448 <_printf_float+0x2d0>)
 8007202:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007206:	bf8c      	ite	hi
 8007208:	4690      	movhi	r8, r2
 800720a:	4698      	movls	r8, r3
 800720c:	2303      	movs	r3, #3
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	f02b 0304 	bic.w	r3, fp, #4
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	f04f 0900 	mov.w	r9, #0
 800721a:	9700      	str	r7, [sp, #0]
 800721c:	4633      	mov	r3, r6
 800721e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007220:	4621      	mov	r1, r4
 8007222:	4628      	mov	r0, r5
 8007224:	f000 f9d2 	bl	80075cc <_printf_common>
 8007228:	3001      	adds	r0, #1
 800722a:	f040 808d 	bne.w	8007348 <_printf_float+0x1d0>
 800722e:	f04f 30ff 	mov.w	r0, #4294967295
 8007232:	b00d      	add	sp, #52	@ 0x34
 8007234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007238:	4642      	mov	r2, r8
 800723a:	464b      	mov	r3, r9
 800723c:	4640      	mov	r0, r8
 800723e:	4649      	mov	r1, r9
 8007240:	f7f9 fca4 	bl	8000b8c <__aeabi_dcmpun>
 8007244:	b140      	cbz	r0, 8007258 <_printf_float+0xe0>
 8007246:	464b      	mov	r3, r9
 8007248:	2b00      	cmp	r3, #0
 800724a:	bfbc      	itt	lt
 800724c:	232d      	movlt	r3, #45	@ 0x2d
 800724e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007252:	4a7e      	ldr	r2, [pc, #504]	@ (800744c <_printf_float+0x2d4>)
 8007254:	4b7e      	ldr	r3, [pc, #504]	@ (8007450 <_printf_float+0x2d8>)
 8007256:	e7d4      	b.n	8007202 <_printf_float+0x8a>
 8007258:	6863      	ldr	r3, [r4, #4]
 800725a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800725e:	9206      	str	r2, [sp, #24]
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	d13b      	bne.n	80072dc <_printf_float+0x164>
 8007264:	2306      	movs	r3, #6
 8007266:	6063      	str	r3, [r4, #4]
 8007268:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800726c:	2300      	movs	r3, #0
 800726e:	6022      	str	r2, [r4, #0]
 8007270:	9303      	str	r3, [sp, #12]
 8007272:	ab0a      	add	r3, sp, #40	@ 0x28
 8007274:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007278:	ab09      	add	r3, sp, #36	@ 0x24
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	6861      	ldr	r1, [r4, #4]
 800727e:	ec49 8b10 	vmov	d0, r8, r9
 8007282:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007286:	4628      	mov	r0, r5
 8007288:	f7ff fed6 	bl	8007038 <__cvt>
 800728c:	9b06      	ldr	r3, [sp, #24]
 800728e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007290:	2b47      	cmp	r3, #71	@ 0x47
 8007292:	4680      	mov	r8, r0
 8007294:	d129      	bne.n	80072ea <_printf_float+0x172>
 8007296:	1cc8      	adds	r0, r1, #3
 8007298:	db02      	blt.n	80072a0 <_printf_float+0x128>
 800729a:	6863      	ldr	r3, [r4, #4]
 800729c:	4299      	cmp	r1, r3
 800729e:	dd41      	ble.n	8007324 <_printf_float+0x1ac>
 80072a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80072a4:	fa5f fa8a 	uxtb.w	sl, sl
 80072a8:	3901      	subs	r1, #1
 80072aa:	4652      	mov	r2, sl
 80072ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80072b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80072b2:	f7ff ff26 	bl	8007102 <__exponent>
 80072b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072b8:	1813      	adds	r3, r2, r0
 80072ba:	2a01      	cmp	r2, #1
 80072bc:	4681      	mov	r9, r0
 80072be:	6123      	str	r3, [r4, #16]
 80072c0:	dc02      	bgt.n	80072c8 <_printf_float+0x150>
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	07d2      	lsls	r2, r2, #31
 80072c6:	d501      	bpl.n	80072cc <_printf_float+0x154>
 80072c8:	3301      	adds	r3, #1
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0a2      	beq.n	800721a <_printf_float+0xa2>
 80072d4:	232d      	movs	r3, #45	@ 0x2d
 80072d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072da:	e79e      	b.n	800721a <_printf_float+0xa2>
 80072dc:	9a06      	ldr	r2, [sp, #24]
 80072de:	2a47      	cmp	r2, #71	@ 0x47
 80072e0:	d1c2      	bne.n	8007268 <_printf_float+0xf0>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1c0      	bne.n	8007268 <_printf_float+0xf0>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e7bd      	b.n	8007266 <_printf_float+0xee>
 80072ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072ee:	d9db      	bls.n	80072a8 <_printf_float+0x130>
 80072f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80072f4:	d118      	bne.n	8007328 <_printf_float+0x1b0>
 80072f6:	2900      	cmp	r1, #0
 80072f8:	6863      	ldr	r3, [r4, #4]
 80072fa:	dd0b      	ble.n	8007314 <_printf_float+0x19c>
 80072fc:	6121      	str	r1, [r4, #16]
 80072fe:	b913      	cbnz	r3, 8007306 <_printf_float+0x18e>
 8007300:	6822      	ldr	r2, [r4, #0]
 8007302:	07d0      	lsls	r0, r2, #31
 8007304:	d502      	bpl.n	800730c <_printf_float+0x194>
 8007306:	3301      	adds	r3, #1
 8007308:	440b      	add	r3, r1
 800730a:	6123      	str	r3, [r4, #16]
 800730c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800730e:	f04f 0900 	mov.w	r9, #0
 8007312:	e7db      	b.n	80072cc <_printf_float+0x154>
 8007314:	b913      	cbnz	r3, 800731c <_printf_float+0x1a4>
 8007316:	6822      	ldr	r2, [r4, #0]
 8007318:	07d2      	lsls	r2, r2, #31
 800731a:	d501      	bpl.n	8007320 <_printf_float+0x1a8>
 800731c:	3302      	adds	r3, #2
 800731e:	e7f4      	b.n	800730a <_printf_float+0x192>
 8007320:	2301      	movs	r3, #1
 8007322:	e7f2      	b.n	800730a <_printf_float+0x192>
 8007324:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800732a:	4299      	cmp	r1, r3
 800732c:	db05      	blt.n	800733a <_printf_float+0x1c2>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	6121      	str	r1, [r4, #16]
 8007332:	07d8      	lsls	r0, r3, #31
 8007334:	d5ea      	bpl.n	800730c <_printf_float+0x194>
 8007336:	1c4b      	adds	r3, r1, #1
 8007338:	e7e7      	b.n	800730a <_printf_float+0x192>
 800733a:	2900      	cmp	r1, #0
 800733c:	bfd4      	ite	le
 800733e:	f1c1 0202 	rsble	r2, r1, #2
 8007342:	2201      	movgt	r2, #1
 8007344:	4413      	add	r3, r2
 8007346:	e7e0      	b.n	800730a <_printf_float+0x192>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	055a      	lsls	r2, r3, #21
 800734c:	d407      	bmi.n	800735e <_printf_float+0x1e6>
 800734e:	6923      	ldr	r3, [r4, #16]
 8007350:	4642      	mov	r2, r8
 8007352:	4631      	mov	r1, r6
 8007354:	4628      	mov	r0, r5
 8007356:	47b8      	blx	r7
 8007358:	3001      	adds	r0, #1
 800735a:	d12b      	bne.n	80073b4 <_printf_float+0x23c>
 800735c:	e767      	b.n	800722e <_printf_float+0xb6>
 800735e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007362:	f240 80dd 	bls.w	8007520 <_printf_float+0x3a8>
 8007366:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800736a:	2200      	movs	r2, #0
 800736c:	2300      	movs	r3, #0
 800736e:	f7f9 fbdb 	bl	8000b28 <__aeabi_dcmpeq>
 8007372:	2800      	cmp	r0, #0
 8007374:	d033      	beq.n	80073de <_printf_float+0x266>
 8007376:	4a37      	ldr	r2, [pc, #220]	@ (8007454 <_printf_float+0x2dc>)
 8007378:	2301      	movs	r3, #1
 800737a:	4631      	mov	r1, r6
 800737c:	4628      	mov	r0, r5
 800737e:	47b8      	blx	r7
 8007380:	3001      	adds	r0, #1
 8007382:	f43f af54 	beq.w	800722e <_printf_float+0xb6>
 8007386:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800738a:	4543      	cmp	r3, r8
 800738c:	db02      	blt.n	8007394 <_printf_float+0x21c>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	07d8      	lsls	r0, r3, #31
 8007392:	d50f      	bpl.n	80073b4 <_printf_float+0x23c>
 8007394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007398:	4631      	mov	r1, r6
 800739a:	4628      	mov	r0, r5
 800739c:	47b8      	blx	r7
 800739e:	3001      	adds	r0, #1
 80073a0:	f43f af45 	beq.w	800722e <_printf_float+0xb6>
 80073a4:	f04f 0900 	mov.w	r9, #0
 80073a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80073ac:	f104 0a1a 	add.w	sl, r4, #26
 80073b0:	45c8      	cmp	r8, r9
 80073b2:	dc09      	bgt.n	80073c8 <_printf_float+0x250>
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	079b      	lsls	r3, r3, #30
 80073b8:	f100 8103 	bmi.w	80075c2 <_printf_float+0x44a>
 80073bc:	68e0      	ldr	r0, [r4, #12]
 80073be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073c0:	4298      	cmp	r0, r3
 80073c2:	bfb8      	it	lt
 80073c4:	4618      	movlt	r0, r3
 80073c6:	e734      	b.n	8007232 <_printf_float+0xba>
 80073c8:	2301      	movs	r3, #1
 80073ca:	4652      	mov	r2, sl
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f43f af2b 	beq.w	800722e <_printf_float+0xb6>
 80073d8:	f109 0901 	add.w	r9, r9, #1
 80073dc:	e7e8      	b.n	80073b0 <_printf_float+0x238>
 80073de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dc39      	bgt.n	8007458 <_printf_float+0x2e0>
 80073e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007454 <_printf_float+0x2dc>)
 80073e6:	2301      	movs	r3, #1
 80073e8:	4631      	mov	r1, r6
 80073ea:	4628      	mov	r0, r5
 80073ec:	47b8      	blx	r7
 80073ee:	3001      	adds	r0, #1
 80073f0:	f43f af1d 	beq.w	800722e <_printf_float+0xb6>
 80073f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80073f8:	ea59 0303 	orrs.w	r3, r9, r3
 80073fc:	d102      	bne.n	8007404 <_printf_float+0x28c>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	07d9      	lsls	r1, r3, #31
 8007402:	d5d7      	bpl.n	80073b4 <_printf_float+0x23c>
 8007404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007408:	4631      	mov	r1, r6
 800740a:	4628      	mov	r0, r5
 800740c:	47b8      	blx	r7
 800740e:	3001      	adds	r0, #1
 8007410:	f43f af0d 	beq.w	800722e <_printf_float+0xb6>
 8007414:	f04f 0a00 	mov.w	sl, #0
 8007418:	f104 0b1a 	add.w	fp, r4, #26
 800741c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800741e:	425b      	negs	r3, r3
 8007420:	4553      	cmp	r3, sl
 8007422:	dc01      	bgt.n	8007428 <_printf_float+0x2b0>
 8007424:	464b      	mov	r3, r9
 8007426:	e793      	b.n	8007350 <_printf_float+0x1d8>
 8007428:	2301      	movs	r3, #1
 800742a:	465a      	mov	r2, fp
 800742c:	4631      	mov	r1, r6
 800742e:	4628      	mov	r0, r5
 8007430:	47b8      	blx	r7
 8007432:	3001      	adds	r0, #1
 8007434:	f43f aefb 	beq.w	800722e <_printf_float+0xb6>
 8007438:	f10a 0a01 	add.w	sl, sl, #1
 800743c:	e7ee      	b.n	800741c <_printf_float+0x2a4>
 800743e:	bf00      	nop
 8007440:	7fefffff 	.word	0x7fefffff
 8007444:	0800ba55 	.word	0x0800ba55
 8007448:	0800ba51 	.word	0x0800ba51
 800744c:	0800ba5d 	.word	0x0800ba5d
 8007450:	0800ba59 	.word	0x0800ba59
 8007454:	0800ba61 	.word	0x0800ba61
 8007458:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800745a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800745e:	4553      	cmp	r3, sl
 8007460:	bfa8      	it	ge
 8007462:	4653      	movge	r3, sl
 8007464:	2b00      	cmp	r3, #0
 8007466:	4699      	mov	r9, r3
 8007468:	dc36      	bgt.n	80074d8 <_printf_float+0x360>
 800746a:	f04f 0b00 	mov.w	fp, #0
 800746e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007472:	f104 021a 	add.w	r2, r4, #26
 8007476:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007478:	9306      	str	r3, [sp, #24]
 800747a:	eba3 0309 	sub.w	r3, r3, r9
 800747e:	455b      	cmp	r3, fp
 8007480:	dc31      	bgt.n	80074e6 <_printf_float+0x36e>
 8007482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007484:	459a      	cmp	sl, r3
 8007486:	dc3a      	bgt.n	80074fe <_printf_float+0x386>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	07da      	lsls	r2, r3, #31
 800748c:	d437      	bmi.n	80074fe <_printf_float+0x386>
 800748e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007490:	ebaa 0903 	sub.w	r9, sl, r3
 8007494:	9b06      	ldr	r3, [sp, #24]
 8007496:	ebaa 0303 	sub.w	r3, sl, r3
 800749a:	4599      	cmp	r9, r3
 800749c:	bfa8      	it	ge
 800749e:	4699      	movge	r9, r3
 80074a0:	f1b9 0f00 	cmp.w	r9, #0
 80074a4:	dc33      	bgt.n	800750e <_printf_float+0x396>
 80074a6:	f04f 0800 	mov.w	r8, #0
 80074aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074ae:	f104 0b1a 	add.w	fp, r4, #26
 80074b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b4:	ebaa 0303 	sub.w	r3, sl, r3
 80074b8:	eba3 0309 	sub.w	r3, r3, r9
 80074bc:	4543      	cmp	r3, r8
 80074be:	f77f af79 	ble.w	80073b4 <_printf_float+0x23c>
 80074c2:	2301      	movs	r3, #1
 80074c4:	465a      	mov	r2, fp
 80074c6:	4631      	mov	r1, r6
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b8      	blx	r7
 80074cc:	3001      	adds	r0, #1
 80074ce:	f43f aeae 	beq.w	800722e <_printf_float+0xb6>
 80074d2:	f108 0801 	add.w	r8, r8, #1
 80074d6:	e7ec      	b.n	80074b2 <_printf_float+0x33a>
 80074d8:	4642      	mov	r2, r8
 80074da:	4631      	mov	r1, r6
 80074dc:	4628      	mov	r0, r5
 80074de:	47b8      	blx	r7
 80074e0:	3001      	adds	r0, #1
 80074e2:	d1c2      	bne.n	800746a <_printf_float+0x2f2>
 80074e4:	e6a3      	b.n	800722e <_printf_float+0xb6>
 80074e6:	2301      	movs	r3, #1
 80074e8:	4631      	mov	r1, r6
 80074ea:	4628      	mov	r0, r5
 80074ec:	9206      	str	r2, [sp, #24]
 80074ee:	47b8      	blx	r7
 80074f0:	3001      	adds	r0, #1
 80074f2:	f43f ae9c 	beq.w	800722e <_printf_float+0xb6>
 80074f6:	9a06      	ldr	r2, [sp, #24]
 80074f8:	f10b 0b01 	add.w	fp, fp, #1
 80074fc:	e7bb      	b.n	8007476 <_printf_float+0x2fe>
 80074fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007502:	4631      	mov	r1, r6
 8007504:	4628      	mov	r0, r5
 8007506:	47b8      	blx	r7
 8007508:	3001      	adds	r0, #1
 800750a:	d1c0      	bne.n	800748e <_printf_float+0x316>
 800750c:	e68f      	b.n	800722e <_printf_float+0xb6>
 800750e:	9a06      	ldr	r2, [sp, #24]
 8007510:	464b      	mov	r3, r9
 8007512:	4442      	add	r2, r8
 8007514:	4631      	mov	r1, r6
 8007516:	4628      	mov	r0, r5
 8007518:	47b8      	blx	r7
 800751a:	3001      	adds	r0, #1
 800751c:	d1c3      	bne.n	80074a6 <_printf_float+0x32e>
 800751e:	e686      	b.n	800722e <_printf_float+0xb6>
 8007520:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007524:	f1ba 0f01 	cmp.w	sl, #1
 8007528:	dc01      	bgt.n	800752e <_printf_float+0x3b6>
 800752a:	07db      	lsls	r3, r3, #31
 800752c:	d536      	bpl.n	800759c <_printf_float+0x424>
 800752e:	2301      	movs	r3, #1
 8007530:	4642      	mov	r2, r8
 8007532:	4631      	mov	r1, r6
 8007534:	4628      	mov	r0, r5
 8007536:	47b8      	blx	r7
 8007538:	3001      	adds	r0, #1
 800753a:	f43f ae78 	beq.w	800722e <_printf_float+0xb6>
 800753e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007542:	4631      	mov	r1, r6
 8007544:	4628      	mov	r0, r5
 8007546:	47b8      	blx	r7
 8007548:	3001      	adds	r0, #1
 800754a:	f43f ae70 	beq.w	800722e <_printf_float+0xb6>
 800754e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007552:	2200      	movs	r2, #0
 8007554:	2300      	movs	r3, #0
 8007556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800755a:	f7f9 fae5 	bl	8000b28 <__aeabi_dcmpeq>
 800755e:	b9c0      	cbnz	r0, 8007592 <_printf_float+0x41a>
 8007560:	4653      	mov	r3, sl
 8007562:	f108 0201 	add.w	r2, r8, #1
 8007566:	4631      	mov	r1, r6
 8007568:	4628      	mov	r0, r5
 800756a:	47b8      	blx	r7
 800756c:	3001      	adds	r0, #1
 800756e:	d10c      	bne.n	800758a <_printf_float+0x412>
 8007570:	e65d      	b.n	800722e <_printf_float+0xb6>
 8007572:	2301      	movs	r3, #1
 8007574:	465a      	mov	r2, fp
 8007576:	4631      	mov	r1, r6
 8007578:	4628      	mov	r0, r5
 800757a:	47b8      	blx	r7
 800757c:	3001      	adds	r0, #1
 800757e:	f43f ae56 	beq.w	800722e <_printf_float+0xb6>
 8007582:	f108 0801 	add.w	r8, r8, #1
 8007586:	45d0      	cmp	r8, sl
 8007588:	dbf3      	blt.n	8007572 <_printf_float+0x3fa>
 800758a:	464b      	mov	r3, r9
 800758c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007590:	e6df      	b.n	8007352 <_printf_float+0x1da>
 8007592:	f04f 0800 	mov.w	r8, #0
 8007596:	f104 0b1a 	add.w	fp, r4, #26
 800759a:	e7f4      	b.n	8007586 <_printf_float+0x40e>
 800759c:	2301      	movs	r3, #1
 800759e:	4642      	mov	r2, r8
 80075a0:	e7e1      	b.n	8007566 <_printf_float+0x3ee>
 80075a2:	2301      	movs	r3, #1
 80075a4:	464a      	mov	r2, r9
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	f43f ae3e 	beq.w	800722e <_printf_float+0xb6>
 80075b2:	f108 0801 	add.w	r8, r8, #1
 80075b6:	68e3      	ldr	r3, [r4, #12]
 80075b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075ba:	1a5b      	subs	r3, r3, r1
 80075bc:	4543      	cmp	r3, r8
 80075be:	dcf0      	bgt.n	80075a2 <_printf_float+0x42a>
 80075c0:	e6fc      	b.n	80073bc <_printf_float+0x244>
 80075c2:	f04f 0800 	mov.w	r8, #0
 80075c6:	f104 0919 	add.w	r9, r4, #25
 80075ca:	e7f4      	b.n	80075b6 <_printf_float+0x43e>

080075cc <_printf_common>:
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	4616      	mov	r6, r2
 80075d2:	4698      	mov	r8, r3
 80075d4:	688a      	ldr	r2, [r1, #8]
 80075d6:	690b      	ldr	r3, [r1, #16]
 80075d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075dc:	4293      	cmp	r3, r2
 80075de:	bfb8      	it	lt
 80075e0:	4613      	movlt	r3, r2
 80075e2:	6033      	str	r3, [r6, #0]
 80075e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075e8:	4607      	mov	r7, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	b10a      	cbz	r2, 80075f2 <_printf_common+0x26>
 80075ee:	3301      	adds	r3, #1
 80075f0:	6033      	str	r3, [r6, #0]
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	0699      	lsls	r1, r3, #26
 80075f6:	bf42      	ittt	mi
 80075f8:	6833      	ldrmi	r3, [r6, #0]
 80075fa:	3302      	addmi	r3, #2
 80075fc:	6033      	strmi	r3, [r6, #0]
 80075fe:	6825      	ldr	r5, [r4, #0]
 8007600:	f015 0506 	ands.w	r5, r5, #6
 8007604:	d106      	bne.n	8007614 <_printf_common+0x48>
 8007606:	f104 0a19 	add.w	sl, r4, #25
 800760a:	68e3      	ldr	r3, [r4, #12]
 800760c:	6832      	ldr	r2, [r6, #0]
 800760e:	1a9b      	subs	r3, r3, r2
 8007610:	42ab      	cmp	r3, r5
 8007612:	dc26      	bgt.n	8007662 <_printf_common+0x96>
 8007614:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007618:	6822      	ldr	r2, [r4, #0]
 800761a:	3b00      	subs	r3, #0
 800761c:	bf18      	it	ne
 800761e:	2301      	movne	r3, #1
 8007620:	0692      	lsls	r2, r2, #26
 8007622:	d42b      	bmi.n	800767c <_printf_common+0xb0>
 8007624:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007628:	4641      	mov	r1, r8
 800762a:	4638      	mov	r0, r7
 800762c:	47c8      	blx	r9
 800762e:	3001      	adds	r0, #1
 8007630:	d01e      	beq.n	8007670 <_printf_common+0xa4>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	6922      	ldr	r2, [r4, #16]
 8007636:	f003 0306 	and.w	r3, r3, #6
 800763a:	2b04      	cmp	r3, #4
 800763c:	bf02      	ittt	eq
 800763e:	68e5      	ldreq	r5, [r4, #12]
 8007640:	6833      	ldreq	r3, [r6, #0]
 8007642:	1aed      	subeq	r5, r5, r3
 8007644:	68a3      	ldr	r3, [r4, #8]
 8007646:	bf0c      	ite	eq
 8007648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800764c:	2500      	movne	r5, #0
 800764e:	4293      	cmp	r3, r2
 8007650:	bfc4      	itt	gt
 8007652:	1a9b      	subgt	r3, r3, r2
 8007654:	18ed      	addgt	r5, r5, r3
 8007656:	2600      	movs	r6, #0
 8007658:	341a      	adds	r4, #26
 800765a:	42b5      	cmp	r5, r6
 800765c:	d11a      	bne.n	8007694 <_printf_common+0xc8>
 800765e:	2000      	movs	r0, #0
 8007660:	e008      	b.n	8007674 <_printf_common+0xa8>
 8007662:	2301      	movs	r3, #1
 8007664:	4652      	mov	r2, sl
 8007666:	4641      	mov	r1, r8
 8007668:	4638      	mov	r0, r7
 800766a:	47c8      	blx	r9
 800766c:	3001      	adds	r0, #1
 800766e:	d103      	bne.n	8007678 <_printf_common+0xac>
 8007670:	f04f 30ff 	mov.w	r0, #4294967295
 8007674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007678:	3501      	adds	r5, #1
 800767a:	e7c6      	b.n	800760a <_printf_common+0x3e>
 800767c:	18e1      	adds	r1, r4, r3
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	2030      	movs	r0, #48	@ 0x30
 8007682:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007686:	4422      	add	r2, r4
 8007688:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800768c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007690:	3302      	adds	r3, #2
 8007692:	e7c7      	b.n	8007624 <_printf_common+0x58>
 8007694:	2301      	movs	r3, #1
 8007696:	4622      	mov	r2, r4
 8007698:	4641      	mov	r1, r8
 800769a:	4638      	mov	r0, r7
 800769c:	47c8      	blx	r9
 800769e:	3001      	adds	r0, #1
 80076a0:	d0e6      	beq.n	8007670 <_printf_common+0xa4>
 80076a2:	3601      	adds	r6, #1
 80076a4:	e7d9      	b.n	800765a <_printf_common+0x8e>
	...

080076a8 <_printf_i>:
 80076a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	7e0f      	ldrb	r7, [r1, #24]
 80076ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076b0:	2f78      	cmp	r7, #120	@ 0x78
 80076b2:	4691      	mov	r9, r2
 80076b4:	4680      	mov	r8, r0
 80076b6:	460c      	mov	r4, r1
 80076b8:	469a      	mov	sl, r3
 80076ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076be:	d807      	bhi.n	80076d0 <_printf_i+0x28>
 80076c0:	2f62      	cmp	r7, #98	@ 0x62
 80076c2:	d80a      	bhi.n	80076da <_printf_i+0x32>
 80076c4:	2f00      	cmp	r7, #0
 80076c6:	f000 80d1 	beq.w	800786c <_printf_i+0x1c4>
 80076ca:	2f58      	cmp	r7, #88	@ 0x58
 80076cc:	f000 80b8 	beq.w	8007840 <_printf_i+0x198>
 80076d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076d8:	e03a      	b.n	8007750 <_printf_i+0xa8>
 80076da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076de:	2b15      	cmp	r3, #21
 80076e0:	d8f6      	bhi.n	80076d0 <_printf_i+0x28>
 80076e2:	a101      	add	r1, pc, #4	@ (adr r1, 80076e8 <_printf_i+0x40>)
 80076e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076e8:	08007741 	.word	0x08007741
 80076ec:	08007755 	.word	0x08007755
 80076f0:	080076d1 	.word	0x080076d1
 80076f4:	080076d1 	.word	0x080076d1
 80076f8:	080076d1 	.word	0x080076d1
 80076fc:	080076d1 	.word	0x080076d1
 8007700:	08007755 	.word	0x08007755
 8007704:	080076d1 	.word	0x080076d1
 8007708:	080076d1 	.word	0x080076d1
 800770c:	080076d1 	.word	0x080076d1
 8007710:	080076d1 	.word	0x080076d1
 8007714:	08007853 	.word	0x08007853
 8007718:	0800777f 	.word	0x0800777f
 800771c:	0800780d 	.word	0x0800780d
 8007720:	080076d1 	.word	0x080076d1
 8007724:	080076d1 	.word	0x080076d1
 8007728:	08007875 	.word	0x08007875
 800772c:	080076d1 	.word	0x080076d1
 8007730:	0800777f 	.word	0x0800777f
 8007734:	080076d1 	.word	0x080076d1
 8007738:	080076d1 	.word	0x080076d1
 800773c:	08007815 	.word	0x08007815
 8007740:	6833      	ldr	r3, [r6, #0]
 8007742:	1d1a      	adds	r2, r3, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6032      	str	r2, [r6, #0]
 8007748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800774c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007750:	2301      	movs	r3, #1
 8007752:	e09c      	b.n	800788e <_printf_i+0x1e6>
 8007754:	6833      	ldr	r3, [r6, #0]
 8007756:	6820      	ldr	r0, [r4, #0]
 8007758:	1d19      	adds	r1, r3, #4
 800775a:	6031      	str	r1, [r6, #0]
 800775c:	0606      	lsls	r6, r0, #24
 800775e:	d501      	bpl.n	8007764 <_printf_i+0xbc>
 8007760:	681d      	ldr	r5, [r3, #0]
 8007762:	e003      	b.n	800776c <_printf_i+0xc4>
 8007764:	0645      	lsls	r5, r0, #25
 8007766:	d5fb      	bpl.n	8007760 <_printf_i+0xb8>
 8007768:	f9b3 5000 	ldrsh.w	r5, [r3]
 800776c:	2d00      	cmp	r5, #0
 800776e:	da03      	bge.n	8007778 <_printf_i+0xd0>
 8007770:	232d      	movs	r3, #45	@ 0x2d
 8007772:	426d      	negs	r5, r5
 8007774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007778:	4858      	ldr	r0, [pc, #352]	@ (80078dc <_printf_i+0x234>)
 800777a:	230a      	movs	r3, #10
 800777c:	e011      	b.n	80077a2 <_printf_i+0xfa>
 800777e:	6821      	ldr	r1, [r4, #0]
 8007780:	6833      	ldr	r3, [r6, #0]
 8007782:	0608      	lsls	r0, r1, #24
 8007784:	f853 5b04 	ldr.w	r5, [r3], #4
 8007788:	d402      	bmi.n	8007790 <_printf_i+0xe8>
 800778a:	0649      	lsls	r1, r1, #25
 800778c:	bf48      	it	mi
 800778e:	b2ad      	uxthmi	r5, r5
 8007790:	2f6f      	cmp	r7, #111	@ 0x6f
 8007792:	4852      	ldr	r0, [pc, #328]	@ (80078dc <_printf_i+0x234>)
 8007794:	6033      	str	r3, [r6, #0]
 8007796:	bf14      	ite	ne
 8007798:	230a      	movne	r3, #10
 800779a:	2308      	moveq	r3, #8
 800779c:	2100      	movs	r1, #0
 800779e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077a2:	6866      	ldr	r6, [r4, #4]
 80077a4:	60a6      	str	r6, [r4, #8]
 80077a6:	2e00      	cmp	r6, #0
 80077a8:	db05      	blt.n	80077b6 <_printf_i+0x10e>
 80077aa:	6821      	ldr	r1, [r4, #0]
 80077ac:	432e      	orrs	r6, r5
 80077ae:	f021 0104 	bic.w	r1, r1, #4
 80077b2:	6021      	str	r1, [r4, #0]
 80077b4:	d04b      	beq.n	800784e <_printf_i+0x1a6>
 80077b6:	4616      	mov	r6, r2
 80077b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80077bc:	fb03 5711 	mls	r7, r3, r1, r5
 80077c0:	5dc7      	ldrb	r7, [r0, r7]
 80077c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077c6:	462f      	mov	r7, r5
 80077c8:	42bb      	cmp	r3, r7
 80077ca:	460d      	mov	r5, r1
 80077cc:	d9f4      	bls.n	80077b8 <_printf_i+0x110>
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d10b      	bne.n	80077ea <_printf_i+0x142>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	07df      	lsls	r7, r3, #31
 80077d6:	d508      	bpl.n	80077ea <_printf_i+0x142>
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	6861      	ldr	r1, [r4, #4]
 80077dc:	4299      	cmp	r1, r3
 80077de:	bfde      	ittt	le
 80077e0:	2330      	movle	r3, #48	@ 0x30
 80077e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077ea:	1b92      	subs	r2, r2, r6
 80077ec:	6122      	str	r2, [r4, #16]
 80077ee:	f8cd a000 	str.w	sl, [sp]
 80077f2:	464b      	mov	r3, r9
 80077f4:	aa03      	add	r2, sp, #12
 80077f6:	4621      	mov	r1, r4
 80077f8:	4640      	mov	r0, r8
 80077fa:	f7ff fee7 	bl	80075cc <_printf_common>
 80077fe:	3001      	adds	r0, #1
 8007800:	d14a      	bne.n	8007898 <_printf_i+0x1f0>
 8007802:	f04f 30ff 	mov.w	r0, #4294967295
 8007806:	b004      	add	sp, #16
 8007808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	f043 0320 	orr.w	r3, r3, #32
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	4832      	ldr	r0, [pc, #200]	@ (80078e0 <_printf_i+0x238>)
 8007816:	2778      	movs	r7, #120	@ 0x78
 8007818:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	6831      	ldr	r1, [r6, #0]
 8007820:	061f      	lsls	r7, r3, #24
 8007822:	f851 5b04 	ldr.w	r5, [r1], #4
 8007826:	d402      	bmi.n	800782e <_printf_i+0x186>
 8007828:	065f      	lsls	r7, r3, #25
 800782a:	bf48      	it	mi
 800782c:	b2ad      	uxthmi	r5, r5
 800782e:	6031      	str	r1, [r6, #0]
 8007830:	07d9      	lsls	r1, r3, #31
 8007832:	bf44      	itt	mi
 8007834:	f043 0320 	orrmi.w	r3, r3, #32
 8007838:	6023      	strmi	r3, [r4, #0]
 800783a:	b11d      	cbz	r5, 8007844 <_printf_i+0x19c>
 800783c:	2310      	movs	r3, #16
 800783e:	e7ad      	b.n	800779c <_printf_i+0xf4>
 8007840:	4826      	ldr	r0, [pc, #152]	@ (80078dc <_printf_i+0x234>)
 8007842:	e7e9      	b.n	8007818 <_printf_i+0x170>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	f023 0320 	bic.w	r3, r3, #32
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	e7f6      	b.n	800783c <_printf_i+0x194>
 800784e:	4616      	mov	r6, r2
 8007850:	e7bd      	b.n	80077ce <_printf_i+0x126>
 8007852:	6833      	ldr	r3, [r6, #0]
 8007854:	6825      	ldr	r5, [r4, #0]
 8007856:	6961      	ldr	r1, [r4, #20]
 8007858:	1d18      	adds	r0, r3, #4
 800785a:	6030      	str	r0, [r6, #0]
 800785c:	062e      	lsls	r6, r5, #24
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	d501      	bpl.n	8007866 <_printf_i+0x1be>
 8007862:	6019      	str	r1, [r3, #0]
 8007864:	e002      	b.n	800786c <_printf_i+0x1c4>
 8007866:	0668      	lsls	r0, r5, #25
 8007868:	d5fb      	bpl.n	8007862 <_printf_i+0x1ba>
 800786a:	8019      	strh	r1, [r3, #0]
 800786c:	2300      	movs	r3, #0
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	4616      	mov	r6, r2
 8007872:	e7bc      	b.n	80077ee <_printf_i+0x146>
 8007874:	6833      	ldr	r3, [r6, #0]
 8007876:	1d1a      	adds	r2, r3, #4
 8007878:	6032      	str	r2, [r6, #0]
 800787a:	681e      	ldr	r6, [r3, #0]
 800787c:	6862      	ldr	r2, [r4, #4]
 800787e:	2100      	movs	r1, #0
 8007880:	4630      	mov	r0, r6
 8007882:	f7f8 fcd5 	bl	8000230 <memchr>
 8007886:	b108      	cbz	r0, 800788c <_printf_i+0x1e4>
 8007888:	1b80      	subs	r0, r0, r6
 800788a:	6060      	str	r0, [r4, #4]
 800788c:	6863      	ldr	r3, [r4, #4]
 800788e:	6123      	str	r3, [r4, #16]
 8007890:	2300      	movs	r3, #0
 8007892:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007896:	e7aa      	b.n	80077ee <_printf_i+0x146>
 8007898:	6923      	ldr	r3, [r4, #16]
 800789a:	4632      	mov	r2, r6
 800789c:	4649      	mov	r1, r9
 800789e:	4640      	mov	r0, r8
 80078a0:	47d0      	blx	sl
 80078a2:	3001      	adds	r0, #1
 80078a4:	d0ad      	beq.n	8007802 <_printf_i+0x15a>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	079b      	lsls	r3, r3, #30
 80078aa:	d413      	bmi.n	80078d4 <_printf_i+0x22c>
 80078ac:	68e0      	ldr	r0, [r4, #12]
 80078ae:	9b03      	ldr	r3, [sp, #12]
 80078b0:	4298      	cmp	r0, r3
 80078b2:	bfb8      	it	lt
 80078b4:	4618      	movlt	r0, r3
 80078b6:	e7a6      	b.n	8007806 <_printf_i+0x15e>
 80078b8:	2301      	movs	r3, #1
 80078ba:	4632      	mov	r2, r6
 80078bc:	4649      	mov	r1, r9
 80078be:	4640      	mov	r0, r8
 80078c0:	47d0      	blx	sl
 80078c2:	3001      	adds	r0, #1
 80078c4:	d09d      	beq.n	8007802 <_printf_i+0x15a>
 80078c6:	3501      	adds	r5, #1
 80078c8:	68e3      	ldr	r3, [r4, #12]
 80078ca:	9903      	ldr	r1, [sp, #12]
 80078cc:	1a5b      	subs	r3, r3, r1
 80078ce:	42ab      	cmp	r3, r5
 80078d0:	dcf2      	bgt.n	80078b8 <_printf_i+0x210>
 80078d2:	e7eb      	b.n	80078ac <_printf_i+0x204>
 80078d4:	2500      	movs	r5, #0
 80078d6:	f104 0619 	add.w	r6, r4, #25
 80078da:	e7f5      	b.n	80078c8 <_printf_i+0x220>
 80078dc:	0800ba63 	.word	0x0800ba63
 80078e0:	0800ba74 	.word	0x0800ba74

080078e4 <_scanf_float>:
 80078e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e8:	b087      	sub	sp, #28
 80078ea:	4691      	mov	r9, r2
 80078ec:	9303      	str	r3, [sp, #12]
 80078ee:	688b      	ldr	r3, [r1, #8]
 80078f0:	1e5a      	subs	r2, r3, #1
 80078f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80078f6:	bf81      	itttt	hi
 80078f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80078fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8007900:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007904:	608b      	strhi	r3, [r1, #8]
 8007906:	680b      	ldr	r3, [r1, #0]
 8007908:	460a      	mov	r2, r1
 800790a:	f04f 0500 	mov.w	r5, #0
 800790e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007912:	f842 3b1c 	str.w	r3, [r2], #28
 8007916:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800791a:	4680      	mov	r8, r0
 800791c:	460c      	mov	r4, r1
 800791e:	bf98      	it	ls
 8007920:	f04f 0b00 	movls.w	fp, #0
 8007924:	9201      	str	r2, [sp, #4]
 8007926:	4616      	mov	r6, r2
 8007928:	46aa      	mov	sl, r5
 800792a:	462f      	mov	r7, r5
 800792c:	9502      	str	r5, [sp, #8]
 800792e:	68a2      	ldr	r2, [r4, #8]
 8007930:	b15a      	cbz	r2, 800794a <_scanf_float+0x66>
 8007932:	f8d9 3000 	ldr.w	r3, [r9]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b4e      	cmp	r3, #78	@ 0x4e
 800793a:	d863      	bhi.n	8007a04 <_scanf_float+0x120>
 800793c:	2b40      	cmp	r3, #64	@ 0x40
 800793e:	d83b      	bhi.n	80079b8 <_scanf_float+0xd4>
 8007940:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007944:	b2c8      	uxtb	r0, r1
 8007946:	280e      	cmp	r0, #14
 8007948:	d939      	bls.n	80079be <_scanf_float+0xda>
 800794a:	b11f      	cbz	r7, 8007954 <_scanf_float+0x70>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007952:	6023      	str	r3, [r4, #0]
 8007954:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007958:	f1ba 0f01 	cmp.w	sl, #1
 800795c:	f200 8114 	bhi.w	8007b88 <_scanf_float+0x2a4>
 8007960:	9b01      	ldr	r3, [sp, #4]
 8007962:	429e      	cmp	r6, r3
 8007964:	f200 8105 	bhi.w	8007b72 <_scanf_float+0x28e>
 8007968:	2001      	movs	r0, #1
 800796a:	b007      	add	sp, #28
 800796c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007970:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007974:	2a0d      	cmp	r2, #13
 8007976:	d8e8      	bhi.n	800794a <_scanf_float+0x66>
 8007978:	a101      	add	r1, pc, #4	@ (adr r1, 8007980 <_scanf_float+0x9c>)
 800797a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800797e:	bf00      	nop
 8007980:	08007ac9 	.word	0x08007ac9
 8007984:	0800794b 	.word	0x0800794b
 8007988:	0800794b 	.word	0x0800794b
 800798c:	0800794b 	.word	0x0800794b
 8007990:	08007b25 	.word	0x08007b25
 8007994:	08007aff 	.word	0x08007aff
 8007998:	0800794b 	.word	0x0800794b
 800799c:	0800794b 	.word	0x0800794b
 80079a0:	08007ad7 	.word	0x08007ad7
 80079a4:	0800794b 	.word	0x0800794b
 80079a8:	0800794b 	.word	0x0800794b
 80079ac:	0800794b 	.word	0x0800794b
 80079b0:	0800794b 	.word	0x0800794b
 80079b4:	08007a93 	.word	0x08007a93
 80079b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80079bc:	e7da      	b.n	8007974 <_scanf_float+0x90>
 80079be:	290e      	cmp	r1, #14
 80079c0:	d8c3      	bhi.n	800794a <_scanf_float+0x66>
 80079c2:	a001      	add	r0, pc, #4	@ (adr r0, 80079c8 <_scanf_float+0xe4>)
 80079c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80079c8:	08007a83 	.word	0x08007a83
 80079cc:	0800794b 	.word	0x0800794b
 80079d0:	08007a83 	.word	0x08007a83
 80079d4:	08007b13 	.word	0x08007b13
 80079d8:	0800794b 	.word	0x0800794b
 80079dc:	08007a25 	.word	0x08007a25
 80079e0:	08007a69 	.word	0x08007a69
 80079e4:	08007a69 	.word	0x08007a69
 80079e8:	08007a69 	.word	0x08007a69
 80079ec:	08007a69 	.word	0x08007a69
 80079f0:	08007a69 	.word	0x08007a69
 80079f4:	08007a69 	.word	0x08007a69
 80079f8:	08007a69 	.word	0x08007a69
 80079fc:	08007a69 	.word	0x08007a69
 8007a00:	08007a69 	.word	0x08007a69
 8007a04:	2b6e      	cmp	r3, #110	@ 0x6e
 8007a06:	d809      	bhi.n	8007a1c <_scanf_float+0x138>
 8007a08:	2b60      	cmp	r3, #96	@ 0x60
 8007a0a:	d8b1      	bhi.n	8007970 <_scanf_float+0x8c>
 8007a0c:	2b54      	cmp	r3, #84	@ 0x54
 8007a0e:	d07b      	beq.n	8007b08 <_scanf_float+0x224>
 8007a10:	2b59      	cmp	r3, #89	@ 0x59
 8007a12:	d19a      	bne.n	800794a <_scanf_float+0x66>
 8007a14:	2d07      	cmp	r5, #7
 8007a16:	d198      	bne.n	800794a <_scanf_float+0x66>
 8007a18:	2508      	movs	r5, #8
 8007a1a:	e02f      	b.n	8007a7c <_scanf_float+0x198>
 8007a1c:	2b74      	cmp	r3, #116	@ 0x74
 8007a1e:	d073      	beq.n	8007b08 <_scanf_float+0x224>
 8007a20:	2b79      	cmp	r3, #121	@ 0x79
 8007a22:	e7f6      	b.n	8007a12 <_scanf_float+0x12e>
 8007a24:	6821      	ldr	r1, [r4, #0]
 8007a26:	05c8      	lsls	r0, r1, #23
 8007a28:	d51e      	bpl.n	8007a68 <_scanf_float+0x184>
 8007a2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007a2e:	6021      	str	r1, [r4, #0]
 8007a30:	3701      	adds	r7, #1
 8007a32:	f1bb 0f00 	cmp.w	fp, #0
 8007a36:	d003      	beq.n	8007a40 <_scanf_float+0x15c>
 8007a38:	3201      	adds	r2, #1
 8007a3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a3e:	60a2      	str	r2, [r4, #8]
 8007a40:	68a3      	ldr	r3, [r4, #8]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	6123      	str	r3, [r4, #16]
 8007a4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f8c9 3004 	str.w	r3, [r9, #4]
 8007a58:	f340 8082 	ble.w	8007b60 <_scanf_float+0x27c>
 8007a5c:	f8d9 3000 	ldr.w	r3, [r9]
 8007a60:	3301      	adds	r3, #1
 8007a62:	f8c9 3000 	str.w	r3, [r9]
 8007a66:	e762      	b.n	800792e <_scanf_float+0x4a>
 8007a68:	eb1a 0105 	adds.w	r1, sl, r5
 8007a6c:	f47f af6d 	bne.w	800794a <_scanf_float+0x66>
 8007a70:	6822      	ldr	r2, [r4, #0]
 8007a72:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007a76:	6022      	str	r2, [r4, #0]
 8007a78:	460d      	mov	r5, r1
 8007a7a:	468a      	mov	sl, r1
 8007a7c:	f806 3b01 	strb.w	r3, [r6], #1
 8007a80:	e7de      	b.n	8007a40 <_scanf_float+0x15c>
 8007a82:	6822      	ldr	r2, [r4, #0]
 8007a84:	0610      	lsls	r0, r2, #24
 8007a86:	f57f af60 	bpl.w	800794a <_scanf_float+0x66>
 8007a8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a8e:	6022      	str	r2, [r4, #0]
 8007a90:	e7f4      	b.n	8007a7c <_scanf_float+0x198>
 8007a92:	f1ba 0f00 	cmp.w	sl, #0
 8007a96:	d10c      	bne.n	8007ab2 <_scanf_float+0x1ce>
 8007a98:	b977      	cbnz	r7, 8007ab8 <_scanf_float+0x1d4>
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007aa0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007aa4:	d108      	bne.n	8007ab8 <_scanf_float+0x1d4>
 8007aa6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007aaa:	6022      	str	r2, [r4, #0]
 8007aac:	f04f 0a01 	mov.w	sl, #1
 8007ab0:	e7e4      	b.n	8007a7c <_scanf_float+0x198>
 8007ab2:	f1ba 0f02 	cmp.w	sl, #2
 8007ab6:	d050      	beq.n	8007b5a <_scanf_float+0x276>
 8007ab8:	2d01      	cmp	r5, #1
 8007aba:	d002      	beq.n	8007ac2 <_scanf_float+0x1de>
 8007abc:	2d04      	cmp	r5, #4
 8007abe:	f47f af44 	bne.w	800794a <_scanf_float+0x66>
 8007ac2:	3501      	adds	r5, #1
 8007ac4:	b2ed      	uxtb	r5, r5
 8007ac6:	e7d9      	b.n	8007a7c <_scanf_float+0x198>
 8007ac8:	f1ba 0f01 	cmp.w	sl, #1
 8007acc:	f47f af3d 	bne.w	800794a <_scanf_float+0x66>
 8007ad0:	f04f 0a02 	mov.w	sl, #2
 8007ad4:	e7d2      	b.n	8007a7c <_scanf_float+0x198>
 8007ad6:	b975      	cbnz	r5, 8007af6 <_scanf_float+0x212>
 8007ad8:	2f00      	cmp	r7, #0
 8007ada:	f47f af37 	bne.w	800794c <_scanf_float+0x68>
 8007ade:	6822      	ldr	r2, [r4, #0]
 8007ae0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007ae4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007ae8:	f040 8103 	bne.w	8007cf2 <_scanf_float+0x40e>
 8007aec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007af0:	6022      	str	r2, [r4, #0]
 8007af2:	2501      	movs	r5, #1
 8007af4:	e7c2      	b.n	8007a7c <_scanf_float+0x198>
 8007af6:	2d03      	cmp	r5, #3
 8007af8:	d0e3      	beq.n	8007ac2 <_scanf_float+0x1de>
 8007afa:	2d05      	cmp	r5, #5
 8007afc:	e7df      	b.n	8007abe <_scanf_float+0x1da>
 8007afe:	2d02      	cmp	r5, #2
 8007b00:	f47f af23 	bne.w	800794a <_scanf_float+0x66>
 8007b04:	2503      	movs	r5, #3
 8007b06:	e7b9      	b.n	8007a7c <_scanf_float+0x198>
 8007b08:	2d06      	cmp	r5, #6
 8007b0a:	f47f af1e 	bne.w	800794a <_scanf_float+0x66>
 8007b0e:	2507      	movs	r5, #7
 8007b10:	e7b4      	b.n	8007a7c <_scanf_float+0x198>
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	0591      	lsls	r1, r2, #22
 8007b16:	f57f af18 	bpl.w	800794a <_scanf_float+0x66>
 8007b1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007b1e:	6022      	str	r2, [r4, #0]
 8007b20:	9702      	str	r7, [sp, #8]
 8007b22:	e7ab      	b.n	8007a7c <_scanf_float+0x198>
 8007b24:	6822      	ldr	r2, [r4, #0]
 8007b26:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007b2a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007b2e:	d005      	beq.n	8007b3c <_scanf_float+0x258>
 8007b30:	0550      	lsls	r0, r2, #21
 8007b32:	f57f af0a 	bpl.w	800794a <_scanf_float+0x66>
 8007b36:	2f00      	cmp	r7, #0
 8007b38:	f000 80db 	beq.w	8007cf2 <_scanf_float+0x40e>
 8007b3c:	0591      	lsls	r1, r2, #22
 8007b3e:	bf58      	it	pl
 8007b40:	9902      	ldrpl	r1, [sp, #8]
 8007b42:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b46:	bf58      	it	pl
 8007b48:	1a79      	subpl	r1, r7, r1
 8007b4a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007b4e:	bf58      	it	pl
 8007b50:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007b54:	6022      	str	r2, [r4, #0]
 8007b56:	2700      	movs	r7, #0
 8007b58:	e790      	b.n	8007a7c <_scanf_float+0x198>
 8007b5a:	f04f 0a03 	mov.w	sl, #3
 8007b5e:	e78d      	b.n	8007a7c <_scanf_float+0x198>
 8007b60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007b64:	4649      	mov	r1, r9
 8007b66:	4640      	mov	r0, r8
 8007b68:	4798      	blx	r3
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f43f aedf 	beq.w	800792e <_scanf_float+0x4a>
 8007b70:	e6eb      	b.n	800794a <_scanf_float+0x66>
 8007b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b7a:	464a      	mov	r2, r9
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	4798      	blx	r3
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	6123      	str	r3, [r4, #16]
 8007b86:	e6eb      	b.n	8007960 <_scanf_float+0x7c>
 8007b88:	1e6b      	subs	r3, r5, #1
 8007b8a:	2b06      	cmp	r3, #6
 8007b8c:	d824      	bhi.n	8007bd8 <_scanf_float+0x2f4>
 8007b8e:	2d02      	cmp	r5, #2
 8007b90:	d836      	bhi.n	8007c00 <_scanf_float+0x31c>
 8007b92:	9b01      	ldr	r3, [sp, #4]
 8007b94:	429e      	cmp	r6, r3
 8007b96:	f67f aee7 	bls.w	8007968 <_scanf_float+0x84>
 8007b9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ba2:	464a      	mov	r2, r9
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	4798      	blx	r3
 8007ba8:	6923      	ldr	r3, [r4, #16]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	6123      	str	r3, [r4, #16]
 8007bae:	e7f0      	b.n	8007b92 <_scanf_float+0x2ae>
 8007bb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bb4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007bb8:	464a      	mov	r2, r9
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4798      	blx	r3
 8007bbe:	6923      	ldr	r3, [r4, #16]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	6123      	str	r3, [r4, #16]
 8007bc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bc8:	fa5f fa8a 	uxtb.w	sl, sl
 8007bcc:	f1ba 0f02 	cmp.w	sl, #2
 8007bd0:	d1ee      	bne.n	8007bb0 <_scanf_float+0x2cc>
 8007bd2:	3d03      	subs	r5, #3
 8007bd4:	b2ed      	uxtb	r5, r5
 8007bd6:	1b76      	subs	r6, r6, r5
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	05da      	lsls	r2, r3, #23
 8007bdc:	d530      	bpl.n	8007c40 <_scanf_float+0x35c>
 8007bde:	055b      	lsls	r3, r3, #21
 8007be0:	d511      	bpl.n	8007c06 <_scanf_float+0x322>
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	429e      	cmp	r6, r3
 8007be6:	f67f aebf 	bls.w	8007968 <_scanf_float+0x84>
 8007bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bf2:	464a      	mov	r2, r9
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	4798      	blx	r3
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	6123      	str	r3, [r4, #16]
 8007bfe:	e7f0      	b.n	8007be2 <_scanf_float+0x2fe>
 8007c00:	46aa      	mov	sl, r5
 8007c02:	46b3      	mov	fp, r6
 8007c04:	e7de      	b.n	8007bc4 <_scanf_float+0x2e0>
 8007c06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	2965      	cmp	r1, #101	@ 0x65
 8007c0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c12:	f106 35ff 	add.w	r5, r6, #4294967295
 8007c16:	6123      	str	r3, [r4, #16]
 8007c18:	d00c      	beq.n	8007c34 <_scanf_float+0x350>
 8007c1a:	2945      	cmp	r1, #69	@ 0x45
 8007c1c:	d00a      	beq.n	8007c34 <_scanf_float+0x350>
 8007c1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c22:	464a      	mov	r2, r9
 8007c24:	4640      	mov	r0, r8
 8007c26:	4798      	blx	r3
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	1eb5      	subs	r5, r6, #2
 8007c32:	6123      	str	r3, [r4, #16]
 8007c34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c38:	464a      	mov	r2, r9
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	4798      	blx	r3
 8007c3e:	462e      	mov	r6, r5
 8007c40:	6822      	ldr	r2, [r4, #0]
 8007c42:	f012 0210 	ands.w	r2, r2, #16
 8007c46:	d001      	beq.n	8007c4c <_scanf_float+0x368>
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e68e      	b.n	800796a <_scanf_float+0x86>
 8007c4c:	7032      	strb	r2, [r6, #0]
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c58:	d125      	bne.n	8007ca6 <_scanf_float+0x3c2>
 8007c5a:	9b02      	ldr	r3, [sp, #8]
 8007c5c:	429f      	cmp	r7, r3
 8007c5e:	d00a      	beq.n	8007c76 <_scanf_float+0x392>
 8007c60:	1bda      	subs	r2, r3, r7
 8007c62:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007c66:	429e      	cmp	r6, r3
 8007c68:	bf28      	it	cs
 8007c6a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007c6e:	4922      	ldr	r1, [pc, #136]	@ (8007cf8 <_scanf_float+0x414>)
 8007c70:	4630      	mov	r0, r6
 8007c72:	f000 f977 	bl	8007f64 <siprintf>
 8007c76:	9901      	ldr	r1, [sp, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	f002 fcf8 	bl	800a670 <_strtod_r>
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	6821      	ldr	r1, [r4, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f011 0f02 	tst.w	r1, #2
 8007c8a:	ec57 6b10 	vmov	r6, r7, d0
 8007c8e:	f103 0204 	add.w	r2, r3, #4
 8007c92:	d015      	beq.n	8007cc0 <_scanf_float+0x3dc>
 8007c94:	9903      	ldr	r1, [sp, #12]
 8007c96:	600a      	str	r2, [r1, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	e9c3 6700 	strd	r6, r7, [r3]
 8007c9e:	68e3      	ldr	r3, [r4, #12]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	60e3      	str	r3, [r4, #12]
 8007ca4:	e7d0      	b.n	8007c48 <_scanf_float+0x364>
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0e4      	beq.n	8007c76 <_scanf_float+0x392>
 8007cac:	9905      	ldr	r1, [sp, #20]
 8007cae:	230a      	movs	r3, #10
 8007cb0:	3101      	adds	r1, #1
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	f7ff f9b4 	bl	8007020 <_strtol_r>
 8007cb8:	9b04      	ldr	r3, [sp, #16]
 8007cba:	9e05      	ldr	r6, [sp, #20]
 8007cbc:	1ac2      	subs	r2, r0, r3
 8007cbe:	e7d0      	b.n	8007c62 <_scanf_float+0x37e>
 8007cc0:	f011 0f04 	tst.w	r1, #4
 8007cc4:	9903      	ldr	r1, [sp, #12]
 8007cc6:	600a      	str	r2, [r1, #0]
 8007cc8:	d1e6      	bne.n	8007c98 <_scanf_float+0x3b4>
 8007cca:	681d      	ldr	r5, [r3, #0]
 8007ccc:	4632      	mov	r2, r6
 8007cce:	463b      	mov	r3, r7
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	f7f8 ff5a 	bl	8000b8c <__aeabi_dcmpun>
 8007cd8:	b128      	cbz	r0, 8007ce6 <_scanf_float+0x402>
 8007cda:	4808      	ldr	r0, [pc, #32]	@ (8007cfc <_scanf_float+0x418>)
 8007cdc:	f000 fabc 	bl	8008258 <nanf>
 8007ce0:	ed85 0a00 	vstr	s0, [r5]
 8007ce4:	e7db      	b.n	8007c9e <_scanf_float+0x3ba>
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4639      	mov	r1, r7
 8007cea:	f7f8 ffad 	bl	8000c48 <__aeabi_d2f>
 8007cee:	6028      	str	r0, [r5, #0]
 8007cf0:	e7d5      	b.n	8007c9e <_scanf_float+0x3ba>
 8007cf2:	2700      	movs	r7, #0
 8007cf4:	e62e      	b.n	8007954 <_scanf_float+0x70>
 8007cf6:	bf00      	nop
 8007cf8:	0800ba85 	.word	0x0800ba85
 8007cfc:	0800bbc6 	.word	0x0800bbc6

08007d00 <std>:
 8007d00:	2300      	movs	r3, #0
 8007d02:	b510      	push	{r4, lr}
 8007d04:	4604      	mov	r4, r0
 8007d06:	e9c0 3300 	strd	r3, r3, [r0]
 8007d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d0e:	6083      	str	r3, [r0, #8]
 8007d10:	8181      	strh	r1, [r0, #12]
 8007d12:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d14:	81c2      	strh	r2, [r0, #14]
 8007d16:	6183      	str	r3, [r0, #24]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	2208      	movs	r2, #8
 8007d1c:	305c      	adds	r0, #92	@ 0x5c
 8007d1e:	f000 fa1b 	bl	8008158 <memset>
 8007d22:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <std+0x58>)
 8007d24:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d26:	4b0d      	ldr	r3, [pc, #52]	@ (8007d5c <std+0x5c>)
 8007d28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d60 <std+0x60>)
 8007d2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d64 <std+0x64>)
 8007d30:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d32:	4b0d      	ldr	r3, [pc, #52]	@ (8007d68 <std+0x68>)
 8007d34:	6224      	str	r4, [r4, #32]
 8007d36:	429c      	cmp	r4, r3
 8007d38:	d006      	beq.n	8007d48 <std+0x48>
 8007d3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d3e:	4294      	cmp	r4, r2
 8007d40:	d002      	beq.n	8007d48 <std+0x48>
 8007d42:	33d0      	adds	r3, #208	@ 0xd0
 8007d44:	429c      	cmp	r4, r3
 8007d46:	d105      	bne.n	8007d54 <std+0x54>
 8007d48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d50:	f000 ba7e 	b.w	8008250 <__retarget_lock_init_recursive>
 8007d54:	bd10      	pop	{r4, pc}
 8007d56:	bf00      	nop
 8007d58:	08007fa9 	.word	0x08007fa9
 8007d5c:	08007fcb 	.word	0x08007fcb
 8007d60:	08008003 	.word	0x08008003
 8007d64:	08008027 	.word	0x08008027
 8007d68:	200004e4 	.word	0x200004e4

08007d6c <stdio_exit_handler>:
 8007d6c:	4a02      	ldr	r2, [pc, #8]	@ (8007d78 <stdio_exit_handler+0xc>)
 8007d6e:	4903      	ldr	r1, [pc, #12]	@ (8007d7c <stdio_exit_handler+0x10>)
 8007d70:	4803      	ldr	r0, [pc, #12]	@ (8007d80 <stdio_exit_handler+0x14>)
 8007d72:	f000 b869 	b.w	8007e48 <_fwalk_sglue>
 8007d76:	bf00      	nop
 8007d78:	20000054 	.word	0x20000054
 8007d7c:	0800acb9 	.word	0x0800acb9
 8007d80:	20000064 	.word	0x20000064

08007d84 <cleanup_stdio>:
 8007d84:	6841      	ldr	r1, [r0, #4]
 8007d86:	4b0c      	ldr	r3, [pc, #48]	@ (8007db8 <cleanup_stdio+0x34>)
 8007d88:	4299      	cmp	r1, r3
 8007d8a:	b510      	push	{r4, lr}
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	d001      	beq.n	8007d94 <cleanup_stdio+0x10>
 8007d90:	f002 ff92 	bl	800acb8 <_fflush_r>
 8007d94:	68a1      	ldr	r1, [r4, #8]
 8007d96:	4b09      	ldr	r3, [pc, #36]	@ (8007dbc <cleanup_stdio+0x38>)
 8007d98:	4299      	cmp	r1, r3
 8007d9a:	d002      	beq.n	8007da2 <cleanup_stdio+0x1e>
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f002 ff8b 	bl	800acb8 <_fflush_r>
 8007da2:	68e1      	ldr	r1, [r4, #12]
 8007da4:	4b06      	ldr	r3, [pc, #24]	@ (8007dc0 <cleanup_stdio+0x3c>)
 8007da6:	4299      	cmp	r1, r3
 8007da8:	d004      	beq.n	8007db4 <cleanup_stdio+0x30>
 8007daa:	4620      	mov	r0, r4
 8007dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007db0:	f002 bf82 	b.w	800acb8 <_fflush_r>
 8007db4:	bd10      	pop	{r4, pc}
 8007db6:	bf00      	nop
 8007db8:	200004e4 	.word	0x200004e4
 8007dbc:	2000054c 	.word	0x2000054c
 8007dc0:	200005b4 	.word	0x200005b4

08007dc4 <global_stdio_init.part.0>:
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007df4 <global_stdio_init.part.0+0x30>)
 8007dc8:	4c0b      	ldr	r4, [pc, #44]	@ (8007df8 <global_stdio_init.part.0+0x34>)
 8007dca:	4a0c      	ldr	r2, [pc, #48]	@ (8007dfc <global_stdio_init.part.0+0x38>)
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	4620      	mov	r0, r4
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2104      	movs	r1, #4
 8007dd4:	f7ff ff94 	bl	8007d00 <std>
 8007dd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ddc:	2201      	movs	r2, #1
 8007dde:	2109      	movs	r1, #9
 8007de0:	f7ff ff8e 	bl	8007d00 <std>
 8007de4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007de8:	2202      	movs	r2, #2
 8007dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dee:	2112      	movs	r1, #18
 8007df0:	f7ff bf86 	b.w	8007d00 <std>
 8007df4:	2000061c 	.word	0x2000061c
 8007df8:	200004e4 	.word	0x200004e4
 8007dfc:	08007d6d 	.word	0x08007d6d

08007e00 <__sfp_lock_acquire>:
 8007e00:	4801      	ldr	r0, [pc, #4]	@ (8007e08 <__sfp_lock_acquire+0x8>)
 8007e02:	f000 ba26 	b.w	8008252 <__retarget_lock_acquire_recursive>
 8007e06:	bf00      	nop
 8007e08:	20000625 	.word	0x20000625

08007e0c <__sfp_lock_release>:
 8007e0c:	4801      	ldr	r0, [pc, #4]	@ (8007e14 <__sfp_lock_release+0x8>)
 8007e0e:	f000 ba21 	b.w	8008254 <__retarget_lock_release_recursive>
 8007e12:	bf00      	nop
 8007e14:	20000625 	.word	0x20000625

08007e18 <__sinit>:
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	f7ff fff0 	bl	8007e00 <__sfp_lock_acquire>
 8007e20:	6a23      	ldr	r3, [r4, #32]
 8007e22:	b11b      	cbz	r3, 8007e2c <__sinit+0x14>
 8007e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e28:	f7ff bff0 	b.w	8007e0c <__sfp_lock_release>
 8007e2c:	4b04      	ldr	r3, [pc, #16]	@ (8007e40 <__sinit+0x28>)
 8007e2e:	6223      	str	r3, [r4, #32]
 8007e30:	4b04      	ldr	r3, [pc, #16]	@ (8007e44 <__sinit+0x2c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1f5      	bne.n	8007e24 <__sinit+0xc>
 8007e38:	f7ff ffc4 	bl	8007dc4 <global_stdio_init.part.0>
 8007e3c:	e7f2      	b.n	8007e24 <__sinit+0xc>
 8007e3e:	bf00      	nop
 8007e40:	08007d85 	.word	0x08007d85
 8007e44:	2000061c 	.word	0x2000061c

08007e48 <_fwalk_sglue>:
 8007e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	4688      	mov	r8, r1
 8007e50:	4614      	mov	r4, r2
 8007e52:	2600      	movs	r6, #0
 8007e54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e58:	f1b9 0901 	subs.w	r9, r9, #1
 8007e5c:	d505      	bpl.n	8007e6a <_fwalk_sglue+0x22>
 8007e5e:	6824      	ldr	r4, [r4, #0]
 8007e60:	2c00      	cmp	r4, #0
 8007e62:	d1f7      	bne.n	8007e54 <_fwalk_sglue+0xc>
 8007e64:	4630      	mov	r0, r6
 8007e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e6a:	89ab      	ldrh	r3, [r5, #12]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d907      	bls.n	8007e80 <_fwalk_sglue+0x38>
 8007e70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e74:	3301      	adds	r3, #1
 8007e76:	d003      	beq.n	8007e80 <_fwalk_sglue+0x38>
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	47c0      	blx	r8
 8007e7e:	4306      	orrs	r6, r0
 8007e80:	3568      	adds	r5, #104	@ 0x68
 8007e82:	e7e9      	b.n	8007e58 <_fwalk_sglue+0x10>

08007e84 <iprintf>:
 8007e84:	b40f      	push	{r0, r1, r2, r3}
 8007e86:	b507      	push	{r0, r1, r2, lr}
 8007e88:	4906      	ldr	r1, [pc, #24]	@ (8007ea4 <iprintf+0x20>)
 8007e8a:	ab04      	add	r3, sp, #16
 8007e8c:	6808      	ldr	r0, [r1, #0]
 8007e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e92:	6881      	ldr	r1, [r0, #8]
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	f002 fd73 	bl	800a980 <_vfiprintf_r>
 8007e9a:	b003      	add	sp, #12
 8007e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea0:	b004      	add	sp, #16
 8007ea2:	4770      	bx	lr
 8007ea4:	20000060 	.word	0x20000060

08007ea8 <_puts_r>:
 8007ea8:	6a03      	ldr	r3, [r0, #32]
 8007eaa:	b570      	push	{r4, r5, r6, lr}
 8007eac:	6884      	ldr	r4, [r0, #8]
 8007eae:	4605      	mov	r5, r0
 8007eb0:	460e      	mov	r6, r1
 8007eb2:	b90b      	cbnz	r3, 8007eb8 <_puts_r+0x10>
 8007eb4:	f7ff ffb0 	bl	8007e18 <__sinit>
 8007eb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eba:	07db      	lsls	r3, r3, #31
 8007ebc:	d405      	bmi.n	8007eca <_puts_r+0x22>
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	0598      	lsls	r0, r3, #22
 8007ec2:	d402      	bmi.n	8007eca <_puts_r+0x22>
 8007ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ec6:	f000 f9c4 	bl	8008252 <__retarget_lock_acquire_recursive>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	0719      	lsls	r1, r3, #28
 8007ece:	d502      	bpl.n	8007ed6 <_puts_r+0x2e>
 8007ed0:	6923      	ldr	r3, [r4, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d135      	bne.n	8007f42 <_puts_r+0x9a>
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f000 f8e7 	bl	80080ac <__swsetup_r>
 8007ede:	b380      	cbz	r0, 8007f42 <_puts_r+0x9a>
 8007ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ee6:	07da      	lsls	r2, r3, #31
 8007ee8:	d405      	bmi.n	8007ef6 <_puts_r+0x4e>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	059b      	lsls	r3, r3, #22
 8007eee:	d402      	bmi.n	8007ef6 <_puts_r+0x4e>
 8007ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ef2:	f000 f9af 	bl	8008254 <__retarget_lock_release_recursive>
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	bd70      	pop	{r4, r5, r6, pc}
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	da04      	bge.n	8007f08 <_puts_r+0x60>
 8007efe:	69a2      	ldr	r2, [r4, #24]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	dc17      	bgt.n	8007f34 <_puts_r+0x8c>
 8007f04:	290a      	cmp	r1, #10
 8007f06:	d015      	beq.n	8007f34 <_puts_r+0x8c>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	6022      	str	r2, [r4, #0]
 8007f0e:	7019      	strb	r1, [r3, #0]
 8007f10:	68a3      	ldr	r3, [r4, #8]
 8007f12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f16:	3b01      	subs	r3, #1
 8007f18:	60a3      	str	r3, [r4, #8]
 8007f1a:	2900      	cmp	r1, #0
 8007f1c:	d1ed      	bne.n	8007efa <_puts_r+0x52>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da11      	bge.n	8007f46 <_puts_r+0x9e>
 8007f22:	4622      	mov	r2, r4
 8007f24:	210a      	movs	r1, #10
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 f881 	bl	800802e <__swbuf_r>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d0d7      	beq.n	8007ee0 <_puts_r+0x38>
 8007f30:	250a      	movs	r5, #10
 8007f32:	e7d7      	b.n	8007ee4 <_puts_r+0x3c>
 8007f34:	4622      	mov	r2, r4
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 f879 	bl	800802e <__swbuf_r>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d1e7      	bne.n	8007f10 <_puts_r+0x68>
 8007f40:	e7ce      	b.n	8007ee0 <_puts_r+0x38>
 8007f42:	3e01      	subs	r6, #1
 8007f44:	e7e4      	b.n	8007f10 <_puts_r+0x68>
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	6022      	str	r2, [r4, #0]
 8007f4c:	220a      	movs	r2, #10
 8007f4e:	701a      	strb	r2, [r3, #0]
 8007f50:	e7ee      	b.n	8007f30 <_puts_r+0x88>
	...

08007f54 <puts>:
 8007f54:	4b02      	ldr	r3, [pc, #8]	@ (8007f60 <puts+0xc>)
 8007f56:	4601      	mov	r1, r0
 8007f58:	6818      	ldr	r0, [r3, #0]
 8007f5a:	f7ff bfa5 	b.w	8007ea8 <_puts_r>
 8007f5e:	bf00      	nop
 8007f60:	20000060 	.word	0x20000060

08007f64 <siprintf>:
 8007f64:	b40e      	push	{r1, r2, r3}
 8007f66:	b510      	push	{r4, lr}
 8007f68:	b09d      	sub	sp, #116	@ 0x74
 8007f6a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007f6c:	9002      	str	r0, [sp, #8]
 8007f6e:	9006      	str	r0, [sp, #24]
 8007f70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f74:	480a      	ldr	r0, [pc, #40]	@ (8007fa0 <siprintf+0x3c>)
 8007f76:	9107      	str	r1, [sp, #28]
 8007f78:	9104      	str	r1, [sp, #16]
 8007f7a:	490a      	ldr	r1, [pc, #40]	@ (8007fa4 <siprintf+0x40>)
 8007f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f80:	9105      	str	r1, [sp, #20]
 8007f82:	2400      	movs	r4, #0
 8007f84:	a902      	add	r1, sp, #8
 8007f86:	6800      	ldr	r0, [r0, #0]
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007f8c:	f002 fbd2 	bl	800a734 <_svfiprintf_r>
 8007f90:	9b02      	ldr	r3, [sp, #8]
 8007f92:	701c      	strb	r4, [r3, #0]
 8007f94:	b01d      	add	sp, #116	@ 0x74
 8007f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f9a:	b003      	add	sp, #12
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	20000060 	.word	0x20000060
 8007fa4:	ffff0208 	.word	0xffff0208

08007fa8 <__sread>:
 8007fa8:	b510      	push	{r4, lr}
 8007faa:	460c      	mov	r4, r1
 8007fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb0:	f000 f900 	bl	80081b4 <_read_r>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	bfab      	itete	ge
 8007fb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007fba:	89a3      	ldrhlt	r3, [r4, #12]
 8007fbc:	181b      	addge	r3, r3, r0
 8007fbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fc2:	bfac      	ite	ge
 8007fc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fc6:	81a3      	strhlt	r3, [r4, #12]
 8007fc8:	bd10      	pop	{r4, pc}

08007fca <__swrite>:
 8007fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fce:	461f      	mov	r7, r3
 8007fd0:	898b      	ldrh	r3, [r1, #12]
 8007fd2:	05db      	lsls	r3, r3, #23
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	4616      	mov	r6, r2
 8007fda:	d505      	bpl.n	8007fe8 <__swrite+0x1e>
 8007fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f000 f8d4 	bl	8008190 <_lseek_r>
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ff2:	81a3      	strh	r3, [r4, #12]
 8007ff4:	4632      	mov	r2, r6
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffe:	f000 b8eb 	b.w	80081d8 <_write_r>

08008002 <__sseek>:
 8008002:	b510      	push	{r4, lr}
 8008004:	460c      	mov	r4, r1
 8008006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800a:	f000 f8c1 	bl	8008190 <_lseek_r>
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	bf15      	itete	ne
 8008014:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008016:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800801a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800801e:	81a3      	strheq	r3, [r4, #12]
 8008020:	bf18      	it	ne
 8008022:	81a3      	strhne	r3, [r4, #12]
 8008024:	bd10      	pop	{r4, pc}

08008026 <__sclose>:
 8008026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802a:	f000 b8a1 	b.w	8008170 <_close_r>

0800802e <__swbuf_r>:
 800802e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008030:	460e      	mov	r6, r1
 8008032:	4614      	mov	r4, r2
 8008034:	4605      	mov	r5, r0
 8008036:	b118      	cbz	r0, 8008040 <__swbuf_r+0x12>
 8008038:	6a03      	ldr	r3, [r0, #32]
 800803a:	b90b      	cbnz	r3, 8008040 <__swbuf_r+0x12>
 800803c:	f7ff feec 	bl	8007e18 <__sinit>
 8008040:	69a3      	ldr	r3, [r4, #24]
 8008042:	60a3      	str	r3, [r4, #8]
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	071a      	lsls	r2, r3, #28
 8008048:	d501      	bpl.n	800804e <__swbuf_r+0x20>
 800804a:	6923      	ldr	r3, [r4, #16]
 800804c:	b943      	cbnz	r3, 8008060 <__swbuf_r+0x32>
 800804e:	4621      	mov	r1, r4
 8008050:	4628      	mov	r0, r5
 8008052:	f000 f82b 	bl	80080ac <__swsetup_r>
 8008056:	b118      	cbz	r0, 8008060 <__swbuf_r+0x32>
 8008058:	f04f 37ff 	mov.w	r7, #4294967295
 800805c:	4638      	mov	r0, r7
 800805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	6922      	ldr	r2, [r4, #16]
 8008064:	1a98      	subs	r0, r3, r2
 8008066:	6963      	ldr	r3, [r4, #20]
 8008068:	b2f6      	uxtb	r6, r6
 800806a:	4283      	cmp	r3, r0
 800806c:	4637      	mov	r7, r6
 800806e:	dc05      	bgt.n	800807c <__swbuf_r+0x4e>
 8008070:	4621      	mov	r1, r4
 8008072:	4628      	mov	r0, r5
 8008074:	f002 fe20 	bl	800acb8 <_fflush_r>
 8008078:	2800      	cmp	r0, #0
 800807a:	d1ed      	bne.n	8008058 <__swbuf_r+0x2a>
 800807c:	68a3      	ldr	r3, [r4, #8]
 800807e:	3b01      	subs	r3, #1
 8008080:	60a3      	str	r3, [r4, #8]
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	6022      	str	r2, [r4, #0]
 8008088:	701e      	strb	r6, [r3, #0]
 800808a:	6962      	ldr	r2, [r4, #20]
 800808c:	1c43      	adds	r3, r0, #1
 800808e:	429a      	cmp	r2, r3
 8008090:	d004      	beq.n	800809c <__swbuf_r+0x6e>
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	07db      	lsls	r3, r3, #31
 8008096:	d5e1      	bpl.n	800805c <__swbuf_r+0x2e>
 8008098:	2e0a      	cmp	r6, #10
 800809a:	d1df      	bne.n	800805c <__swbuf_r+0x2e>
 800809c:	4621      	mov	r1, r4
 800809e:	4628      	mov	r0, r5
 80080a0:	f002 fe0a 	bl	800acb8 <_fflush_r>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d0d9      	beq.n	800805c <__swbuf_r+0x2e>
 80080a8:	e7d6      	b.n	8008058 <__swbuf_r+0x2a>
	...

080080ac <__swsetup_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4b29      	ldr	r3, [pc, #164]	@ (8008154 <__swsetup_r+0xa8>)
 80080b0:	4605      	mov	r5, r0
 80080b2:	6818      	ldr	r0, [r3, #0]
 80080b4:	460c      	mov	r4, r1
 80080b6:	b118      	cbz	r0, 80080c0 <__swsetup_r+0x14>
 80080b8:	6a03      	ldr	r3, [r0, #32]
 80080ba:	b90b      	cbnz	r3, 80080c0 <__swsetup_r+0x14>
 80080bc:	f7ff feac 	bl	8007e18 <__sinit>
 80080c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c4:	0719      	lsls	r1, r3, #28
 80080c6:	d422      	bmi.n	800810e <__swsetup_r+0x62>
 80080c8:	06da      	lsls	r2, r3, #27
 80080ca:	d407      	bmi.n	80080dc <__swsetup_r+0x30>
 80080cc:	2209      	movs	r2, #9
 80080ce:	602a      	str	r2, [r5, #0]
 80080d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080d4:	81a3      	strh	r3, [r4, #12]
 80080d6:	f04f 30ff 	mov.w	r0, #4294967295
 80080da:	e033      	b.n	8008144 <__swsetup_r+0x98>
 80080dc:	0758      	lsls	r0, r3, #29
 80080de:	d512      	bpl.n	8008106 <__swsetup_r+0x5a>
 80080e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080e2:	b141      	cbz	r1, 80080f6 <__swsetup_r+0x4a>
 80080e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080e8:	4299      	cmp	r1, r3
 80080ea:	d002      	beq.n	80080f2 <__swsetup_r+0x46>
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 ff13 	bl	8008f18 <_free_r>
 80080f2:	2300      	movs	r3, #0
 80080f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	2300      	movs	r3, #0
 8008100:	6063      	str	r3, [r4, #4]
 8008102:	6923      	ldr	r3, [r4, #16]
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	f043 0308 	orr.w	r3, r3, #8
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	6923      	ldr	r3, [r4, #16]
 8008110:	b94b      	cbnz	r3, 8008126 <__swsetup_r+0x7a>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800811c:	d003      	beq.n	8008126 <__swsetup_r+0x7a>
 800811e:	4621      	mov	r1, r4
 8008120:	4628      	mov	r0, r5
 8008122:	f002 fe17 	bl	800ad54 <__smakebuf_r>
 8008126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812a:	f013 0201 	ands.w	r2, r3, #1
 800812e:	d00a      	beq.n	8008146 <__swsetup_r+0x9a>
 8008130:	2200      	movs	r2, #0
 8008132:	60a2      	str	r2, [r4, #8]
 8008134:	6962      	ldr	r2, [r4, #20]
 8008136:	4252      	negs	r2, r2
 8008138:	61a2      	str	r2, [r4, #24]
 800813a:	6922      	ldr	r2, [r4, #16]
 800813c:	b942      	cbnz	r2, 8008150 <__swsetup_r+0xa4>
 800813e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008142:	d1c5      	bne.n	80080d0 <__swsetup_r+0x24>
 8008144:	bd38      	pop	{r3, r4, r5, pc}
 8008146:	0799      	lsls	r1, r3, #30
 8008148:	bf58      	it	pl
 800814a:	6962      	ldrpl	r2, [r4, #20]
 800814c:	60a2      	str	r2, [r4, #8]
 800814e:	e7f4      	b.n	800813a <__swsetup_r+0x8e>
 8008150:	2000      	movs	r0, #0
 8008152:	e7f7      	b.n	8008144 <__swsetup_r+0x98>
 8008154:	20000060 	.word	0x20000060

08008158 <memset>:
 8008158:	4402      	add	r2, r0
 800815a:	4603      	mov	r3, r0
 800815c:	4293      	cmp	r3, r2
 800815e:	d100      	bne.n	8008162 <memset+0xa>
 8008160:	4770      	bx	lr
 8008162:	f803 1b01 	strb.w	r1, [r3], #1
 8008166:	e7f9      	b.n	800815c <memset+0x4>

08008168 <_localeconv_r>:
 8008168:	4800      	ldr	r0, [pc, #0]	@ (800816c <_localeconv_r+0x4>)
 800816a:	4770      	bx	lr
 800816c:	200001a0 	.word	0x200001a0

08008170 <_close_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d06      	ldr	r5, [pc, #24]	@ (800818c <_close_r+0x1c>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	602b      	str	r3, [r5, #0]
 800817c:	f7fa f98a 	bl	8002494 <_close>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_close_r+0x1a>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	b103      	cbz	r3, 800818a <_close_r+0x1a>
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	20000620 	.word	0x20000620

08008190 <_lseek_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4d07      	ldr	r5, [pc, #28]	@ (80081b0 <_lseek_r+0x20>)
 8008194:	4604      	mov	r4, r0
 8008196:	4608      	mov	r0, r1
 8008198:	4611      	mov	r1, r2
 800819a:	2200      	movs	r2, #0
 800819c:	602a      	str	r2, [r5, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	f7fa f99f 	bl	80024e2 <_lseek>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_lseek_r+0x1e>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_lseek_r+0x1e>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	20000620 	.word	0x20000620

080081b4 <_read_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d07      	ldr	r5, [pc, #28]	@ (80081d4 <_read_r+0x20>)
 80081b8:	4604      	mov	r4, r0
 80081ba:	4608      	mov	r0, r1
 80081bc:	4611      	mov	r1, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	602a      	str	r2, [r5, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f7fa f92d 	bl	8002422 <_read>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_read_r+0x1e>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_read_r+0x1e>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20000620 	.word	0x20000620

080081d8 <_write_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d07      	ldr	r5, [pc, #28]	@ (80081f8 <_write_r+0x20>)
 80081dc:	4604      	mov	r4, r0
 80081de:	4608      	mov	r0, r1
 80081e0:	4611      	mov	r1, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	602a      	str	r2, [r5, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	f7fa f938 	bl	800245c <_write>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_write_r+0x1e>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_write_r+0x1e>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20000620 	.word	0x20000620

080081fc <__errno>:
 80081fc:	4b01      	ldr	r3, [pc, #4]	@ (8008204 <__errno+0x8>)
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	20000060 	.word	0x20000060

08008208 <__libc_init_array>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	4d0d      	ldr	r5, [pc, #52]	@ (8008240 <__libc_init_array+0x38>)
 800820c:	4c0d      	ldr	r4, [pc, #52]	@ (8008244 <__libc_init_array+0x3c>)
 800820e:	1b64      	subs	r4, r4, r5
 8008210:	10a4      	asrs	r4, r4, #2
 8008212:	2600      	movs	r6, #0
 8008214:	42a6      	cmp	r6, r4
 8008216:	d109      	bne.n	800822c <__libc_init_array+0x24>
 8008218:	4d0b      	ldr	r5, [pc, #44]	@ (8008248 <__libc_init_array+0x40>)
 800821a:	4c0c      	ldr	r4, [pc, #48]	@ (800824c <__libc_init_array+0x44>)
 800821c:	f003 fa6a 	bl	800b6f4 <_init>
 8008220:	1b64      	subs	r4, r4, r5
 8008222:	10a4      	asrs	r4, r4, #2
 8008224:	2600      	movs	r6, #0
 8008226:	42a6      	cmp	r6, r4
 8008228:	d105      	bne.n	8008236 <__libc_init_array+0x2e>
 800822a:	bd70      	pop	{r4, r5, r6, pc}
 800822c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008230:	4798      	blx	r3
 8008232:	3601      	adds	r6, #1
 8008234:	e7ee      	b.n	8008214 <__libc_init_array+0xc>
 8008236:	f855 3b04 	ldr.w	r3, [r5], #4
 800823a:	4798      	blx	r3
 800823c:	3601      	adds	r6, #1
 800823e:	e7f2      	b.n	8008226 <__libc_init_array+0x1e>
 8008240:	0800bd80 	.word	0x0800bd80
 8008244:	0800bd80 	.word	0x0800bd80
 8008248:	0800bd80 	.word	0x0800bd80
 800824c:	0800bd84 	.word	0x0800bd84

08008250 <__retarget_lock_init_recursive>:
 8008250:	4770      	bx	lr

08008252 <__retarget_lock_acquire_recursive>:
 8008252:	4770      	bx	lr

08008254 <__retarget_lock_release_recursive>:
 8008254:	4770      	bx	lr
	...

08008258 <nanf>:
 8008258:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008260 <nanf+0x8>
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	7fc00000 	.word	0x7fc00000

08008264 <quorem>:
 8008264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	6903      	ldr	r3, [r0, #16]
 800826a:	690c      	ldr	r4, [r1, #16]
 800826c:	42a3      	cmp	r3, r4
 800826e:	4607      	mov	r7, r0
 8008270:	db7e      	blt.n	8008370 <quorem+0x10c>
 8008272:	3c01      	subs	r4, #1
 8008274:	f101 0814 	add.w	r8, r1, #20
 8008278:	00a3      	lsls	r3, r4, #2
 800827a:	f100 0514 	add.w	r5, r0, #20
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800828a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800828e:	3301      	adds	r3, #1
 8008290:	429a      	cmp	r2, r3
 8008292:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008296:	fbb2 f6f3 	udiv	r6, r2, r3
 800829a:	d32e      	bcc.n	80082fa <quorem+0x96>
 800829c:	f04f 0a00 	mov.w	sl, #0
 80082a0:	46c4      	mov	ip, r8
 80082a2:	46ae      	mov	lr, r5
 80082a4:	46d3      	mov	fp, sl
 80082a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082aa:	b298      	uxth	r0, r3
 80082ac:	fb06 a000 	mla	r0, r6, r0, sl
 80082b0:	0c02      	lsrs	r2, r0, #16
 80082b2:	0c1b      	lsrs	r3, r3, #16
 80082b4:	fb06 2303 	mla	r3, r6, r3, r2
 80082b8:	f8de 2000 	ldr.w	r2, [lr]
 80082bc:	b280      	uxth	r0, r0
 80082be:	b292      	uxth	r2, r2
 80082c0:	1a12      	subs	r2, r2, r0
 80082c2:	445a      	add	r2, fp
 80082c4:	f8de 0000 	ldr.w	r0, [lr]
 80082c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80082d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80082d6:	b292      	uxth	r2, r2
 80082d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082dc:	45e1      	cmp	r9, ip
 80082de:	f84e 2b04 	str.w	r2, [lr], #4
 80082e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082e6:	d2de      	bcs.n	80082a6 <quorem+0x42>
 80082e8:	9b00      	ldr	r3, [sp, #0]
 80082ea:	58eb      	ldr	r3, [r5, r3]
 80082ec:	b92b      	cbnz	r3, 80082fa <quorem+0x96>
 80082ee:	9b01      	ldr	r3, [sp, #4]
 80082f0:	3b04      	subs	r3, #4
 80082f2:	429d      	cmp	r5, r3
 80082f4:	461a      	mov	r2, r3
 80082f6:	d32f      	bcc.n	8008358 <quorem+0xf4>
 80082f8:	613c      	str	r4, [r7, #16]
 80082fa:	4638      	mov	r0, r7
 80082fc:	f001 f9c8 	bl	8009690 <__mcmp>
 8008300:	2800      	cmp	r0, #0
 8008302:	db25      	blt.n	8008350 <quorem+0xec>
 8008304:	4629      	mov	r1, r5
 8008306:	2000      	movs	r0, #0
 8008308:	f858 2b04 	ldr.w	r2, [r8], #4
 800830c:	f8d1 c000 	ldr.w	ip, [r1]
 8008310:	fa1f fe82 	uxth.w	lr, r2
 8008314:	fa1f f38c 	uxth.w	r3, ip
 8008318:	eba3 030e 	sub.w	r3, r3, lr
 800831c:	4403      	add	r3, r0
 800831e:	0c12      	lsrs	r2, r2, #16
 8008320:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008324:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008328:	b29b      	uxth	r3, r3
 800832a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800832e:	45c1      	cmp	r9, r8
 8008330:	f841 3b04 	str.w	r3, [r1], #4
 8008334:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008338:	d2e6      	bcs.n	8008308 <quorem+0xa4>
 800833a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800833e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008342:	b922      	cbnz	r2, 800834e <quorem+0xea>
 8008344:	3b04      	subs	r3, #4
 8008346:	429d      	cmp	r5, r3
 8008348:	461a      	mov	r2, r3
 800834a:	d30b      	bcc.n	8008364 <quorem+0x100>
 800834c:	613c      	str	r4, [r7, #16]
 800834e:	3601      	adds	r6, #1
 8008350:	4630      	mov	r0, r6
 8008352:	b003      	add	sp, #12
 8008354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008358:	6812      	ldr	r2, [r2, #0]
 800835a:	3b04      	subs	r3, #4
 800835c:	2a00      	cmp	r2, #0
 800835e:	d1cb      	bne.n	80082f8 <quorem+0x94>
 8008360:	3c01      	subs	r4, #1
 8008362:	e7c6      	b.n	80082f2 <quorem+0x8e>
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	3b04      	subs	r3, #4
 8008368:	2a00      	cmp	r2, #0
 800836a:	d1ef      	bne.n	800834c <quorem+0xe8>
 800836c:	3c01      	subs	r4, #1
 800836e:	e7ea      	b.n	8008346 <quorem+0xe2>
 8008370:	2000      	movs	r0, #0
 8008372:	e7ee      	b.n	8008352 <quorem+0xee>
 8008374:	0000      	movs	r0, r0
	...

08008378 <_dtoa_r>:
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	69c7      	ldr	r7, [r0, #28]
 800837e:	b097      	sub	sp, #92	@ 0x5c
 8008380:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008384:	ec55 4b10 	vmov	r4, r5, d0
 8008388:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800838a:	9107      	str	r1, [sp, #28]
 800838c:	4681      	mov	r9, r0
 800838e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008390:	9311      	str	r3, [sp, #68]	@ 0x44
 8008392:	b97f      	cbnz	r7, 80083b4 <_dtoa_r+0x3c>
 8008394:	2010      	movs	r0, #16
 8008396:	f000 fe09 	bl	8008fac <malloc>
 800839a:	4602      	mov	r2, r0
 800839c:	f8c9 001c 	str.w	r0, [r9, #28]
 80083a0:	b920      	cbnz	r0, 80083ac <_dtoa_r+0x34>
 80083a2:	4ba9      	ldr	r3, [pc, #676]	@ (8008648 <_dtoa_r+0x2d0>)
 80083a4:	21ef      	movs	r1, #239	@ 0xef
 80083a6:	48a9      	ldr	r0, [pc, #676]	@ (800864c <_dtoa_r+0x2d4>)
 80083a8:	f002 fd86 	bl	800aeb8 <__assert_func>
 80083ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80083b0:	6007      	str	r7, [r0, #0]
 80083b2:	60c7      	str	r7, [r0, #12]
 80083b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083b8:	6819      	ldr	r1, [r3, #0]
 80083ba:	b159      	cbz	r1, 80083d4 <_dtoa_r+0x5c>
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	604a      	str	r2, [r1, #4]
 80083c0:	2301      	movs	r3, #1
 80083c2:	4093      	lsls	r3, r2
 80083c4:	608b      	str	r3, [r1, #8]
 80083c6:	4648      	mov	r0, r9
 80083c8:	f000 fee6 	bl	8009198 <_Bfree>
 80083cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	1e2b      	subs	r3, r5, #0
 80083d6:	bfb9      	ittee	lt
 80083d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80083dc:	9305      	strlt	r3, [sp, #20]
 80083de:	2300      	movge	r3, #0
 80083e0:	6033      	strge	r3, [r6, #0]
 80083e2:	9f05      	ldr	r7, [sp, #20]
 80083e4:	4b9a      	ldr	r3, [pc, #616]	@ (8008650 <_dtoa_r+0x2d8>)
 80083e6:	bfbc      	itt	lt
 80083e8:	2201      	movlt	r2, #1
 80083ea:	6032      	strlt	r2, [r6, #0]
 80083ec:	43bb      	bics	r3, r7
 80083ee:	d112      	bne.n	8008416 <_dtoa_r+0x9e>
 80083f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80083f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083fc:	4323      	orrs	r3, r4
 80083fe:	f000 855a 	beq.w	8008eb6 <_dtoa_r+0xb3e>
 8008402:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008404:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008664 <_dtoa_r+0x2ec>
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 855c 	beq.w	8008ec6 <_dtoa_r+0xb4e>
 800840e:	f10a 0303 	add.w	r3, sl, #3
 8008412:	f000 bd56 	b.w	8008ec2 <_dtoa_r+0xb4a>
 8008416:	ed9d 7b04 	vldr	d7, [sp, #16]
 800841a:	2200      	movs	r2, #0
 800841c:	ec51 0b17 	vmov	r0, r1, d7
 8008420:	2300      	movs	r3, #0
 8008422:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008426:	f7f8 fb7f 	bl	8000b28 <__aeabi_dcmpeq>
 800842a:	4680      	mov	r8, r0
 800842c:	b158      	cbz	r0, 8008446 <_dtoa_r+0xce>
 800842e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008430:	2301      	movs	r3, #1
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008436:	b113      	cbz	r3, 800843e <_dtoa_r+0xc6>
 8008438:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800843a:	4b86      	ldr	r3, [pc, #536]	@ (8008654 <_dtoa_r+0x2dc>)
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008668 <_dtoa_r+0x2f0>
 8008442:	f000 bd40 	b.w	8008ec6 <_dtoa_r+0xb4e>
 8008446:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800844a:	aa14      	add	r2, sp, #80	@ 0x50
 800844c:	a915      	add	r1, sp, #84	@ 0x54
 800844e:	4648      	mov	r0, r9
 8008450:	f001 fa3e 	bl	80098d0 <__d2b>
 8008454:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008458:	9002      	str	r0, [sp, #8]
 800845a:	2e00      	cmp	r6, #0
 800845c:	d078      	beq.n	8008550 <_dtoa_r+0x1d8>
 800845e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008460:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008468:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800846c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008470:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008474:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008478:	4619      	mov	r1, r3
 800847a:	2200      	movs	r2, #0
 800847c:	4b76      	ldr	r3, [pc, #472]	@ (8008658 <_dtoa_r+0x2e0>)
 800847e:	f7f7 ff33 	bl	80002e8 <__aeabi_dsub>
 8008482:	a36b      	add	r3, pc, #428	@ (adr r3, 8008630 <_dtoa_r+0x2b8>)
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	f7f8 f8e6 	bl	8000658 <__aeabi_dmul>
 800848c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008638 <_dtoa_r+0x2c0>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f7 ff2b 	bl	80002ec <__adddf3>
 8008496:	4604      	mov	r4, r0
 8008498:	4630      	mov	r0, r6
 800849a:	460d      	mov	r5, r1
 800849c:	f7f8 f872 	bl	8000584 <__aeabi_i2d>
 80084a0:	a367      	add	r3, pc, #412	@ (adr r3, 8008640 <_dtoa_r+0x2c8>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f7f8 f8d7 	bl	8000658 <__aeabi_dmul>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4620      	mov	r0, r4
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7f7 ff1b 	bl	80002ec <__adddf3>
 80084b6:	4604      	mov	r4, r0
 80084b8:	460d      	mov	r5, r1
 80084ba:	f7f8 fb7d 	bl	8000bb8 <__aeabi_d2iz>
 80084be:	2200      	movs	r2, #0
 80084c0:	4607      	mov	r7, r0
 80084c2:	2300      	movs	r3, #0
 80084c4:	4620      	mov	r0, r4
 80084c6:	4629      	mov	r1, r5
 80084c8:	f7f8 fb38 	bl	8000b3c <__aeabi_dcmplt>
 80084cc:	b140      	cbz	r0, 80084e0 <_dtoa_r+0x168>
 80084ce:	4638      	mov	r0, r7
 80084d0:	f7f8 f858 	bl	8000584 <__aeabi_i2d>
 80084d4:	4622      	mov	r2, r4
 80084d6:	462b      	mov	r3, r5
 80084d8:	f7f8 fb26 	bl	8000b28 <__aeabi_dcmpeq>
 80084dc:	b900      	cbnz	r0, 80084e0 <_dtoa_r+0x168>
 80084de:	3f01      	subs	r7, #1
 80084e0:	2f16      	cmp	r7, #22
 80084e2:	d852      	bhi.n	800858a <_dtoa_r+0x212>
 80084e4:	4b5d      	ldr	r3, [pc, #372]	@ (800865c <_dtoa_r+0x2e4>)
 80084e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80084f2:	f7f8 fb23 	bl	8000b3c <__aeabi_dcmplt>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d049      	beq.n	800858e <_dtoa_r+0x216>
 80084fa:	3f01      	subs	r7, #1
 80084fc:	2300      	movs	r3, #0
 80084fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008500:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008502:	1b9b      	subs	r3, r3, r6
 8008504:	1e5a      	subs	r2, r3, #1
 8008506:	bf45      	ittet	mi
 8008508:	f1c3 0301 	rsbmi	r3, r3, #1
 800850c:	9300      	strmi	r3, [sp, #0]
 800850e:	2300      	movpl	r3, #0
 8008510:	2300      	movmi	r3, #0
 8008512:	9206      	str	r2, [sp, #24]
 8008514:	bf54      	ite	pl
 8008516:	9300      	strpl	r3, [sp, #0]
 8008518:	9306      	strmi	r3, [sp, #24]
 800851a:	2f00      	cmp	r7, #0
 800851c:	db39      	blt.n	8008592 <_dtoa_r+0x21a>
 800851e:	9b06      	ldr	r3, [sp, #24]
 8008520:	970d      	str	r7, [sp, #52]	@ 0x34
 8008522:	443b      	add	r3, r7
 8008524:	9306      	str	r3, [sp, #24]
 8008526:	2300      	movs	r3, #0
 8008528:	9308      	str	r3, [sp, #32]
 800852a:	9b07      	ldr	r3, [sp, #28]
 800852c:	2b09      	cmp	r3, #9
 800852e:	d863      	bhi.n	80085f8 <_dtoa_r+0x280>
 8008530:	2b05      	cmp	r3, #5
 8008532:	bfc4      	itt	gt
 8008534:	3b04      	subgt	r3, #4
 8008536:	9307      	strgt	r3, [sp, #28]
 8008538:	9b07      	ldr	r3, [sp, #28]
 800853a:	f1a3 0302 	sub.w	r3, r3, #2
 800853e:	bfcc      	ite	gt
 8008540:	2400      	movgt	r4, #0
 8008542:	2401      	movle	r4, #1
 8008544:	2b03      	cmp	r3, #3
 8008546:	d863      	bhi.n	8008610 <_dtoa_r+0x298>
 8008548:	e8df f003 	tbb	[pc, r3]
 800854c:	2b375452 	.word	0x2b375452
 8008550:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008554:	441e      	add	r6, r3
 8008556:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800855a:	2b20      	cmp	r3, #32
 800855c:	bfc1      	itttt	gt
 800855e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008562:	409f      	lslgt	r7, r3
 8008564:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008568:	fa24 f303 	lsrgt.w	r3, r4, r3
 800856c:	bfd6      	itet	le
 800856e:	f1c3 0320 	rsble	r3, r3, #32
 8008572:	ea47 0003 	orrgt.w	r0, r7, r3
 8008576:	fa04 f003 	lslle.w	r0, r4, r3
 800857a:	f7f7 fff3 	bl	8000564 <__aeabi_ui2d>
 800857e:	2201      	movs	r2, #1
 8008580:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008584:	3e01      	subs	r6, #1
 8008586:	9212      	str	r2, [sp, #72]	@ 0x48
 8008588:	e776      	b.n	8008478 <_dtoa_r+0x100>
 800858a:	2301      	movs	r3, #1
 800858c:	e7b7      	b.n	80084fe <_dtoa_r+0x186>
 800858e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008590:	e7b6      	b.n	8008500 <_dtoa_r+0x188>
 8008592:	9b00      	ldr	r3, [sp, #0]
 8008594:	1bdb      	subs	r3, r3, r7
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	427b      	negs	r3, r7
 800859a:	9308      	str	r3, [sp, #32]
 800859c:	2300      	movs	r3, #0
 800859e:	930d      	str	r3, [sp, #52]	@ 0x34
 80085a0:	e7c3      	b.n	800852a <_dtoa_r+0x1b2>
 80085a2:	2301      	movs	r3, #1
 80085a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085a8:	eb07 0b03 	add.w	fp, r7, r3
 80085ac:	f10b 0301 	add.w	r3, fp, #1
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	9303      	str	r3, [sp, #12]
 80085b4:	bfb8      	it	lt
 80085b6:	2301      	movlt	r3, #1
 80085b8:	e006      	b.n	80085c8 <_dtoa_r+0x250>
 80085ba:	2301      	movs	r3, #1
 80085bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dd28      	ble.n	8008616 <_dtoa_r+0x29e>
 80085c4:	469b      	mov	fp, r3
 80085c6:	9303      	str	r3, [sp, #12]
 80085c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80085cc:	2100      	movs	r1, #0
 80085ce:	2204      	movs	r2, #4
 80085d0:	f102 0514 	add.w	r5, r2, #20
 80085d4:	429d      	cmp	r5, r3
 80085d6:	d926      	bls.n	8008626 <_dtoa_r+0x2ae>
 80085d8:	6041      	str	r1, [r0, #4]
 80085da:	4648      	mov	r0, r9
 80085dc:	f000 fd9c 	bl	8009118 <_Balloc>
 80085e0:	4682      	mov	sl, r0
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d142      	bne.n	800866c <_dtoa_r+0x2f4>
 80085e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008660 <_dtoa_r+0x2e8>)
 80085e8:	4602      	mov	r2, r0
 80085ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80085ee:	e6da      	b.n	80083a6 <_dtoa_r+0x2e>
 80085f0:	2300      	movs	r3, #0
 80085f2:	e7e3      	b.n	80085bc <_dtoa_r+0x244>
 80085f4:	2300      	movs	r3, #0
 80085f6:	e7d5      	b.n	80085a4 <_dtoa_r+0x22c>
 80085f8:	2401      	movs	r4, #1
 80085fa:	2300      	movs	r3, #0
 80085fc:	9307      	str	r3, [sp, #28]
 80085fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8008600:	f04f 3bff 	mov.w	fp, #4294967295
 8008604:	2200      	movs	r2, #0
 8008606:	f8cd b00c 	str.w	fp, [sp, #12]
 800860a:	2312      	movs	r3, #18
 800860c:	920c      	str	r2, [sp, #48]	@ 0x30
 800860e:	e7db      	b.n	80085c8 <_dtoa_r+0x250>
 8008610:	2301      	movs	r3, #1
 8008612:	9309      	str	r3, [sp, #36]	@ 0x24
 8008614:	e7f4      	b.n	8008600 <_dtoa_r+0x288>
 8008616:	f04f 0b01 	mov.w	fp, #1
 800861a:	f8cd b00c 	str.w	fp, [sp, #12]
 800861e:	465b      	mov	r3, fp
 8008620:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008624:	e7d0      	b.n	80085c8 <_dtoa_r+0x250>
 8008626:	3101      	adds	r1, #1
 8008628:	0052      	lsls	r2, r2, #1
 800862a:	e7d1      	b.n	80085d0 <_dtoa_r+0x258>
 800862c:	f3af 8000 	nop.w
 8008630:	636f4361 	.word	0x636f4361
 8008634:	3fd287a7 	.word	0x3fd287a7
 8008638:	8b60c8b3 	.word	0x8b60c8b3
 800863c:	3fc68a28 	.word	0x3fc68a28
 8008640:	509f79fb 	.word	0x509f79fb
 8008644:	3fd34413 	.word	0x3fd34413
 8008648:	0800ba97 	.word	0x0800ba97
 800864c:	0800baae 	.word	0x0800baae
 8008650:	7ff00000 	.word	0x7ff00000
 8008654:	0800ba62 	.word	0x0800ba62
 8008658:	3ff80000 	.word	0x3ff80000
 800865c:	0800bc60 	.word	0x0800bc60
 8008660:	0800bb06 	.word	0x0800bb06
 8008664:	0800ba93 	.word	0x0800ba93
 8008668:	0800ba61 	.word	0x0800ba61
 800866c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008670:	6018      	str	r0, [r3, #0]
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	2b0e      	cmp	r3, #14
 8008676:	f200 80a1 	bhi.w	80087bc <_dtoa_r+0x444>
 800867a:	2c00      	cmp	r4, #0
 800867c:	f000 809e 	beq.w	80087bc <_dtoa_r+0x444>
 8008680:	2f00      	cmp	r7, #0
 8008682:	dd33      	ble.n	80086ec <_dtoa_r+0x374>
 8008684:	4b9c      	ldr	r3, [pc, #624]	@ (80088f8 <_dtoa_r+0x580>)
 8008686:	f007 020f 	and.w	r2, r7, #15
 800868a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800868e:	ed93 7b00 	vldr	d7, [r3]
 8008692:	05f8      	lsls	r0, r7, #23
 8008694:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008698:	ea4f 1427 	mov.w	r4, r7, asr #4
 800869c:	d516      	bpl.n	80086cc <_dtoa_r+0x354>
 800869e:	4b97      	ldr	r3, [pc, #604]	@ (80088fc <_dtoa_r+0x584>)
 80086a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086a8:	f7f8 f900 	bl	80008ac <__aeabi_ddiv>
 80086ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086b0:	f004 040f 	and.w	r4, r4, #15
 80086b4:	2603      	movs	r6, #3
 80086b6:	4d91      	ldr	r5, [pc, #580]	@ (80088fc <_dtoa_r+0x584>)
 80086b8:	b954      	cbnz	r4, 80086d0 <_dtoa_r+0x358>
 80086ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086c2:	f7f8 f8f3 	bl	80008ac <__aeabi_ddiv>
 80086c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ca:	e028      	b.n	800871e <_dtoa_r+0x3a6>
 80086cc:	2602      	movs	r6, #2
 80086ce:	e7f2      	b.n	80086b6 <_dtoa_r+0x33e>
 80086d0:	07e1      	lsls	r1, r4, #31
 80086d2:	d508      	bpl.n	80086e6 <_dtoa_r+0x36e>
 80086d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80086d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086dc:	f7f7 ffbc 	bl	8000658 <__aeabi_dmul>
 80086e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086e4:	3601      	adds	r6, #1
 80086e6:	1064      	asrs	r4, r4, #1
 80086e8:	3508      	adds	r5, #8
 80086ea:	e7e5      	b.n	80086b8 <_dtoa_r+0x340>
 80086ec:	f000 80af 	beq.w	800884e <_dtoa_r+0x4d6>
 80086f0:	427c      	negs	r4, r7
 80086f2:	4b81      	ldr	r3, [pc, #516]	@ (80088f8 <_dtoa_r+0x580>)
 80086f4:	4d81      	ldr	r5, [pc, #516]	@ (80088fc <_dtoa_r+0x584>)
 80086f6:	f004 020f 	and.w	r2, r4, #15
 80086fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008702:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008706:	f7f7 ffa7 	bl	8000658 <__aeabi_dmul>
 800870a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800870e:	1124      	asrs	r4, r4, #4
 8008710:	2300      	movs	r3, #0
 8008712:	2602      	movs	r6, #2
 8008714:	2c00      	cmp	r4, #0
 8008716:	f040 808f 	bne.w	8008838 <_dtoa_r+0x4c0>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1d3      	bne.n	80086c6 <_dtoa_r+0x34e>
 800871e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008720:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8094 	beq.w	8008852 <_dtoa_r+0x4da>
 800872a:	4b75      	ldr	r3, [pc, #468]	@ (8008900 <_dtoa_r+0x588>)
 800872c:	2200      	movs	r2, #0
 800872e:	4620      	mov	r0, r4
 8008730:	4629      	mov	r1, r5
 8008732:	f7f8 fa03 	bl	8000b3c <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	f000 808b 	beq.w	8008852 <_dtoa_r+0x4da>
 800873c:	9b03      	ldr	r3, [sp, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 8087 	beq.w	8008852 <_dtoa_r+0x4da>
 8008744:	f1bb 0f00 	cmp.w	fp, #0
 8008748:	dd34      	ble.n	80087b4 <_dtoa_r+0x43c>
 800874a:	4620      	mov	r0, r4
 800874c:	4b6d      	ldr	r3, [pc, #436]	@ (8008904 <_dtoa_r+0x58c>)
 800874e:	2200      	movs	r2, #0
 8008750:	4629      	mov	r1, r5
 8008752:	f7f7 ff81 	bl	8000658 <__aeabi_dmul>
 8008756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800875a:	f107 38ff 	add.w	r8, r7, #4294967295
 800875e:	3601      	adds	r6, #1
 8008760:	465c      	mov	r4, fp
 8008762:	4630      	mov	r0, r6
 8008764:	f7f7 ff0e 	bl	8000584 <__aeabi_i2d>
 8008768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800876c:	f7f7 ff74 	bl	8000658 <__aeabi_dmul>
 8008770:	4b65      	ldr	r3, [pc, #404]	@ (8008908 <_dtoa_r+0x590>)
 8008772:	2200      	movs	r2, #0
 8008774:	f7f7 fdba 	bl	80002ec <__adddf3>
 8008778:	4605      	mov	r5, r0
 800877a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800877e:	2c00      	cmp	r4, #0
 8008780:	d16a      	bne.n	8008858 <_dtoa_r+0x4e0>
 8008782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008786:	4b61      	ldr	r3, [pc, #388]	@ (800890c <_dtoa_r+0x594>)
 8008788:	2200      	movs	r2, #0
 800878a:	f7f7 fdad 	bl	80002e8 <__aeabi_dsub>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008796:	462a      	mov	r2, r5
 8008798:	4633      	mov	r3, r6
 800879a:	f7f8 f9ed 	bl	8000b78 <__aeabi_dcmpgt>
 800879e:	2800      	cmp	r0, #0
 80087a0:	f040 8298 	bne.w	8008cd4 <_dtoa_r+0x95c>
 80087a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087a8:	462a      	mov	r2, r5
 80087aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80087ae:	f7f8 f9c5 	bl	8000b3c <__aeabi_dcmplt>
 80087b2:	bb38      	cbnz	r0, 8008804 <_dtoa_r+0x48c>
 80087b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80087b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80087bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f2c0 8157 	blt.w	8008a72 <_dtoa_r+0x6fa>
 80087c4:	2f0e      	cmp	r7, #14
 80087c6:	f300 8154 	bgt.w	8008a72 <_dtoa_r+0x6fa>
 80087ca:	4b4b      	ldr	r3, [pc, #300]	@ (80088f8 <_dtoa_r+0x580>)
 80087cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087d0:	ed93 7b00 	vldr	d7, [r3]
 80087d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	ed8d 7b00 	vstr	d7, [sp]
 80087dc:	f280 80e5 	bge.w	80089aa <_dtoa_r+0x632>
 80087e0:	9b03      	ldr	r3, [sp, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f300 80e1 	bgt.w	80089aa <_dtoa_r+0x632>
 80087e8:	d10c      	bne.n	8008804 <_dtoa_r+0x48c>
 80087ea:	4b48      	ldr	r3, [pc, #288]	@ (800890c <_dtoa_r+0x594>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	ec51 0b17 	vmov	r0, r1, d7
 80087f2:	f7f7 ff31 	bl	8000658 <__aeabi_dmul>
 80087f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087fa:	f7f8 f9b3 	bl	8000b64 <__aeabi_dcmpge>
 80087fe:	2800      	cmp	r0, #0
 8008800:	f000 8266 	beq.w	8008cd0 <_dtoa_r+0x958>
 8008804:	2400      	movs	r4, #0
 8008806:	4625      	mov	r5, r4
 8008808:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800880a:	4656      	mov	r6, sl
 800880c:	ea6f 0803 	mvn.w	r8, r3
 8008810:	2700      	movs	r7, #0
 8008812:	4621      	mov	r1, r4
 8008814:	4648      	mov	r0, r9
 8008816:	f000 fcbf 	bl	8009198 <_Bfree>
 800881a:	2d00      	cmp	r5, #0
 800881c:	f000 80bd 	beq.w	800899a <_dtoa_r+0x622>
 8008820:	b12f      	cbz	r7, 800882e <_dtoa_r+0x4b6>
 8008822:	42af      	cmp	r7, r5
 8008824:	d003      	beq.n	800882e <_dtoa_r+0x4b6>
 8008826:	4639      	mov	r1, r7
 8008828:	4648      	mov	r0, r9
 800882a:	f000 fcb5 	bl	8009198 <_Bfree>
 800882e:	4629      	mov	r1, r5
 8008830:	4648      	mov	r0, r9
 8008832:	f000 fcb1 	bl	8009198 <_Bfree>
 8008836:	e0b0      	b.n	800899a <_dtoa_r+0x622>
 8008838:	07e2      	lsls	r2, r4, #31
 800883a:	d505      	bpl.n	8008848 <_dtoa_r+0x4d0>
 800883c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008840:	f7f7 ff0a 	bl	8000658 <__aeabi_dmul>
 8008844:	3601      	adds	r6, #1
 8008846:	2301      	movs	r3, #1
 8008848:	1064      	asrs	r4, r4, #1
 800884a:	3508      	adds	r5, #8
 800884c:	e762      	b.n	8008714 <_dtoa_r+0x39c>
 800884e:	2602      	movs	r6, #2
 8008850:	e765      	b.n	800871e <_dtoa_r+0x3a6>
 8008852:	9c03      	ldr	r4, [sp, #12]
 8008854:	46b8      	mov	r8, r7
 8008856:	e784      	b.n	8008762 <_dtoa_r+0x3ea>
 8008858:	4b27      	ldr	r3, [pc, #156]	@ (80088f8 <_dtoa_r+0x580>)
 800885a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800885c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008860:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008864:	4454      	add	r4, sl
 8008866:	2900      	cmp	r1, #0
 8008868:	d054      	beq.n	8008914 <_dtoa_r+0x59c>
 800886a:	4929      	ldr	r1, [pc, #164]	@ (8008910 <_dtoa_r+0x598>)
 800886c:	2000      	movs	r0, #0
 800886e:	f7f8 f81d 	bl	80008ac <__aeabi_ddiv>
 8008872:	4633      	mov	r3, r6
 8008874:	462a      	mov	r2, r5
 8008876:	f7f7 fd37 	bl	80002e8 <__aeabi_dsub>
 800887a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800887e:	4656      	mov	r6, sl
 8008880:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008884:	f7f8 f998 	bl	8000bb8 <__aeabi_d2iz>
 8008888:	4605      	mov	r5, r0
 800888a:	f7f7 fe7b 	bl	8000584 <__aeabi_i2d>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008896:	f7f7 fd27 	bl	80002e8 <__aeabi_dsub>
 800889a:	3530      	adds	r5, #48	@ 0x30
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088a4:	f806 5b01 	strb.w	r5, [r6], #1
 80088a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088ac:	f7f8 f946 	bl	8000b3c <__aeabi_dcmplt>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d172      	bne.n	800899a <_dtoa_r+0x622>
 80088b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b8:	4911      	ldr	r1, [pc, #68]	@ (8008900 <_dtoa_r+0x588>)
 80088ba:	2000      	movs	r0, #0
 80088bc:	f7f7 fd14 	bl	80002e8 <__aeabi_dsub>
 80088c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088c4:	f7f8 f93a 	bl	8000b3c <__aeabi_dcmplt>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f040 80b4 	bne.w	8008a36 <_dtoa_r+0x6be>
 80088ce:	42a6      	cmp	r6, r4
 80088d0:	f43f af70 	beq.w	80087b4 <_dtoa_r+0x43c>
 80088d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80088d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008904 <_dtoa_r+0x58c>)
 80088da:	2200      	movs	r2, #0
 80088dc:	f7f7 febc 	bl	8000658 <__aeabi_dmul>
 80088e0:	4b08      	ldr	r3, [pc, #32]	@ (8008904 <_dtoa_r+0x58c>)
 80088e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80088e6:	2200      	movs	r2, #0
 80088e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088ec:	f7f7 feb4 	bl	8000658 <__aeabi_dmul>
 80088f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088f4:	e7c4      	b.n	8008880 <_dtoa_r+0x508>
 80088f6:	bf00      	nop
 80088f8:	0800bc60 	.word	0x0800bc60
 80088fc:	0800bc38 	.word	0x0800bc38
 8008900:	3ff00000 	.word	0x3ff00000
 8008904:	40240000 	.word	0x40240000
 8008908:	401c0000 	.word	0x401c0000
 800890c:	40140000 	.word	0x40140000
 8008910:	3fe00000 	.word	0x3fe00000
 8008914:	4631      	mov	r1, r6
 8008916:	4628      	mov	r0, r5
 8008918:	f7f7 fe9e 	bl	8000658 <__aeabi_dmul>
 800891c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008920:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008922:	4656      	mov	r6, sl
 8008924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008928:	f7f8 f946 	bl	8000bb8 <__aeabi_d2iz>
 800892c:	4605      	mov	r5, r0
 800892e:	f7f7 fe29 	bl	8000584 <__aeabi_i2d>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800893a:	f7f7 fcd5 	bl	80002e8 <__aeabi_dsub>
 800893e:	3530      	adds	r5, #48	@ 0x30
 8008940:	f806 5b01 	strb.w	r5, [r6], #1
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	42a6      	cmp	r6, r4
 800894a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800894e:	f04f 0200 	mov.w	r2, #0
 8008952:	d124      	bne.n	800899e <_dtoa_r+0x626>
 8008954:	4baf      	ldr	r3, [pc, #700]	@ (8008c14 <_dtoa_r+0x89c>)
 8008956:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800895a:	f7f7 fcc7 	bl	80002ec <__adddf3>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008966:	f7f8 f907 	bl	8000b78 <__aeabi_dcmpgt>
 800896a:	2800      	cmp	r0, #0
 800896c:	d163      	bne.n	8008a36 <_dtoa_r+0x6be>
 800896e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008972:	49a8      	ldr	r1, [pc, #672]	@ (8008c14 <_dtoa_r+0x89c>)
 8008974:	2000      	movs	r0, #0
 8008976:	f7f7 fcb7 	bl	80002e8 <__aeabi_dsub>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008982:	f7f8 f8db 	bl	8000b3c <__aeabi_dcmplt>
 8008986:	2800      	cmp	r0, #0
 8008988:	f43f af14 	beq.w	80087b4 <_dtoa_r+0x43c>
 800898c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800898e:	1e73      	subs	r3, r6, #1
 8008990:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008992:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008996:	2b30      	cmp	r3, #48	@ 0x30
 8008998:	d0f8      	beq.n	800898c <_dtoa_r+0x614>
 800899a:	4647      	mov	r7, r8
 800899c:	e03b      	b.n	8008a16 <_dtoa_r+0x69e>
 800899e:	4b9e      	ldr	r3, [pc, #632]	@ (8008c18 <_dtoa_r+0x8a0>)
 80089a0:	f7f7 fe5a 	bl	8000658 <__aeabi_dmul>
 80089a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089a8:	e7bc      	b.n	8008924 <_dtoa_r+0x5ac>
 80089aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80089ae:	4656      	mov	r6, sl
 80089b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089b4:	4620      	mov	r0, r4
 80089b6:	4629      	mov	r1, r5
 80089b8:	f7f7 ff78 	bl	80008ac <__aeabi_ddiv>
 80089bc:	f7f8 f8fc 	bl	8000bb8 <__aeabi_d2iz>
 80089c0:	4680      	mov	r8, r0
 80089c2:	f7f7 fddf 	bl	8000584 <__aeabi_i2d>
 80089c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ca:	f7f7 fe45 	bl	8000658 <__aeabi_dmul>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4620      	mov	r0, r4
 80089d4:	4629      	mov	r1, r5
 80089d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80089da:	f7f7 fc85 	bl	80002e8 <__aeabi_dsub>
 80089de:	f806 4b01 	strb.w	r4, [r6], #1
 80089e2:	9d03      	ldr	r5, [sp, #12]
 80089e4:	eba6 040a 	sub.w	r4, r6, sl
 80089e8:	42a5      	cmp	r5, r4
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	d133      	bne.n	8008a58 <_dtoa_r+0x6e0>
 80089f0:	f7f7 fc7c 	bl	80002ec <__adddf3>
 80089f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089f8:	4604      	mov	r4, r0
 80089fa:	460d      	mov	r5, r1
 80089fc:	f7f8 f8bc 	bl	8000b78 <__aeabi_dcmpgt>
 8008a00:	b9c0      	cbnz	r0, 8008a34 <_dtoa_r+0x6bc>
 8008a02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a06:	4620      	mov	r0, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f8 f88d 	bl	8000b28 <__aeabi_dcmpeq>
 8008a0e:	b110      	cbz	r0, 8008a16 <_dtoa_r+0x69e>
 8008a10:	f018 0f01 	tst.w	r8, #1
 8008a14:	d10e      	bne.n	8008a34 <_dtoa_r+0x6bc>
 8008a16:	9902      	ldr	r1, [sp, #8]
 8008a18:	4648      	mov	r0, r9
 8008a1a:	f000 fbbd 	bl	8009198 <_Bfree>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	7033      	strb	r3, [r6, #0]
 8008a22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a24:	3701      	adds	r7, #1
 8008a26:	601f      	str	r7, [r3, #0]
 8008a28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 824b 	beq.w	8008ec6 <_dtoa_r+0xb4e>
 8008a30:	601e      	str	r6, [r3, #0]
 8008a32:	e248      	b.n	8008ec6 <_dtoa_r+0xb4e>
 8008a34:	46b8      	mov	r8, r7
 8008a36:	4633      	mov	r3, r6
 8008a38:	461e      	mov	r6, r3
 8008a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a3e:	2a39      	cmp	r2, #57	@ 0x39
 8008a40:	d106      	bne.n	8008a50 <_dtoa_r+0x6d8>
 8008a42:	459a      	cmp	sl, r3
 8008a44:	d1f8      	bne.n	8008a38 <_dtoa_r+0x6c0>
 8008a46:	2230      	movs	r2, #48	@ 0x30
 8008a48:	f108 0801 	add.w	r8, r8, #1
 8008a4c:	f88a 2000 	strb.w	r2, [sl]
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	3201      	adds	r2, #1
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	e7a0      	b.n	800899a <_dtoa_r+0x622>
 8008a58:	4b6f      	ldr	r3, [pc, #444]	@ (8008c18 <_dtoa_r+0x8a0>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f7f7 fdfc 	bl	8000658 <__aeabi_dmul>
 8008a60:	2200      	movs	r2, #0
 8008a62:	2300      	movs	r3, #0
 8008a64:	4604      	mov	r4, r0
 8008a66:	460d      	mov	r5, r1
 8008a68:	f7f8 f85e 	bl	8000b28 <__aeabi_dcmpeq>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d09f      	beq.n	80089b0 <_dtoa_r+0x638>
 8008a70:	e7d1      	b.n	8008a16 <_dtoa_r+0x69e>
 8008a72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a74:	2a00      	cmp	r2, #0
 8008a76:	f000 80ea 	beq.w	8008c4e <_dtoa_r+0x8d6>
 8008a7a:	9a07      	ldr	r2, [sp, #28]
 8008a7c:	2a01      	cmp	r2, #1
 8008a7e:	f300 80cd 	bgt.w	8008c1c <_dtoa_r+0x8a4>
 8008a82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	f000 80c1 	beq.w	8008c0c <_dtoa_r+0x894>
 8008a8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a8e:	9c08      	ldr	r4, [sp, #32]
 8008a90:	9e00      	ldr	r6, [sp, #0]
 8008a92:	9a00      	ldr	r2, [sp, #0]
 8008a94:	441a      	add	r2, r3
 8008a96:	9200      	str	r2, [sp, #0]
 8008a98:	9a06      	ldr	r2, [sp, #24]
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	441a      	add	r2, r3
 8008a9e:	4648      	mov	r0, r9
 8008aa0:	9206      	str	r2, [sp, #24]
 8008aa2:	f000 fc77 	bl	8009394 <__i2b>
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	b166      	cbz	r6, 8008ac4 <_dtoa_r+0x74c>
 8008aaa:	9b06      	ldr	r3, [sp, #24]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	dd09      	ble.n	8008ac4 <_dtoa_r+0x74c>
 8008ab0:	42b3      	cmp	r3, r6
 8008ab2:	9a00      	ldr	r2, [sp, #0]
 8008ab4:	bfa8      	it	ge
 8008ab6:	4633      	movge	r3, r6
 8008ab8:	1ad2      	subs	r2, r2, r3
 8008aba:	9200      	str	r2, [sp, #0]
 8008abc:	9a06      	ldr	r2, [sp, #24]
 8008abe:	1af6      	subs	r6, r6, r3
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	9306      	str	r3, [sp, #24]
 8008ac4:	9b08      	ldr	r3, [sp, #32]
 8008ac6:	b30b      	cbz	r3, 8008b0c <_dtoa_r+0x794>
 8008ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 80c6 	beq.w	8008c5c <_dtoa_r+0x8e4>
 8008ad0:	2c00      	cmp	r4, #0
 8008ad2:	f000 80c0 	beq.w	8008c56 <_dtoa_r+0x8de>
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	4622      	mov	r2, r4
 8008ada:	4648      	mov	r0, r9
 8008adc:	f000 fd12 	bl	8009504 <__pow5mult>
 8008ae0:	9a02      	ldr	r2, [sp, #8]
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	4648      	mov	r0, r9
 8008ae8:	f000 fc6a 	bl	80093c0 <__multiply>
 8008aec:	9902      	ldr	r1, [sp, #8]
 8008aee:	4680      	mov	r8, r0
 8008af0:	4648      	mov	r0, r9
 8008af2:	f000 fb51 	bl	8009198 <_Bfree>
 8008af6:	9b08      	ldr	r3, [sp, #32]
 8008af8:	1b1b      	subs	r3, r3, r4
 8008afa:	9308      	str	r3, [sp, #32]
 8008afc:	f000 80b1 	beq.w	8008c62 <_dtoa_r+0x8ea>
 8008b00:	9a08      	ldr	r2, [sp, #32]
 8008b02:	4641      	mov	r1, r8
 8008b04:	4648      	mov	r0, r9
 8008b06:	f000 fcfd 	bl	8009504 <__pow5mult>
 8008b0a:	9002      	str	r0, [sp, #8]
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	4648      	mov	r0, r9
 8008b10:	f000 fc40 	bl	8009394 <__i2b>
 8008b14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b16:	4604      	mov	r4, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 81d8 	beq.w	8008ece <_dtoa_r+0xb56>
 8008b1e:	461a      	mov	r2, r3
 8008b20:	4601      	mov	r1, r0
 8008b22:	4648      	mov	r0, r9
 8008b24:	f000 fcee 	bl	8009504 <__pow5mult>
 8008b28:	9b07      	ldr	r3, [sp, #28]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	f300 809f 	bgt.w	8008c70 <_dtoa_r+0x8f8>
 8008b32:	9b04      	ldr	r3, [sp, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f040 8097 	bne.w	8008c68 <_dtoa_r+0x8f0>
 8008b3a:	9b05      	ldr	r3, [sp, #20]
 8008b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f040 8093 	bne.w	8008c6c <_dtoa_r+0x8f4>
 8008b46:	9b05      	ldr	r3, [sp, #20]
 8008b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b4c:	0d1b      	lsrs	r3, r3, #20
 8008b4e:	051b      	lsls	r3, r3, #20
 8008b50:	b133      	cbz	r3, 8008b60 <_dtoa_r+0x7e8>
 8008b52:	9b00      	ldr	r3, [sp, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	9b06      	ldr	r3, [sp, #24]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	9306      	str	r3, [sp, #24]
 8008b5e:	2301      	movs	r3, #1
 8008b60:	9308      	str	r3, [sp, #32]
 8008b62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 81b8 	beq.w	8008eda <_dtoa_r+0xb62>
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b70:	6918      	ldr	r0, [r3, #16]
 8008b72:	f000 fbc3 	bl	80092fc <__hi0bits>
 8008b76:	f1c0 0020 	rsb	r0, r0, #32
 8008b7a:	9b06      	ldr	r3, [sp, #24]
 8008b7c:	4418      	add	r0, r3
 8008b7e:	f010 001f 	ands.w	r0, r0, #31
 8008b82:	f000 8082 	beq.w	8008c8a <_dtoa_r+0x912>
 8008b86:	f1c0 0320 	rsb	r3, r0, #32
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	dd73      	ble.n	8008c76 <_dtoa_r+0x8fe>
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	f1c0 001c 	rsb	r0, r0, #28
 8008b94:	4403      	add	r3, r0
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	9b06      	ldr	r3, [sp, #24]
 8008b9a:	4403      	add	r3, r0
 8008b9c:	4406      	add	r6, r0
 8008b9e:	9306      	str	r3, [sp, #24]
 8008ba0:	9b00      	ldr	r3, [sp, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dd05      	ble.n	8008bb2 <_dtoa_r+0x83a>
 8008ba6:	9902      	ldr	r1, [sp, #8]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4648      	mov	r0, r9
 8008bac:	f000 fd04 	bl	80095b8 <__lshift>
 8008bb0:	9002      	str	r0, [sp, #8]
 8008bb2:	9b06      	ldr	r3, [sp, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dd05      	ble.n	8008bc4 <_dtoa_r+0x84c>
 8008bb8:	4621      	mov	r1, r4
 8008bba:	461a      	mov	r2, r3
 8008bbc:	4648      	mov	r0, r9
 8008bbe:	f000 fcfb 	bl	80095b8 <__lshift>
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d061      	beq.n	8008c8e <_dtoa_r+0x916>
 8008bca:	9802      	ldr	r0, [sp, #8]
 8008bcc:	4621      	mov	r1, r4
 8008bce:	f000 fd5f 	bl	8009690 <__mcmp>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	da5b      	bge.n	8008c8e <_dtoa_r+0x916>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9902      	ldr	r1, [sp, #8]
 8008bda:	220a      	movs	r2, #10
 8008bdc:	4648      	mov	r0, r9
 8008bde:	f000 fafd 	bl	80091dc <__multadd>
 8008be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be4:	9002      	str	r0, [sp, #8]
 8008be6:	f107 38ff 	add.w	r8, r7, #4294967295
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 8177 	beq.w	8008ede <_dtoa_r+0xb66>
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	220a      	movs	r2, #10
 8008bf6:	4648      	mov	r0, r9
 8008bf8:	f000 faf0 	bl	80091dc <__multadd>
 8008bfc:	f1bb 0f00 	cmp.w	fp, #0
 8008c00:	4605      	mov	r5, r0
 8008c02:	dc6f      	bgt.n	8008ce4 <_dtoa_r+0x96c>
 8008c04:	9b07      	ldr	r3, [sp, #28]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	dc49      	bgt.n	8008c9e <_dtoa_r+0x926>
 8008c0a:	e06b      	b.n	8008ce4 <_dtoa_r+0x96c>
 8008c0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c12:	e73c      	b.n	8008a8e <_dtoa_r+0x716>
 8008c14:	3fe00000 	.word	0x3fe00000
 8008c18:	40240000 	.word	0x40240000
 8008c1c:	9b03      	ldr	r3, [sp, #12]
 8008c1e:	1e5c      	subs	r4, r3, #1
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	42a3      	cmp	r3, r4
 8008c24:	db09      	blt.n	8008c3a <_dtoa_r+0x8c2>
 8008c26:	1b1c      	subs	r4, r3, r4
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f6bf af30 	bge.w	8008a90 <_dtoa_r+0x718>
 8008c30:	9b00      	ldr	r3, [sp, #0]
 8008c32:	9a03      	ldr	r2, [sp, #12]
 8008c34:	1a9e      	subs	r6, r3, r2
 8008c36:	2300      	movs	r3, #0
 8008c38:	e72b      	b.n	8008a92 <_dtoa_r+0x71a>
 8008c3a:	9b08      	ldr	r3, [sp, #32]
 8008c3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c3e:	9408      	str	r4, [sp, #32]
 8008c40:	1ae3      	subs	r3, r4, r3
 8008c42:	441a      	add	r2, r3
 8008c44:	9e00      	ldr	r6, [sp, #0]
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	920d      	str	r2, [sp, #52]	@ 0x34
 8008c4a:	2400      	movs	r4, #0
 8008c4c:	e721      	b.n	8008a92 <_dtoa_r+0x71a>
 8008c4e:	9c08      	ldr	r4, [sp, #32]
 8008c50:	9e00      	ldr	r6, [sp, #0]
 8008c52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008c54:	e728      	b.n	8008aa8 <_dtoa_r+0x730>
 8008c56:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008c5a:	e751      	b.n	8008b00 <_dtoa_r+0x788>
 8008c5c:	9a08      	ldr	r2, [sp, #32]
 8008c5e:	9902      	ldr	r1, [sp, #8]
 8008c60:	e750      	b.n	8008b04 <_dtoa_r+0x78c>
 8008c62:	f8cd 8008 	str.w	r8, [sp, #8]
 8008c66:	e751      	b.n	8008b0c <_dtoa_r+0x794>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e779      	b.n	8008b60 <_dtoa_r+0x7e8>
 8008c6c:	9b04      	ldr	r3, [sp, #16]
 8008c6e:	e777      	b.n	8008b60 <_dtoa_r+0x7e8>
 8008c70:	2300      	movs	r3, #0
 8008c72:	9308      	str	r3, [sp, #32]
 8008c74:	e779      	b.n	8008b6a <_dtoa_r+0x7f2>
 8008c76:	d093      	beq.n	8008ba0 <_dtoa_r+0x828>
 8008c78:	9a00      	ldr	r2, [sp, #0]
 8008c7a:	331c      	adds	r3, #28
 8008c7c:	441a      	add	r2, r3
 8008c7e:	9200      	str	r2, [sp, #0]
 8008c80:	9a06      	ldr	r2, [sp, #24]
 8008c82:	441a      	add	r2, r3
 8008c84:	441e      	add	r6, r3
 8008c86:	9206      	str	r2, [sp, #24]
 8008c88:	e78a      	b.n	8008ba0 <_dtoa_r+0x828>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	e7f4      	b.n	8008c78 <_dtoa_r+0x900>
 8008c8e:	9b03      	ldr	r3, [sp, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	46b8      	mov	r8, r7
 8008c94:	dc20      	bgt.n	8008cd8 <_dtoa_r+0x960>
 8008c96:	469b      	mov	fp, r3
 8008c98:	9b07      	ldr	r3, [sp, #28]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	dd1e      	ble.n	8008cdc <_dtoa_r+0x964>
 8008c9e:	f1bb 0f00 	cmp.w	fp, #0
 8008ca2:	f47f adb1 	bne.w	8008808 <_dtoa_r+0x490>
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	465b      	mov	r3, fp
 8008caa:	2205      	movs	r2, #5
 8008cac:	4648      	mov	r0, r9
 8008cae:	f000 fa95 	bl	80091dc <__multadd>
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	9802      	ldr	r0, [sp, #8]
 8008cb8:	f000 fcea 	bl	8009690 <__mcmp>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	f77f ada3 	ble.w	8008808 <_dtoa_r+0x490>
 8008cc2:	4656      	mov	r6, sl
 8008cc4:	2331      	movs	r3, #49	@ 0x31
 8008cc6:	f806 3b01 	strb.w	r3, [r6], #1
 8008cca:	f108 0801 	add.w	r8, r8, #1
 8008cce:	e59f      	b.n	8008810 <_dtoa_r+0x498>
 8008cd0:	9c03      	ldr	r4, [sp, #12]
 8008cd2:	46b8      	mov	r8, r7
 8008cd4:	4625      	mov	r5, r4
 8008cd6:	e7f4      	b.n	8008cc2 <_dtoa_r+0x94a>
 8008cd8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 8101 	beq.w	8008ee6 <_dtoa_r+0xb6e>
 8008ce4:	2e00      	cmp	r6, #0
 8008ce6:	dd05      	ble.n	8008cf4 <_dtoa_r+0x97c>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4632      	mov	r2, r6
 8008cec:	4648      	mov	r0, r9
 8008cee:	f000 fc63 	bl	80095b8 <__lshift>
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	9b08      	ldr	r3, [sp, #32]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d05c      	beq.n	8008db4 <_dtoa_r+0xa3c>
 8008cfa:	6869      	ldr	r1, [r5, #4]
 8008cfc:	4648      	mov	r0, r9
 8008cfe:	f000 fa0b 	bl	8009118 <_Balloc>
 8008d02:	4606      	mov	r6, r0
 8008d04:	b928      	cbnz	r0, 8008d12 <_dtoa_r+0x99a>
 8008d06:	4b82      	ldr	r3, [pc, #520]	@ (8008f10 <_dtoa_r+0xb98>)
 8008d08:	4602      	mov	r2, r0
 8008d0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008d0e:	f7ff bb4a 	b.w	80083a6 <_dtoa_r+0x2e>
 8008d12:	692a      	ldr	r2, [r5, #16]
 8008d14:	3202      	adds	r2, #2
 8008d16:	0092      	lsls	r2, r2, #2
 8008d18:	f105 010c 	add.w	r1, r5, #12
 8008d1c:	300c      	adds	r0, #12
 8008d1e:	f002 f8b3 	bl	800ae88 <memcpy>
 8008d22:	2201      	movs	r2, #1
 8008d24:	4631      	mov	r1, r6
 8008d26:	4648      	mov	r0, r9
 8008d28:	f000 fc46 	bl	80095b8 <__lshift>
 8008d2c:	f10a 0301 	add.w	r3, sl, #1
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	eb0a 030b 	add.w	r3, sl, fp
 8008d36:	9308      	str	r3, [sp, #32]
 8008d38:	9b04      	ldr	r3, [sp, #16]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	462f      	mov	r7, r5
 8008d40:	9306      	str	r3, [sp, #24]
 8008d42:	4605      	mov	r5, r0
 8008d44:	9b00      	ldr	r3, [sp, #0]
 8008d46:	9802      	ldr	r0, [sp, #8]
 8008d48:	4621      	mov	r1, r4
 8008d4a:	f103 3bff 	add.w	fp, r3, #4294967295
 8008d4e:	f7ff fa89 	bl	8008264 <quorem>
 8008d52:	4603      	mov	r3, r0
 8008d54:	3330      	adds	r3, #48	@ 0x30
 8008d56:	9003      	str	r0, [sp, #12]
 8008d58:	4639      	mov	r1, r7
 8008d5a:	9802      	ldr	r0, [sp, #8]
 8008d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d5e:	f000 fc97 	bl	8009690 <__mcmp>
 8008d62:	462a      	mov	r2, r5
 8008d64:	9004      	str	r0, [sp, #16]
 8008d66:	4621      	mov	r1, r4
 8008d68:	4648      	mov	r0, r9
 8008d6a:	f000 fcad 	bl	80096c8 <__mdiff>
 8008d6e:	68c2      	ldr	r2, [r0, #12]
 8008d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d72:	4606      	mov	r6, r0
 8008d74:	bb02      	cbnz	r2, 8008db8 <_dtoa_r+0xa40>
 8008d76:	4601      	mov	r1, r0
 8008d78:	9802      	ldr	r0, [sp, #8]
 8008d7a:	f000 fc89 	bl	8009690 <__mcmp>
 8008d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d80:	4602      	mov	r2, r0
 8008d82:	4631      	mov	r1, r6
 8008d84:	4648      	mov	r0, r9
 8008d86:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d8a:	f000 fa05 	bl	8009198 <_Bfree>
 8008d8e:	9b07      	ldr	r3, [sp, #28]
 8008d90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d92:	9e00      	ldr	r6, [sp, #0]
 8008d94:	ea42 0103 	orr.w	r1, r2, r3
 8008d98:	9b06      	ldr	r3, [sp, #24]
 8008d9a:	4319      	orrs	r1, r3
 8008d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d9e:	d10d      	bne.n	8008dbc <_dtoa_r+0xa44>
 8008da0:	2b39      	cmp	r3, #57	@ 0x39
 8008da2:	d027      	beq.n	8008df4 <_dtoa_r+0xa7c>
 8008da4:	9a04      	ldr	r2, [sp, #16]
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	dd01      	ble.n	8008dae <_dtoa_r+0xa36>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	3331      	adds	r3, #49	@ 0x31
 8008dae:	f88b 3000 	strb.w	r3, [fp]
 8008db2:	e52e      	b.n	8008812 <_dtoa_r+0x49a>
 8008db4:	4628      	mov	r0, r5
 8008db6:	e7b9      	b.n	8008d2c <_dtoa_r+0x9b4>
 8008db8:	2201      	movs	r2, #1
 8008dba:	e7e2      	b.n	8008d82 <_dtoa_r+0xa0a>
 8008dbc:	9904      	ldr	r1, [sp, #16]
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	db04      	blt.n	8008dcc <_dtoa_r+0xa54>
 8008dc2:	9807      	ldr	r0, [sp, #28]
 8008dc4:	4301      	orrs	r1, r0
 8008dc6:	9806      	ldr	r0, [sp, #24]
 8008dc8:	4301      	orrs	r1, r0
 8008dca:	d120      	bne.n	8008e0e <_dtoa_r+0xa96>
 8008dcc:	2a00      	cmp	r2, #0
 8008dce:	ddee      	ble.n	8008dae <_dtoa_r+0xa36>
 8008dd0:	9902      	ldr	r1, [sp, #8]
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	4648      	mov	r0, r9
 8008dd8:	f000 fbee 	bl	80095b8 <__lshift>
 8008ddc:	4621      	mov	r1, r4
 8008dde:	9002      	str	r0, [sp, #8]
 8008de0:	f000 fc56 	bl	8009690 <__mcmp>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	9b00      	ldr	r3, [sp, #0]
 8008de8:	dc02      	bgt.n	8008df0 <_dtoa_r+0xa78>
 8008dea:	d1e0      	bne.n	8008dae <_dtoa_r+0xa36>
 8008dec:	07da      	lsls	r2, r3, #31
 8008dee:	d5de      	bpl.n	8008dae <_dtoa_r+0xa36>
 8008df0:	2b39      	cmp	r3, #57	@ 0x39
 8008df2:	d1da      	bne.n	8008daa <_dtoa_r+0xa32>
 8008df4:	2339      	movs	r3, #57	@ 0x39
 8008df6:	f88b 3000 	strb.w	r3, [fp]
 8008dfa:	4633      	mov	r3, r6
 8008dfc:	461e      	mov	r6, r3
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008e04:	2a39      	cmp	r2, #57	@ 0x39
 8008e06:	d04e      	beq.n	8008ea6 <_dtoa_r+0xb2e>
 8008e08:	3201      	adds	r2, #1
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	e501      	b.n	8008812 <_dtoa_r+0x49a>
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	dd03      	ble.n	8008e1a <_dtoa_r+0xaa2>
 8008e12:	2b39      	cmp	r3, #57	@ 0x39
 8008e14:	d0ee      	beq.n	8008df4 <_dtoa_r+0xa7c>
 8008e16:	3301      	adds	r3, #1
 8008e18:	e7c9      	b.n	8008dae <_dtoa_r+0xa36>
 8008e1a:	9a00      	ldr	r2, [sp, #0]
 8008e1c:	9908      	ldr	r1, [sp, #32]
 8008e1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e22:	428a      	cmp	r2, r1
 8008e24:	d028      	beq.n	8008e78 <_dtoa_r+0xb00>
 8008e26:	9902      	ldr	r1, [sp, #8]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	220a      	movs	r2, #10
 8008e2c:	4648      	mov	r0, r9
 8008e2e:	f000 f9d5 	bl	80091dc <__multadd>
 8008e32:	42af      	cmp	r7, r5
 8008e34:	9002      	str	r0, [sp, #8]
 8008e36:	f04f 0300 	mov.w	r3, #0
 8008e3a:	f04f 020a 	mov.w	r2, #10
 8008e3e:	4639      	mov	r1, r7
 8008e40:	4648      	mov	r0, r9
 8008e42:	d107      	bne.n	8008e54 <_dtoa_r+0xadc>
 8008e44:	f000 f9ca 	bl	80091dc <__multadd>
 8008e48:	4607      	mov	r7, r0
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	9b00      	ldr	r3, [sp, #0]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	e777      	b.n	8008d44 <_dtoa_r+0x9cc>
 8008e54:	f000 f9c2 	bl	80091dc <__multadd>
 8008e58:	4629      	mov	r1, r5
 8008e5a:	4607      	mov	r7, r0
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	220a      	movs	r2, #10
 8008e60:	4648      	mov	r0, r9
 8008e62:	f000 f9bb 	bl	80091dc <__multadd>
 8008e66:	4605      	mov	r5, r0
 8008e68:	e7f0      	b.n	8008e4c <_dtoa_r+0xad4>
 8008e6a:	f1bb 0f00 	cmp.w	fp, #0
 8008e6e:	bfcc      	ite	gt
 8008e70:	465e      	movgt	r6, fp
 8008e72:	2601      	movle	r6, #1
 8008e74:	4456      	add	r6, sl
 8008e76:	2700      	movs	r7, #0
 8008e78:	9902      	ldr	r1, [sp, #8]
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	4648      	mov	r0, r9
 8008e80:	f000 fb9a 	bl	80095b8 <__lshift>
 8008e84:	4621      	mov	r1, r4
 8008e86:	9002      	str	r0, [sp, #8]
 8008e88:	f000 fc02 	bl	8009690 <__mcmp>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	dcb4      	bgt.n	8008dfa <_dtoa_r+0xa82>
 8008e90:	d102      	bne.n	8008e98 <_dtoa_r+0xb20>
 8008e92:	9b00      	ldr	r3, [sp, #0]
 8008e94:	07db      	lsls	r3, r3, #31
 8008e96:	d4b0      	bmi.n	8008dfa <_dtoa_r+0xa82>
 8008e98:	4633      	mov	r3, r6
 8008e9a:	461e      	mov	r6, r3
 8008e9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ea0:	2a30      	cmp	r2, #48	@ 0x30
 8008ea2:	d0fa      	beq.n	8008e9a <_dtoa_r+0xb22>
 8008ea4:	e4b5      	b.n	8008812 <_dtoa_r+0x49a>
 8008ea6:	459a      	cmp	sl, r3
 8008ea8:	d1a8      	bne.n	8008dfc <_dtoa_r+0xa84>
 8008eaa:	2331      	movs	r3, #49	@ 0x31
 8008eac:	f108 0801 	add.w	r8, r8, #1
 8008eb0:	f88a 3000 	strb.w	r3, [sl]
 8008eb4:	e4ad      	b.n	8008812 <_dtoa_r+0x49a>
 8008eb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008eb8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008f14 <_dtoa_r+0xb9c>
 8008ebc:	b11b      	cbz	r3, 8008ec6 <_dtoa_r+0xb4e>
 8008ebe:	f10a 0308 	add.w	r3, sl, #8
 8008ec2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	4650      	mov	r0, sl
 8008ec8:	b017      	add	sp, #92	@ 0x5c
 8008eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ece:	9b07      	ldr	r3, [sp, #28]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	f77f ae2e 	ble.w	8008b32 <_dtoa_r+0x7ba>
 8008ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ed8:	9308      	str	r3, [sp, #32]
 8008eda:	2001      	movs	r0, #1
 8008edc:	e64d      	b.n	8008b7a <_dtoa_r+0x802>
 8008ede:	f1bb 0f00 	cmp.w	fp, #0
 8008ee2:	f77f aed9 	ble.w	8008c98 <_dtoa_r+0x920>
 8008ee6:	4656      	mov	r6, sl
 8008ee8:	9802      	ldr	r0, [sp, #8]
 8008eea:	4621      	mov	r1, r4
 8008eec:	f7ff f9ba 	bl	8008264 <quorem>
 8008ef0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008ef4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ef8:	eba6 020a 	sub.w	r2, r6, sl
 8008efc:	4593      	cmp	fp, r2
 8008efe:	ddb4      	ble.n	8008e6a <_dtoa_r+0xaf2>
 8008f00:	9902      	ldr	r1, [sp, #8]
 8008f02:	2300      	movs	r3, #0
 8008f04:	220a      	movs	r2, #10
 8008f06:	4648      	mov	r0, r9
 8008f08:	f000 f968 	bl	80091dc <__multadd>
 8008f0c:	9002      	str	r0, [sp, #8]
 8008f0e:	e7eb      	b.n	8008ee8 <_dtoa_r+0xb70>
 8008f10:	0800bb06 	.word	0x0800bb06
 8008f14:	0800ba8a 	.word	0x0800ba8a

08008f18 <_free_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	d041      	beq.n	8008fa4 <_free_r+0x8c>
 8008f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f24:	1f0c      	subs	r4, r1, #4
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bfb8      	it	lt
 8008f2a:	18e4      	addlt	r4, r4, r3
 8008f2c:	f000 f8e8 	bl	8009100 <__malloc_lock>
 8008f30:	4a1d      	ldr	r2, [pc, #116]	@ (8008fa8 <_free_r+0x90>)
 8008f32:	6813      	ldr	r3, [r2, #0]
 8008f34:	b933      	cbnz	r3, 8008f44 <_free_r+0x2c>
 8008f36:	6063      	str	r3, [r4, #4]
 8008f38:	6014      	str	r4, [r2, #0]
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f40:	f000 b8e4 	b.w	800910c <__malloc_unlock>
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	d908      	bls.n	8008f5a <_free_r+0x42>
 8008f48:	6820      	ldr	r0, [r4, #0]
 8008f4a:	1821      	adds	r1, r4, r0
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	bf01      	itttt	eq
 8008f50:	6819      	ldreq	r1, [r3, #0]
 8008f52:	685b      	ldreq	r3, [r3, #4]
 8008f54:	1809      	addeq	r1, r1, r0
 8008f56:	6021      	streq	r1, [r4, #0]
 8008f58:	e7ed      	b.n	8008f36 <_free_r+0x1e>
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	b10b      	cbz	r3, 8008f64 <_free_r+0x4c>
 8008f60:	42a3      	cmp	r3, r4
 8008f62:	d9fa      	bls.n	8008f5a <_free_r+0x42>
 8008f64:	6811      	ldr	r1, [r2, #0]
 8008f66:	1850      	adds	r0, r2, r1
 8008f68:	42a0      	cmp	r0, r4
 8008f6a:	d10b      	bne.n	8008f84 <_free_r+0x6c>
 8008f6c:	6820      	ldr	r0, [r4, #0]
 8008f6e:	4401      	add	r1, r0
 8008f70:	1850      	adds	r0, r2, r1
 8008f72:	4283      	cmp	r3, r0
 8008f74:	6011      	str	r1, [r2, #0]
 8008f76:	d1e0      	bne.n	8008f3a <_free_r+0x22>
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	6053      	str	r3, [r2, #4]
 8008f7e:	4408      	add	r0, r1
 8008f80:	6010      	str	r0, [r2, #0]
 8008f82:	e7da      	b.n	8008f3a <_free_r+0x22>
 8008f84:	d902      	bls.n	8008f8c <_free_r+0x74>
 8008f86:	230c      	movs	r3, #12
 8008f88:	602b      	str	r3, [r5, #0]
 8008f8a:	e7d6      	b.n	8008f3a <_free_r+0x22>
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	1821      	adds	r1, r4, r0
 8008f90:	428b      	cmp	r3, r1
 8008f92:	bf04      	itt	eq
 8008f94:	6819      	ldreq	r1, [r3, #0]
 8008f96:	685b      	ldreq	r3, [r3, #4]
 8008f98:	6063      	str	r3, [r4, #4]
 8008f9a:	bf04      	itt	eq
 8008f9c:	1809      	addeq	r1, r1, r0
 8008f9e:	6021      	streq	r1, [r4, #0]
 8008fa0:	6054      	str	r4, [r2, #4]
 8008fa2:	e7ca      	b.n	8008f3a <_free_r+0x22>
 8008fa4:	bd38      	pop	{r3, r4, r5, pc}
 8008fa6:	bf00      	nop
 8008fa8:	2000062c 	.word	0x2000062c

08008fac <malloc>:
 8008fac:	4b02      	ldr	r3, [pc, #8]	@ (8008fb8 <malloc+0xc>)
 8008fae:	4601      	mov	r1, r0
 8008fb0:	6818      	ldr	r0, [r3, #0]
 8008fb2:	f000 b825 	b.w	8009000 <_malloc_r>
 8008fb6:	bf00      	nop
 8008fb8:	20000060 	.word	0x20000060

08008fbc <sbrk_aligned>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	4e0f      	ldr	r6, [pc, #60]	@ (8008ffc <sbrk_aligned+0x40>)
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	6831      	ldr	r1, [r6, #0]
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	b911      	cbnz	r1, 8008fce <sbrk_aligned+0x12>
 8008fc8:	f001 ff4e 	bl	800ae68 <_sbrk_r>
 8008fcc:	6030      	str	r0, [r6, #0]
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f001 ff49 	bl	800ae68 <_sbrk_r>
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	d103      	bne.n	8008fe2 <sbrk_aligned+0x26>
 8008fda:	f04f 34ff 	mov.w	r4, #4294967295
 8008fde:	4620      	mov	r0, r4
 8008fe0:	bd70      	pop	{r4, r5, r6, pc}
 8008fe2:	1cc4      	adds	r4, r0, #3
 8008fe4:	f024 0403 	bic.w	r4, r4, #3
 8008fe8:	42a0      	cmp	r0, r4
 8008fea:	d0f8      	beq.n	8008fde <sbrk_aligned+0x22>
 8008fec:	1a21      	subs	r1, r4, r0
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f001 ff3a 	bl	800ae68 <_sbrk_r>
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d1f2      	bne.n	8008fde <sbrk_aligned+0x22>
 8008ff8:	e7ef      	b.n	8008fda <sbrk_aligned+0x1e>
 8008ffa:	bf00      	nop
 8008ffc:	20000628 	.word	0x20000628

08009000 <_malloc_r>:
 8009000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009004:	1ccd      	adds	r5, r1, #3
 8009006:	f025 0503 	bic.w	r5, r5, #3
 800900a:	3508      	adds	r5, #8
 800900c:	2d0c      	cmp	r5, #12
 800900e:	bf38      	it	cc
 8009010:	250c      	movcc	r5, #12
 8009012:	2d00      	cmp	r5, #0
 8009014:	4606      	mov	r6, r0
 8009016:	db01      	blt.n	800901c <_malloc_r+0x1c>
 8009018:	42a9      	cmp	r1, r5
 800901a:	d904      	bls.n	8009026 <_malloc_r+0x26>
 800901c:	230c      	movs	r3, #12
 800901e:	6033      	str	r3, [r6, #0]
 8009020:	2000      	movs	r0, #0
 8009022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009026:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090fc <_malloc_r+0xfc>
 800902a:	f000 f869 	bl	8009100 <__malloc_lock>
 800902e:	f8d8 3000 	ldr.w	r3, [r8]
 8009032:	461c      	mov	r4, r3
 8009034:	bb44      	cbnz	r4, 8009088 <_malloc_r+0x88>
 8009036:	4629      	mov	r1, r5
 8009038:	4630      	mov	r0, r6
 800903a:	f7ff ffbf 	bl	8008fbc <sbrk_aligned>
 800903e:	1c43      	adds	r3, r0, #1
 8009040:	4604      	mov	r4, r0
 8009042:	d158      	bne.n	80090f6 <_malloc_r+0xf6>
 8009044:	f8d8 4000 	ldr.w	r4, [r8]
 8009048:	4627      	mov	r7, r4
 800904a:	2f00      	cmp	r7, #0
 800904c:	d143      	bne.n	80090d6 <_malloc_r+0xd6>
 800904e:	2c00      	cmp	r4, #0
 8009050:	d04b      	beq.n	80090ea <_malloc_r+0xea>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	4639      	mov	r1, r7
 8009056:	4630      	mov	r0, r6
 8009058:	eb04 0903 	add.w	r9, r4, r3
 800905c:	f001 ff04 	bl	800ae68 <_sbrk_r>
 8009060:	4581      	cmp	r9, r0
 8009062:	d142      	bne.n	80090ea <_malloc_r+0xea>
 8009064:	6821      	ldr	r1, [r4, #0]
 8009066:	1a6d      	subs	r5, r5, r1
 8009068:	4629      	mov	r1, r5
 800906a:	4630      	mov	r0, r6
 800906c:	f7ff ffa6 	bl	8008fbc <sbrk_aligned>
 8009070:	3001      	adds	r0, #1
 8009072:	d03a      	beq.n	80090ea <_malloc_r+0xea>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	442b      	add	r3, r5
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	f8d8 3000 	ldr.w	r3, [r8]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	bb62      	cbnz	r2, 80090dc <_malloc_r+0xdc>
 8009082:	f8c8 7000 	str.w	r7, [r8]
 8009086:	e00f      	b.n	80090a8 <_malloc_r+0xa8>
 8009088:	6822      	ldr	r2, [r4, #0]
 800908a:	1b52      	subs	r2, r2, r5
 800908c:	d420      	bmi.n	80090d0 <_malloc_r+0xd0>
 800908e:	2a0b      	cmp	r2, #11
 8009090:	d917      	bls.n	80090c2 <_malloc_r+0xc2>
 8009092:	1961      	adds	r1, r4, r5
 8009094:	42a3      	cmp	r3, r4
 8009096:	6025      	str	r5, [r4, #0]
 8009098:	bf18      	it	ne
 800909a:	6059      	strne	r1, [r3, #4]
 800909c:	6863      	ldr	r3, [r4, #4]
 800909e:	bf08      	it	eq
 80090a0:	f8c8 1000 	streq.w	r1, [r8]
 80090a4:	5162      	str	r2, [r4, r5]
 80090a6:	604b      	str	r3, [r1, #4]
 80090a8:	4630      	mov	r0, r6
 80090aa:	f000 f82f 	bl	800910c <__malloc_unlock>
 80090ae:	f104 000b 	add.w	r0, r4, #11
 80090b2:	1d23      	adds	r3, r4, #4
 80090b4:	f020 0007 	bic.w	r0, r0, #7
 80090b8:	1ac2      	subs	r2, r0, r3
 80090ba:	bf1c      	itt	ne
 80090bc:	1a1b      	subne	r3, r3, r0
 80090be:	50a3      	strne	r3, [r4, r2]
 80090c0:	e7af      	b.n	8009022 <_malloc_r+0x22>
 80090c2:	6862      	ldr	r2, [r4, #4]
 80090c4:	42a3      	cmp	r3, r4
 80090c6:	bf0c      	ite	eq
 80090c8:	f8c8 2000 	streq.w	r2, [r8]
 80090cc:	605a      	strne	r2, [r3, #4]
 80090ce:	e7eb      	b.n	80090a8 <_malloc_r+0xa8>
 80090d0:	4623      	mov	r3, r4
 80090d2:	6864      	ldr	r4, [r4, #4]
 80090d4:	e7ae      	b.n	8009034 <_malloc_r+0x34>
 80090d6:	463c      	mov	r4, r7
 80090d8:	687f      	ldr	r7, [r7, #4]
 80090da:	e7b6      	b.n	800904a <_malloc_r+0x4a>
 80090dc:	461a      	mov	r2, r3
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	42a3      	cmp	r3, r4
 80090e2:	d1fb      	bne.n	80090dc <_malloc_r+0xdc>
 80090e4:	2300      	movs	r3, #0
 80090e6:	6053      	str	r3, [r2, #4]
 80090e8:	e7de      	b.n	80090a8 <_malloc_r+0xa8>
 80090ea:	230c      	movs	r3, #12
 80090ec:	6033      	str	r3, [r6, #0]
 80090ee:	4630      	mov	r0, r6
 80090f0:	f000 f80c 	bl	800910c <__malloc_unlock>
 80090f4:	e794      	b.n	8009020 <_malloc_r+0x20>
 80090f6:	6005      	str	r5, [r0, #0]
 80090f8:	e7d6      	b.n	80090a8 <_malloc_r+0xa8>
 80090fa:	bf00      	nop
 80090fc:	2000062c 	.word	0x2000062c

08009100 <__malloc_lock>:
 8009100:	4801      	ldr	r0, [pc, #4]	@ (8009108 <__malloc_lock+0x8>)
 8009102:	f7ff b8a6 	b.w	8008252 <__retarget_lock_acquire_recursive>
 8009106:	bf00      	nop
 8009108:	20000624 	.word	0x20000624

0800910c <__malloc_unlock>:
 800910c:	4801      	ldr	r0, [pc, #4]	@ (8009114 <__malloc_unlock+0x8>)
 800910e:	f7ff b8a1 	b.w	8008254 <__retarget_lock_release_recursive>
 8009112:	bf00      	nop
 8009114:	20000624 	.word	0x20000624

08009118 <_Balloc>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	69c6      	ldr	r6, [r0, #28]
 800911c:	4604      	mov	r4, r0
 800911e:	460d      	mov	r5, r1
 8009120:	b976      	cbnz	r6, 8009140 <_Balloc+0x28>
 8009122:	2010      	movs	r0, #16
 8009124:	f7ff ff42 	bl	8008fac <malloc>
 8009128:	4602      	mov	r2, r0
 800912a:	61e0      	str	r0, [r4, #28]
 800912c:	b920      	cbnz	r0, 8009138 <_Balloc+0x20>
 800912e:	4b18      	ldr	r3, [pc, #96]	@ (8009190 <_Balloc+0x78>)
 8009130:	4818      	ldr	r0, [pc, #96]	@ (8009194 <_Balloc+0x7c>)
 8009132:	216b      	movs	r1, #107	@ 0x6b
 8009134:	f001 fec0 	bl	800aeb8 <__assert_func>
 8009138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800913c:	6006      	str	r6, [r0, #0]
 800913e:	60c6      	str	r6, [r0, #12]
 8009140:	69e6      	ldr	r6, [r4, #28]
 8009142:	68f3      	ldr	r3, [r6, #12]
 8009144:	b183      	cbz	r3, 8009168 <_Balloc+0x50>
 8009146:	69e3      	ldr	r3, [r4, #28]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800914e:	b9b8      	cbnz	r0, 8009180 <_Balloc+0x68>
 8009150:	2101      	movs	r1, #1
 8009152:	fa01 f605 	lsl.w	r6, r1, r5
 8009156:	1d72      	adds	r2, r6, #5
 8009158:	0092      	lsls	r2, r2, #2
 800915a:	4620      	mov	r0, r4
 800915c:	f001 feca 	bl	800aef4 <_calloc_r>
 8009160:	b160      	cbz	r0, 800917c <_Balloc+0x64>
 8009162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009166:	e00e      	b.n	8009186 <_Balloc+0x6e>
 8009168:	2221      	movs	r2, #33	@ 0x21
 800916a:	2104      	movs	r1, #4
 800916c:	4620      	mov	r0, r4
 800916e:	f001 fec1 	bl	800aef4 <_calloc_r>
 8009172:	69e3      	ldr	r3, [r4, #28]
 8009174:	60f0      	str	r0, [r6, #12]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e4      	bne.n	8009146 <_Balloc+0x2e>
 800917c:	2000      	movs	r0, #0
 800917e:	bd70      	pop	{r4, r5, r6, pc}
 8009180:	6802      	ldr	r2, [r0, #0]
 8009182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009186:	2300      	movs	r3, #0
 8009188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800918c:	e7f7      	b.n	800917e <_Balloc+0x66>
 800918e:	bf00      	nop
 8009190:	0800ba97 	.word	0x0800ba97
 8009194:	0800bb17 	.word	0x0800bb17

08009198 <_Bfree>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	69c6      	ldr	r6, [r0, #28]
 800919c:	4605      	mov	r5, r0
 800919e:	460c      	mov	r4, r1
 80091a0:	b976      	cbnz	r6, 80091c0 <_Bfree+0x28>
 80091a2:	2010      	movs	r0, #16
 80091a4:	f7ff ff02 	bl	8008fac <malloc>
 80091a8:	4602      	mov	r2, r0
 80091aa:	61e8      	str	r0, [r5, #28]
 80091ac:	b920      	cbnz	r0, 80091b8 <_Bfree+0x20>
 80091ae:	4b09      	ldr	r3, [pc, #36]	@ (80091d4 <_Bfree+0x3c>)
 80091b0:	4809      	ldr	r0, [pc, #36]	@ (80091d8 <_Bfree+0x40>)
 80091b2:	218f      	movs	r1, #143	@ 0x8f
 80091b4:	f001 fe80 	bl	800aeb8 <__assert_func>
 80091b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091bc:	6006      	str	r6, [r0, #0]
 80091be:	60c6      	str	r6, [r0, #12]
 80091c0:	b13c      	cbz	r4, 80091d2 <_Bfree+0x3a>
 80091c2:	69eb      	ldr	r3, [r5, #28]
 80091c4:	6862      	ldr	r2, [r4, #4]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091cc:	6021      	str	r1, [r4, #0]
 80091ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091d2:	bd70      	pop	{r4, r5, r6, pc}
 80091d4:	0800ba97 	.word	0x0800ba97
 80091d8:	0800bb17 	.word	0x0800bb17

080091dc <__multadd>:
 80091dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e0:	690d      	ldr	r5, [r1, #16]
 80091e2:	4607      	mov	r7, r0
 80091e4:	460c      	mov	r4, r1
 80091e6:	461e      	mov	r6, r3
 80091e8:	f101 0c14 	add.w	ip, r1, #20
 80091ec:	2000      	movs	r0, #0
 80091ee:	f8dc 3000 	ldr.w	r3, [ip]
 80091f2:	b299      	uxth	r1, r3
 80091f4:	fb02 6101 	mla	r1, r2, r1, r6
 80091f8:	0c1e      	lsrs	r6, r3, #16
 80091fa:	0c0b      	lsrs	r3, r1, #16
 80091fc:	fb02 3306 	mla	r3, r2, r6, r3
 8009200:	b289      	uxth	r1, r1
 8009202:	3001      	adds	r0, #1
 8009204:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009208:	4285      	cmp	r5, r0
 800920a:	f84c 1b04 	str.w	r1, [ip], #4
 800920e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009212:	dcec      	bgt.n	80091ee <__multadd+0x12>
 8009214:	b30e      	cbz	r6, 800925a <__multadd+0x7e>
 8009216:	68a3      	ldr	r3, [r4, #8]
 8009218:	42ab      	cmp	r3, r5
 800921a:	dc19      	bgt.n	8009250 <__multadd+0x74>
 800921c:	6861      	ldr	r1, [r4, #4]
 800921e:	4638      	mov	r0, r7
 8009220:	3101      	adds	r1, #1
 8009222:	f7ff ff79 	bl	8009118 <_Balloc>
 8009226:	4680      	mov	r8, r0
 8009228:	b928      	cbnz	r0, 8009236 <__multadd+0x5a>
 800922a:	4602      	mov	r2, r0
 800922c:	4b0c      	ldr	r3, [pc, #48]	@ (8009260 <__multadd+0x84>)
 800922e:	480d      	ldr	r0, [pc, #52]	@ (8009264 <__multadd+0x88>)
 8009230:	21ba      	movs	r1, #186	@ 0xba
 8009232:	f001 fe41 	bl	800aeb8 <__assert_func>
 8009236:	6922      	ldr	r2, [r4, #16]
 8009238:	3202      	adds	r2, #2
 800923a:	f104 010c 	add.w	r1, r4, #12
 800923e:	0092      	lsls	r2, r2, #2
 8009240:	300c      	adds	r0, #12
 8009242:	f001 fe21 	bl	800ae88 <memcpy>
 8009246:	4621      	mov	r1, r4
 8009248:	4638      	mov	r0, r7
 800924a:	f7ff ffa5 	bl	8009198 <_Bfree>
 800924e:	4644      	mov	r4, r8
 8009250:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009254:	3501      	adds	r5, #1
 8009256:	615e      	str	r6, [r3, #20]
 8009258:	6125      	str	r5, [r4, #16]
 800925a:	4620      	mov	r0, r4
 800925c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009260:	0800bb06 	.word	0x0800bb06
 8009264:	0800bb17 	.word	0x0800bb17

08009268 <__s2b>:
 8009268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800926c:	460c      	mov	r4, r1
 800926e:	4615      	mov	r5, r2
 8009270:	461f      	mov	r7, r3
 8009272:	2209      	movs	r2, #9
 8009274:	3308      	adds	r3, #8
 8009276:	4606      	mov	r6, r0
 8009278:	fb93 f3f2 	sdiv	r3, r3, r2
 800927c:	2100      	movs	r1, #0
 800927e:	2201      	movs	r2, #1
 8009280:	429a      	cmp	r2, r3
 8009282:	db09      	blt.n	8009298 <__s2b+0x30>
 8009284:	4630      	mov	r0, r6
 8009286:	f7ff ff47 	bl	8009118 <_Balloc>
 800928a:	b940      	cbnz	r0, 800929e <__s2b+0x36>
 800928c:	4602      	mov	r2, r0
 800928e:	4b19      	ldr	r3, [pc, #100]	@ (80092f4 <__s2b+0x8c>)
 8009290:	4819      	ldr	r0, [pc, #100]	@ (80092f8 <__s2b+0x90>)
 8009292:	21d3      	movs	r1, #211	@ 0xd3
 8009294:	f001 fe10 	bl	800aeb8 <__assert_func>
 8009298:	0052      	lsls	r2, r2, #1
 800929a:	3101      	adds	r1, #1
 800929c:	e7f0      	b.n	8009280 <__s2b+0x18>
 800929e:	9b08      	ldr	r3, [sp, #32]
 80092a0:	6143      	str	r3, [r0, #20]
 80092a2:	2d09      	cmp	r5, #9
 80092a4:	f04f 0301 	mov.w	r3, #1
 80092a8:	6103      	str	r3, [r0, #16]
 80092aa:	dd16      	ble.n	80092da <__s2b+0x72>
 80092ac:	f104 0909 	add.w	r9, r4, #9
 80092b0:	46c8      	mov	r8, r9
 80092b2:	442c      	add	r4, r5
 80092b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80092b8:	4601      	mov	r1, r0
 80092ba:	3b30      	subs	r3, #48	@ 0x30
 80092bc:	220a      	movs	r2, #10
 80092be:	4630      	mov	r0, r6
 80092c0:	f7ff ff8c 	bl	80091dc <__multadd>
 80092c4:	45a0      	cmp	r8, r4
 80092c6:	d1f5      	bne.n	80092b4 <__s2b+0x4c>
 80092c8:	f1a5 0408 	sub.w	r4, r5, #8
 80092cc:	444c      	add	r4, r9
 80092ce:	1b2d      	subs	r5, r5, r4
 80092d0:	1963      	adds	r3, r4, r5
 80092d2:	42bb      	cmp	r3, r7
 80092d4:	db04      	blt.n	80092e0 <__s2b+0x78>
 80092d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092da:	340a      	adds	r4, #10
 80092dc:	2509      	movs	r5, #9
 80092de:	e7f6      	b.n	80092ce <__s2b+0x66>
 80092e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092e4:	4601      	mov	r1, r0
 80092e6:	3b30      	subs	r3, #48	@ 0x30
 80092e8:	220a      	movs	r2, #10
 80092ea:	4630      	mov	r0, r6
 80092ec:	f7ff ff76 	bl	80091dc <__multadd>
 80092f0:	e7ee      	b.n	80092d0 <__s2b+0x68>
 80092f2:	bf00      	nop
 80092f4:	0800bb06 	.word	0x0800bb06
 80092f8:	0800bb17 	.word	0x0800bb17

080092fc <__hi0bits>:
 80092fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009300:	4603      	mov	r3, r0
 8009302:	bf36      	itet	cc
 8009304:	0403      	lslcc	r3, r0, #16
 8009306:	2000      	movcs	r0, #0
 8009308:	2010      	movcc	r0, #16
 800930a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800930e:	bf3c      	itt	cc
 8009310:	021b      	lslcc	r3, r3, #8
 8009312:	3008      	addcc	r0, #8
 8009314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009318:	bf3c      	itt	cc
 800931a:	011b      	lslcc	r3, r3, #4
 800931c:	3004      	addcc	r0, #4
 800931e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009322:	bf3c      	itt	cc
 8009324:	009b      	lslcc	r3, r3, #2
 8009326:	3002      	addcc	r0, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	db05      	blt.n	8009338 <__hi0bits+0x3c>
 800932c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009330:	f100 0001 	add.w	r0, r0, #1
 8009334:	bf08      	it	eq
 8009336:	2020      	moveq	r0, #32
 8009338:	4770      	bx	lr

0800933a <__lo0bits>:
 800933a:	6803      	ldr	r3, [r0, #0]
 800933c:	4602      	mov	r2, r0
 800933e:	f013 0007 	ands.w	r0, r3, #7
 8009342:	d00b      	beq.n	800935c <__lo0bits+0x22>
 8009344:	07d9      	lsls	r1, r3, #31
 8009346:	d421      	bmi.n	800938c <__lo0bits+0x52>
 8009348:	0798      	lsls	r0, r3, #30
 800934a:	bf49      	itett	mi
 800934c:	085b      	lsrmi	r3, r3, #1
 800934e:	089b      	lsrpl	r3, r3, #2
 8009350:	2001      	movmi	r0, #1
 8009352:	6013      	strmi	r3, [r2, #0]
 8009354:	bf5c      	itt	pl
 8009356:	6013      	strpl	r3, [r2, #0]
 8009358:	2002      	movpl	r0, #2
 800935a:	4770      	bx	lr
 800935c:	b299      	uxth	r1, r3
 800935e:	b909      	cbnz	r1, 8009364 <__lo0bits+0x2a>
 8009360:	0c1b      	lsrs	r3, r3, #16
 8009362:	2010      	movs	r0, #16
 8009364:	b2d9      	uxtb	r1, r3
 8009366:	b909      	cbnz	r1, 800936c <__lo0bits+0x32>
 8009368:	3008      	adds	r0, #8
 800936a:	0a1b      	lsrs	r3, r3, #8
 800936c:	0719      	lsls	r1, r3, #28
 800936e:	bf04      	itt	eq
 8009370:	091b      	lsreq	r3, r3, #4
 8009372:	3004      	addeq	r0, #4
 8009374:	0799      	lsls	r1, r3, #30
 8009376:	bf04      	itt	eq
 8009378:	089b      	lsreq	r3, r3, #2
 800937a:	3002      	addeq	r0, #2
 800937c:	07d9      	lsls	r1, r3, #31
 800937e:	d403      	bmi.n	8009388 <__lo0bits+0x4e>
 8009380:	085b      	lsrs	r3, r3, #1
 8009382:	f100 0001 	add.w	r0, r0, #1
 8009386:	d003      	beq.n	8009390 <__lo0bits+0x56>
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	4770      	bx	lr
 800938c:	2000      	movs	r0, #0
 800938e:	4770      	bx	lr
 8009390:	2020      	movs	r0, #32
 8009392:	4770      	bx	lr

08009394 <__i2b>:
 8009394:	b510      	push	{r4, lr}
 8009396:	460c      	mov	r4, r1
 8009398:	2101      	movs	r1, #1
 800939a:	f7ff febd 	bl	8009118 <_Balloc>
 800939e:	4602      	mov	r2, r0
 80093a0:	b928      	cbnz	r0, 80093ae <__i2b+0x1a>
 80093a2:	4b05      	ldr	r3, [pc, #20]	@ (80093b8 <__i2b+0x24>)
 80093a4:	4805      	ldr	r0, [pc, #20]	@ (80093bc <__i2b+0x28>)
 80093a6:	f240 1145 	movw	r1, #325	@ 0x145
 80093aa:	f001 fd85 	bl	800aeb8 <__assert_func>
 80093ae:	2301      	movs	r3, #1
 80093b0:	6144      	str	r4, [r0, #20]
 80093b2:	6103      	str	r3, [r0, #16]
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	bf00      	nop
 80093b8:	0800bb06 	.word	0x0800bb06
 80093bc:	0800bb17 	.word	0x0800bb17

080093c0 <__multiply>:
 80093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	4617      	mov	r7, r2
 80093c6:	690a      	ldr	r2, [r1, #16]
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	bfa8      	it	ge
 80093ce:	463b      	movge	r3, r7
 80093d0:	4689      	mov	r9, r1
 80093d2:	bfa4      	itt	ge
 80093d4:	460f      	movge	r7, r1
 80093d6:	4699      	movge	r9, r3
 80093d8:	693d      	ldr	r5, [r7, #16]
 80093da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	eb05 060a 	add.w	r6, r5, sl
 80093e6:	42b3      	cmp	r3, r6
 80093e8:	b085      	sub	sp, #20
 80093ea:	bfb8      	it	lt
 80093ec:	3101      	addlt	r1, #1
 80093ee:	f7ff fe93 	bl	8009118 <_Balloc>
 80093f2:	b930      	cbnz	r0, 8009402 <__multiply+0x42>
 80093f4:	4602      	mov	r2, r0
 80093f6:	4b41      	ldr	r3, [pc, #260]	@ (80094fc <__multiply+0x13c>)
 80093f8:	4841      	ldr	r0, [pc, #260]	@ (8009500 <__multiply+0x140>)
 80093fa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80093fe:	f001 fd5b 	bl	800aeb8 <__assert_func>
 8009402:	f100 0414 	add.w	r4, r0, #20
 8009406:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800940a:	4623      	mov	r3, r4
 800940c:	2200      	movs	r2, #0
 800940e:	4573      	cmp	r3, lr
 8009410:	d320      	bcc.n	8009454 <__multiply+0x94>
 8009412:	f107 0814 	add.w	r8, r7, #20
 8009416:	f109 0114 	add.w	r1, r9, #20
 800941a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800941e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009422:	9302      	str	r3, [sp, #8]
 8009424:	1beb      	subs	r3, r5, r7
 8009426:	3b15      	subs	r3, #21
 8009428:	f023 0303 	bic.w	r3, r3, #3
 800942c:	3304      	adds	r3, #4
 800942e:	3715      	adds	r7, #21
 8009430:	42bd      	cmp	r5, r7
 8009432:	bf38      	it	cc
 8009434:	2304      	movcc	r3, #4
 8009436:	9301      	str	r3, [sp, #4]
 8009438:	9b02      	ldr	r3, [sp, #8]
 800943a:	9103      	str	r1, [sp, #12]
 800943c:	428b      	cmp	r3, r1
 800943e:	d80c      	bhi.n	800945a <__multiply+0x9a>
 8009440:	2e00      	cmp	r6, #0
 8009442:	dd03      	ble.n	800944c <__multiply+0x8c>
 8009444:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009448:	2b00      	cmp	r3, #0
 800944a:	d055      	beq.n	80094f8 <__multiply+0x138>
 800944c:	6106      	str	r6, [r0, #16]
 800944e:	b005      	add	sp, #20
 8009450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009454:	f843 2b04 	str.w	r2, [r3], #4
 8009458:	e7d9      	b.n	800940e <__multiply+0x4e>
 800945a:	f8b1 a000 	ldrh.w	sl, [r1]
 800945e:	f1ba 0f00 	cmp.w	sl, #0
 8009462:	d01f      	beq.n	80094a4 <__multiply+0xe4>
 8009464:	46c4      	mov	ip, r8
 8009466:	46a1      	mov	r9, r4
 8009468:	2700      	movs	r7, #0
 800946a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800946e:	f8d9 3000 	ldr.w	r3, [r9]
 8009472:	fa1f fb82 	uxth.w	fp, r2
 8009476:	b29b      	uxth	r3, r3
 8009478:	fb0a 330b 	mla	r3, sl, fp, r3
 800947c:	443b      	add	r3, r7
 800947e:	f8d9 7000 	ldr.w	r7, [r9]
 8009482:	0c12      	lsrs	r2, r2, #16
 8009484:	0c3f      	lsrs	r7, r7, #16
 8009486:	fb0a 7202 	mla	r2, sl, r2, r7
 800948a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800948e:	b29b      	uxth	r3, r3
 8009490:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009494:	4565      	cmp	r5, ip
 8009496:	f849 3b04 	str.w	r3, [r9], #4
 800949a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800949e:	d8e4      	bhi.n	800946a <__multiply+0xaa>
 80094a0:	9b01      	ldr	r3, [sp, #4]
 80094a2:	50e7      	str	r7, [r4, r3]
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80094aa:	3104      	adds	r1, #4
 80094ac:	f1b9 0f00 	cmp.w	r9, #0
 80094b0:	d020      	beq.n	80094f4 <__multiply+0x134>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	4647      	mov	r7, r8
 80094b6:	46a4      	mov	ip, r4
 80094b8:	f04f 0a00 	mov.w	sl, #0
 80094bc:	f8b7 b000 	ldrh.w	fp, [r7]
 80094c0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80094c4:	fb09 220b 	mla	r2, r9, fp, r2
 80094c8:	4452      	add	r2, sl
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094d0:	f84c 3b04 	str.w	r3, [ip], #4
 80094d4:	f857 3b04 	ldr.w	r3, [r7], #4
 80094d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094dc:	f8bc 3000 	ldrh.w	r3, [ip]
 80094e0:	fb09 330a 	mla	r3, r9, sl, r3
 80094e4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80094e8:	42bd      	cmp	r5, r7
 80094ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094ee:	d8e5      	bhi.n	80094bc <__multiply+0xfc>
 80094f0:	9a01      	ldr	r2, [sp, #4]
 80094f2:	50a3      	str	r3, [r4, r2]
 80094f4:	3404      	adds	r4, #4
 80094f6:	e79f      	b.n	8009438 <__multiply+0x78>
 80094f8:	3e01      	subs	r6, #1
 80094fa:	e7a1      	b.n	8009440 <__multiply+0x80>
 80094fc:	0800bb06 	.word	0x0800bb06
 8009500:	0800bb17 	.word	0x0800bb17

08009504 <__pow5mult>:
 8009504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009508:	4615      	mov	r5, r2
 800950a:	f012 0203 	ands.w	r2, r2, #3
 800950e:	4607      	mov	r7, r0
 8009510:	460e      	mov	r6, r1
 8009512:	d007      	beq.n	8009524 <__pow5mult+0x20>
 8009514:	4c25      	ldr	r4, [pc, #148]	@ (80095ac <__pow5mult+0xa8>)
 8009516:	3a01      	subs	r2, #1
 8009518:	2300      	movs	r3, #0
 800951a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800951e:	f7ff fe5d 	bl	80091dc <__multadd>
 8009522:	4606      	mov	r6, r0
 8009524:	10ad      	asrs	r5, r5, #2
 8009526:	d03d      	beq.n	80095a4 <__pow5mult+0xa0>
 8009528:	69fc      	ldr	r4, [r7, #28]
 800952a:	b97c      	cbnz	r4, 800954c <__pow5mult+0x48>
 800952c:	2010      	movs	r0, #16
 800952e:	f7ff fd3d 	bl	8008fac <malloc>
 8009532:	4602      	mov	r2, r0
 8009534:	61f8      	str	r0, [r7, #28]
 8009536:	b928      	cbnz	r0, 8009544 <__pow5mult+0x40>
 8009538:	4b1d      	ldr	r3, [pc, #116]	@ (80095b0 <__pow5mult+0xac>)
 800953a:	481e      	ldr	r0, [pc, #120]	@ (80095b4 <__pow5mult+0xb0>)
 800953c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009540:	f001 fcba 	bl	800aeb8 <__assert_func>
 8009544:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009548:	6004      	str	r4, [r0, #0]
 800954a:	60c4      	str	r4, [r0, #12]
 800954c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009550:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009554:	b94c      	cbnz	r4, 800956a <__pow5mult+0x66>
 8009556:	f240 2171 	movw	r1, #625	@ 0x271
 800955a:	4638      	mov	r0, r7
 800955c:	f7ff ff1a 	bl	8009394 <__i2b>
 8009560:	2300      	movs	r3, #0
 8009562:	f8c8 0008 	str.w	r0, [r8, #8]
 8009566:	4604      	mov	r4, r0
 8009568:	6003      	str	r3, [r0, #0]
 800956a:	f04f 0900 	mov.w	r9, #0
 800956e:	07eb      	lsls	r3, r5, #31
 8009570:	d50a      	bpl.n	8009588 <__pow5mult+0x84>
 8009572:	4631      	mov	r1, r6
 8009574:	4622      	mov	r2, r4
 8009576:	4638      	mov	r0, r7
 8009578:	f7ff ff22 	bl	80093c0 <__multiply>
 800957c:	4631      	mov	r1, r6
 800957e:	4680      	mov	r8, r0
 8009580:	4638      	mov	r0, r7
 8009582:	f7ff fe09 	bl	8009198 <_Bfree>
 8009586:	4646      	mov	r6, r8
 8009588:	106d      	asrs	r5, r5, #1
 800958a:	d00b      	beq.n	80095a4 <__pow5mult+0xa0>
 800958c:	6820      	ldr	r0, [r4, #0]
 800958e:	b938      	cbnz	r0, 80095a0 <__pow5mult+0x9c>
 8009590:	4622      	mov	r2, r4
 8009592:	4621      	mov	r1, r4
 8009594:	4638      	mov	r0, r7
 8009596:	f7ff ff13 	bl	80093c0 <__multiply>
 800959a:	6020      	str	r0, [r4, #0]
 800959c:	f8c0 9000 	str.w	r9, [r0]
 80095a0:	4604      	mov	r4, r0
 80095a2:	e7e4      	b.n	800956e <__pow5mult+0x6a>
 80095a4:	4630      	mov	r0, r6
 80095a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095aa:	bf00      	nop
 80095ac:	0800bc28 	.word	0x0800bc28
 80095b0:	0800ba97 	.word	0x0800ba97
 80095b4:	0800bb17 	.word	0x0800bb17

080095b8 <__lshift>:
 80095b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095bc:	460c      	mov	r4, r1
 80095be:	6849      	ldr	r1, [r1, #4]
 80095c0:	6923      	ldr	r3, [r4, #16]
 80095c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095c6:	68a3      	ldr	r3, [r4, #8]
 80095c8:	4607      	mov	r7, r0
 80095ca:	4691      	mov	r9, r2
 80095cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095d0:	f108 0601 	add.w	r6, r8, #1
 80095d4:	42b3      	cmp	r3, r6
 80095d6:	db0b      	blt.n	80095f0 <__lshift+0x38>
 80095d8:	4638      	mov	r0, r7
 80095da:	f7ff fd9d 	bl	8009118 <_Balloc>
 80095de:	4605      	mov	r5, r0
 80095e0:	b948      	cbnz	r0, 80095f6 <__lshift+0x3e>
 80095e2:	4602      	mov	r2, r0
 80095e4:	4b28      	ldr	r3, [pc, #160]	@ (8009688 <__lshift+0xd0>)
 80095e6:	4829      	ldr	r0, [pc, #164]	@ (800968c <__lshift+0xd4>)
 80095e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80095ec:	f001 fc64 	bl	800aeb8 <__assert_func>
 80095f0:	3101      	adds	r1, #1
 80095f2:	005b      	lsls	r3, r3, #1
 80095f4:	e7ee      	b.n	80095d4 <__lshift+0x1c>
 80095f6:	2300      	movs	r3, #0
 80095f8:	f100 0114 	add.w	r1, r0, #20
 80095fc:	f100 0210 	add.w	r2, r0, #16
 8009600:	4618      	mov	r0, r3
 8009602:	4553      	cmp	r3, sl
 8009604:	db33      	blt.n	800966e <__lshift+0xb6>
 8009606:	6920      	ldr	r0, [r4, #16]
 8009608:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800960c:	f104 0314 	add.w	r3, r4, #20
 8009610:	f019 091f 	ands.w	r9, r9, #31
 8009614:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009618:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800961c:	d02b      	beq.n	8009676 <__lshift+0xbe>
 800961e:	f1c9 0e20 	rsb	lr, r9, #32
 8009622:	468a      	mov	sl, r1
 8009624:	2200      	movs	r2, #0
 8009626:	6818      	ldr	r0, [r3, #0]
 8009628:	fa00 f009 	lsl.w	r0, r0, r9
 800962c:	4310      	orrs	r0, r2
 800962e:	f84a 0b04 	str.w	r0, [sl], #4
 8009632:	f853 2b04 	ldr.w	r2, [r3], #4
 8009636:	459c      	cmp	ip, r3
 8009638:	fa22 f20e 	lsr.w	r2, r2, lr
 800963c:	d8f3      	bhi.n	8009626 <__lshift+0x6e>
 800963e:	ebac 0304 	sub.w	r3, ip, r4
 8009642:	3b15      	subs	r3, #21
 8009644:	f023 0303 	bic.w	r3, r3, #3
 8009648:	3304      	adds	r3, #4
 800964a:	f104 0015 	add.w	r0, r4, #21
 800964e:	4560      	cmp	r0, ip
 8009650:	bf88      	it	hi
 8009652:	2304      	movhi	r3, #4
 8009654:	50ca      	str	r2, [r1, r3]
 8009656:	b10a      	cbz	r2, 800965c <__lshift+0xa4>
 8009658:	f108 0602 	add.w	r6, r8, #2
 800965c:	3e01      	subs	r6, #1
 800965e:	4638      	mov	r0, r7
 8009660:	612e      	str	r6, [r5, #16]
 8009662:	4621      	mov	r1, r4
 8009664:	f7ff fd98 	bl	8009198 <_Bfree>
 8009668:	4628      	mov	r0, r5
 800966a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009672:	3301      	adds	r3, #1
 8009674:	e7c5      	b.n	8009602 <__lshift+0x4a>
 8009676:	3904      	subs	r1, #4
 8009678:	f853 2b04 	ldr.w	r2, [r3], #4
 800967c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009680:	459c      	cmp	ip, r3
 8009682:	d8f9      	bhi.n	8009678 <__lshift+0xc0>
 8009684:	e7ea      	b.n	800965c <__lshift+0xa4>
 8009686:	bf00      	nop
 8009688:	0800bb06 	.word	0x0800bb06
 800968c:	0800bb17 	.word	0x0800bb17

08009690 <__mcmp>:
 8009690:	690a      	ldr	r2, [r1, #16]
 8009692:	4603      	mov	r3, r0
 8009694:	6900      	ldr	r0, [r0, #16]
 8009696:	1a80      	subs	r0, r0, r2
 8009698:	b530      	push	{r4, r5, lr}
 800969a:	d10e      	bne.n	80096ba <__mcmp+0x2a>
 800969c:	3314      	adds	r3, #20
 800969e:	3114      	adds	r1, #20
 80096a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80096a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80096a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80096ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80096b0:	4295      	cmp	r5, r2
 80096b2:	d003      	beq.n	80096bc <__mcmp+0x2c>
 80096b4:	d205      	bcs.n	80096c2 <__mcmp+0x32>
 80096b6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ba:	bd30      	pop	{r4, r5, pc}
 80096bc:	42a3      	cmp	r3, r4
 80096be:	d3f3      	bcc.n	80096a8 <__mcmp+0x18>
 80096c0:	e7fb      	b.n	80096ba <__mcmp+0x2a>
 80096c2:	2001      	movs	r0, #1
 80096c4:	e7f9      	b.n	80096ba <__mcmp+0x2a>
	...

080096c8 <__mdiff>:
 80096c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	4689      	mov	r9, r1
 80096ce:	4606      	mov	r6, r0
 80096d0:	4611      	mov	r1, r2
 80096d2:	4648      	mov	r0, r9
 80096d4:	4614      	mov	r4, r2
 80096d6:	f7ff ffdb 	bl	8009690 <__mcmp>
 80096da:	1e05      	subs	r5, r0, #0
 80096dc:	d112      	bne.n	8009704 <__mdiff+0x3c>
 80096de:	4629      	mov	r1, r5
 80096e0:	4630      	mov	r0, r6
 80096e2:	f7ff fd19 	bl	8009118 <_Balloc>
 80096e6:	4602      	mov	r2, r0
 80096e8:	b928      	cbnz	r0, 80096f6 <__mdiff+0x2e>
 80096ea:	4b3f      	ldr	r3, [pc, #252]	@ (80097e8 <__mdiff+0x120>)
 80096ec:	f240 2137 	movw	r1, #567	@ 0x237
 80096f0:	483e      	ldr	r0, [pc, #248]	@ (80097ec <__mdiff+0x124>)
 80096f2:	f001 fbe1 	bl	800aeb8 <__assert_func>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096fc:	4610      	mov	r0, r2
 80096fe:	b003      	add	sp, #12
 8009700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009704:	bfbc      	itt	lt
 8009706:	464b      	movlt	r3, r9
 8009708:	46a1      	movlt	r9, r4
 800970a:	4630      	mov	r0, r6
 800970c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009710:	bfba      	itte	lt
 8009712:	461c      	movlt	r4, r3
 8009714:	2501      	movlt	r5, #1
 8009716:	2500      	movge	r5, #0
 8009718:	f7ff fcfe 	bl	8009118 <_Balloc>
 800971c:	4602      	mov	r2, r0
 800971e:	b918      	cbnz	r0, 8009728 <__mdiff+0x60>
 8009720:	4b31      	ldr	r3, [pc, #196]	@ (80097e8 <__mdiff+0x120>)
 8009722:	f240 2145 	movw	r1, #581	@ 0x245
 8009726:	e7e3      	b.n	80096f0 <__mdiff+0x28>
 8009728:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800972c:	6926      	ldr	r6, [r4, #16]
 800972e:	60c5      	str	r5, [r0, #12]
 8009730:	f109 0310 	add.w	r3, r9, #16
 8009734:	f109 0514 	add.w	r5, r9, #20
 8009738:	f104 0e14 	add.w	lr, r4, #20
 800973c:	f100 0b14 	add.w	fp, r0, #20
 8009740:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009744:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	46d9      	mov	r9, fp
 800974c:	f04f 0c00 	mov.w	ip, #0
 8009750:	9b01      	ldr	r3, [sp, #4]
 8009752:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009756:	f853 af04 	ldr.w	sl, [r3, #4]!
 800975a:	9301      	str	r3, [sp, #4]
 800975c:	fa1f f38a 	uxth.w	r3, sl
 8009760:	4619      	mov	r1, r3
 8009762:	b283      	uxth	r3, r0
 8009764:	1acb      	subs	r3, r1, r3
 8009766:	0c00      	lsrs	r0, r0, #16
 8009768:	4463      	add	r3, ip
 800976a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800976e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009772:	b29b      	uxth	r3, r3
 8009774:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009778:	4576      	cmp	r6, lr
 800977a:	f849 3b04 	str.w	r3, [r9], #4
 800977e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009782:	d8e5      	bhi.n	8009750 <__mdiff+0x88>
 8009784:	1b33      	subs	r3, r6, r4
 8009786:	3b15      	subs	r3, #21
 8009788:	f023 0303 	bic.w	r3, r3, #3
 800978c:	3415      	adds	r4, #21
 800978e:	3304      	adds	r3, #4
 8009790:	42a6      	cmp	r6, r4
 8009792:	bf38      	it	cc
 8009794:	2304      	movcc	r3, #4
 8009796:	441d      	add	r5, r3
 8009798:	445b      	add	r3, fp
 800979a:	461e      	mov	r6, r3
 800979c:	462c      	mov	r4, r5
 800979e:	4544      	cmp	r4, r8
 80097a0:	d30e      	bcc.n	80097c0 <__mdiff+0xf8>
 80097a2:	f108 0103 	add.w	r1, r8, #3
 80097a6:	1b49      	subs	r1, r1, r5
 80097a8:	f021 0103 	bic.w	r1, r1, #3
 80097ac:	3d03      	subs	r5, #3
 80097ae:	45a8      	cmp	r8, r5
 80097b0:	bf38      	it	cc
 80097b2:	2100      	movcc	r1, #0
 80097b4:	440b      	add	r3, r1
 80097b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097ba:	b191      	cbz	r1, 80097e2 <__mdiff+0x11a>
 80097bc:	6117      	str	r7, [r2, #16]
 80097be:	e79d      	b.n	80096fc <__mdiff+0x34>
 80097c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80097c4:	46e6      	mov	lr, ip
 80097c6:	0c08      	lsrs	r0, r1, #16
 80097c8:	fa1c fc81 	uxtah	ip, ip, r1
 80097cc:	4471      	add	r1, lr
 80097ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80097d2:	b289      	uxth	r1, r1
 80097d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80097d8:	f846 1b04 	str.w	r1, [r6], #4
 80097dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097e0:	e7dd      	b.n	800979e <__mdiff+0xd6>
 80097e2:	3f01      	subs	r7, #1
 80097e4:	e7e7      	b.n	80097b6 <__mdiff+0xee>
 80097e6:	bf00      	nop
 80097e8:	0800bb06 	.word	0x0800bb06
 80097ec:	0800bb17 	.word	0x0800bb17

080097f0 <__ulp>:
 80097f0:	b082      	sub	sp, #8
 80097f2:	ed8d 0b00 	vstr	d0, [sp]
 80097f6:	9a01      	ldr	r2, [sp, #4]
 80097f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009838 <__ulp+0x48>)
 80097fa:	4013      	ands	r3, r2
 80097fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009800:	2b00      	cmp	r3, #0
 8009802:	dc08      	bgt.n	8009816 <__ulp+0x26>
 8009804:	425b      	negs	r3, r3
 8009806:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800980a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800980e:	da04      	bge.n	800981a <__ulp+0x2a>
 8009810:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009814:	4113      	asrs	r3, r2
 8009816:	2200      	movs	r2, #0
 8009818:	e008      	b.n	800982c <__ulp+0x3c>
 800981a:	f1a2 0314 	sub.w	r3, r2, #20
 800981e:	2b1e      	cmp	r3, #30
 8009820:	bfda      	itte	le
 8009822:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009826:	40da      	lsrle	r2, r3
 8009828:	2201      	movgt	r2, #1
 800982a:	2300      	movs	r3, #0
 800982c:	4619      	mov	r1, r3
 800982e:	4610      	mov	r0, r2
 8009830:	ec41 0b10 	vmov	d0, r0, r1
 8009834:	b002      	add	sp, #8
 8009836:	4770      	bx	lr
 8009838:	7ff00000 	.word	0x7ff00000

0800983c <__b2d>:
 800983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009840:	6906      	ldr	r6, [r0, #16]
 8009842:	f100 0814 	add.w	r8, r0, #20
 8009846:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800984a:	1f37      	subs	r7, r6, #4
 800984c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009850:	4610      	mov	r0, r2
 8009852:	f7ff fd53 	bl	80092fc <__hi0bits>
 8009856:	f1c0 0320 	rsb	r3, r0, #32
 800985a:	280a      	cmp	r0, #10
 800985c:	600b      	str	r3, [r1, #0]
 800985e:	491b      	ldr	r1, [pc, #108]	@ (80098cc <__b2d+0x90>)
 8009860:	dc15      	bgt.n	800988e <__b2d+0x52>
 8009862:	f1c0 0c0b 	rsb	ip, r0, #11
 8009866:	fa22 f30c 	lsr.w	r3, r2, ip
 800986a:	45b8      	cmp	r8, r7
 800986c:	ea43 0501 	orr.w	r5, r3, r1
 8009870:	bf34      	ite	cc
 8009872:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009876:	2300      	movcs	r3, #0
 8009878:	3015      	adds	r0, #21
 800987a:	fa02 f000 	lsl.w	r0, r2, r0
 800987e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009882:	4303      	orrs	r3, r0
 8009884:	461c      	mov	r4, r3
 8009886:	ec45 4b10 	vmov	d0, r4, r5
 800988a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800988e:	45b8      	cmp	r8, r7
 8009890:	bf3a      	itte	cc
 8009892:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009896:	f1a6 0708 	subcc.w	r7, r6, #8
 800989a:	2300      	movcs	r3, #0
 800989c:	380b      	subs	r0, #11
 800989e:	d012      	beq.n	80098c6 <__b2d+0x8a>
 80098a0:	f1c0 0120 	rsb	r1, r0, #32
 80098a4:	fa23 f401 	lsr.w	r4, r3, r1
 80098a8:	4082      	lsls	r2, r0
 80098aa:	4322      	orrs	r2, r4
 80098ac:	4547      	cmp	r7, r8
 80098ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80098b2:	bf8c      	ite	hi
 80098b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80098b8:	2200      	movls	r2, #0
 80098ba:	4083      	lsls	r3, r0
 80098bc:	40ca      	lsrs	r2, r1
 80098be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80098c2:	4313      	orrs	r3, r2
 80098c4:	e7de      	b.n	8009884 <__b2d+0x48>
 80098c6:	ea42 0501 	orr.w	r5, r2, r1
 80098ca:	e7db      	b.n	8009884 <__b2d+0x48>
 80098cc:	3ff00000 	.word	0x3ff00000

080098d0 <__d2b>:
 80098d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098d4:	460f      	mov	r7, r1
 80098d6:	2101      	movs	r1, #1
 80098d8:	ec59 8b10 	vmov	r8, r9, d0
 80098dc:	4616      	mov	r6, r2
 80098de:	f7ff fc1b 	bl	8009118 <_Balloc>
 80098e2:	4604      	mov	r4, r0
 80098e4:	b930      	cbnz	r0, 80098f4 <__d2b+0x24>
 80098e6:	4602      	mov	r2, r0
 80098e8:	4b23      	ldr	r3, [pc, #140]	@ (8009978 <__d2b+0xa8>)
 80098ea:	4824      	ldr	r0, [pc, #144]	@ (800997c <__d2b+0xac>)
 80098ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80098f0:	f001 fae2 	bl	800aeb8 <__assert_func>
 80098f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098fc:	b10d      	cbz	r5, 8009902 <__d2b+0x32>
 80098fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	f1b8 0300 	subs.w	r3, r8, #0
 8009908:	d023      	beq.n	8009952 <__d2b+0x82>
 800990a:	4668      	mov	r0, sp
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	f7ff fd14 	bl	800933a <__lo0bits>
 8009912:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009916:	b1d0      	cbz	r0, 800994e <__d2b+0x7e>
 8009918:	f1c0 0320 	rsb	r3, r0, #32
 800991c:	fa02 f303 	lsl.w	r3, r2, r3
 8009920:	430b      	orrs	r3, r1
 8009922:	40c2      	lsrs	r2, r0
 8009924:	6163      	str	r3, [r4, #20]
 8009926:	9201      	str	r2, [sp, #4]
 8009928:	9b01      	ldr	r3, [sp, #4]
 800992a:	61a3      	str	r3, [r4, #24]
 800992c:	2b00      	cmp	r3, #0
 800992e:	bf0c      	ite	eq
 8009930:	2201      	moveq	r2, #1
 8009932:	2202      	movne	r2, #2
 8009934:	6122      	str	r2, [r4, #16]
 8009936:	b1a5      	cbz	r5, 8009962 <__d2b+0x92>
 8009938:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800993c:	4405      	add	r5, r0
 800993e:	603d      	str	r5, [r7, #0]
 8009940:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009944:	6030      	str	r0, [r6, #0]
 8009946:	4620      	mov	r0, r4
 8009948:	b003      	add	sp, #12
 800994a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800994e:	6161      	str	r1, [r4, #20]
 8009950:	e7ea      	b.n	8009928 <__d2b+0x58>
 8009952:	a801      	add	r0, sp, #4
 8009954:	f7ff fcf1 	bl	800933a <__lo0bits>
 8009958:	9b01      	ldr	r3, [sp, #4]
 800995a:	6163      	str	r3, [r4, #20]
 800995c:	3020      	adds	r0, #32
 800995e:	2201      	movs	r2, #1
 8009960:	e7e8      	b.n	8009934 <__d2b+0x64>
 8009962:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009966:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800996a:	6038      	str	r0, [r7, #0]
 800996c:	6918      	ldr	r0, [r3, #16]
 800996e:	f7ff fcc5 	bl	80092fc <__hi0bits>
 8009972:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009976:	e7e5      	b.n	8009944 <__d2b+0x74>
 8009978:	0800bb06 	.word	0x0800bb06
 800997c:	0800bb17 	.word	0x0800bb17

08009980 <__ratio>:
 8009980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	b085      	sub	sp, #20
 8009986:	e9cd 1000 	strd	r1, r0, [sp]
 800998a:	a902      	add	r1, sp, #8
 800998c:	f7ff ff56 	bl	800983c <__b2d>
 8009990:	9800      	ldr	r0, [sp, #0]
 8009992:	a903      	add	r1, sp, #12
 8009994:	ec55 4b10 	vmov	r4, r5, d0
 8009998:	f7ff ff50 	bl	800983c <__b2d>
 800999c:	9b01      	ldr	r3, [sp, #4]
 800999e:	6919      	ldr	r1, [r3, #16]
 80099a0:	9b00      	ldr	r3, [sp, #0]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	1ac9      	subs	r1, r1, r3
 80099a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	ec5b ab10 	vmov	sl, fp, d0
 80099b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	bfce      	itee	gt
 80099b8:	462a      	movgt	r2, r5
 80099ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80099be:	465a      	movle	r2, fp
 80099c0:	462f      	mov	r7, r5
 80099c2:	46d9      	mov	r9, fp
 80099c4:	bfcc      	ite	gt
 80099c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80099ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80099ce:	464b      	mov	r3, r9
 80099d0:	4652      	mov	r2, sl
 80099d2:	4620      	mov	r0, r4
 80099d4:	4639      	mov	r1, r7
 80099d6:	f7f6 ff69 	bl	80008ac <__aeabi_ddiv>
 80099da:	ec41 0b10 	vmov	d0, r0, r1
 80099de:	b005      	add	sp, #20
 80099e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099e4 <__copybits>:
 80099e4:	3901      	subs	r1, #1
 80099e6:	b570      	push	{r4, r5, r6, lr}
 80099e8:	1149      	asrs	r1, r1, #5
 80099ea:	6914      	ldr	r4, [r2, #16]
 80099ec:	3101      	adds	r1, #1
 80099ee:	f102 0314 	add.w	r3, r2, #20
 80099f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099fa:	1f05      	subs	r5, r0, #4
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	d30c      	bcc.n	8009a1a <__copybits+0x36>
 8009a00:	1aa3      	subs	r3, r4, r2
 8009a02:	3b11      	subs	r3, #17
 8009a04:	f023 0303 	bic.w	r3, r3, #3
 8009a08:	3211      	adds	r2, #17
 8009a0a:	42a2      	cmp	r2, r4
 8009a0c:	bf88      	it	hi
 8009a0e:	2300      	movhi	r3, #0
 8009a10:	4418      	add	r0, r3
 8009a12:	2300      	movs	r3, #0
 8009a14:	4288      	cmp	r0, r1
 8009a16:	d305      	bcc.n	8009a24 <__copybits+0x40>
 8009a18:	bd70      	pop	{r4, r5, r6, pc}
 8009a1a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009a1e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009a22:	e7eb      	b.n	80099fc <__copybits+0x18>
 8009a24:	f840 3b04 	str.w	r3, [r0], #4
 8009a28:	e7f4      	b.n	8009a14 <__copybits+0x30>

08009a2a <__any_on>:
 8009a2a:	f100 0214 	add.w	r2, r0, #20
 8009a2e:	6900      	ldr	r0, [r0, #16]
 8009a30:	114b      	asrs	r3, r1, #5
 8009a32:	4298      	cmp	r0, r3
 8009a34:	b510      	push	{r4, lr}
 8009a36:	db11      	blt.n	8009a5c <__any_on+0x32>
 8009a38:	dd0a      	ble.n	8009a50 <__any_on+0x26>
 8009a3a:	f011 011f 	ands.w	r1, r1, #31
 8009a3e:	d007      	beq.n	8009a50 <__any_on+0x26>
 8009a40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a44:	fa24 f001 	lsr.w	r0, r4, r1
 8009a48:	fa00 f101 	lsl.w	r1, r0, r1
 8009a4c:	428c      	cmp	r4, r1
 8009a4e:	d10b      	bne.n	8009a68 <__any_on+0x3e>
 8009a50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d803      	bhi.n	8009a60 <__any_on+0x36>
 8009a58:	2000      	movs	r0, #0
 8009a5a:	bd10      	pop	{r4, pc}
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	e7f7      	b.n	8009a50 <__any_on+0x26>
 8009a60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a64:	2900      	cmp	r1, #0
 8009a66:	d0f5      	beq.n	8009a54 <__any_on+0x2a>
 8009a68:	2001      	movs	r0, #1
 8009a6a:	e7f6      	b.n	8009a5a <__any_on+0x30>

08009a6c <sulp>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	4604      	mov	r4, r0
 8009a70:	460d      	mov	r5, r1
 8009a72:	ec45 4b10 	vmov	d0, r4, r5
 8009a76:	4616      	mov	r6, r2
 8009a78:	f7ff feba 	bl	80097f0 <__ulp>
 8009a7c:	ec51 0b10 	vmov	r0, r1, d0
 8009a80:	b17e      	cbz	r6, 8009aa2 <sulp+0x36>
 8009a82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a86:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	dd09      	ble.n	8009aa2 <sulp+0x36>
 8009a8e:	051b      	lsls	r3, r3, #20
 8009a90:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009a94:	2400      	movs	r4, #0
 8009a96:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	462b      	mov	r3, r5
 8009a9e:	f7f6 fddb 	bl	8000658 <__aeabi_dmul>
 8009aa2:	ec41 0b10 	vmov	d0, r0, r1
 8009aa6:	bd70      	pop	{r4, r5, r6, pc}

08009aa8 <_strtod_l>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	b09f      	sub	sp, #124	@ 0x7c
 8009aae:	460c      	mov	r4, r1
 8009ab0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	921a      	str	r2, [sp, #104]	@ 0x68
 8009ab6:	9005      	str	r0, [sp, #20]
 8009ab8:	f04f 0a00 	mov.w	sl, #0
 8009abc:	f04f 0b00 	mov.w	fp, #0
 8009ac0:	460a      	mov	r2, r1
 8009ac2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ac4:	7811      	ldrb	r1, [r2, #0]
 8009ac6:	292b      	cmp	r1, #43	@ 0x2b
 8009ac8:	d04a      	beq.n	8009b60 <_strtod_l+0xb8>
 8009aca:	d838      	bhi.n	8009b3e <_strtod_l+0x96>
 8009acc:	290d      	cmp	r1, #13
 8009ace:	d832      	bhi.n	8009b36 <_strtod_l+0x8e>
 8009ad0:	2908      	cmp	r1, #8
 8009ad2:	d832      	bhi.n	8009b3a <_strtod_l+0x92>
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	d03b      	beq.n	8009b50 <_strtod_l+0xa8>
 8009ad8:	2200      	movs	r2, #0
 8009ada:	920e      	str	r2, [sp, #56]	@ 0x38
 8009adc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009ade:	782a      	ldrb	r2, [r5, #0]
 8009ae0:	2a30      	cmp	r2, #48	@ 0x30
 8009ae2:	f040 80b2 	bne.w	8009c4a <_strtod_l+0x1a2>
 8009ae6:	786a      	ldrb	r2, [r5, #1]
 8009ae8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009aec:	2a58      	cmp	r2, #88	@ 0x58
 8009aee:	d16e      	bne.n	8009bce <_strtod_l+0x126>
 8009af0:	9302      	str	r3, [sp, #8]
 8009af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	ab1a      	add	r3, sp, #104	@ 0x68
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	4a8f      	ldr	r2, [pc, #572]	@ (8009d38 <_strtod_l+0x290>)
 8009afc:	9805      	ldr	r0, [sp, #20]
 8009afe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009b00:	a919      	add	r1, sp, #100	@ 0x64
 8009b02:	f001 fa73 	bl	800afec <__gethex>
 8009b06:	f010 060f 	ands.w	r6, r0, #15
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	d005      	beq.n	8009b1a <_strtod_l+0x72>
 8009b0e:	2e06      	cmp	r6, #6
 8009b10:	d128      	bne.n	8009b64 <_strtod_l+0xbc>
 8009b12:	3501      	adds	r5, #1
 8009b14:	2300      	movs	r3, #0
 8009b16:	9519      	str	r5, [sp, #100]	@ 0x64
 8009b18:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f040 858e 	bne.w	800a63e <_strtod_l+0xb96>
 8009b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b24:	b1cb      	cbz	r3, 8009b5a <_strtod_l+0xb2>
 8009b26:	4652      	mov	r2, sl
 8009b28:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009b2c:	ec43 2b10 	vmov	d0, r2, r3
 8009b30:	b01f      	add	sp, #124	@ 0x7c
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b36:	2920      	cmp	r1, #32
 8009b38:	d1ce      	bne.n	8009ad8 <_strtod_l+0x30>
 8009b3a:	3201      	adds	r2, #1
 8009b3c:	e7c1      	b.n	8009ac2 <_strtod_l+0x1a>
 8009b3e:	292d      	cmp	r1, #45	@ 0x2d
 8009b40:	d1ca      	bne.n	8009ad8 <_strtod_l+0x30>
 8009b42:	2101      	movs	r1, #1
 8009b44:	910e      	str	r1, [sp, #56]	@ 0x38
 8009b46:	1c51      	adds	r1, r2, #1
 8009b48:	9119      	str	r1, [sp, #100]	@ 0x64
 8009b4a:	7852      	ldrb	r2, [r2, #1]
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	d1c5      	bne.n	8009adc <_strtod_l+0x34>
 8009b50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b52:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f040 8570 	bne.w	800a63a <_strtod_l+0xb92>
 8009b5a:	4652      	mov	r2, sl
 8009b5c:	465b      	mov	r3, fp
 8009b5e:	e7e5      	b.n	8009b2c <_strtod_l+0x84>
 8009b60:	2100      	movs	r1, #0
 8009b62:	e7ef      	b.n	8009b44 <_strtod_l+0x9c>
 8009b64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b66:	b13a      	cbz	r2, 8009b78 <_strtod_l+0xd0>
 8009b68:	2135      	movs	r1, #53	@ 0x35
 8009b6a:	a81c      	add	r0, sp, #112	@ 0x70
 8009b6c:	f7ff ff3a 	bl	80099e4 <__copybits>
 8009b70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b72:	9805      	ldr	r0, [sp, #20]
 8009b74:	f7ff fb10 	bl	8009198 <_Bfree>
 8009b78:	3e01      	subs	r6, #1
 8009b7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009b7c:	2e04      	cmp	r6, #4
 8009b7e:	d806      	bhi.n	8009b8e <_strtod_l+0xe6>
 8009b80:	e8df f006 	tbb	[pc, r6]
 8009b84:	201d0314 	.word	0x201d0314
 8009b88:	14          	.byte	0x14
 8009b89:	00          	.byte	0x00
 8009b8a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009b8e:	05e1      	lsls	r1, r4, #23
 8009b90:	bf48      	it	mi
 8009b92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009b96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b9a:	0d1b      	lsrs	r3, r3, #20
 8009b9c:	051b      	lsls	r3, r3, #20
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1bb      	bne.n	8009b1a <_strtod_l+0x72>
 8009ba2:	f7fe fb2b 	bl	80081fc <__errno>
 8009ba6:	2322      	movs	r3, #34	@ 0x22
 8009ba8:	6003      	str	r3, [r0, #0]
 8009baa:	e7b6      	b.n	8009b1a <_strtod_l+0x72>
 8009bac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009bb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009bb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009bb8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009bbc:	e7e7      	b.n	8009b8e <_strtod_l+0xe6>
 8009bbe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009d40 <_strtod_l+0x298>
 8009bc2:	e7e4      	b.n	8009b8e <_strtod_l+0xe6>
 8009bc4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009bc8:	f04f 3aff 	mov.w	sl, #4294967295
 8009bcc:	e7df      	b.n	8009b8e <_strtod_l+0xe6>
 8009bce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bd0:	1c5a      	adds	r2, r3, #1
 8009bd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bd4:	785b      	ldrb	r3, [r3, #1]
 8009bd6:	2b30      	cmp	r3, #48	@ 0x30
 8009bd8:	d0f9      	beq.n	8009bce <_strtod_l+0x126>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d09d      	beq.n	8009b1a <_strtod_l+0x72>
 8009bde:	2301      	movs	r3, #1
 8009be0:	2700      	movs	r7, #0
 8009be2:	9308      	str	r3, [sp, #32]
 8009be4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009be6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009be8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009bea:	46b9      	mov	r9, r7
 8009bec:	220a      	movs	r2, #10
 8009bee:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009bf0:	7805      	ldrb	r5, [r0, #0]
 8009bf2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009bf6:	b2d9      	uxtb	r1, r3
 8009bf8:	2909      	cmp	r1, #9
 8009bfa:	d928      	bls.n	8009c4e <_strtod_l+0x1a6>
 8009bfc:	494f      	ldr	r1, [pc, #316]	@ (8009d3c <_strtod_l+0x294>)
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f001 f8fe 	bl	800ae00 <strncmp>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d032      	beq.n	8009c6e <_strtod_l+0x1c6>
 8009c08:	2000      	movs	r0, #0
 8009c0a:	462a      	mov	r2, r5
 8009c0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c0e:	464d      	mov	r5, r9
 8009c10:	4603      	mov	r3, r0
 8009c12:	2a65      	cmp	r2, #101	@ 0x65
 8009c14:	d001      	beq.n	8009c1a <_strtod_l+0x172>
 8009c16:	2a45      	cmp	r2, #69	@ 0x45
 8009c18:	d114      	bne.n	8009c44 <_strtod_l+0x19c>
 8009c1a:	b91d      	cbnz	r5, 8009c24 <_strtod_l+0x17c>
 8009c1c:	9a08      	ldr	r2, [sp, #32]
 8009c1e:	4302      	orrs	r2, r0
 8009c20:	d096      	beq.n	8009b50 <_strtod_l+0xa8>
 8009c22:	2500      	movs	r5, #0
 8009c24:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009c26:	1c62      	adds	r2, r4, #1
 8009c28:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c2a:	7862      	ldrb	r2, [r4, #1]
 8009c2c:	2a2b      	cmp	r2, #43	@ 0x2b
 8009c2e:	d07a      	beq.n	8009d26 <_strtod_l+0x27e>
 8009c30:	2a2d      	cmp	r2, #45	@ 0x2d
 8009c32:	d07e      	beq.n	8009d32 <_strtod_l+0x28a>
 8009c34:	f04f 0c00 	mov.w	ip, #0
 8009c38:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009c3c:	2909      	cmp	r1, #9
 8009c3e:	f240 8085 	bls.w	8009d4c <_strtod_l+0x2a4>
 8009c42:	9419      	str	r4, [sp, #100]	@ 0x64
 8009c44:	f04f 0800 	mov.w	r8, #0
 8009c48:	e0a5      	b.n	8009d96 <_strtod_l+0x2ee>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	e7c8      	b.n	8009be0 <_strtod_l+0x138>
 8009c4e:	f1b9 0f08 	cmp.w	r9, #8
 8009c52:	bfd8      	it	le
 8009c54:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009c56:	f100 0001 	add.w	r0, r0, #1
 8009c5a:	bfda      	itte	le
 8009c5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c60:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009c62:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009c66:	f109 0901 	add.w	r9, r9, #1
 8009c6a:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c6c:	e7bf      	b.n	8009bee <_strtod_l+0x146>
 8009c6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c74:	785a      	ldrb	r2, [r3, #1]
 8009c76:	f1b9 0f00 	cmp.w	r9, #0
 8009c7a:	d03b      	beq.n	8009cf4 <_strtod_l+0x24c>
 8009c7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c7e:	464d      	mov	r5, r9
 8009c80:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009c84:	2b09      	cmp	r3, #9
 8009c86:	d912      	bls.n	8009cae <_strtod_l+0x206>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e7c2      	b.n	8009c12 <_strtod_l+0x16a>
 8009c8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c92:	785a      	ldrb	r2, [r3, #1]
 8009c94:	3001      	adds	r0, #1
 8009c96:	2a30      	cmp	r2, #48	@ 0x30
 8009c98:	d0f8      	beq.n	8009c8c <_strtod_l+0x1e4>
 8009c9a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009c9e:	2b08      	cmp	r3, #8
 8009ca0:	f200 84d2 	bhi.w	800a648 <_strtod_l+0xba0>
 8009ca4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ca6:	900a      	str	r0, [sp, #40]	@ 0x28
 8009ca8:	2000      	movs	r0, #0
 8009caa:	930c      	str	r3, [sp, #48]	@ 0x30
 8009cac:	4605      	mov	r5, r0
 8009cae:	3a30      	subs	r2, #48	@ 0x30
 8009cb0:	f100 0301 	add.w	r3, r0, #1
 8009cb4:	d018      	beq.n	8009ce8 <_strtod_l+0x240>
 8009cb6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009cb8:	4419      	add	r1, r3
 8009cba:	910a      	str	r1, [sp, #40]	@ 0x28
 8009cbc:	462e      	mov	r6, r5
 8009cbe:	f04f 0e0a 	mov.w	lr, #10
 8009cc2:	1c71      	adds	r1, r6, #1
 8009cc4:	eba1 0c05 	sub.w	ip, r1, r5
 8009cc8:	4563      	cmp	r3, ip
 8009cca:	dc15      	bgt.n	8009cf8 <_strtod_l+0x250>
 8009ccc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009cd0:	182b      	adds	r3, r5, r0
 8009cd2:	2b08      	cmp	r3, #8
 8009cd4:	f105 0501 	add.w	r5, r5, #1
 8009cd8:	4405      	add	r5, r0
 8009cda:	dc1a      	bgt.n	8009d12 <_strtod_l+0x26a>
 8009cdc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009cde:	230a      	movs	r3, #10
 8009ce0:	fb03 2301 	mla	r3, r3, r1, r2
 8009ce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cea:	1c51      	adds	r1, r2, #1
 8009cec:	9119      	str	r1, [sp, #100]	@ 0x64
 8009cee:	7852      	ldrb	r2, [r2, #1]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	e7c5      	b.n	8009c80 <_strtod_l+0x1d8>
 8009cf4:	4648      	mov	r0, r9
 8009cf6:	e7ce      	b.n	8009c96 <_strtod_l+0x1ee>
 8009cf8:	2e08      	cmp	r6, #8
 8009cfa:	dc05      	bgt.n	8009d08 <_strtod_l+0x260>
 8009cfc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009cfe:	fb0e f606 	mul.w	r6, lr, r6
 8009d02:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009d04:	460e      	mov	r6, r1
 8009d06:	e7dc      	b.n	8009cc2 <_strtod_l+0x21a>
 8009d08:	2910      	cmp	r1, #16
 8009d0a:	bfd8      	it	le
 8009d0c:	fb0e f707 	mulle.w	r7, lr, r7
 8009d10:	e7f8      	b.n	8009d04 <_strtod_l+0x25c>
 8009d12:	2b0f      	cmp	r3, #15
 8009d14:	bfdc      	itt	le
 8009d16:	230a      	movle	r3, #10
 8009d18:	fb03 2707 	mlale	r7, r3, r7, r2
 8009d1c:	e7e3      	b.n	8009ce6 <_strtod_l+0x23e>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d22:	2301      	movs	r3, #1
 8009d24:	e77a      	b.n	8009c1c <_strtod_l+0x174>
 8009d26:	f04f 0c00 	mov.w	ip, #0
 8009d2a:	1ca2      	adds	r2, r4, #2
 8009d2c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d2e:	78a2      	ldrb	r2, [r4, #2]
 8009d30:	e782      	b.n	8009c38 <_strtod_l+0x190>
 8009d32:	f04f 0c01 	mov.w	ip, #1
 8009d36:	e7f8      	b.n	8009d2a <_strtod_l+0x282>
 8009d38:	0800bd3c 	.word	0x0800bd3c
 8009d3c:	0800bb70 	.word	0x0800bb70
 8009d40:	7ff00000 	.word	0x7ff00000
 8009d44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d46:	1c51      	adds	r1, r2, #1
 8009d48:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d4a:	7852      	ldrb	r2, [r2, #1]
 8009d4c:	2a30      	cmp	r2, #48	@ 0x30
 8009d4e:	d0f9      	beq.n	8009d44 <_strtod_l+0x29c>
 8009d50:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009d54:	2908      	cmp	r1, #8
 8009d56:	f63f af75 	bhi.w	8009c44 <_strtod_l+0x19c>
 8009d5a:	3a30      	subs	r2, #48	@ 0x30
 8009d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d5e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d60:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009d62:	f04f 080a 	mov.w	r8, #10
 8009d66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d68:	1c56      	adds	r6, r2, #1
 8009d6a:	9619      	str	r6, [sp, #100]	@ 0x64
 8009d6c:	7852      	ldrb	r2, [r2, #1]
 8009d6e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009d72:	f1be 0f09 	cmp.w	lr, #9
 8009d76:	d939      	bls.n	8009dec <_strtod_l+0x344>
 8009d78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009d7a:	1a76      	subs	r6, r6, r1
 8009d7c:	2e08      	cmp	r6, #8
 8009d7e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009d82:	dc03      	bgt.n	8009d8c <_strtod_l+0x2e4>
 8009d84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d86:	4588      	cmp	r8, r1
 8009d88:	bfa8      	it	ge
 8009d8a:	4688      	movge	r8, r1
 8009d8c:	f1bc 0f00 	cmp.w	ip, #0
 8009d90:	d001      	beq.n	8009d96 <_strtod_l+0x2ee>
 8009d92:	f1c8 0800 	rsb	r8, r8, #0
 8009d96:	2d00      	cmp	r5, #0
 8009d98:	d14e      	bne.n	8009e38 <_strtod_l+0x390>
 8009d9a:	9908      	ldr	r1, [sp, #32]
 8009d9c:	4308      	orrs	r0, r1
 8009d9e:	f47f aebc 	bne.w	8009b1a <_strtod_l+0x72>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f47f aed4 	bne.w	8009b50 <_strtod_l+0xa8>
 8009da8:	2a69      	cmp	r2, #105	@ 0x69
 8009daa:	d028      	beq.n	8009dfe <_strtod_l+0x356>
 8009dac:	dc25      	bgt.n	8009dfa <_strtod_l+0x352>
 8009dae:	2a49      	cmp	r2, #73	@ 0x49
 8009db0:	d025      	beq.n	8009dfe <_strtod_l+0x356>
 8009db2:	2a4e      	cmp	r2, #78	@ 0x4e
 8009db4:	f47f aecc 	bne.w	8009b50 <_strtod_l+0xa8>
 8009db8:	499a      	ldr	r1, [pc, #616]	@ (800a024 <_strtod_l+0x57c>)
 8009dba:	a819      	add	r0, sp, #100	@ 0x64
 8009dbc:	f001 fb38 	bl	800b430 <__match>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	f43f aec5 	beq.w	8009b50 <_strtod_l+0xa8>
 8009dc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	2b28      	cmp	r3, #40	@ 0x28
 8009dcc:	d12e      	bne.n	8009e2c <_strtod_l+0x384>
 8009dce:	4996      	ldr	r1, [pc, #600]	@ (800a028 <_strtod_l+0x580>)
 8009dd0:	aa1c      	add	r2, sp, #112	@ 0x70
 8009dd2:	a819      	add	r0, sp, #100	@ 0x64
 8009dd4:	f001 fb40 	bl	800b458 <__hexnan>
 8009dd8:	2805      	cmp	r0, #5
 8009dda:	d127      	bne.n	8009e2c <_strtod_l+0x384>
 8009ddc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009dde:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009de2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009de6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009dea:	e696      	b.n	8009b1a <_strtod_l+0x72>
 8009dec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dee:	fb08 2101 	mla	r1, r8, r1, r2
 8009df2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009df6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009df8:	e7b5      	b.n	8009d66 <_strtod_l+0x2be>
 8009dfa:	2a6e      	cmp	r2, #110	@ 0x6e
 8009dfc:	e7da      	b.n	8009db4 <_strtod_l+0x30c>
 8009dfe:	498b      	ldr	r1, [pc, #556]	@ (800a02c <_strtod_l+0x584>)
 8009e00:	a819      	add	r0, sp, #100	@ 0x64
 8009e02:	f001 fb15 	bl	800b430 <__match>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	f43f aea2 	beq.w	8009b50 <_strtod_l+0xa8>
 8009e0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e0e:	4988      	ldr	r1, [pc, #544]	@ (800a030 <_strtod_l+0x588>)
 8009e10:	3b01      	subs	r3, #1
 8009e12:	a819      	add	r0, sp, #100	@ 0x64
 8009e14:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e16:	f001 fb0b 	bl	800b430 <__match>
 8009e1a:	b910      	cbnz	r0, 8009e22 <_strtod_l+0x37a>
 8009e1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e1e:	3301      	adds	r3, #1
 8009e20:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e22:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a040 <_strtod_l+0x598>
 8009e26:	f04f 0a00 	mov.w	sl, #0
 8009e2a:	e676      	b.n	8009b1a <_strtod_l+0x72>
 8009e2c:	4881      	ldr	r0, [pc, #516]	@ (800a034 <_strtod_l+0x58c>)
 8009e2e:	f001 f83b 	bl	800aea8 <nan>
 8009e32:	ec5b ab10 	vmov	sl, fp, d0
 8009e36:	e670      	b.n	8009b1a <_strtod_l+0x72>
 8009e38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e3a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009e3c:	eba8 0303 	sub.w	r3, r8, r3
 8009e40:	f1b9 0f00 	cmp.w	r9, #0
 8009e44:	bf08      	it	eq
 8009e46:	46a9      	moveq	r9, r5
 8009e48:	2d10      	cmp	r5, #16
 8009e4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e4c:	462c      	mov	r4, r5
 8009e4e:	bfa8      	it	ge
 8009e50:	2410      	movge	r4, #16
 8009e52:	f7f6 fb87 	bl	8000564 <__aeabi_ui2d>
 8009e56:	2d09      	cmp	r5, #9
 8009e58:	4682      	mov	sl, r0
 8009e5a:	468b      	mov	fp, r1
 8009e5c:	dc13      	bgt.n	8009e86 <_strtod_l+0x3de>
 8009e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f43f ae5a 	beq.w	8009b1a <_strtod_l+0x72>
 8009e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e68:	dd78      	ble.n	8009f5c <_strtod_l+0x4b4>
 8009e6a:	2b16      	cmp	r3, #22
 8009e6c:	dc5f      	bgt.n	8009f2e <_strtod_l+0x486>
 8009e6e:	4972      	ldr	r1, [pc, #456]	@ (800a038 <_strtod_l+0x590>)
 8009e70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e78:	4652      	mov	r2, sl
 8009e7a:	465b      	mov	r3, fp
 8009e7c:	f7f6 fbec 	bl	8000658 <__aeabi_dmul>
 8009e80:	4682      	mov	sl, r0
 8009e82:	468b      	mov	fp, r1
 8009e84:	e649      	b.n	8009b1a <_strtod_l+0x72>
 8009e86:	4b6c      	ldr	r3, [pc, #432]	@ (800a038 <_strtod_l+0x590>)
 8009e88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009e90:	f7f6 fbe2 	bl	8000658 <__aeabi_dmul>
 8009e94:	4682      	mov	sl, r0
 8009e96:	4638      	mov	r0, r7
 8009e98:	468b      	mov	fp, r1
 8009e9a:	f7f6 fb63 	bl	8000564 <__aeabi_ui2d>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	4659      	mov	r1, fp
 8009ea6:	f7f6 fa21 	bl	80002ec <__adddf3>
 8009eaa:	2d0f      	cmp	r5, #15
 8009eac:	4682      	mov	sl, r0
 8009eae:	468b      	mov	fp, r1
 8009eb0:	ddd5      	ble.n	8009e5e <_strtod_l+0x3b6>
 8009eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eb4:	1b2c      	subs	r4, r5, r4
 8009eb6:	441c      	add	r4, r3
 8009eb8:	2c00      	cmp	r4, #0
 8009eba:	f340 8093 	ble.w	8009fe4 <_strtod_l+0x53c>
 8009ebe:	f014 030f 	ands.w	r3, r4, #15
 8009ec2:	d00a      	beq.n	8009eda <_strtod_l+0x432>
 8009ec4:	495c      	ldr	r1, [pc, #368]	@ (800a038 <_strtod_l+0x590>)
 8009ec6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009eca:	4652      	mov	r2, sl
 8009ecc:	465b      	mov	r3, fp
 8009ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ed2:	f7f6 fbc1 	bl	8000658 <__aeabi_dmul>
 8009ed6:	4682      	mov	sl, r0
 8009ed8:	468b      	mov	fp, r1
 8009eda:	f034 040f 	bics.w	r4, r4, #15
 8009ede:	d073      	beq.n	8009fc8 <_strtod_l+0x520>
 8009ee0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009ee4:	dd49      	ble.n	8009f7a <_strtod_l+0x4d2>
 8009ee6:	2400      	movs	r4, #0
 8009ee8:	46a0      	mov	r8, r4
 8009eea:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009eec:	46a1      	mov	r9, r4
 8009eee:	9a05      	ldr	r2, [sp, #20]
 8009ef0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a040 <_strtod_l+0x598>
 8009ef4:	2322      	movs	r3, #34	@ 0x22
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	f04f 0a00 	mov.w	sl, #0
 8009efc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f43f ae0b 	beq.w	8009b1a <_strtod_l+0x72>
 8009f04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f06:	9805      	ldr	r0, [sp, #20]
 8009f08:	f7ff f946 	bl	8009198 <_Bfree>
 8009f0c:	9805      	ldr	r0, [sp, #20]
 8009f0e:	4649      	mov	r1, r9
 8009f10:	f7ff f942 	bl	8009198 <_Bfree>
 8009f14:	9805      	ldr	r0, [sp, #20]
 8009f16:	4641      	mov	r1, r8
 8009f18:	f7ff f93e 	bl	8009198 <_Bfree>
 8009f1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f1e:	9805      	ldr	r0, [sp, #20]
 8009f20:	f7ff f93a 	bl	8009198 <_Bfree>
 8009f24:	9805      	ldr	r0, [sp, #20]
 8009f26:	4621      	mov	r1, r4
 8009f28:	f7ff f936 	bl	8009198 <_Bfree>
 8009f2c:	e5f5      	b.n	8009b1a <_strtod_l+0x72>
 8009f2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009f34:	4293      	cmp	r3, r2
 8009f36:	dbbc      	blt.n	8009eb2 <_strtod_l+0x40a>
 8009f38:	4c3f      	ldr	r4, [pc, #252]	@ (800a038 <_strtod_l+0x590>)
 8009f3a:	f1c5 050f 	rsb	r5, r5, #15
 8009f3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009f42:	4652      	mov	r2, sl
 8009f44:	465b      	mov	r3, fp
 8009f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f4a:	f7f6 fb85 	bl	8000658 <__aeabi_dmul>
 8009f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f50:	1b5d      	subs	r5, r3, r5
 8009f52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009f56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f5a:	e78f      	b.n	8009e7c <_strtod_l+0x3d4>
 8009f5c:	3316      	adds	r3, #22
 8009f5e:	dba8      	blt.n	8009eb2 <_strtod_l+0x40a>
 8009f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f62:	eba3 0808 	sub.w	r8, r3, r8
 8009f66:	4b34      	ldr	r3, [pc, #208]	@ (800a038 <_strtod_l+0x590>)
 8009f68:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009f6c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009f70:	4650      	mov	r0, sl
 8009f72:	4659      	mov	r1, fp
 8009f74:	f7f6 fc9a 	bl	80008ac <__aeabi_ddiv>
 8009f78:	e782      	b.n	8009e80 <_strtod_l+0x3d8>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	4f2f      	ldr	r7, [pc, #188]	@ (800a03c <_strtod_l+0x594>)
 8009f7e:	1124      	asrs	r4, r4, #4
 8009f80:	4650      	mov	r0, sl
 8009f82:	4659      	mov	r1, fp
 8009f84:	461e      	mov	r6, r3
 8009f86:	2c01      	cmp	r4, #1
 8009f88:	dc21      	bgt.n	8009fce <_strtod_l+0x526>
 8009f8a:	b10b      	cbz	r3, 8009f90 <_strtod_l+0x4e8>
 8009f8c:	4682      	mov	sl, r0
 8009f8e:	468b      	mov	fp, r1
 8009f90:	492a      	ldr	r1, [pc, #168]	@ (800a03c <_strtod_l+0x594>)
 8009f92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009f96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009f9a:	4652      	mov	r2, sl
 8009f9c:	465b      	mov	r3, fp
 8009f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa2:	f7f6 fb59 	bl	8000658 <__aeabi_dmul>
 8009fa6:	4b26      	ldr	r3, [pc, #152]	@ (800a040 <_strtod_l+0x598>)
 8009fa8:	460a      	mov	r2, r1
 8009faa:	400b      	ands	r3, r1
 8009fac:	4925      	ldr	r1, [pc, #148]	@ (800a044 <_strtod_l+0x59c>)
 8009fae:	428b      	cmp	r3, r1
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	d898      	bhi.n	8009ee6 <_strtod_l+0x43e>
 8009fb4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009fb8:	428b      	cmp	r3, r1
 8009fba:	bf86      	itte	hi
 8009fbc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a048 <_strtod_l+0x5a0>
 8009fc0:	f04f 3aff 	movhi.w	sl, #4294967295
 8009fc4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009fc8:	2300      	movs	r3, #0
 8009fca:	9308      	str	r3, [sp, #32]
 8009fcc:	e076      	b.n	800a0bc <_strtod_l+0x614>
 8009fce:	07e2      	lsls	r2, r4, #31
 8009fd0:	d504      	bpl.n	8009fdc <_strtod_l+0x534>
 8009fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fd6:	f7f6 fb3f 	bl	8000658 <__aeabi_dmul>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	3601      	adds	r6, #1
 8009fde:	1064      	asrs	r4, r4, #1
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	e7d0      	b.n	8009f86 <_strtod_l+0x4de>
 8009fe4:	d0f0      	beq.n	8009fc8 <_strtod_l+0x520>
 8009fe6:	4264      	negs	r4, r4
 8009fe8:	f014 020f 	ands.w	r2, r4, #15
 8009fec:	d00a      	beq.n	800a004 <_strtod_l+0x55c>
 8009fee:	4b12      	ldr	r3, [pc, #72]	@ (800a038 <_strtod_l+0x590>)
 8009ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ff4:	4650      	mov	r0, sl
 8009ff6:	4659      	mov	r1, fp
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 fc56 	bl	80008ac <__aeabi_ddiv>
 800a000:	4682      	mov	sl, r0
 800a002:	468b      	mov	fp, r1
 800a004:	1124      	asrs	r4, r4, #4
 800a006:	d0df      	beq.n	8009fc8 <_strtod_l+0x520>
 800a008:	2c1f      	cmp	r4, #31
 800a00a:	dd1f      	ble.n	800a04c <_strtod_l+0x5a4>
 800a00c:	2400      	movs	r4, #0
 800a00e:	46a0      	mov	r8, r4
 800a010:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a012:	46a1      	mov	r9, r4
 800a014:	9a05      	ldr	r2, [sp, #20]
 800a016:	2322      	movs	r3, #34	@ 0x22
 800a018:	f04f 0a00 	mov.w	sl, #0
 800a01c:	f04f 0b00 	mov.w	fp, #0
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	e76b      	b.n	8009efc <_strtod_l+0x454>
 800a024:	0800ba5e 	.word	0x0800ba5e
 800a028:	0800bd28 	.word	0x0800bd28
 800a02c:	0800ba56 	.word	0x0800ba56
 800a030:	0800ba8d 	.word	0x0800ba8d
 800a034:	0800bbc6 	.word	0x0800bbc6
 800a038:	0800bc60 	.word	0x0800bc60
 800a03c:	0800bc38 	.word	0x0800bc38
 800a040:	7ff00000 	.word	0x7ff00000
 800a044:	7ca00000 	.word	0x7ca00000
 800a048:	7fefffff 	.word	0x7fefffff
 800a04c:	f014 0310 	ands.w	r3, r4, #16
 800a050:	bf18      	it	ne
 800a052:	236a      	movne	r3, #106	@ 0x6a
 800a054:	4ea9      	ldr	r6, [pc, #676]	@ (800a2fc <_strtod_l+0x854>)
 800a056:	9308      	str	r3, [sp, #32]
 800a058:	4650      	mov	r0, sl
 800a05a:	4659      	mov	r1, fp
 800a05c:	2300      	movs	r3, #0
 800a05e:	07e7      	lsls	r7, r4, #31
 800a060:	d504      	bpl.n	800a06c <_strtod_l+0x5c4>
 800a062:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a066:	f7f6 faf7 	bl	8000658 <__aeabi_dmul>
 800a06a:	2301      	movs	r3, #1
 800a06c:	1064      	asrs	r4, r4, #1
 800a06e:	f106 0608 	add.w	r6, r6, #8
 800a072:	d1f4      	bne.n	800a05e <_strtod_l+0x5b6>
 800a074:	b10b      	cbz	r3, 800a07a <_strtod_l+0x5d2>
 800a076:	4682      	mov	sl, r0
 800a078:	468b      	mov	fp, r1
 800a07a:	9b08      	ldr	r3, [sp, #32]
 800a07c:	b1b3      	cbz	r3, 800a0ac <_strtod_l+0x604>
 800a07e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a082:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a086:	2b00      	cmp	r3, #0
 800a088:	4659      	mov	r1, fp
 800a08a:	dd0f      	ble.n	800a0ac <_strtod_l+0x604>
 800a08c:	2b1f      	cmp	r3, #31
 800a08e:	dd56      	ble.n	800a13e <_strtod_l+0x696>
 800a090:	2b34      	cmp	r3, #52	@ 0x34
 800a092:	bfde      	ittt	le
 800a094:	f04f 33ff 	movle.w	r3, #4294967295
 800a098:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a09c:	4093      	lslle	r3, r2
 800a09e:	f04f 0a00 	mov.w	sl, #0
 800a0a2:	bfcc      	ite	gt
 800a0a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a0a8:	ea03 0b01 	andle.w	fp, r3, r1
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4650      	mov	r0, sl
 800a0b2:	4659      	mov	r1, fp
 800a0b4:	f7f6 fd38 	bl	8000b28 <__aeabi_dcmpeq>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d1a7      	bne.n	800a00c <_strtod_l+0x564>
 800a0bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a0c2:	9805      	ldr	r0, [sp, #20]
 800a0c4:	462b      	mov	r3, r5
 800a0c6:	464a      	mov	r2, r9
 800a0c8:	f7ff f8ce 	bl	8009268 <__s2b>
 800a0cc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	f43f af09 	beq.w	8009ee6 <_strtod_l+0x43e>
 800a0d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0d8:	2a00      	cmp	r2, #0
 800a0da:	eba3 0308 	sub.w	r3, r3, r8
 800a0de:	bfa8      	it	ge
 800a0e0:	2300      	movge	r3, #0
 800a0e2:	9312      	str	r3, [sp, #72]	@ 0x48
 800a0e4:	2400      	movs	r4, #0
 800a0e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a0ea:	9316      	str	r3, [sp, #88]	@ 0x58
 800a0ec:	46a0      	mov	r8, r4
 800a0ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0f0:	9805      	ldr	r0, [sp, #20]
 800a0f2:	6859      	ldr	r1, [r3, #4]
 800a0f4:	f7ff f810 	bl	8009118 <_Balloc>
 800a0f8:	4681      	mov	r9, r0
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	f43f aef7 	beq.w	8009eee <_strtod_l+0x446>
 800a100:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a102:	691a      	ldr	r2, [r3, #16]
 800a104:	3202      	adds	r2, #2
 800a106:	f103 010c 	add.w	r1, r3, #12
 800a10a:	0092      	lsls	r2, r2, #2
 800a10c:	300c      	adds	r0, #12
 800a10e:	f000 febb 	bl	800ae88 <memcpy>
 800a112:	ec4b ab10 	vmov	d0, sl, fp
 800a116:	9805      	ldr	r0, [sp, #20]
 800a118:	aa1c      	add	r2, sp, #112	@ 0x70
 800a11a:	a91b      	add	r1, sp, #108	@ 0x6c
 800a11c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a120:	f7ff fbd6 	bl	80098d0 <__d2b>
 800a124:	901a      	str	r0, [sp, #104]	@ 0x68
 800a126:	2800      	cmp	r0, #0
 800a128:	f43f aee1 	beq.w	8009eee <_strtod_l+0x446>
 800a12c:	9805      	ldr	r0, [sp, #20]
 800a12e:	2101      	movs	r1, #1
 800a130:	f7ff f930 	bl	8009394 <__i2b>
 800a134:	4680      	mov	r8, r0
 800a136:	b948      	cbnz	r0, 800a14c <_strtod_l+0x6a4>
 800a138:	f04f 0800 	mov.w	r8, #0
 800a13c:	e6d7      	b.n	8009eee <_strtod_l+0x446>
 800a13e:	f04f 32ff 	mov.w	r2, #4294967295
 800a142:	fa02 f303 	lsl.w	r3, r2, r3
 800a146:	ea03 0a0a 	and.w	sl, r3, sl
 800a14a:	e7af      	b.n	800a0ac <_strtod_l+0x604>
 800a14c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a14e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a150:	2d00      	cmp	r5, #0
 800a152:	bfab      	itete	ge
 800a154:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a156:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a158:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a15a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a15c:	bfac      	ite	ge
 800a15e:	18ef      	addge	r7, r5, r3
 800a160:	1b5e      	sublt	r6, r3, r5
 800a162:	9b08      	ldr	r3, [sp, #32]
 800a164:	1aed      	subs	r5, r5, r3
 800a166:	4415      	add	r5, r2
 800a168:	4b65      	ldr	r3, [pc, #404]	@ (800a300 <_strtod_l+0x858>)
 800a16a:	3d01      	subs	r5, #1
 800a16c:	429d      	cmp	r5, r3
 800a16e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a172:	da50      	bge.n	800a216 <_strtod_l+0x76e>
 800a174:	1b5b      	subs	r3, r3, r5
 800a176:	2b1f      	cmp	r3, #31
 800a178:	eba2 0203 	sub.w	r2, r2, r3
 800a17c:	f04f 0101 	mov.w	r1, #1
 800a180:	dc3d      	bgt.n	800a1fe <_strtod_l+0x756>
 800a182:	fa01 f303 	lsl.w	r3, r1, r3
 800a186:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a188:	2300      	movs	r3, #0
 800a18a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a18c:	18bd      	adds	r5, r7, r2
 800a18e:	9b08      	ldr	r3, [sp, #32]
 800a190:	42af      	cmp	r7, r5
 800a192:	4416      	add	r6, r2
 800a194:	441e      	add	r6, r3
 800a196:	463b      	mov	r3, r7
 800a198:	bfa8      	it	ge
 800a19a:	462b      	movge	r3, r5
 800a19c:	42b3      	cmp	r3, r6
 800a19e:	bfa8      	it	ge
 800a1a0:	4633      	movge	r3, r6
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	bfc2      	ittt	gt
 800a1a6:	1aed      	subgt	r5, r5, r3
 800a1a8:	1af6      	subgt	r6, r6, r3
 800a1aa:	1aff      	subgt	r7, r7, r3
 800a1ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	dd16      	ble.n	800a1e0 <_strtod_l+0x738>
 800a1b2:	4641      	mov	r1, r8
 800a1b4:	9805      	ldr	r0, [sp, #20]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	f7ff f9a4 	bl	8009504 <__pow5mult>
 800a1bc:	4680      	mov	r8, r0
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d0ba      	beq.n	800a138 <_strtod_l+0x690>
 800a1c2:	4601      	mov	r1, r0
 800a1c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a1c6:	9805      	ldr	r0, [sp, #20]
 800a1c8:	f7ff f8fa 	bl	80093c0 <__multiply>
 800a1cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f43f ae8d 	beq.w	8009eee <_strtod_l+0x446>
 800a1d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1d6:	9805      	ldr	r0, [sp, #20]
 800a1d8:	f7fe ffde 	bl	8009198 <_Bfree>
 800a1dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1de:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1e0:	2d00      	cmp	r5, #0
 800a1e2:	dc1d      	bgt.n	800a220 <_strtod_l+0x778>
 800a1e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	dd23      	ble.n	800a232 <_strtod_l+0x78a>
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a1ee:	9805      	ldr	r0, [sp, #20]
 800a1f0:	f7ff f988 	bl	8009504 <__pow5mult>
 800a1f4:	4681      	mov	r9, r0
 800a1f6:	b9e0      	cbnz	r0, 800a232 <_strtod_l+0x78a>
 800a1f8:	f04f 0900 	mov.w	r9, #0
 800a1fc:	e677      	b.n	8009eee <_strtod_l+0x446>
 800a1fe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a202:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a206:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a20a:	35e2      	adds	r5, #226	@ 0xe2
 800a20c:	fa01 f305 	lsl.w	r3, r1, r5
 800a210:	9310      	str	r3, [sp, #64]	@ 0x40
 800a212:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a214:	e7ba      	b.n	800a18c <_strtod_l+0x6e4>
 800a216:	2300      	movs	r3, #0
 800a218:	9310      	str	r3, [sp, #64]	@ 0x40
 800a21a:	2301      	movs	r3, #1
 800a21c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a21e:	e7b5      	b.n	800a18c <_strtod_l+0x6e4>
 800a220:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a222:	9805      	ldr	r0, [sp, #20]
 800a224:	462a      	mov	r2, r5
 800a226:	f7ff f9c7 	bl	80095b8 <__lshift>
 800a22a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d1d9      	bne.n	800a1e4 <_strtod_l+0x73c>
 800a230:	e65d      	b.n	8009eee <_strtod_l+0x446>
 800a232:	2e00      	cmp	r6, #0
 800a234:	dd07      	ble.n	800a246 <_strtod_l+0x79e>
 800a236:	4649      	mov	r1, r9
 800a238:	9805      	ldr	r0, [sp, #20]
 800a23a:	4632      	mov	r2, r6
 800a23c:	f7ff f9bc 	bl	80095b8 <__lshift>
 800a240:	4681      	mov	r9, r0
 800a242:	2800      	cmp	r0, #0
 800a244:	d0d8      	beq.n	800a1f8 <_strtod_l+0x750>
 800a246:	2f00      	cmp	r7, #0
 800a248:	dd08      	ble.n	800a25c <_strtod_l+0x7b4>
 800a24a:	4641      	mov	r1, r8
 800a24c:	9805      	ldr	r0, [sp, #20]
 800a24e:	463a      	mov	r2, r7
 800a250:	f7ff f9b2 	bl	80095b8 <__lshift>
 800a254:	4680      	mov	r8, r0
 800a256:	2800      	cmp	r0, #0
 800a258:	f43f ae49 	beq.w	8009eee <_strtod_l+0x446>
 800a25c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a25e:	9805      	ldr	r0, [sp, #20]
 800a260:	464a      	mov	r2, r9
 800a262:	f7ff fa31 	bl	80096c8 <__mdiff>
 800a266:	4604      	mov	r4, r0
 800a268:	2800      	cmp	r0, #0
 800a26a:	f43f ae40 	beq.w	8009eee <_strtod_l+0x446>
 800a26e:	68c3      	ldr	r3, [r0, #12]
 800a270:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a272:	2300      	movs	r3, #0
 800a274:	60c3      	str	r3, [r0, #12]
 800a276:	4641      	mov	r1, r8
 800a278:	f7ff fa0a 	bl	8009690 <__mcmp>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	da45      	bge.n	800a30c <_strtod_l+0x864>
 800a280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a282:	ea53 030a 	orrs.w	r3, r3, sl
 800a286:	d16b      	bne.n	800a360 <_strtod_l+0x8b8>
 800a288:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d167      	bne.n	800a360 <_strtod_l+0x8b8>
 800a290:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a294:	0d1b      	lsrs	r3, r3, #20
 800a296:	051b      	lsls	r3, r3, #20
 800a298:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a29c:	d960      	bls.n	800a360 <_strtod_l+0x8b8>
 800a29e:	6963      	ldr	r3, [r4, #20]
 800a2a0:	b913      	cbnz	r3, 800a2a8 <_strtod_l+0x800>
 800a2a2:	6923      	ldr	r3, [r4, #16]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	dd5b      	ble.n	800a360 <_strtod_l+0x8b8>
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	9805      	ldr	r0, [sp, #20]
 800a2ae:	f7ff f983 	bl	80095b8 <__lshift>
 800a2b2:	4641      	mov	r1, r8
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	f7ff f9eb 	bl	8009690 <__mcmp>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	dd50      	ble.n	800a360 <_strtod_l+0x8b8>
 800a2be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2c2:	9a08      	ldr	r2, [sp, #32]
 800a2c4:	0d1b      	lsrs	r3, r3, #20
 800a2c6:	051b      	lsls	r3, r3, #20
 800a2c8:	2a00      	cmp	r2, #0
 800a2ca:	d06a      	beq.n	800a3a2 <_strtod_l+0x8fa>
 800a2cc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a2d0:	d867      	bhi.n	800a3a2 <_strtod_l+0x8fa>
 800a2d2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a2d6:	f67f ae9d 	bls.w	800a014 <_strtod_l+0x56c>
 800a2da:	4b0a      	ldr	r3, [pc, #40]	@ (800a304 <_strtod_l+0x85c>)
 800a2dc:	4650      	mov	r0, sl
 800a2de:	4659      	mov	r1, fp
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f7f6 f9b9 	bl	8000658 <__aeabi_dmul>
 800a2e6:	4b08      	ldr	r3, [pc, #32]	@ (800a308 <_strtod_l+0x860>)
 800a2e8:	400b      	ands	r3, r1
 800a2ea:	4682      	mov	sl, r0
 800a2ec:	468b      	mov	fp, r1
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f47f ae08 	bne.w	8009f04 <_strtod_l+0x45c>
 800a2f4:	9a05      	ldr	r2, [sp, #20]
 800a2f6:	2322      	movs	r3, #34	@ 0x22
 800a2f8:	6013      	str	r3, [r2, #0]
 800a2fa:	e603      	b.n	8009f04 <_strtod_l+0x45c>
 800a2fc:	0800bd50 	.word	0x0800bd50
 800a300:	fffffc02 	.word	0xfffffc02
 800a304:	39500000 	.word	0x39500000
 800a308:	7ff00000 	.word	0x7ff00000
 800a30c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a310:	d165      	bne.n	800a3de <_strtod_l+0x936>
 800a312:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a314:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a318:	b35a      	cbz	r2, 800a372 <_strtod_l+0x8ca>
 800a31a:	4a9f      	ldr	r2, [pc, #636]	@ (800a598 <_strtod_l+0xaf0>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d12b      	bne.n	800a378 <_strtod_l+0x8d0>
 800a320:	9b08      	ldr	r3, [sp, #32]
 800a322:	4651      	mov	r1, sl
 800a324:	b303      	cbz	r3, 800a368 <_strtod_l+0x8c0>
 800a326:	4b9d      	ldr	r3, [pc, #628]	@ (800a59c <_strtod_l+0xaf4>)
 800a328:	465a      	mov	r2, fp
 800a32a:	4013      	ands	r3, r2
 800a32c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a330:	f04f 32ff 	mov.w	r2, #4294967295
 800a334:	d81b      	bhi.n	800a36e <_strtod_l+0x8c6>
 800a336:	0d1b      	lsrs	r3, r3, #20
 800a338:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a33c:	fa02 f303 	lsl.w	r3, r2, r3
 800a340:	4299      	cmp	r1, r3
 800a342:	d119      	bne.n	800a378 <_strtod_l+0x8d0>
 800a344:	4b96      	ldr	r3, [pc, #600]	@ (800a5a0 <_strtod_l+0xaf8>)
 800a346:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a348:	429a      	cmp	r2, r3
 800a34a:	d102      	bne.n	800a352 <_strtod_l+0x8aa>
 800a34c:	3101      	adds	r1, #1
 800a34e:	f43f adce 	beq.w	8009eee <_strtod_l+0x446>
 800a352:	4b92      	ldr	r3, [pc, #584]	@ (800a59c <_strtod_l+0xaf4>)
 800a354:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a356:	401a      	ands	r2, r3
 800a358:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a35c:	f04f 0a00 	mov.w	sl, #0
 800a360:	9b08      	ldr	r3, [sp, #32]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1b9      	bne.n	800a2da <_strtod_l+0x832>
 800a366:	e5cd      	b.n	8009f04 <_strtod_l+0x45c>
 800a368:	f04f 33ff 	mov.w	r3, #4294967295
 800a36c:	e7e8      	b.n	800a340 <_strtod_l+0x898>
 800a36e:	4613      	mov	r3, r2
 800a370:	e7e6      	b.n	800a340 <_strtod_l+0x898>
 800a372:	ea53 030a 	orrs.w	r3, r3, sl
 800a376:	d0a2      	beq.n	800a2be <_strtod_l+0x816>
 800a378:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a37a:	b1db      	cbz	r3, 800a3b4 <_strtod_l+0x90c>
 800a37c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a37e:	4213      	tst	r3, r2
 800a380:	d0ee      	beq.n	800a360 <_strtod_l+0x8b8>
 800a382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a384:	9a08      	ldr	r2, [sp, #32]
 800a386:	4650      	mov	r0, sl
 800a388:	4659      	mov	r1, fp
 800a38a:	b1bb      	cbz	r3, 800a3bc <_strtod_l+0x914>
 800a38c:	f7ff fb6e 	bl	8009a6c <sulp>
 800a390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a394:	ec53 2b10 	vmov	r2, r3, d0
 800a398:	f7f5 ffa8 	bl	80002ec <__adddf3>
 800a39c:	4682      	mov	sl, r0
 800a39e:	468b      	mov	fp, r1
 800a3a0:	e7de      	b.n	800a360 <_strtod_l+0x8b8>
 800a3a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a3a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a3aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a3ae:	f04f 3aff 	mov.w	sl, #4294967295
 800a3b2:	e7d5      	b.n	800a360 <_strtod_l+0x8b8>
 800a3b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3b6:	ea13 0f0a 	tst.w	r3, sl
 800a3ba:	e7e1      	b.n	800a380 <_strtod_l+0x8d8>
 800a3bc:	f7ff fb56 	bl	8009a6c <sulp>
 800a3c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3c4:	ec53 2b10 	vmov	r2, r3, d0
 800a3c8:	f7f5 ff8e 	bl	80002e8 <__aeabi_dsub>
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	4682      	mov	sl, r0
 800a3d2:	468b      	mov	fp, r1
 800a3d4:	f7f6 fba8 	bl	8000b28 <__aeabi_dcmpeq>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d0c1      	beq.n	800a360 <_strtod_l+0x8b8>
 800a3dc:	e61a      	b.n	800a014 <_strtod_l+0x56c>
 800a3de:	4641      	mov	r1, r8
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f7ff facd 	bl	8009980 <__ratio>
 800a3e6:	ec57 6b10 	vmov	r6, r7, d0
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	4639      	mov	r1, r7
 800a3f4:	f7f6 fbac 	bl	8000b50 <__aeabi_dcmple>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d06f      	beq.n	800a4dc <_strtod_l+0xa34>
 800a3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d17a      	bne.n	800a4f8 <_strtod_l+0xa50>
 800a402:	f1ba 0f00 	cmp.w	sl, #0
 800a406:	d158      	bne.n	800a4ba <_strtod_l+0xa12>
 800a408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a40a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d15a      	bne.n	800a4c8 <_strtod_l+0xa20>
 800a412:	4b64      	ldr	r3, [pc, #400]	@ (800a5a4 <_strtod_l+0xafc>)
 800a414:	2200      	movs	r2, #0
 800a416:	4630      	mov	r0, r6
 800a418:	4639      	mov	r1, r7
 800a41a:	f7f6 fb8f 	bl	8000b3c <__aeabi_dcmplt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d159      	bne.n	800a4d6 <_strtod_l+0xa2e>
 800a422:	4630      	mov	r0, r6
 800a424:	4639      	mov	r1, r7
 800a426:	4b60      	ldr	r3, [pc, #384]	@ (800a5a8 <_strtod_l+0xb00>)
 800a428:	2200      	movs	r2, #0
 800a42a:	f7f6 f915 	bl	8000658 <__aeabi_dmul>
 800a42e:	4606      	mov	r6, r0
 800a430:	460f      	mov	r7, r1
 800a432:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a436:	9606      	str	r6, [sp, #24]
 800a438:	9307      	str	r3, [sp, #28]
 800a43a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a43e:	4d57      	ldr	r5, [pc, #348]	@ (800a59c <_strtod_l+0xaf4>)
 800a440:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a446:	401d      	ands	r5, r3
 800a448:	4b58      	ldr	r3, [pc, #352]	@ (800a5ac <_strtod_l+0xb04>)
 800a44a:	429d      	cmp	r5, r3
 800a44c:	f040 80b2 	bne.w	800a5b4 <_strtod_l+0xb0c>
 800a450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a452:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a456:	ec4b ab10 	vmov	d0, sl, fp
 800a45a:	f7ff f9c9 	bl	80097f0 <__ulp>
 800a45e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a462:	ec51 0b10 	vmov	r0, r1, d0
 800a466:	f7f6 f8f7 	bl	8000658 <__aeabi_dmul>
 800a46a:	4652      	mov	r2, sl
 800a46c:	465b      	mov	r3, fp
 800a46e:	f7f5 ff3d 	bl	80002ec <__adddf3>
 800a472:	460b      	mov	r3, r1
 800a474:	4949      	ldr	r1, [pc, #292]	@ (800a59c <_strtod_l+0xaf4>)
 800a476:	4a4e      	ldr	r2, [pc, #312]	@ (800a5b0 <_strtod_l+0xb08>)
 800a478:	4019      	ands	r1, r3
 800a47a:	4291      	cmp	r1, r2
 800a47c:	4682      	mov	sl, r0
 800a47e:	d942      	bls.n	800a506 <_strtod_l+0xa5e>
 800a480:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a482:	4b47      	ldr	r3, [pc, #284]	@ (800a5a0 <_strtod_l+0xaf8>)
 800a484:	429a      	cmp	r2, r3
 800a486:	d103      	bne.n	800a490 <_strtod_l+0x9e8>
 800a488:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a48a:	3301      	adds	r3, #1
 800a48c:	f43f ad2f 	beq.w	8009eee <_strtod_l+0x446>
 800a490:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a5a0 <_strtod_l+0xaf8>
 800a494:	f04f 3aff 	mov.w	sl, #4294967295
 800a498:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a49a:	9805      	ldr	r0, [sp, #20]
 800a49c:	f7fe fe7c 	bl	8009198 <_Bfree>
 800a4a0:	9805      	ldr	r0, [sp, #20]
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	f7fe fe78 	bl	8009198 <_Bfree>
 800a4a8:	9805      	ldr	r0, [sp, #20]
 800a4aa:	4641      	mov	r1, r8
 800a4ac:	f7fe fe74 	bl	8009198 <_Bfree>
 800a4b0:	9805      	ldr	r0, [sp, #20]
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	f7fe fe70 	bl	8009198 <_Bfree>
 800a4b8:	e619      	b.n	800a0ee <_strtod_l+0x646>
 800a4ba:	f1ba 0f01 	cmp.w	sl, #1
 800a4be:	d103      	bne.n	800a4c8 <_strtod_l+0xa20>
 800a4c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f43f ada6 	beq.w	800a014 <_strtod_l+0x56c>
 800a4c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a578 <_strtod_l+0xad0>
 800a4cc:	4f35      	ldr	r7, [pc, #212]	@ (800a5a4 <_strtod_l+0xafc>)
 800a4ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a4d2:	2600      	movs	r6, #0
 800a4d4:	e7b1      	b.n	800a43a <_strtod_l+0x992>
 800a4d6:	4f34      	ldr	r7, [pc, #208]	@ (800a5a8 <_strtod_l+0xb00>)
 800a4d8:	2600      	movs	r6, #0
 800a4da:	e7aa      	b.n	800a432 <_strtod_l+0x98a>
 800a4dc:	4b32      	ldr	r3, [pc, #200]	@ (800a5a8 <_strtod_l+0xb00>)
 800a4de:	4630      	mov	r0, r6
 800a4e0:	4639      	mov	r1, r7
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f7f6 f8b8 	bl	8000658 <__aeabi_dmul>
 800a4e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	460f      	mov	r7, r1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d09f      	beq.n	800a432 <_strtod_l+0x98a>
 800a4f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a4f6:	e7a0      	b.n	800a43a <_strtod_l+0x992>
 800a4f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a580 <_strtod_l+0xad8>
 800a4fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a500:	ec57 6b17 	vmov	r6, r7, d7
 800a504:	e799      	b.n	800a43a <_strtod_l+0x992>
 800a506:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a50a:	9b08      	ldr	r3, [sp, #32]
 800a50c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1c1      	bne.n	800a498 <_strtod_l+0x9f0>
 800a514:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a518:	0d1b      	lsrs	r3, r3, #20
 800a51a:	051b      	lsls	r3, r3, #20
 800a51c:	429d      	cmp	r5, r3
 800a51e:	d1bb      	bne.n	800a498 <_strtod_l+0x9f0>
 800a520:	4630      	mov	r0, r6
 800a522:	4639      	mov	r1, r7
 800a524:	f7f6 fbf8 	bl	8000d18 <__aeabi_d2lz>
 800a528:	f7f6 f868 	bl	80005fc <__aeabi_l2d>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4630      	mov	r0, r6
 800a532:	4639      	mov	r1, r7
 800a534:	f7f5 fed8 	bl	80002e8 <__aeabi_dsub>
 800a538:	460b      	mov	r3, r1
 800a53a:	4602      	mov	r2, r0
 800a53c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a540:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a546:	ea46 060a 	orr.w	r6, r6, sl
 800a54a:	431e      	orrs	r6, r3
 800a54c:	d06f      	beq.n	800a62e <_strtod_l+0xb86>
 800a54e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a588 <_strtod_l+0xae0>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	f7f6 faf2 	bl	8000b3c <__aeabi_dcmplt>
 800a558:	2800      	cmp	r0, #0
 800a55a:	f47f acd3 	bne.w	8009f04 <_strtod_l+0x45c>
 800a55e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a590 <_strtod_l+0xae8>)
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a568:	f7f6 fb06 	bl	8000b78 <__aeabi_dcmpgt>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d093      	beq.n	800a498 <_strtod_l+0x9f0>
 800a570:	e4c8      	b.n	8009f04 <_strtod_l+0x45c>
 800a572:	bf00      	nop
 800a574:	f3af 8000 	nop.w
 800a578:	00000000 	.word	0x00000000
 800a57c:	bff00000 	.word	0xbff00000
 800a580:	00000000 	.word	0x00000000
 800a584:	3ff00000 	.word	0x3ff00000
 800a588:	94a03595 	.word	0x94a03595
 800a58c:	3fdfffff 	.word	0x3fdfffff
 800a590:	35afe535 	.word	0x35afe535
 800a594:	3fe00000 	.word	0x3fe00000
 800a598:	000fffff 	.word	0x000fffff
 800a59c:	7ff00000 	.word	0x7ff00000
 800a5a0:	7fefffff 	.word	0x7fefffff
 800a5a4:	3ff00000 	.word	0x3ff00000
 800a5a8:	3fe00000 	.word	0x3fe00000
 800a5ac:	7fe00000 	.word	0x7fe00000
 800a5b0:	7c9fffff 	.word	0x7c9fffff
 800a5b4:	9b08      	ldr	r3, [sp, #32]
 800a5b6:	b323      	cbz	r3, 800a602 <_strtod_l+0xb5a>
 800a5b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a5bc:	d821      	bhi.n	800a602 <_strtod_l+0xb5a>
 800a5be:	a328      	add	r3, pc, #160	@ (adr r3, 800a660 <_strtod_l+0xbb8>)
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	4639      	mov	r1, r7
 800a5c8:	f7f6 fac2 	bl	8000b50 <__aeabi_dcmple>
 800a5cc:	b1a0      	cbz	r0, 800a5f8 <_strtod_l+0xb50>
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7f6 fb19 	bl	8000c08 <__aeabi_d2uiz>
 800a5d6:	2801      	cmp	r0, #1
 800a5d8:	bf38      	it	cc
 800a5da:	2001      	movcc	r0, #1
 800a5dc:	f7f5 ffc2 	bl	8000564 <__aeabi_ui2d>
 800a5e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	460f      	mov	r7, r1
 800a5e6:	b9fb      	cbnz	r3, 800a628 <_strtod_l+0xb80>
 800a5e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a5ec:	9014      	str	r0, [sp, #80]	@ 0x50
 800a5ee:	9315      	str	r3, [sp, #84]	@ 0x54
 800a5f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a5f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a5f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a5fe:	1b5b      	subs	r3, r3, r5
 800a600:	9311      	str	r3, [sp, #68]	@ 0x44
 800a602:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a606:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a60a:	f7ff f8f1 	bl	80097f0 <__ulp>
 800a60e:	4650      	mov	r0, sl
 800a610:	ec53 2b10 	vmov	r2, r3, d0
 800a614:	4659      	mov	r1, fp
 800a616:	f7f6 f81f 	bl	8000658 <__aeabi_dmul>
 800a61a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a61e:	f7f5 fe65 	bl	80002ec <__adddf3>
 800a622:	4682      	mov	sl, r0
 800a624:	468b      	mov	fp, r1
 800a626:	e770      	b.n	800a50a <_strtod_l+0xa62>
 800a628:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a62c:	e7e0      	b.n	800a5f0 <_strtod_l+0xb48>
 800a62e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a668 <_strtod_l+0xbc0>)
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	f7f6 fa82 	bl	8000b3c <__aeabi_dcmplt>
 800a638:	e798      	b.n	800a56c <_strtod_l+0xac4>
 800a63a:	2300      	movs	r3, #0
 800a63c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a63e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a640:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	f7ff ba6d 	b.w	8009b22 <_strtod_l+0x7a>
 800a648:	2a65      	cmp	r2, #101	@ 0x65
 800a64a:	f43f ab68 	beq.w	8009d1e <_strtod_l+0x276>
 800a64e:	2a45      	cmp	r2, #69	@ 0x45
 800a650:	f43f ab65 	beq.w	8009d1e <_strtod_l+0x276>
 800a654:	2301      	movs	r3, #1
 800a656:	f7ff bba0 	b.w	8009d9a <_strtod_l+0x2f2>
 800a65a:	bf00      	nop
 800a65c:	f3af 8000 	nop.w
 800a660:	ffc00000 	.word	0xffc00000
 800a664:	41dfffff 	.word	0x41dfffff
 800a668:	94a03595 	.word	0x94a03595
 800a66c:	3fcfffff 	.word	0x3fcfffff

0800a670 <_strtod_r>:
 800a670:	4b01      	ldr	r3, [pc, #4]	@ (800a678 <_strtod_r+0x8>)
 800a672:	f7ff ba19 	b.w	8009aa8 <_strtod_l>
 800a676:	bf00      	nop
 800a678:	200000b0 	.word	0x200000b0

0800a67c <__ssputs_r>:
 800a67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a680:	688e      	ldr	r6, [r1, #8]
 800a682:	461f      	mov	r7, r3
 800a684:	42be      	cmp	r6, r7
 800a686:	680b      	ldr	r3, [r1, #0]
 800a688:	4682      	mov	sl, r0
 800a68a:	460c      	mov	r4, r1
 800a68c:	4690      	mov	r8, r2
 800a68e:	d82d      	bhi.n	800a6ec <__ssputs_r+0x70>
 800a690:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a694:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a698:	d026      	beq.n	800a6e8 <__ssputs_r+0x6c>
 800a69a:	6965      	ldr	r5, [r4, #20]
 800a69c:	6909      	ldr	r1, [r1, #16]
 800a69e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6a2:	eba3 0901 	sub.w	r9, r3, r1
 800a6a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6aa:	1c7b      	adds	r3, r7, #1
 800a6ac:	444b      	add	r3, r9
 800a6ae:	106d      	asrs	r5, r5, #1
 800a6b0:	429d      	cmp	r5, r3
 800a6b2:	bf38      	it	cc
 800a6b4:	461d      	movcc	r5, r3
 800a6b6:	0553      	lsls	r3, r2, #21
 800a6b8:	d527      	bpl.n	800a70a <__ssputs_r+0x8e>
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	f7fe fca0 	bl	8009000 <_malloc_r>
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	b360      	cbz	r0, 800a71e <__ssputs_r+0xa2>
 800a6c4:	6921      	ldr	r1, [r4, #16]
 800a6c6:	464a      	mov	r2, r9
 800a6c8:	f000 fbde 	bl	800ae88 <memcpy>
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a6d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	6126      	str	r6, [r4, #16]
 800a6da:	6165      	str	r5, [r4, #20]
 800a6dc:	444e      	add	r6, r9
 800a6de:	eba5 0509 	sub.w	r5, r5, r9
 800a6e2:	6026      	str	r6, [r4, #0]
 800a6e4:	60a5      	str	r5, [r4, #8]
 800a6e6:	463e      	mov	r6, r7
 800a6e8:	42be      	cmp	r6, r7
 800a6ea:	d900      	bls.n	800a6ee <__ssputs_r+0x72>
 800a6ec:	463e      	mov	r6, r7
 800a6ee:	6820      	ldr	r0, [r4, #0]
 800a6f0:	4632      	mov	r2, r6
 800a6f2:	4641      	mov	r1, r8
 800a6f4:	f000 fb6a 	bl	800adcc <memmove>
 800a6f8:	68a3      	ldr	r3, [r4, #8]
 800a6fa:	1b9b      	subs	r3, r3, r6
 800a6fc:	60a3      	str	r3, [r4, #8]
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	4433      	add	r3, r6
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	2000      	movs	r0, #0
 800a706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a70a:	462a      	mov	r2, r5
 800a70c:	f000 ff51 	bl	800b5b2 <_realloc_r>
 800a710:	4606      	mov	r6, r0
 800a712:	2800      	cmp	r0, #0
 800a714:	d1e0      	bne.n	800a6d8 <__ssputs_r+0x5c>
 800a716:	6921      	ldr	r1, [r4, #16]
 800a718:	4650      	mov	r0, sl
 800a71a:	f7fe fbfd 	bl	8008f18 <_free_r>
 800a71e:	230c      	movs	r3, #12
 800a720:	f8ca 3000 	str.w	r3, [sl]
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a72a:	81a3      	strh	r3, [r4, #12]
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295
 800a730:	e7e9      	b.n	800a706 <__ssputs_r+0x8a>
	...

0800a734 <_svfiprintf_r>:
 800a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	4698      	mov	r8, r3
 800a73a:	898b      	ldrh	r3, [r1, #12]
 800a73c:	061b      	lsls	r3, r3, #24
 800a73e:	b09d      	sub	sp, #116	@ 0x74
 800a740:	4607      	mov	r7, r0
 800a742:	460d      	mov	r5, r1
 800a744:	4614      	mov	r4, r2
 800a746:	d510      	bpl.n	800a76a <_svfiprintf_r+0x36>
 800a748:	690b      	ldr	r3, [r1, #16]
 800a74a:	b973      	cbnz	r3, 800a76a <_svfiprintf_r+0x36>
 800a74c:	2140      	movs	r1, #64	@ 0x40
 800a74e:	f7fe fc57 	bl	8009000 <_malloc_r>
 800a752:	6028      	str	r0, [r5, #0]
 800a754:	6128      	str	r0, [r5, #16]
 800a756:	b930      	cbnz	r0, 800a766 <_svfiprintf_r+0x32>
 800a758:	230c      	movs	r3, #12
 800a75a:	603b      	str	r3, [r7, #0]
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295
 800a760:	b01d      	add	sp, #116	@ 0x74
 800a762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a766:	2340      	movs	r3, #64	@ 0x40
 800a768:	616b      	str	r3, [r5, #20]
 800a76a:	2300      	movs	r3, #0
 800a76c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a76e:	2320      	movs	r3, #32
 800a770:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a774:	f8cd 800c 	str.w	r8, [sp, #12]
 800a778:	2330      	movs	r3, #48	@ 0x30
 800a77a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a918 <_svfiprintf_r+0x1e4>
 800a77e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a782:	f04f 0901 	mov.w	r9, #1
 800a786:	4623      	mov	r3, r4
 800a788:	469a      	mov	sl, r3
 800a78a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a78e:	b10a      	cbz	r2, 800a794 <_svfiprintf_r+0x60>
 800a790:	2a25      	cmp	r2, #37	@ 0x25
 800a792:	d1f9      	bne.n	800a788 <_svfiprintf_r+0x54>
 800a794:	ebba 0b04 	subs.w	fp, sl, r4
 800a798:	d00b      	beq.n	800a7b2 <_svfiprintf_r+0x7e>
 800a79a:	465b      	mov	r3, fp
 800a79c:	4622      	mov	r2, r4
 800a79e:	4629      	mov	r1, r5
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	f7ff ff6b 	bl	800a67c <__ssputs_r>
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	f000 80a7 	beq.w	800a8fa <_svfiprintf_r+0x1c6>
 800a7ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7ae:	445a      	add	r2, fp
 800a7b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 809f 	beq.w	800a8fa <_svfiprintf_r+0x1c6>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7c6:	f10a 0a01 	add.w	sl, sl, #1
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	9307      	str	r3, [sp, #28]
 800a7ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7d4:	4654      	mov	r4, sl
 800a7d6:	2205      	movs	r2, #5
 800a7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7dc:	484e      	ldr	r0, [pc, #312]	@ (800a918 <_svfiprintf_r+0x1e4>)
 800a7de:	f7f5 fd27 	bl	8000230 <memchr>
 800a7e2:	9a04      	ldr	r2, [sp, #16]
 800a7e4:	b9d8      	cbnz	r0, 800a81e <_svfiprintf_r+0xea>
 800a7e6:	06d0      	lsls	r0, r2, #27
 800a7e8:	bf44      	itt	mi
 800a7ea:	2320      	movmi	r3, #32
 800a7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7f0:	0711      	lsls	r1, r2, #28
 800a7f2:	bf44      	itt	mi
 800a7f4:	232b      	movmi	r3, #43	@ 0x2b
 800a7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a7fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a800:	d015      	beq.n	800a82e <_svfiprintf_r+0xfa>
 800a802:	9a07      	ldr	r2, [sp, #28]
 800a804:	4654      	mov	r4, sl
 800a806:	2000      	movs	r0, #0
 800a808:	f04f 0c0a 	mov.w	ip, #10
 800a80c:	4621      	mov	r1, r4
 800a80e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a812:	3b30      	subs	r3, #48	@ 0x30
 800a814:	2b09      	cmp	r3, #9
 800a816:	d94b      	bls.n	800a8b0 <_svfiprintf_r+0x17c>
 800a818:	b1b0      	cbz	r0, 800a848 <_svfiprintf_r+0x114>
 800a81a:	9207      	str	r2, [sp, #28]
 800a81c:	e014      	b.n	800a848 <_svfiprintf_r+0x114>
 800a81e:	eba0 0308 	sub.w	r3, r0, r8
 800a822:	fa09 f303 	lsl.w	r3, r9, r3
 800a826:	4313      	orrs	r3, r2
 800a828:	9304      	str	r3, [sp, #16]
 800a82a:	46a2      	mov	sl, r4
 800a82c:	e7d2      	b.n	800a7d4 <_svfiprintf_r+0xa0>
 800a82e:	9b03      	ldr	r3, [sp, #12]
 800a830:	1d19      	adds	r1, r3, #4
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	9103      	str	r1, [sp, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	bfbb      	ittet	lt
 800a83a:	425b      	neglt	r3, r3
 800a83c:	f042 0202 	orrlt.w	r2, r2, #2
 800a840:	9307      	strge	r3, [sp, #28]
 800a842:	9307      	strlt	r3, [sp, #28]
 800a844:	bfb8      	it	lt
 800a846:	9204      	strlt	r2, [sp, #16]
 800a848:	7823      	ldrb	r3, [r4, #0]
 800a84a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a84c:	d10a      	bne.n	800a864 <_svfiprintf_r+0x130>
 800a84e:	7863      	ldrb	r3, [r4, #1]
 800a850:	2b2a      	cmp	r3, #42	@ 0x2a
 800a852:	d132      	bne.n	800a8ba <_svfiprintf_r+0x186>
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	1d1a      	adds	r2, r3, #4
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	9203      	str	r2, [sp, #12]
 800a85c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a860:	3402      	adds	r4, #2
 800a862:	9305      	str	r3, [sp, #20]
 800a864:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a928 <_svfiprintf_r+0x1f4>
 800a868:	7821      	ldrb	r1, [r4, #0]
 800a86a:	2203      	movs	r2, #3
 800a86c:	4650      	mov	r0, sl
 800a86e:	f7f5 fcdf 	bl	8000230 <memchr>
 800a872:	b138      	cbz	r0, 800a884 <_svfiprintf_r+0x150>
 800a874:	9b04      	ldr	r3, [sp, #16]
 800a876:	eba0 000a 	sub.w	r0, r0, sl
 800a87a:	2240      	movs	r2, #64	@ 0x40
 800a87c:	4082      	lsls	r2, r0
 800a87e:	4313      	orrs	r3, r2
 800a880:	3401      	adds	r4, #1
 800a882:	9304      	str	r3, [sp, #16]
 800a884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a888:	4824      	ldr	r0, [pc, #144]	@ (800a91c <_svfiprintf_r+0x1e8>)
 800a88a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a88e:	2206      	movs	r2, #6
 800a890:	f7f5 fcce 	bl	8000230 <memchr>
 800a894:	2800      	cmp	r0, #0
 800a896:	d036      	beq.n	800a906 <_svfiprintf_r+0x1d2>
 800a898:	4b21      	ldr	r3, [pc, #132]	@ (800a920 <_svfiprintf_r+0x1ec>)
 800a89a:	bb1b      	cbnz	r3, 800a8e4 <_svfiprintf_r+0x1b0>
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	3307      	adds	r3, #7
 800a8a0:	f023 0307 	bic.w	r3, r3, #7
 800a8a4:	3308      	adds	r3, #8
 800a8a6:	9303      	str	r3, [sp, #12]
 800a8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8aa:	4433      	add	r3, r6
 800a8ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ae:	e76a      	b.n	800a786 <_svfiprintf_r+0x52>
 800a8b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	e7a8      	b.n	800a80c <_svfiprintf_r+0xd8>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	3401      	adds	r4, #1
 800a8be:	9305      	str	r3, [sp, #20]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	f04f 0c0a 	mov.w	ip, #10
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8cc:	3a30      	subs	r2, #48	@ 0x30
 800a8ce:	2a09      	cmp	r2, #9
 800a8d0:	d903      	bls.n	800a8da <_svfiprintf_r+0x1a6>
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0c6      	beq.n	800a864 <_svfiprintf_r+0x130>
 800a8d6:	9105      	str	r1, [sp, #20]
 800a8d8:	e7c4      	b.n	800a864 <_svfiprintf_r+0x130>
 800a8da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8de:	4604      	mov	r4, r0
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e7f0      	b.n	800a8c6 <_svfiprintf_r+0x192>
 800a8e4:	ab03      	add	r3, sp, #12
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	462a      	mov	r2, r5
 800a8ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a924 <_svfiprintf_r+0x1f0>)
 800a8ec:	a904      	add	r1, sp, #16
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	f7fc fc42 	bl	8007178 <_printf_float>
 800a8f4:	1c42      	adds	r2, r0, #1
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	d1d6      	bne.n	800a8a8 <_svfiprintf_r+0x174>
 800a8fa:	89ab      	ldrh	r3, [r5, #12]
 800a8fc:	065b      	lsls	r3, r3, #25
 800a8fe:	f53f af2d 	bmi.w	800a75c <_svfiprintf_r+0x28>
 800a902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a904:	e72c      	b.n	800a760 <_svfiprintf_r+0x2c>
 800a906:	ab03      	add	r3, sp, #12
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	462a      	mov	r2, r5
 800a90c:	4b05      	ldr	r3, [pc, #20]	@ (800a924 <_svfiprintf_r+0x1f0>)
 800a90e:	a904      	add	r1, sp, #16
 800a910:	4638      	mov	r0, r7
 800a912:	f7fc fec9 	bl	80076a8 <_printf_i>
 800a916:	e7ed      	b.n	800a8f4 <_svfiprintf_r+0x1c0>
 800a918:	0800bb72 	.word	0x0800bb72
 800a91c:	0800bb7c 	.word	0x0800bb7c
 800a920:	08007179 	.word	0x08007179
 800a924:	0800a67d 	.word	0x0800a67d
 800a928:	0800bb78 	.word	0x0800bb78

0800a92c <__sfputc_r>:
 800a92c:	6893      	ldr	r3, [r2, #8]
 800a92e:	3b01      	subs	r3, #1
 800a930:	2b00      	cmp	r3, #0
 800a932:	b410      	push	{r4}
 800a934:	6093      	str	r3, [r2, #8]
 800a936:	da08      	bge.n	800a94a <__sfputc_r+0x1e>
 800a938:	6994      	ldr	r4, [r2, #24]
 800a93a:	42a3      	cmp	r3, r4
 800a93c:	db01      	blt.n	800a942 <__sfputc_r+0x16>
 800a93e:	290a      	cmp	r1, #10
 800a940:	d103      	bne.n	800a94a <__sfputc_r+0x1e>
 800a942:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a946:	f7fd bb72 	b.w	800802e <__swbuf_r>
 800a94a:	6813      	ldr	r3, [r2, #0]
 800a94c:	1c58      	adds	r0, r3, #1
 800a94e:	6010      	str	r0, [r2, #0]
 800a950:	7019      	strb	r1, [r3, #0]
 800a952:	4608      	mov	r0, r1
 800a954:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <__sfputs_r>:
 800a95a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95c:	4606      	mov	r6, r0
 800a95e:	460f      	mov	r7, r1
 800a960:	4614      	mov	r4, r2
 800a962:	18d5      	adds	r5, r2, r3
 800a964:	42ac      	cmp	r4, r5
 800a966:	d101      	bne.n	800a96c <__sfputs_r+0x12>
 800a968:	2000      	movs	r0, #0
 800a96a:	e007      	b.n	800a97c <__sfputs_r+0x22>
 800a96c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a970:	463a      	mov	r2, r7
 800a972:	4630      	mov	r0, r6
 800a974:	f7ff ffda 	bl	800a92c <__sfputc_r>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d1f3      	bne.n	800a964 <__sfputs_r+0xa>
 800a97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a980 <_vfiprintf_r>:
 800a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a984:	460d      	mov	r5, r1
 800a986:	b09d      	sub	sp, #116	@ 0x74
 800a988:	4614      	mov	r4, r2
 800a98a:	4698      	mov	r8, r3
 800a98c:	4606      	mov	r6, r0
 800a98e:	b118      	cbz	r0, 800a998 <_vfiprintf_r+0x18>
 800a990:	6a03      	ldr	r3, [r0, #32]
 800a992:	b90b      	cbnz	r3, 800a998 <_vfiprintf_r+0x18>
 800a994:	f7fd fa40 	bl	8007e18 <__sinit>
 800a998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a99a:	07d9      	lsls	r1, r3, #31
 800a99c:	d405      	bmi.n	800a9aa <_vfiprintf_r+0x2a>
 800a99e:	89ab      	ldrh	r3, [r5, #12]
 800a9a0:	059a      	lsls	r2, r3, #22
 800a9a2:	d402      	bmi.n	800a9aa <_vfiprintf_r+0x2a>
 800a9a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9a6:	f7fd fc54 	bl	8008252 <__retarget_lock_acquire_recursive>
 800a9aa:	89ab      	ldrh	r3, [r5, #12]
 800a9ac:	071b      	lsls	r3, r3, #28
 800a9ae:	d501      	bpl.n	800a9b4 <_vfiprintf_r+0x34>
 800a9b0:	692b      	ldr	r3, [r5, #16]
 800a9b2:	b99b      	cbnz	r3, 800a9dc <_vfiprintf_r+0x5c>
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f7fd fb78 	bl	80080ac <__swsetup_r>
 800a9bc:	b170      	cbz	r0, 800a9dc <_vfiprintf_r+0x5c>
 800a9be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9c0:	07dc      	lsls	r4, r3, #31
 800a9c2:	d504      	bpl.n	800a9ce <_vfiprintf_r+0x4e>
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	b01d      	add	sp, #116	@ 0x74
 800a9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ce:	89ab      	ldrh	r3, [r5, #12]
 800a9d0:	0598      	lsls	r0, r3, #22
 800a9d2:	d4f7      	bmi.n	800a9c4 <_vfiprintf_r+0x44>
 800a9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9d6:	f7fd fc3d 	bl	8008254 <__retarget_lock_release_recursive>
 800a9da:	e7f3      	b.n	800a9c4 <_vfiprintf_r+0x44>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e0:	2320      	movs	r3, #32
 800a9e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9ea:	2330      	movs	r3, #48	@ 0x30
 800a9ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab9c <_vfiprintf_r+0x21c>
 800a9f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9f4:	f04f 0901 	mov.w	r9, #1
 800a9f8:	4623      	mov	r3, r4
 800a9fa:	469a      	mov	sl, r3
 800a9fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa00:	b10a      	cbz	r2, 800aa06 <_vfiprintf_r+0x86>
 800aa02:	2a25      	cmp	r2, #37	@ 0x25
 800aa04:	d1f9      	bne.n	800a9fa <_vfiprintf_r+0x7a>
 800aa06:	ebba 0b04 	subs.w	fp, sl, r4
 800aa0a:	d00b      	beq.n	800aa24 <_vfiprintf_r+0xa4>
 800aa0c:	465b      	mov	r3, fp
 800aa0e:	4622      	mov	r2, r4
 800aa10:	4629      	mov	r1, r5
 800aa12:	4630      	mov	r0, r6
 800aa14:	f7ff ffa1 	bl	800a95a <__sfputs_r>
 800aa18:	3001      	adds	r0, #1
 800aa1a:	f000 80a7 	beq.w	800ab6c <_vfiprintf_r+0x1ec>
 800aa1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa20:	445a      	add	r2, fp
 800aa22:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa24:	f89a 3000 	ldrb.w	r3, [sl]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 809f 	beq.w	800ab6c <_vfiprintf_r+0x1ec>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f04f 32ff 	mov.w	r2, #4294967295
 800aa34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa38:	f10a 0a01 	add.w	sl, sl, #1
 800aa3c:	9304      	str	r3, [sp, #16]
 800aa3e:	9307      	str	r3, [sp, #28]
 800aa40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa44:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa46:	4654      	mov	r4, sl
 800aa48:	2205      	movs	r2, #5
 800aa4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa4e:	4853      	ldr	r0, [pc, #332]	@ (800ab9c <_vfiprintf_r+0x21c>)
 800aa50:	f7f5 fbee 	bl	8000230 <memchr>
 800aa54:	9a04      	ldr	r2, [sp, #16]
 800aa56:	b9d8      	cbnz	r0, 800aa90 <_vfiprintf_r+0x110>
 800aa58:	06d1      	lsls	r1, r2, #27
 800aa5a:	bf44      	itt	mi
 800aa5c:	2320      	movmi	r3, #32
 800aa5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa62:	0713      	lsls	r3, r2, #28
 800aa64:	bf44      	itt	mi
 800aa66:	232b      	movmi	r3, #43	@ 0x2b
 800aa68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa6c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa70:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa72:	d015      	beq.n	800aaa0 <_vfiprintf_r+0x120>
 800aa74:	9a07      	ldr	r2, [sp, #28]
 800aa76:	4654      	mov	r4, sl
 800aa78:	2000      	movs	r0, #0
 800aa7a:	f04f 0c0a 	mov.w	ip, #10
 800aa7e:	4621      	mov	r1, r4
 800aa80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa84:	3b30      	subs	r3, #48	@ 0x30
 800aa86:	2b09      	cmp	r3, #9
 800aa88:	d94b      	bls.n	800ab22 <_vfiprintf_r+0x1a2>
 800aa8a:	b1b0      	cbz	r0, 800aaba <_vfiprintf_r+0x13a>
 800aa8c:	9207      	str	r2, [sp, #28]
 800aa8e:	e014      	b.n	800aaba <_vfiprintf_r+0x13a>
 800aa90:	eba0 0308 	sub.w	r3, r0, r8
 800aa94:	fa09 f303 	lsl.w	r3, r9, r3
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	9304      	str	r3, [sp, #16]
 800aa9c:	46a2      	mov	sl, r4
 800aa9e:	e7d2      	b.n	800aa46 <_vfiprintf_r+0xc6>
 800aaa0:	9b03      	ldr	r3, [sp, #12]
 800aaa2:	1d19      	adds	r1, r3, #4
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	9103      	str	r1, [sp, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	bfbb      	ittet	lt
 800aaac:	425b      	neglt	r3, r3
 800aaae:	f042 0202 	orrlt.w	r2, r2, #2
 800aab2:	9307      	strge	r3, [sp, #28]
 800aab4:	9307      	strlt	r3, [sp, #28]
 800aab6:	bfb8      	it	lt
 800aab8:	9204      	strlt	r2, [sp, #16]
 800aaba:	7823      	ldrb	r3, [r4, #0]
 800aabc:	2b2e      	cmp	r3, #46	@ 0x2e
 800aabe:	d10a      	bne.n	800aad6 <_vfiprintf_r+0x156>
 800aac0:	7863      	ldrb	r3, [r4, #1]
 800aac2:	2b2a      	cmp	r3, #42	@ 0x2a
 800aac4:	d132      	bne.n	800ab2c <_vfiprintf_r+0x1ac>
 800aac6:	9b03      	ldr	r3, [sp, #12]
 800aac8:	1d1a      	adds	r2, r3, #4
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	9203      	str	r2, [sp, #12]
 800aace:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aad2:	3402      	adds	r4, #2
 800aad4:	9305      	str	r3, [sp, #20]
 800aad6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abac <_vfiprintf_r+0x22c>
 800aada:	7821      	ldrb	r1, [r4, #0]
 800aadc:	2203      	movs	r2, #3
 800aade:	4650      	mov	r0, sl
 800aae0:	f7f5 fba6 	bl	8000230 <memchr>
 800aae4:	b138      	cbz	r0, 800aaf6 <_vfiprintf_r+0x176>
 800aae6:	9b04      	ldr	r3, [sp, #16]
 800aae8:	eba0 000a 	sub.w	r0, r0, sl
 800aaec:	2240      	movs	r2, #64	@ 0x40
 800aaee:	4082      	lsls	r2, r0
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	3401      	adds	r4, #1
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafa:	4829      	ldr	r0, [pc, #164]	@ (800aba0 <_vfiprintf_r+0x220>)
 800aafc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab00:	2206      	movs	r2, #6
 800ab02:	f7f5 fb95 	bl	8000230 <memchr>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d03f      	beq.n	800ab8a <_vfiprintf_r+0x20a>
 800ab0a:	4b26      	ldr	r3, [pc, #152]	@ (800aba4 <_vfiprintf_r+0x224>)
 800ab0c:	bb1b      	cbnz	r3, 800ab56 <_vfiprintf_r+0x1d6>
 800ab0e:	9b03      	ldr	r3, [sp, #12]
 800ab10:	3307      	adds	r3, #7
 800ab12:	f023 0307 	bic.w	r3, r3, #7
 800ab16:	3308      	adds	r3, #8
 800ab18:	9303      	str	r3, [sp, #12]
 800ab1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab1c:	443b      	add	r3, r7
 800ab1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab20:	e76a      	b.n	800a9f8 <_vfiprintf_r+0x78>
 800ab22:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab26:	460c      	mov	r4, r1
 800ab28:	2001      	movs	r0, #1
 800ab2a:	e7a8      	b.n	800aa7e <_vfiprintf_r+0xfe>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	3401      	adds	r4, #1
 800ab30:	9305      	str	r3, [sp, #20]
 800ab32:	4619      	mov	r1, r3
 800ab34:	f04f 0c0a 	mov.w	ip, #10
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab3e:	3a30      	subs	r2, #48	@ 0x30
 800ab40:	2a09      	cmp	r2, #9
 800ab42:	d903      	bls.n	800ab4c <_vfiprintf_r+0x1cc>
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d0c6      	beq.n	800aad6 <_vfiprintf_r+0x156>
 800ab48:	9105      	str	r1, [sp, #20]
 800ab4a:	e7c4      	b.n	800aad6 <_vfiprintf_r+0x156>
 800ab4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab50:	4604      	mov	r4, r0
 800ab52:	2301      	movs	r3, #1
 800ab54:	e7f0      	b.n	800ab38 <_vfiprintf_r+0x1b8>
 800ab56:	ab03      	add	r3, sp, #12
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	462a      	mov	r2, r5
 800ab5c:	4b12      	ldr	r3, [pc, #72]	@ (800aba8 <_vfiprintf_r+0x228>)
 800ab5e:	a904      	add	r1, sp, #16
 800ab60:	4630      	mov	r0, r6
 800ab62:	f7fc fb09 	bl	8007178 <_printf_float>
 800ab66:	4607      	mov	r7, r0
 800ab68:	1c78      	adds	r0, r7, #1
 800ab6a:	d1d6      	bne.n	800ab1a <_vfiprintf_r+0x19a>
 800ab6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab6e:	07d9      	lsls	r1, r3, #31
 800ab70:	d405      	bmi.n	800ab7e <_vfiprintf_r+0x1fe>
 800ab72:	89ab      	ldrh	r3, [r5, #12]
 800ab74:	059a      	lsls	r2, r3, #22
 800ab76:	d402      	bmi.n	800ab7e <_vfiprintf_r+0x1fe>
 800ab78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab7a:	f7fd fb6b 	bl	8008254 <__retarget_lock_release_recursive>
 800ab7e:	89ab      	ldrh	r3, [r5, #12]
 800ab80:	065b      	lsls	r3, r3, #25
 800ab82:	f53f af1f 	bmi.w	800a9c4 <_vfiprintf_r+0x44>
 800ab86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab88:	e71e      	b.n	800a9c8 <_vfiprintf_r+0x48>
 800ab8a:	ab03      	add	r3, sp, #12
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	462a      	mov	r2, r5
 800ab90:	4b05      	ldr	r3, [pc, #20]	@ (800aba8 <_vfiprintf_r+0x228>)
 800ab92:	a904      	add	r1, sp, #16
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7fc fd87 	bl	80076a8 <_printf_i>
 800ab9a:	e7e4      	b.n	800ab66 <_vfiprintf_r+0x1e6>
 800ab9c:	0800bb72 	.word	0x0800bb72
 800aba0:	0800bb7c 	.word	0x0800bb7c
 800aba4:	08007179 	.word	0x08007179
 800aba8:	0800a95b 	.word	0x0800a95b
 800abac:	0800bb78 	.word	0x0800bb78

0800abb0 <__sflush_r>:
 800abb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb8:	0716      	lsls	r6, r2, #28
 800abba:	4605      	mov	r5, r0
 800abbc:	460c      	mov	r4, r1
 800abbe:	d454      	bmi.n	800ac6a <__sflush_r+0xba>
 800abc0:	684b      	ldr	r3, [r1, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	dc02      	bgt.n	800abcc <__sflush_r+0x1c>
 800abc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dd48      	ble.n	800ac5e <__sflush_r+0xae>
 800abcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abce:	2e00      	cmp	r6, #0
 800abd0:	d045      	beq.n	800ac5e <__sflush_r+0xae>
 800abd2:	2300      	movs	r3, #0
 800abd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800abd8:	682f      	ldr	r7, [r5, #0]
 800abda:	6a21      	ldr	r1, [r4, #32]
 800abdc:	602b      	str	r3, [r5, #0]
 800abde:	d030      	beq.n	800ac42 <__sflush_r+0x92>
 800abe0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	0759      	lsls	r1, r3, #29
 800abe6:	d505      	bpl.n	800abf4 <__sflush_r+0x44>
 800abe8:	6863      	ldr	r3, [r4, #4]
 800abea:	1ad2      	subs	r2, r2, r3
 800abec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800abee:	b10b      	cbz	r3, 800abf4 <__sflush_r+0x44>
 800abf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800abf2:	1ad2      	subs	r2, r2, r3
 800abf4:	2300      	movs	r3, #0
 800abf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abf8:	6a21      	ldr	r1, [r4, #32]
 800abfa:	4628      	mov	r0, r5
 800abfc:	47b0      	blx	r6
 800abfe:	1c43      	adds	r3, r0, #1
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	d106      	bne.n	800ac12 <__sflush_r+0x62>
 800ac04:	6829      	ldr	r1, [r5, #0]
 800ac06:	291d      	cmp	r1, #29
 800ac08:	d82b      	bhi.n	800ac62 <__sflush_r+0xb2>
 800ac0a:	4a2a      	ldr	r2, [pc, #168]	@ (800acb4 <__sflush_r+0x104>)
 800ac0c:	40ca      	lsrs	r2, r1
 800ac0e:	07d6      	lsls	r6, r2, #31
 800ac10:	d527      	bpl.n	800ac62 <__sflush_r+0xb2>
 800ac12:	2200      	movs	r2, #0
 800ac14:	6062      	str	r2, [r4, #4]
 800ac16:	04d9      	lsls	r1, r3, #19
 800ac18:	6922      	ldr	r2, [r4, #16]
 800ac1a:	6022      	str	r2, [r4, #0]
 800ac1c:	d504      	bpl.n	800ac28 <__sflush_r+0x78>
 800ac1e:	1c42      	adds	r2, r0, #1
 800ac20:	d101      	bne.n	800ac26 <__sflush_r+0x76>
 800ac22:	682b      	ldr	r3, [r5, #0]
 800ac24:	b903      	cbnz	r3, 800ac28 <__sflush_r+0x78>
 800ac26:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac2a:	602f      	str	r7, [r5, #0]
 800ac2c:	b1b9      	cbz	r1, 800ac5e <__sflush_r+0xae>
 800ac2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac32:	4299      	cmp	r1, r3
 800ac34:	d002      	beq.n	800ac3c <__sflush_r+0x8c>
 800ac36:	4628      	mov	r0, r5
 800ac38:	f7fe f96e 	bl	8008f18 <_free_r>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac40:	e00d      	b.n	800ac5e <__sflush_r+0xae>
 800ac42:	2301      	movs	r3, #1
 800ac44:	4628      	mov	r0, r5
 800ac46:	47b0      	blx	r6
 800ac48:	4602      	mov	r2, r0
 800ac4a:	1c50      	adds	r0, r2, #1
 800ac4c:	d1c9      	bne.n	800abe2 <__sflush_r+0x32>
 800ac4e:	682b      	ldr	r3, [r5, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d0c6      	beq.n	800abe2 <__sflush_r+0x32>
 800ac54:	2b1d      	cmp	r3, #29
 800ac56:	d001      	beq.n	800ac5c <__sflush_r+0xac>
 800ac58:	2b16      	cmp	r3, #22
 800ac5a:	d11e      	bne.n	800ac9a <__sflush_r+0xea>
 800ac5c:	602f      	str	r7, [r5, #0]
 800ac5e:	2000      	movs	r0, #0
 800ac60:	e022      	b.n	800aca8 <__sflush_r+0xf8>
 800ac62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac66:	b21b      	sxth	r3, r3
 800ac68:	e01b      	b.n	800aca2 <__sflush_r+0xf2>
 800ac6a:	690f      	ldr	r7, [r1, #16]
 800ac6c:	2f00      	cmp	r7, #0
 800ac6e:	d0f6      	beq.n	800ac5e <__sflush_r+0xae>
 800ac70:	0793      	lsls	r3, r2, #30
 800ac72:	680e      	ldr	r6, [r1, #0]
 800ac74:	bf08      	it	eq
 800ac76:	694b      	ldreq	r3, [r1, #20]
 800ac78:	600f      	str	r7, [r1, #0]
 800ac7a:	bf18      	it	ne
 800ac7c:	2300      	movne	r3, #0
 800ac7e:	eba6 0807 	sub.w	r8, r6, r7
 800ac82:	608b      	str	r3, [r1, #8]
 800ac84:	f1b8 0f00 	cmp.w	r8, #0
 800ac88:	dde9      	ble.n	800ac5e <__sflush_r+0xae>
 800ac8a:	6a21      	ldr	r1, [r4, #32]
 800ac8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac8e:	4643      	mov	r3, r8
 800ac90:	463a      	mov	r2, r7
 800ac92:	4628      	mov	r0, r5
 800ac94:	47b0      	blx	r6
 800ac96:	2800      	cmp	r0, #0
 800ac98:	dc08      	bgt.n	800acac <__sflush_r+0xfc>
 800ac9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	f04f 30ff 	mov.w	r0, #4294967295
 800aca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acac:	4407      	add	r7, r0
 800acae:	eba8 0800 	sub.w	r8, r8, r0
 800acb2:	e7e7      	b.n	800ac84 <__sflush_r+0xd4>
 800acb4:	20400001 	.word	0x20400001

0800acb8 <_fflush_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	690b      	ldr	r3, [r1, #16]
 800acbc:	4605      	mov	r5, r0
 800acbe:	460c      	mov	r4, r1
 800acc0:	b913      	cbnz	r3, 800acc8 <_fflush_r+0x10>
 800acc2:	2500      	movs	r5, #0
 800acc4:	4628      	mov	r0, r5
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	b118      	cbz	r0, 800acd2 <_fflush_r+0x1a>
 800acca:	6a03      	ldr	r3, [r0, #32]
 800accc:	b90b      	cbnz	r3, 800acd2 <_fflush_r+0x1a>
 800acce:	f7fd f8a3 	bl	8007e18 <__sinit>
 800acd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0f3      	beq.n	800acc2 <_fflush_r+0xa>
 800acda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800acdc:	07d0      	lsls	r0, r2, #31
 800acde:	d404      	bmi.n	800acea <_fflush_r+0x32>
 800ace0:	0599      	lsls	r1, r3, #22
 800ace2:	d402      	bmi.n	800acea <_fflush_r+0x32>
 800ace4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ace6:	f7fd fab4 	bl	8008252 <__retarget_lock_acquire_recursive>
 800acea:	4628      	mov	r0, r5
 800acec:	4621      	mov	r1, r4
 800acee:	f7ff ff5f 	bl	800abb0 <__sflush_r>
 800acf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acf4:	07da      	lsls	r2, r3, #31
 800acf6:	4605      	mov	r5, r0
 800acf8:	d4e4      	bmi.n	800acc4 <_fflush_r+0xc>
 800acfa:	89a3      	ldrh	r3, [r4, #12]
 800acfc:	059b      	lsls	r3, r3, #22
 800acfe:	d4e1      	bmi.n	800acc4 <_fflush_r+0xc>
 800ad00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad02:	f7fd faa7 	bl	8008254 <__retarget_lock_release_recursive>
 800ad06:	e7dd      	b.n	800acc4 <_fflush_r+0xc>

0800ad08 <__swhatbuf_r>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad10:	2900      	cmp	r1, #0
 800ad12:	b096      	sub	sp, #88	@ 0x58
 800ad14:	4615      	mov	r5, r2
 800ad16:	461e      	mov	r6, r3
 800ad18:	da0d      	bge.n	800ad36 <__swhatbuf_r+0x2e>
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad20:	f04f 0100 	mov.w	r1, #0
 800ad24:	bf14      	ite	ne
 800ad26:	2340      	movne	r3, #64	@ 0x40
 800ad28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	6031      	str	r1, [r6, #0]
 800ad30:	602b      	str	r3, [r5, #0]
 800ad32:	b016      	add	sp, #88	@ 0x58
 800ad34:	bd70      	pop	{r4, r5, r6, pc}
 800ad36:	466a      	mov	r2, sp
 800ad38:	f000 f874 	bl	800ae24 <_fstat_r>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	dbec      	blt.n	800ad1a <__swhatbuf_r+0x12>
 800ad40:	9901      	ldr	r1, [sp, #4]
 800ad42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad4a:	4259      	negs	r1, r3
 800ad4c:	4159      	adcs	r1, r3
 800ad4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad52:	e7eb      	b.n	800ad2c <__swhatbuf_r+0x24>

0800ad54 <__smakebuf_r>:
 800ad54:	898b      	ldrh	r3, [r1, #12]
 800ad56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad58:	079d      	lsls	r5, r3, #30
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	d507      	bpl.n	800ad70 <__smakebuf_r+0x1c>
 800ad60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	6123      	str	r3, [r4, #16]
 800ad68:	2301      	movs	r3, #1
 800ad6a:	6163      	str	r3, [r4, #20]
 800ad6c:	b003      	add	sp, #12
 800ad6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad70:	ab01      	add	r3, sp, #4
 800ad72:	466a      	mov	r2, sp
 800ad74:	f7ff ffc8 	bl	800ad08 <__swhatbuf_r>
 800ad78:	9f00      	ldr	r7, [sp, #0]
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	4639      	mov	r1, r7
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7fe f93e 	bl	8009000 <_malloc_r>
 800ad84:	b948      	cbnz	r0, 800ad9a <__smakebuf_r+0x46>
 800ad86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad8a:	059a      	lsls	r2, r3, #22
 800ad8c:	d4ee      	bmi.n	800ad6c <__smakebuf_r+0x18>
 800ad8e:	f023 0303 	bic.w	r3, r3, #3
 800ad92:	f043 0302 	orr.w	r3, r3, #2
 800ad96:	81a3      	strh	r3, [r4, #12]
 800ad98:	e7e2      	b.n	800ad60 <__smakebuf_r+0xc>
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	6020      	str	r0, [r4, #0]
 800ad9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	9b01      	ldr	r3, [sp, #4]
 800ada6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adaa:	b15b      	cbz	r3, 800adc4 <__smakebuf_r+0x70>
 800adac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adb0:	4630      	mov	r0, r6
 800adb2:	f000 f849 	bl	800ae48 <_isatty_r>
 800adb6:	b128      	cbz	r0, 800adc4 <__smakebuf_r+0x70>
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	f023 0303 	bic.w	r3, r3, #3
 800adbe:	f043 0301 	orr.w	r3, r3, #1
 800adc2:	81a3      	strh	r3, [r4, #12]
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	431d      	orrs	r5, r3
 800adc8:	81a5      	strh	r5, [r4, #12]
 800adca:	e7cf      	b.n	800ad6c <__smakebuf_r+0x18>

0800adcc <memmove>:
 800adcc:	4288      	cmp	r0, r1
 800adce:	b510      	push	{r4, lr}
 800add0:	eb01 0402 	add.w	r4, r1, r2
 800add4:	d902      	bls.n	800addc <memmove+0x10>
 800add6:	4284      	cmp	r4, r0
 800add8:	4623      	mov	r3, r4
 800adda:	d807      	bhi.n	800adec <memmove+0x20>
 800addc:	1e43      	subs	r3, r0, #1
 800adde:	42a1      	cmp	r1, r4
 800ade0:	d008      	beq.n	800adf4 <memmove+0x28>
 800ade2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ade6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adea:	e7f8      	b.n	800adde <memmove+0x12>
 800adec:	4402      	add	r2, r0
 800adee:	4601      	mov	r1, r0
 800adf0:	428a      	cmp	r2, r1
 800adf2:	d100      	bne.n	800adf6 <memmove+0x2a>
 800adf4:	bd10      	pop	{r4, pc}
 800adf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adfe:	e7f7      	b.n	800adf0 <memmove+0x24>

0800ae00 <strncmp>:
 800ae00:	b510      	push	{r4, lr}
 800ae02:	b16a      	cbz	r2, 800ae20 <strncmp+0x20>
 800ae04:	3901      	subs	r1, #1
 800ae06:	1884      	adds	r4, r0, r2
 800ae08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d103      	bne.n	800ae1c <strncmp+0x1c>
 800ae14:	42a0      	cmp	r0, r4
 800ae16:	d001      	beq.n	800ae1c <strncmp+0x1c>
 800ae18:	2a00      	cmp	r2, #0
 800ae1a:	d1f5      	bne.n	800ae08 <strncmp+0x8>
 800ae1c:	1ad0      	subs	r0, r2, r3
 800ae1e:	bd10      	pop	{r4, pc}
 800ae20:	4610      	mov	r0, r2
 800ae22:	e7fc      	b.n	800ae1e <strncmp+0x1e>

0800ae24 <_fstat_r>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	4d07      	ldr	r5, [pc, #28]	@ (800ae44 <_fstat_r+0x20>)
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	4608      	mov	r0, r1
 800ae2e:	4611      	mov	r1, r2
 800ae30:	602b      	str	r3, [r5, #0]
 800ae32:	f7f7 fb3b 	bl	80024ac <_fstat>
 800ae36:	1c43      	adds	r3, r0, #1
 800ae38:	d102      	bne.n	800ae40 <_fstat_r+0x1c>
 800ae3a:	682b      	ldr	r3, [r5, #0]
 800ae3c:	b103      	cbz	r3, 800ae40 <_fstat_r+0x1c>
 800ae3e:	6023      	str	r3, [r4, #0]
 800ae40:	bd38      	pop	{r3, r4, r5, pc}
 800ae42:	bf00      	nop
 800ae44:	20000620 	.word	0x20000620

0800ae48 <_isatty_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4d06      	ldr	r5, [pc, #24]	@ (800ae64 <_isatty_r+0x1c>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4604      	mov	r4, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	602b      	str	r3, [r5, #0]
 800ae54:	f7f7 fb3a 	bl	80024cc <_isatty>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_isatty_r+0x1a>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_isatty_r+0x1a>
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	20000620 	.word	0x20000620

0800ae68 <_sbrk_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4d06      	ldr	r5, [pc, #24]	@ (800ae84 <_sbrk_r+0x1c>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	602b      	str	r3, [r5, #0]
 800ae74:	f7f7 fb42 	bl	80024fc <_sbrk>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_sbrk_r+0x1a>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_sbrk_r+0x1a>
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	20000620 	.word	0x20000620

0800ae88 <memcpy>:
 800ae88:	440a      	add	r2, r1
 800ae8a:	4291      	cmp	r1, r2
 800ae8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae90:	d100      	bne.n	800ae94 <memcpy+0xc>
 800ae92:	4770      	bx	lr
 800ae94:	b510      	push	{r4, lr}
 800ae96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae9e:	4291      	cmp	r1, r2
 800aea0:	d1f9      	bne.n	800ae96 <memcpy+0xe>
 800aea2:	bd10      	pop	{r4, pc}
 800aea4:	0000      	movs	r0, r0
	...

0800aea8 <nan>:
 800aea8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aeb0 <nan+0x8>
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	00000000 	.word	0x00000000
 800aeb4:	7ff80000 	.word	0x7ff80000

0800aeb8 <__assert_func>:
 800aeb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeba:	4614      	mov	r4, r2
 800aebc:	461a      	mov	r2, r3
 800aebe:	4b09      	ldr	r3, [pc, #36]	@ (800aee4 <__assert_func+0x2c>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4605      	mov	r5, r0
 800aec4:	68d8      	ldr	r0, [r3, #12]
 800aec6:	b14c      	cbz	r4, 800aedc <__assert_func+0x24>
 800aec8:	4b07      	ldr	r3, [pc, #28]	@ (800aee8 <__assert_func+0x30>)
 800aeca:	9100      	str	r1, [sp, #0]
 800aecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aed0:	4906      	ldr	r1, [pc, #24]	@ (800aeec <__assert_func+0x34>)
 800aed2:	462b      	mov	r3, r5
 800aed4:	f000 fba8 	bl	800b628 <fiprintf>
 800aed8:	f000 fbb8 	bl	800b64c <abort>
 800aedc:	4b04      	ldr	r3, [pc, #16]	@ (800aef0 <__assert_func+0x38>)
 800aede:	461c      	mov	r4, r3
 800aee0:	e7f3      	b.n	800aeca <__assert_func+0x12>
 800aee2:	bf00      	nop
 800aee4:	20000060 	.word	0x20000060
 800aee8:	0800bb8b 	.word	0x0800bb8b
 800aeec:	0800bb98 	.word	0x0800bb98
 800aef0:	0800bbc6 	.word	0x0800bbc6

0800aef4 <_calloc_r>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	fba1 5402 	umull	r5, r4, r1, r2
 800aefa:	b934      	cbnz	r4, 800af0a <_calloc_r+0x16>
 800aefc:	4629      	mov	r1, r5
 800aefe:	f7fe f87f 	bl	8009000 <_malloc_r>
 800af02:	4606      	mov	r6, r0
 800af04:	b928      	cbnz	r0, 800af12 <_calloc_r+0x1e>
 800af06:	4630      	mov	r0, r6
 800af08:	bd70      	pop	{r4, r5, r6, pc}
 800af0a:	220c      	movs	r2, #12
 800af0c:	6002      	str	r2, [r0, #0]
 800af0e:	2600      	movs	r6, #0
 800af10:	e7f9      	b.n	800af06 <_calloc_r+0x12>
 800af12:	462a      	mov	r2, r5
 800af14:	4621      	mov	r1, r4
 800af16:	f7fd f91f 	bl	8008158 <memset>
 800af1a:	e7f4      	b.n	800af06 <_calloc_r+0x12>

0800af1c <rshift>:
 800af1c:	6903      	ldr	r3, [r0, #16]
 800af1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800af2a:	f100 0414 	add.w	r4, r0, #20
 800af2e:	dd45      	ble.n	800afbc <rshift+0xa0>
 800af30:	f011 011f 	ands.w	r1, r1, #31
 800af34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af3c:	d10c      	bne.n	800af58 <rshift+0x3c>
 800af3e:	f100 0710 	add.w	r7, r0, #16
 800af42:	4629      	mov	r1, r5
 800af44:	42b1      	cmp	r1, r6
 800af46:	d334      	bcc.n	800afb2 <rshift+0x96>
 800af48:	1a9b      	subs	r3, r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	1eea      	subs	r2, r5, #3
 800af4e:	4296      	cmp	r6, r2
 800af50:	bf38      	it	cc
 800af52:	2300      	movcc	r3, #0
 800af54:	4423      	add	r3, r4
 800af56:	e015      	b.n	800af84 <rshift+0x68>
 800af58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af5c:	f1c1 0820 	rsb	r8, r1, #32
 800af60:	40cf      	lsrs	r7, r1
 800af62:	f105 0e04 	add.w	lr, r5, #4
 800af66:	46a1      	mov	r9, r4
 800af68:	4576      	cmp	r6, lr
 800af6a:	46f4      	mov	ip, lr
 800af6c:	d815      	bhi.n	800af9a <rshift+0x7e>
 800af6e:	1a9a      	subs	r2, r3, r2
 800af70:	0092      	lsls	r2, r2, #2
 800af72:	3a04      	subs	r2, #4
 800af74:	3501      	adds	r5, #1
 800af76:	42ae      	cmp	r6, r5
 800af78:	bf38      	it	cc
 800af7a:	2200      	movcc	r2, #0
 800af7c:	18a3      	adds	r3, r4, r2
 800af7e:	50a7      	str	r7, [r4, r2]
 800af80:	b107      	cbz	r7, 800af84 <rshift+0x68>
 800af82:	3304      	adds	r3, #4
 800af84:	1b1a      	subs	r2, r3, r4
 800af86:	42a3      	cmp	r3, r4
 800af88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af8c:	bf08      	it	eq
 800af8e:	2300      	moveq	r3, #0
 800af90:	6102      	str	r2, [r0, #16]
 800af92:	bf08      	it	eq
 800af94:	6143      	streq	r3, [r0, #20]
 800af96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af9a:	f8dc c000 	ldr.w	ip, [ip]
 800af9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800afa2:	ea4c 0707 	orr.w	r7, ip, r7
 800afa6:	f849 7b04 	str.w	r7, [r9], #4
 800afaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afae:	40cf      	lsrs	r7, r1
 800afb0:	e7da      	b.n	800af68 <rshift+0x4c>
 800afb2:	f851 cb04 	ldr.w	ip, [r1], #4
 800afb6:	f847 cf04 	str.w	ip, [r7, #4]!
 800afba:	e7c3      	b.n	800af44 <rshift+0x28>
 800afbc:	4623      	mov	r3, r4
 800afbe:	e7e1      	b.n	800af84 <rshift+0x68>

0800afc0 <__hexdig_fun>:
 800afc0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800afc4:	2b09      	cmp	r3, #9
 800afc6:	d802      	bhi.n	800afce <__hexdig_fun+0xe>
 800afc8:	3820      	subs	r0, #32
 800afca:	b2c0      	uxtb	r0, r0
 800afcc:	4770      	bx	lr
 800afce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800afd2:	2b05      	cmp	r3, #5
 800afd4:	d801      	bhi.n	800afda <__hexdig_fun+0x1a>
 800afd6:	3847      	subs	r0, #71	@ 0x47
 800afd8:	e7f7      	b.n	800afca <__hexdig_fun+0xa>
 800afda:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800afde:	2b05      	cmp	r3, #5
 800afe0:	d801      	bhi.n	800afe6 <__hexdig_fun+0x26>
 800afe2:	3827      	subs	r0, #39	@ 0x27
 800afe4:	e7f1      	b.n	800afca <__hexdig_fun+0xa>
 800afe6:	2000      	movs	r0, #0
 800afe8:	4770      	bx	lr
	...

0800afec <__gethex>:
 800afec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff0:	b085      	sub	sp, #20
 800aff2:	468a      	mov	sl, r1
 800aff4:	9302      	str	r3, [sp, #8]
 800aff6:	680b      	ldr	r3, [r1, #0]
 800aff8:	9001      	str	r0, [sp, #4]
 800affa:	4690      	mov	r8, r2
 800affc:	1c9c      	adds	r4, r3, #2
 800affe:	46a1      	mov	r9, r4
 800b000:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b004:	2830      	cmp	r0, #48	@ 0x30
 800b006:	d0fa      	beq.n	800affe <__gethex+0x12>
 800b008:	eba9 0303 	sub.w	r3, r9, r3
 800b00c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b010:	f7ff ffd6 	bl	800afc0 <__hexdig_fun>
 800b014:	4605      	mov	r5, r0
 800b016:	2800      	cmp	r0, #0
 800b018:	d168      	bne.n	800b0ec <__gethex+0x100>
 800b01a:	49a0      	ldr	r1, [pc, #640]	@ (800b29c <__gethex+0x2b0>)
 800b01c:	2201      	movs	r2, #1
 800b01e:	4648      	mov	r0, r9
 800b020:	f7ff feee 	bl	800ae00 <strncmp>
 800b024:	4607      	mov	r7, r0
 800b026:	2800      	cmp	r0, #0
 800b028:	d167      	bne.n	800b0fa <__gethex+0x10e>
 800b02a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b02e:	4626      	mov	r6, r4
 800b030:	f7ff ffc6 	bl	800afc0 <__hexdig_fun>
 800b034:	2800      	cmp	r0, #0
 800b036:	d062      	beq.n	800b0fe <__gethex+0x112>
 800b038:	4623      	mov	r3, r4
 800b03a:	7818      	ldrb	r0, [r3, #0]
 800b03c:	2830      	cmp	r0, #48	@ 0x30
 800b03e:	4699      	mov	r9, r3
 800b040:	f103 0301 	add.w	r3, r3, #1
 800b044:	d0f9      	beq.n	800b03a <__gethex+0x4e>
 800b046:	f7ff ffbb 	bl	800afc0 <__hexdig_fun>
 800b04a:	fab0 f580 	clz	r5, r0
 800b04e:	096d      	lsrs	r5, r5, #5
 800b050:	f04f 0b01 	mov.w	fp, #1
 800b054:	464a      	mov	r2, r9
 800b056:	4616      	mov	r6, r2
 800b058:	3201      	adds	r2, #1
 800b05a:	7830      	ldrb	r0, [r6, #0]
 800b05c:	f7ff ffb0 	bl	800afc0 <__hexdig_fun>
 800b060:	2800      	cmp	r0, #0
 800b062:	d1f8      	bne.n	800b056 <__gethex+0x6a>
 800b064:	498d      	ldr	r1, [pc, #564]	@ (800b29c <__gethex+0x2b0>)
 800b066:	2201      	movs	r2, #1
 800b068:	4630      	mov	r0, r6
 800b06a:	f7ff fec9 	bl	800ae00 <strncmp>
 800b06e:	2800      	cmp	r0, #0
 800b070:	d13f      	bne.n	800b0f2 <__gethex+0x106>
 800b072:	b944      	cbnz	r4, 800b086 <__gethex+0x9a>
 800b074:	1c74      	adds	r4, r6, #1
 800b076:	4622      	mov	r2, r4
 800b078:	4616      	mov	r6, r2
 800b07a:	3201      	adds	r2, #1
 800b07c:	7830      	ldrb	r0, [r6, #0]
 800b07e:	f7ff ff9f 	bl	800afc0 <__hexdig_fun>
 800b082:	2800      	cmp	r0, #0
 800b084:	d1f8      	bne.n	800b078 <__gethex+0x8c>
 800b086:	1ba4      	subs	r4, r4, r6
 800b088:	00a7      	lsls	r7, r4, #2
 800b08a:	7833      	ldrb	r3, [r6, #0]
 800b08c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b090:	2b50      	cmp	r3, #80	@ 0x50
 800b092:	d13e      	bne.n	800b112 <__gethex+0x126>
 800b094:	7873      	ldrb	r3, [r6, #1]
 800b096:	2b2b      	cmp	r3, #43	@ 0x2b
 800b098:	d033      	beq.n	800b102 <__gethex+0x116>
 800b09a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b09c:	d034      	beq.n	800b108 <__gethex+0x11c>
 800b09e:	1c71      	adds	r1, r6, #1
 800b0a0:	2400      	movs	r4, #0
 800b0a2:	7808      	ldrb	r0, [r1, #0]
 800b0a4:	f7ff ff8c 	bl	800afc0 <__hexdig_fun>
 800b0a8:	1e43      	subs	r3, r0, #1
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	2b18      	cmp	r3, #24
 800b0ae:	d830      	bhi.n	800b112 <__gethex+0x126>
 800b0b0:	f1a0 0210 	sub.w	r2, r0, #16
 800b0b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b0b8:	f7ff ff82 	bl	800afc0 <__hexdig_fun>
 800b0bc:	f100 3cff 	add.w	ip, r0, #4294967295
 800b0c0:	fa5f fc8c 	uxtb.w	ip, ip
 800b0c4:	f1bc 0f18 	cmp.w	ip, #24
 800b0c8:	f04f 030a 	mov.w	r3, #10
 800b0cc:	d91e      	bls.n	800b10c <__gethex+0x120>
 800b0ce:	b104      	cbz	r4, 800b0d2 <__gethex+0xe6>
 800b0d0:	4252      	negs	r2, r2
 800b0d2:	4417      	add	r7, r2
 800b0d4:	f8ca 1000 	str.w	r1, [sl]
 800b0d8:	b1ed      	cbz	r5, 800b116 <__gethex+0x12a>
 800b0da:	f1bb 0f00 	cmp.w	fp, #0
 800b0de:	bf0c      	ite	eq
 800b0e0:	2506      	moveq	r5, #6
 800b0e2:	2500      	movne	r5, #0
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	b005      	add	sp, #20
 800b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ec:	2500      	movs	r5, #0
 800b0ee:	462c      	mov	r4, r5
 800b0f0:	e7b0      	b.n	800b054 <__gethex+0x68>
 800b0f2:	2c00      	cmp	r4, #0
 800b0f4:	d1c7      	bne.n	800b086 <__gethex+0x9a>
 800b0f6:	4627      	mov	r7, r4
 800b0f8:	e7c7      	b.n	800b08a <__gethex+0x9e>
 800b0fa:	464e      	mov	r6, r9
 800b0fc:	462f      	mov	r7, r5
 800b0fe:	2501      	movs	r5, #1
 800b100:	e7c3      	b.n	800b08a <__gethex+0x9e>
 800b102:	2400      	movs	r4, #0
 800b104:	1cb1      	adds	r1, r6, #2
 800b106:	e7cc      	b.n	800b0a2 <__gethex+0xb6>
 800b108:	2401      	movs	r4, #1
 800b10a:	e7fb      	b.n	800b104 <__gethex+0x118>
 800b10c:	fb03 0002 	mla	r0, r3, r2, r0
 800b110:	e7ce      	b.n	800b0b0 <__gethex+0xc4>
 800b112:	4631      	mov	r1, r6
 800b114:	e7de      	b.n	800b0d4 <__gethex+0xe8>
 800b116:	eba6 0309 	sub.w	r3, r6, r9
 800b11a:	3b01      	subs	r3, #1
 800b11c:	4629      	mov	r1, r5
 800b11e:	2b07      	cmp	r3, #7
 800b120:	dc0a      	bgt.n	800b138 <__gethex+0x14c>
 800b122:	9801      	ldr	r0, [sp, #4]
 800b124:	f7fd fff8 	bl	8009118 <_Balloc>
 800b128:	4604      	mov	r4, r0
 800b12a:	b940      	cbnz	r0, 800b13e <__gethex+0x152>
 800b12c:	4b5c      	ldr	r3, [pc, #368]	@ (800b2a0 <__gethex+0x2b4>)
 800b12e:	4602      	mov	r2, r0
 800b130:	21e4      	movs	r1, #228	@ 0xe4
 800b132:	485c      	ldr	r0, [pc, #368]	@ (800b2a4 <__gethex+0x2b8>)
 800b134:	f7ff fec0 	bl	800aeb8 <__assert_func>
 800b138:	3101      	adds	r1, #1
 800b13a:	105b      	asrs	r3, r3, #1
 800b13c:	e7ef      	b.n	800b11e <__gethex+0x132>
 800b13e:	f100 0a14 	add.w	sl, r0, #20
 800b142:	2300      	movs	r3, #0
 800b144:	4655      	mov	r5, sl
 800b146:	469b      	mov	fp, r3
 800b148:	45b1      	cmp	r9, r6
 800b14a:	d337      	bcc.n	800b1bc <__gethex+0x1d0>
 800b14c:	f845 bb04 	str.w	fp, [r5], #4
 800b150:	eba5 050a 	sub.w	r5, r5, sl
 800b154:	10ad      	asrs	r5, r5, #2
 800b156:	6125      	str	r5, [r4, #16]
 800b158:	4658      	mov	r0, fp
 800b15a:	f7fe f8cf 	bl	80092fc <__hi0bits>
 800b15e:	016d      	lsls	r5, r5, #5
 800b160:	f8d8 6000 	ldr.w	r6, [r8]
 800b164:	1a2d      	subs	r5, r5, r0
 800b166:	42b5      	cmp	r5, r6
 800b168:	dd54      	ble.n	800b214 <__gethex+0x228>
 800b16a:	1bad      	subs	r5, r5, r6
 800b16c:	4629      	mov	r1, r5
 800b16e:	4620      	mov	r0, r4
 800b170:	f7fe fc5b 	bl	8009a2a <__any_on>
 800b174:	4681      	mov	r9, r0
 800b176:	b178      	cbz	r0, 800b198 <__gethex+0x1ac>
 800b178:	1e6b      	subs	r3, r5, #1
 800b17a:	1159      	asrs	r1, r3, #5
 800b17c:	f003 021f 	and.w	r2, r3, #31
 800b180:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b184:	f04f 0901 	mov.w	r9, #1
 800b188:	fa09 f202 	lsl.w	r2, r9, r2
 800b18c:	420a      	tst	r2, r1
 800b18e:	d003      	beq.n	800b198 <__gethex+0x1ac>
 800b190:	454b      	cmp	r3, r9
 800b192:	dc36      	bgt.n	800b202 <__gethex+0x216>
 800b194:	f04f 0902 	mov.w	r9, #2
 800b198:	4629      	mov	r1, r5
 800b19a:	4620      	mov	r0, r4
 800b19c:	f7ff febe 	bl	800af1c <rshift>
 800b1a0:	442f      	add	r7, r5
 800b1a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1a6:	42bb      	cmp	r3, r7
 800b1a8:	da42      	bge.n	800b230 <__gethex+0x244>
 800b1aa:	9801      	ldr	r0, [sp, #4]
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	f7fd fff3 	bl	8009198 <_Bfree>
 800b1b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	25a3      	movs	r5, #163	@ 0xa3
 800b1ba:	e793      	b.n	800b0e4 <__gethex+0xf8>
 800b1bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b1c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b1c2:	d012      	beq.n	800b1ea <__gethex+0x1fe>
 800b1c4:	2b20      	cmp	r3, #32
 800b1c6:	d104      	bne.n	800b1d2 <__gethex+0x1e6>
 800b1c8:	f845 bb04 	str.w	fp, [r5], #4
 800b1cc:	f04f 0b00 	mov.w	fp, #0
 800b1d0:	465b      	mov	r3, fp
 800b1d2:	7830      	ldrb	r0, [r6, #0]
 800b1d4:	9303      	str	r3, [sp, #12]
 800b1d6:	f7ff fef3 	bl	800afc0 <__hexdig_fun>
 800b1da:	9b03      	ldr	r3, [sp, #12]
 800b1dc:	f000 000f 	and.w	r0, r0, #15
 800b1e0:	4098      	lsls	r0, r3
 800b1e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	e7ae      	b.n	800b148 <__gethex+0x15c>
 800b1ea:	45b1      	cmp	r9, r6
 800b1ec:	d8ea      	bhi.n	800b1c4 <__gethex+0x1d8>
 800b1ee:	492b      	ldr	r1, [pc, #172]	@ (800b29c <__gethex+0x2b0>)
 800b1f0:	9303      	str	r3, [sp, #12]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f7ff fe03 	bl	800ae00 <strncmp>
 800b1fa:	9b03      	ldr	r3, [sp, #12]
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d1e1      	bne.n	800b1c4 <__gethex+0x1d8>
 800b200:	e7a2      	b.n	800b148 <__gethex+0x15c>
 800b202:	1ea9      	subs	r1, r5, #2
 800b204:	4620      	mov	r0, r4
 800b206:	f7fe fc10 	bl	8009a2a <__any_on>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d0c2      	beq.n	800b194 <__gethex+0x1a8>
 800b20e:	f04f 0903 	mov.w	r9, #3
 800b212:	e7c1      	b.n	800b198 <__gethex+0x1ac>
 800b214:	da09      	bge.n	800b22a <__gethex+0x23e>
 800b216:	1b75      	subs	r5, r6, r5
 800b218:	4621      	mov	r1, r4
 800b21a:	9801      	ldr	r0, [sp, #4]
 800b21c:	462a      	mov	r2, r5
 800b21e:	f7fe f9cb 	bl	80095b8 <__lshift>
 800b222:	1b7f      	subs	r7, r7, r5
 800b224:	4604      	mov	r4, r0
 800b226:	f100 0a14 	add.w	sl, r0, #20
 800b22a:	f04f 0900 	mov.w	r9, #0
 800b22e:	e7b8      	b.n	800b1a2 <__gethex+0x1b6>
 800b230:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b234:	42bd      	cmp	r5, r7
 800b236:	dd6f      	ble.n	800b318 <__gethex+0x32c>
 800b238:	1bed      	subs	r5, r5, r7
 800b23a:	42ae      	cmp	r6, r5
 800b23c:	dc34      	bgt.n	800b2a8 <__gethex+0x2bc>
 800b23e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b242:	2b02      	cmp	r3, #2
 800b244:	d022      	beq.n	800b28c <__gethex+0x2a0>
 800b246:	2b03      	cmp	r3, #3
 800b248:	d024      	beq.n	800b294 <__gethex+0x2a8>
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d115      	bne.n	800b27a <__gethex+0x28e>
 800b24e:	42ae      	cmp	r6, r5
 800b250:	d113      	bne.n	800b27a <__gethex+0x28e>
 800b252:	2e01      	cmp	r6, #1
 800b254:	d10b      	bne.n	800b26e <__gethex+0x282>
 800b256:	9a02      	ldr	r2, [sp, #8]
 800b258:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b25c:	6013      	str	r3, [r2, #0]
 800b25e:	2301      	movs	r3, #1
 800b260:	6123      	str	r3, [r4, #16]
 800b262:	f8ca 3000 	str.w	r3, [sl]
 800b266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b268:	2562      	movs	r5, #98	@ 0x62
 800b26a:	601c      	str	r4, [r3, #0]
 800b26c:	e73a      	b.n	800b0e4 <__gethex+0xf8>
 800b26e:	1e71      	subs	r1, r6, #1
 800b270:	4620      	mov	r0, r4
 800b272:	f7fe fbda 	bl	8009a2a <__any_on>
 800b276:	2800      	cmp	r0, #0
 800b278:	d1ed      	bne.n	800b256 <__gethex+0x26a>
 800b27a:	9801      	ldr	r0, [sp, #4]
 800b27c:	4621      	mov	r1, r4
 800b27e:	f7fd ff8b 	bl	8009198 <_Bfree>
 800b282:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b284:	2300      	movs	r3, #0
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	2550      	movs	r5, #80	@ 0x50
 800b28a:	e72b      	b.n	800b0e4 <__gethex+0xf8>
 800b28c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1f3      	bne.n	800b27a <__gethex+0x28e>
 800b292:	e7e0      	b.n	800b256 <__gethex+0x26a>
 800b294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1dd      	bne.n	800b256 <__gethex+0x26a>
 800b29a:	e7ee      	b.n	800b27a <__gethex+0x28e>
 800b29c:	0800bb70 	.word	0x0800bb70
 800b2a0:	0800bb06 	.word	0x0800bb06
 800b2a4:	0800bbc7 	.word	0x0800bbc7
 800b2a8:	1e6f      	subs	r7, r5, #1
 800b2aa:	f1b9 0f00 	cmp.w	r9, #0
 800b2ae:	d130      	bne.n	800b312 <__gethex+0x326>
 800b2b0:	b127      	cbz	r7, 800b2bc <__gethex+0x2d0>
 800b2b2:	4639      	mov	r1, r7
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f7fe fbb8 	bl	8009a2a <__any_on>
 800b2ba:	4681      	mov	r9, r0
 800b2bc:	117a      	asrs	r2, r7, #5
 800b2be:	2301      	movs	r3, #1
 800b2c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b2c4:	f007 071f 	and.w	r7, r7, #31
 800b2c8:	40bb      	lsls	r3, r7
 800b2ca:	4213      	tst	r3, r2
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	bf18      	it	ne
 800b2d2:	f049 0902 	orrne.w	r9, r9, #2
 800b2d6:	f7ff fe21 	bl	800af1c <rshift>
 800b2da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b2de:	1b76      	subs	r6, r6, r5
 800b2e0:	2502      	movs	r5, #2
 800b2e2:	f1b9 0f00 	cmp.w	r9, #0
 800b2e6:	d047      	beq.n	800b378 <__gethex+0x38c>
 800b2e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d015      	beq.n	800b31c <__gethex+0x330>
 800b2f0:	2b03      	cmp	r3, #3
 800b2f2:	d017      	beq.n	800b324 <__gethex+0x338>
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d109      	bne.n	800b30c <__gethex+0x320>
 800b2f8:	f019 0f02 	tst.w	r9, #2
 800b2fc:	d006      	beq.n	800b30c <__gethex+0x320>
 800b2fe:	f8da 3000 	ldr.w	r3, [sl]
 800b302:	ea49 0903 	orr.w	r9, r9, r3
 800b306:	f019 0f01 	tst.w	r9, #1
 800b30a:	d10e      	bne.n	800b32a <__gethex+0x33e>
 800b30c:	f045 0510 	orr.w	r5, r5, #16
 800b310:	e032      	b.n	800b378 <__gethex+0x38c>
 800b312:	f04f 0901 	mov.w	r9, #1
 800b316:	e7d1      	b.n	800b2bc <__gethex+0x2d0>
 800b318:	2501      	movs	r5, #1
 800b31a:	e7e2      	b.n	800b2e2 <__gethex+0x2f6>
 800b31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b31e:	f1c3 0301 	rsb	r3, r3, #1
 800b322:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b326:	2b00      	cmp	r3, #0
 800b328:	d0f0      	beq.n	800b30c <__gethex+0x320>
 800b32a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b32e:	f104 0314 	add.w	r3, r4, #20
 800b332:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b336:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b33a:	f04f 0c00 	mov.w	ip, #0
 800b33e:	4618      	mov	r0, r3
 800b340:	f853 2b04 	ldr.w	r2, [r3], #4
 800b344:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b348:	d01b      	beq.n	800b382 <__gethex+0x396>
 800b34a:	3201      	adds	r2, #1
 800b34c:	6002      	str	r2, [r0, #0]
 800b34e:	2d02      	cmp	r5, #2
 800b350:	f104 0314 	add.w	r3, r4, #20
 800b354:	d13c      	bne.n	800b3d0 <__gethex+0x3e4>
 800b356:	f8d8 2000 	ldr.w	r2, [r8]
 800b35a:	3a01      	subs	r2, #1
 800b35c:	42b2      	cmp	r2, r6
 800b35e:	d109      	bne.n	800b374 <__gethex+0x388>
 800b360:	1171      	asrs	r1, r6, #5
 800b362:	2201      	movs	r2, #1
 800b364:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b368:	f006 061f 	and.w	r6, r6, #31
 800b36c:	fa02 f606 	lsl.w	r6, r2, r6
 800b370:	421e      	tst	r6, r3
 800b372:	d13a      	bne.n	800b3ea <__gethex+0x3fe>
 800b374:	f045 0520 	orr.w	r5, r5, #32
 800b378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b37a:	601c      	str	r4, [r3, #0]
 800b37c:	9b02      	ldr	r3, [sp, #8]
 800b37e:	601f      	str	r7, [r3, #0]
 800b380:	e6b0      	b.n	800b0e4 <__gethex+0xf8>
 800b382:	4299      	cmp	r1, r3
 800b384:	f843 cc04 	str.w	ip, [r3, #-4]
 800b388:	d8d9      	bhi.n	800b33e <__gethex+0x352>
 800b38a:	68a3      	ldr	r3, [r4, #8]
 800b38c:	459b      	cmp	fp, r3
 800b38e:	db17      	blt.n	800b3c0 <__gethex+0x3d4>
 800b390:	6861      	ldr	r1, [r4, #4]
 800b392:	9801      	ldr	r0, [sp, #4]
 800b394:	3101      	adds	r1, #1
 800b396:	f7fd febf 	bl	8009118 <_Balloc>
 800b39a:	4681      	mov	r9, r0
 800b39c:	b918      	cbnz	r0, 800b3a6 <__gethex+0x3ba>
 800b39e:	4b1a      	ldr	r3, [pc, #104]	@ (800b408 <__gethex+0x41c>)
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	2184      	movs	r1, #132	@ 0x84
 800b3a4:	e6c5      	b.n	800b132 <__gethex+0x146>
 800b3a6:	6922      	ldr	r2, [r4, #16]
 800b3a8:	3202      	adds	r2, #2
 800b3aa:	f104 010c 	add.w	r1, r4, #12
 800b3ae:	0092      	lsls	r2, r2, #2
 800b3b0:	300c      	adds	r0, #12
 800b3b2:	f7ff fd69 	bl	800ae88 <memcpy>
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	9801      	ldr	r0, [sp, #4]
 800b3ba:	f7fd feed 	bl	8009198 <_Bfree>
 800b3be:	464c      	mov	r4, r9
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b3c8:	6122      	str	r2, [r4, #16]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	615a      	str	r2, [r3, #20]
 800b3ce:	e7be      	b.n	800b34e <__gethex+0x362>
 800b3d0:	6922      	ldr	r2, [r4, #16]
 800b3d2:	455a      	cmp	r2, fp
 800b3d4:	dd0b      	ble.n	800b3ee <__gethex+0x402>
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f7ff fd9f 	bl	800af1c <rshift>
 800b3de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3e2:	3701      	adds	r7, #1
 800b3e4:	42bb      	cmp	r3, r7
 800b3e6:	f6ff aee0 	blt.w	800b1aa <__gethex+0x1be>
 800b3ea:	2501      	movs	r5, #1
 800b3ec:	e7c2      	b.n	800b374 <__gethex+0x388>
 800b3ee:	f016 061f 	ands.w	r6, r6, #31
 800b3f2:	d0fa      	beq.n	800b3ea <__gethex+0x3fe>
 800b3f4:	4453      	add	r3, sl
 800b3f6:	f1c6 0620 	rsb	r6, r6, #32
 800b3fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3fe:	f7fd ff7d 	bl	80092fc <__hi0bits>
 800b402:	42b0      	cmp	r0, r6
 800b404:	dbe7      	blt.n	800b3d6 <__gethex+0x3ea>
 800b406:	e7f0      	b.n	800b3ea <__gethex+0x3fe>
 800b408:	0800bb06 	.word	0x0800bb06

0800b40c <L_shift>:
 800b40c:	f1c2 0208 	rsb	r2, r2, #8
 800b410:	0092      	lsls	r2, r2, #2
 800b412:	b570      	push	{r4, r5, r6, lr}
 800b414:	f1c2 0620 	rsb	r6, r2, #32
 800b418:	6843      	ldr	r3, [r0, #4]
 800b41a:	6804      	ldr	r4, [r0, #0]
 800b41c:	fa03 f506 	lsl.w	r5, r3, r6
 800b420:	432c      	orrs	r4, r5
 800b422:	40d3      	lsrs	r3, r2
 800b424:	6004      	str	r4, [r0, #0]
 800b426:	f840 3f04 	str.w	r3, [r0, #4]!
 800b42a:	4288      	cmp	r0, r1
 800b42c:	d3f4      	bcc.n	800b418 <L_shift+0xc>
 800b42e:	bd70      	pop	{r4, r5, r6, pc}

0800b430 <__match>:
 800b430:	b530      	push	{r4, r5, lr}
 800b432:	6803      	ldr	r3, [r0, #0]
 800b434:	3301      	adds	r3, #1
 800b436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b43a:	b914      	cbnz	r4, 800b442 <__match+0x12>
 800b43c:	6003      	str	r3, [r0, #0]
 800b43e:	2001      	movs	r0, #1
 800b440:	bd30      	pop	{r4, r5, pc}
 800b442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b446:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b44a:	2d19      	cmp	r5, #25
 800b44c:	bf98      	it	ls
 800b44e:	3220      	addls	r2, #32
 800b450:	42a2      	cmp	r2, r4
 800b452:	d0f0      	beq.n	800b436 <__match+0x6>
 800b454:	2000      	movs	r0, #0
 800b456:	e7f3      	b.n	800b440 <__match+0x10>

0800b458 <__hexnan>:
 800b458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	680b      	ldr	r3, [r1, #0]
 800b45e:	6801      	ldr	r1, [r0, #0]
 800b460:	115e      	asrs	r6, r3, #5
 800b462:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b466:	f013 031f 	ands.w	r3, r3, #31
 800b46a:	b087      	sub	sp, #28
 800b46c:	bf18      	it	ne
 800b46e:	3604      	addne	r6, #4
 800b470:	2500      	movs	r5, #0
 800b472:	1f37      	subs	r7, r6, #4
 800b474:	4682      	mov	sl, r0
 800b476:	4690      	mov	r8, r2
 800b478:	9301      	str	r3, [sp, #4]
 800b47a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b47e:	46b9      	mov	r9, r7
 800b480:	463c      	mov	r4, r7
 800b482:	9502      	str	r5, [sp, #8]
 800b484:	46ab      	mov	fp, r5
 800b486:	784a      	ldrb	r2, [r1, #1]
 800b488:	1c4b      	adds	r3, r1, #1
 800b48a:	9303      	str	r3, [sp, #12]
 800b48c:	b342      	cbz	r2, 800b4e0 <__hexnan+0x88>
 800b48e:	4610      	mov	r0, r2
 800b490:	9105      	str	r1, [sp, #20]
 800b492:	9204      	str	r2, [sp, #16]
 800b494:	f7ff fd94 	bl	800afc0 <__hexdig_fun>
 800b498:	2800      	cmp	r0, #0
 800b49a:	d151      	bne.n	800b540 <__hexnan+0xe8>
 800b49c:	9a04      	ldr	r2, [sp, #16]
 800b49e:	9905      	ldr	r1, [sp, #20]
 800b4a0:	2a20      	cmp	r2, #32
 800b4a2:	d818      	bhi.n	800b4d6 <__hexnan+0x7e>
 800b4a4:	9b02      	ldr	r3, [sp, #8]
 800b4a6:	459b      	cmp	fp, r3
 800b4a8:	dd13      	ble.n	800b4d2 <__hexnan+0x7a>
 800b4aa:	454c      	cmp	r4, r9
 800b4ac:	d206      	bcs.n	800b4bc <__hexnan+0x64>
 800b4ae:	2d07      	cmp	r5, #7
 800b4b0:	dc04      	bgt.n	800b4bc <__hexnan+0x64>
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	4649      	mov	r1, r9
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7ff ffa8 	bl	800b40c <L_shift>
 800b4bc:	4544      	cmp	r4, r8
 800b4be:	d952      	bls.n	800b566 <__hexnan+0x10e>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f1a4 0904 	sub.w	r9, r4, #4
 800b4c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4ca:	f8cd b008 	str.w	fp, [sp, #8]
 800b4ce:	464c      	mov	r4, r9
 800b4d0:	461d      	mov	r5, r3
 800b4d2:	9903      	ldr	r1, [sp, #12]
 800b4d4:	e7d7      	b.n	800b486 <__hexnan+0x2e>
 800b4d6:	2a29      	cmp	r2, #41	@ 0x29
 800b4d8:	d157      	bne.n	800b58a <__hexnan+0x132>
 800b4da:	3102      	adds	r1, #2
 800b4dc:	f8ca 1000 	str.w	r1, [sl]
 800b4e0:	f1bb 0f00 	cmp.w	fp, #0
 800b4e4:	d051      	beq.n	800b58a <__hexnan+0x132>
 800b4e6:	454c      	cmp	r4, r9
 800b4e8:	d206      	bcs.n	800b4f8 <__hexnan+0xa0>
 800b4ea:	2d07      	cmp	r5, #7
 800b4ec:	dc04      	bgt.n	800b4f8 <__hexnan+0xa0>
 800b4ee:	462a      	mov	r2, r5
 800b4f0:	4649      	mov	r1, r9
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f7ff ff8a 	bl	800b40c <L_shift>
 800b4f8:	4544      	cmp	r4, r8
 800b4fa:	d936      	bls.n	800b56a <__hexnan+0x112>
 800b4fc:	f1a8 0204 	sub.w	r2, r8, #4
 800b500:	4623      	mov	r3, r4
 800b502:	f853 1b04 	ldr.w	r1, [r3], #4
 800b506:	f842 1f04 	str.w	r1, [r2, #4]!
 800b50a:	429f      	cmp	r7, r3
 800b50c:	d2f9      	bcs.n	800b502 <__hexnan+0xaa>
 800b50e:	1b3b      	subs	r3, r7, r4
 800b510:	f023 0303 	bic.w	r3, r3, #3
 800b514:	3304      	adds	r3, #4
 800b516:	3401      	adds	r4, #1
 800b518:	3e03      	subs	r6, #3
 800b51a:	42b4      	cmp	r4, r6
 800b51c:	bf88      	it	hi
 800b51e:	2304      	movhi	r3, #4
 800b520:	4443      	add	r3, r8
 800b522:	2200      	movs	r2, #0
 800b524:	f843 2b04 	str.w	r2, [r3], #4
 800b528:	429f      	cmp	r7, r3
 800b52a:	d2fb      	bcs.n	800b524 <__hexnan+0xcc>
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	b91b      	cbnz	r3, 800b538 <__hexnan+0xe0>
 800b530:	4547      	cmp	r7, r8
 800b532:	d128      	bne.n	800b586 <__hexnan+0x12e>
 800b534:	2301      	movs	r3, #1
 800b536:	603b      	str	r3, [r7, #0]
 800b538:	2005      	movs	r0, #5
 800b53a:	b007      	add	sp, #28
 800b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b540:	3501      	adds	r5, #1
 800b542:	2d08      	cmp	r5, #8
 800b544:	f10b 0b01 	add.w	fp, fp, #1
 800b548:	dd06      	ble.n	800b558 <__hexnan+0x100>
 800b54a:	4544      	cmp	r4, r8
 800b54c:	d9c1      	bls.n	800b4d2 <__hexnan+0x7a>
 800b54e:	2300      	movs	r3, #0
 800b550:	f844 3c04 	str.w	r3, [r4, #-4]
 800b554:	2501      	movs	r5, #1
 800b556:	3c04      	subs	r4, #4
 800b558:	6822      	ldr	r2, [r4, #0]
 800b55a:	f000 000f 	and.w	r0, r0, #15
 800b55e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b562:	6020      	str	r0, [r4, #0]
 800b564:	e7b5      	b.n	800b4d2 <__hexnan+0x7a>
 800b566:	2508      	movs	r5, #8
 800b568:	e7b3      	b.n	800b4d2 <__hexnan+0x7a>
 800b56a:	9b01      	ldr	r3, [sp, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d0dd      	beq.n	800b52c <__hexnan+0xd4>
 800b570:	f1c3 0320 	rsb	r3, r3, #32
 800b574:	f04f 32ff 	mov.w	r2, #4294967295
 800b578:	40da      	lsrs	r2, r3
 800b57a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b57e:	4013      	ands	r3, r2
 800b580:	f846 3c04 	str.w	r3, [r6, #-4]
 800b584:	e7d2      	b.n	800b52c <__hexnan+0xd4>
 800b586:	3f04      	subs	r7, #4
 800b588:	e7d0      	b.n	800b52c <__hexnan+0xd4>
 800b58a:	2004      	movs	r0, #4
 800b58c:	e7d5      	b.n	800b53a <__hexnan+0xe2>

0800b58e <__ascii_mbtowc>:
 800b58e:	b082      	sub	sp, #8
 800b590:	b901      	cbnz	r1, 800b594 <__ascii_mbtowc+0x6>
 800b592:	a901      	add	r1, sp, #4
 800b594:	b142      	cbz	r2, 800b5a8 <__ascii_mbtowc+0x1a>
 800b596:	b14b      	cbz	r3, 800b5ac <__ascii_mbtowc+0x1e>
 800b598:	7813      	ldrb	r3, [r2, #0]
 800b59a:	600b      	str	r3, [r1, #0]
 800b59c:	7812      	ldrb	r2, [r2, #0]
 800b59e:	1e10      	subs	r0, r2, #0
 800b5a0:	bf18      	it	ne
 800b5a2:	2001      	movne	r0, #1
 800b5a4:	b002      	add	sp, #8
 800b5a6:	4770      	bx	lr
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	e7fb      	b.n	800b5a4 <__ascii_mbtowc+0x16>
 800b5ac:	f06f 0001 	mvn.w	r0, #1
 800b5b0:	e7f8      	b.n	800b5a4 <__ascii_mbtowc+0x16>

0800b5b2 <_realloc_r>:
 800b5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b6:	4607      	mov	r7, r0
 800b5b8:	4614      	mov	r4, r2
 800b5ba:	460d      	mov	r5, r1
 800b5bc:	b921      	cbnz	r1, 800b5c8 <_realloc_r+0x16>
 800b5be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	f7fd bd1c 	b.w	8009000 <_malloc_r>
 800b5c8:	b92a      	cbnz	r2, 800b5d6 <_realloc_r+0x24>
 800b5ca:	f7fd fca5 	bl	8008f18 <_free_r>
 800b5ce:	4625      	mov	r5, r4
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d6:	f000 f840 	bl	800b65a <_malloc_usable_size_r>
 800b5da:	4284      	cmp	r4, r0
 800b5dc:	4606      	mov	r6, r0
 800b5de:	d802      	bhi.n	800b5e6 <_realloc_r+0x34>
 800b5e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5e4:	d8f4      	bhi.n	800b5d0 <_realloc_r+0x1e>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4638      	mov	r0, r7
 800b5ea:	f7fd fd09 	bl	8009000 <_malloc_r>
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	b908      	cbnz	r0, 800b5f6 <_realloc_r+0x44>
 800b5f2:	4645      	mov	r5, r8
 800b5f4:	e7ec      	b.n	800b5d0 <_realloc_r+0x1e>
 800b5f6:	42b4      	cmp	r4, r6
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	bf28      	it	cs
 800b5fe:	4632      	movcs	r2, r6
 800b600:	f7ff fc42 	bl	800ae88 <memcpy>
 800b604:	4629      	mov	r1, r5
 800b606:	4638      	mov	r0, r7
 800b608:	f7fd fc86 	bl	8008f18 <_free_r>
 800b60c:	e7f1      	b.n	800b5f2 <_realloc_r+0x40>

0800b60e <__ascii_wctomb>:
 800b60e:	4603      	mov	r3, r0
 800b610:	4608      	mov	r0, r1
 800b612:	b141      	cbz	r1, 800b626 <__ascii_wctomb+0x18>
 800b614:	2aff      	cmp	r2, #255	@ 0xff
 800b616:	d904      	bls.n	800b622 <__ascii_wctomb+0x14>
 800b618:	228a      	movs	r2, #138	@ 0x8a
 800b61a:	601a      	str	r2, [r3, #0]
 800b61c:	f04f 30ff 	mov.w	r0, #4294967295
 800b620:	4770      	bx	lr
 800b622:	700a      	strb	r2, [r1, #0]
 800b624:	2001      	movs	r0, #1
 800b626:	4770      	bx	lr

0800b628 <fiprintf>:
 800b628:	b40e      	push	{r1, r2, r3}
 800b62a:	b503      	push	{r0, r1, lr}
 800b62c:	4601      	mov	r1, r0
 800b62e:	ab03      	add	r3, sp, #12
 800b630:	4805      	ldr	r0, [pc, #20]	@ (800b648 <fiprintf+0x20>)
 800b632:	f853 2b04 	ldr.w	r2, [r3], #4
 800b636:	6800      	ldr	r0, [r0, #0]
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	f7ff f9a1 	bl	800a980 <_vfiprintf_r>
 800b63e:	b002      	add	sp, #8
 800b640:	f85d eb04 	ldr.w	lr, [sp], #4
 800b644:	b003      	add	sp, #12
 800b646:	4770      	bx	lr
 800b648:	20000060 	.word	0x20000060

0800b64c <abort>:
 800b64c:	b508      	push	{r3, lr}
 800b64e:	2006      	movs	r0, #6
 800b650:	f000 f834 	bl	800b6bc <raise>
 800b654:	2001      	movs	r0, #1
 800b656:	f7f6 fed9 	bl	800240c <_exit>

0800b65a <_malloc_usable_size_r>:
 800b65a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b65e:	1f18      	subs	r0, r3, #4
 800b660:	2b00      	cmp	r3, #0
 800b662:	bfbc      	itt	lt
 800b664:	580b      	ldrlt	r3, [r1, r0]
 800b666:	18c0      	addlt	r0, r0, r3
 800b668:	4770      	bx	lr

0800b66a <_raise_r>:
 800b66a:	291f      	cmp	r1, #31
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4605      	mov	r5, r0
 800b670:	460c      	mov	r4, r1
 800b672:	d904      	bls.n	800b67e <_raise_r+0x14>
 800b674:	2316      	movs	r3, #22
 800b676:	6003      	str	r3, [r0, #0]
 800b678:	f04f 30ff 	mov.w	r0, #4294967295
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
 800b67e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b680:	b112      	cbz	r2, 800b688 <_raise_r+0x1e>
 800b682:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b686:	b94b      	cbnz	r3, 800b69c <_raise_r+0x32>
 800b688:	4628      	mov	r0, r5
 800b68a:	f000 f831 	bl	800b6f0 <_getpid_r>
 800b68e:	4622      	mov	r2, r4
 800b690:	4601      	mov	r1, r0
 800b692:	4628      	mov	r0, r5
 800b694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b698:	f000 b818 	b.w	800b6cc <_kill_r>
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d00a      	beq.n	800b6b6 <_raise_r+0x4c>
 800b6a0:	1c59      	adds	r1, r3, #1
 800b6a2:	d103      	bne.n	800b6ac <_raise_r+0x42>
 800b6a4:	2316      	movs	r3, #22
 800b6a6:	6003      	str	r3, [r0, #0]
 800b6a8:	2001      	movs	r0, #1
 800b6aa:	e7e7      	b.n	800b67c <_raise_r+0x12>
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	4798      	blx	r3
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	e7e0      	b.n	800b67c <_raise_r+0x12>
	...

0800b6bc <raise>:
 800b6bc:	4b02      	ldr	r3, [pc, #8]	@ (800b6c8 <raise+0xc>)
 800b6be:	4601      	mov	r1, r0
 800b6c0:	6818      	ldr	r0, [r3, #0]
 800b6c2:	f7ff bfd2 	b.w	800b66a <_raise_r>
 800b6c6:	bf00      	nop
 800b6c8:	20000060 	.word	0x20000060

0800b6cc <_kill_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4d07      	ldr	r5, [pc, #28]	@ (800b6ec <_kill_r+0x20>)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	4611      	mov	r1, r2
 800b6d8:	602b      	str	r3, [r5, #0]
 800b6da:	f7f6 fe87 	bl	80023ec <_kill>
 800b6de:	1c43      	adds	r3, r0, #1
 800b6e0:	d102      	bne.n	800b6e8 <_kill_r+0x1c>
 800b6e2:	682b      	ldr	r3, [r5, #0]
 800b6e4:	b103      	cbz	r3, 800b6e8 <_kill_r+0x1c>
 800b6e6:	6023      	str	r3, [r4, #0]
 800b6e8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20000620 	.word	0x20000620

0800b6f0 <_getpid_r>:
 800b6f0:	f7f6 be74 	b.w	80023dc <_getpid>

0800b6f4 <_init>:
 800b6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f6:	bf00      	nop
 800b6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6fa:	bc08      	pop	{r3}
 800b6fc:	469e      	mov	lr, r3
 800b6fe:	4770      	bx	lr

0800b700 <_fini>:
 800b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b702:	bf00      	nop
 800b704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b706:	bc08      	pop	{r3}
 800b708:	469e      	mov	lr, r3
 800b70a:	4770      	bx	lr
