
prj_smartfarm_0728.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800bab8  0800bab8  0000cab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c160  0800c160  0000e220  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c160  0800c160  0000d160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c168  0800c168  0000e220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c168  0800c168  0000d168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c16c  0800c16c  0000d16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800c170  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000220  0800c390  0000e220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  0800c390  0000e7b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f4d  00000000  00000000  0000e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003308  00000000  00000000  0002319d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  000264a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e83  00000000  00000000  00027768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d14  00000000  00000000  000285eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001787b  00000000  00000000  0002d2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4147  00000000  00000000  00044b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128cc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006540  00000000  00000000  00128d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0012f244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba9c 	.word	0x0800ba9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800ba9c 	.word	0x0800ba9c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <MX_ADC1_Init+0x9c>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_ADC1_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b0:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c0:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <MX_ADC1_Init+0xa0>)
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010da:	2201      	movs	r2, #1
 80010dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010de:	480e      	ldr	r0, [pc, #56]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010e0:	f002 f9d0 	bl	8003484 <HAL_ADC_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ea:	f001 fa47 	bl	800257c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001100:	f002 fba2 	bl	8003848 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800110a:	f001 fa37 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000023c 	.word	0x2000023c
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_ADC_MspInit+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d127      	bne.n	8001196 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800117e:	2313      	movs	r3, #19
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_ADC_MspInit+0x84>)
 8001192:	f002 fee5 	bl	8003f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012000 	.word	0x40012000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000

080011ac <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <MX_DAC_Init+0x4c>)
 80011bc:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <MX_DAC_Init+0x50>)
 80011be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c0:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <MX_DAC_Init+0x4c>)
 80011c2:	f002 fe51 	bl	8003e68 <HAL_DAC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011cc:	f001 f9d6 	bl	800257c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	2210      	movs	r2, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	@ (80011f8 <MX_DAC_Init+0x4c>)
 80011e0:	f002 fe64 	bl	8003eac <HAL_DAC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ea:	f001 f9c7 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000284 	.word	0x20000284
 80011fc:	40007400 	.word	0x40007400

08001200 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a17      	ldr	r2, [pc, #92]	@ (800127c <HAL_DAC_MspInit+0x7c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d127      	bne.n	8001272 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a15      	ldr	r2, [pc, #84]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 800122c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a0e      	ldr	r2, [pc, #56]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800125a:	2320      	movs	r3, #32
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <HAL_DAC_MspInit+0x84>)
 800126e:	f002 fe77 	bl	8003f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	@ 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40007400 	.word	0x40007400
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000

08001288 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b54      	ldr	r3, [pc, #336]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a53      	ldr	r2, [pc, #332]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b51      	ldr	r3, [pc, #324]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b4d      	ldr	r3, [pc, #308]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a4c      	ldr	r2, [pc, #304]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b4a      	ldr	r3, [pc, #296]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b46      	ldr	r3, [pc, #280]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a45      	ldr	r2, [pc, #276]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b43      	ldr	r3, [pc, #268]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b3f      	ldr	r3, [pc, #252]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a3e      	ldr	r2, [pc, #248]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b3c      	ldr	r3, [pc, #240]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Peltier1_Pin|Peltier2_Pin|CS_Pin|Fan_On_Pin
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8001314:	4838      	ldr	r0, [pc, #224]	@ (80013f8 <MX_GPIO_Init+0x170>)
 8001316:	f002 ffcf 	bl	80042b8 <HAL_GPIO_WritePin>
                          |Water_P2_Pin|Water_P1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DHT11_Pin|led2_Pin|Fan_Peltier1_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 5144 	mov.w	r1, #12544	@ 0x3100
 8001320:	4836      	ldr	r0, [pc, #216]	@ (80013fc <MX_GPIO_Init+0x174>)
 8001322:	f002 ffc9 	bl	80042b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Peltier1_Pin Peltier2_Pin CS_Pin Fan_On_Pin */
  GPIO_InitStruct.Pin = Peltier1_Pin|Peltier2_Pin|CS_Pin|Fan_On_Pin;
 8001326:	236c      	movs	r3, #108	@ 0x6c
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	482e      	ldr	r0, [pc, #184]	@ (80013f8 <MX_GPIO_Init+0x170>)
 800133e:	f002 fe0f 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001342:	2310      	movs	r3, #16
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4828      	ldr	r0, [pc, #160]	@ (80013f8 <MX_GPIO_Init+0x170>)
 8001356:	f002 fe03 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800135a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	4822      	ldr	r0, [pc, #136]	@ (80013fc <MX_GPIO_Init+0x174>)
 8001374:	f002 fdf4 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 8001378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001386:	2301      	movs	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	481a      	ldr	r0, [pc, #104]	@ (80013fc <MX_GPIO_Init+0x174>)
 8001392:	f002 fde5 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : Water_Chk_Pin */
  GPIO_InitStruct.Pin = Water_Chk_Pin;
 8001396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Water_Chk_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4814      	ldr	r0, [pc, #80]	@ (80013fc <MX_GPIO_Init+0x174>)
 80013ac:	f002 fdd8 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Water_P2_Pin Water_P1_Pin */
  GPIO_InitStruct.Pin = Water_P2_Pin|Water_P1_Pin;
 80013b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013be:	2302      	movs	r3, #2
 80013c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <MX_GPIO_Init+0x170>)
 80013ca:	f002 fdc9 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : Fan_Peltier1_Pin */
  GPIO_InitStruct.Pin = Fan_Peltier1_Pin;
 80013ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fan_Peltier1_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_GPIO_Init+0x174>)
 80013e8:	f002 fdba 	bl	8003f60 <HAL_GPIO_Init>

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	@ 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020400 	.word	0x40020400

08001400 <__io_putchar>:
// ============================================printf문 =======================================================
//============================================================================================================

#if printf_en
extern int __io_putchar(int ch)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    //UART_HandleTypeDef huart1;
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);

#elif Console_Ch2
    //UART_HandleTypeDef huart2;
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001408:	1d39      	adds	r1, r7, #4
 800140a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800140e:	2201      	movs	r2, #1
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <__io_putchar+0x24>)
 8001412:	f004 ff41 	bl	8006298 <HAL_UART_Transmit>

#elif Console_Ch6
    //UART_HandleTypeDef huart3;
    HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
#endif
    __NOP();
 8001416:	bf00      	nop
  return ch;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000061c 	.word	0x2000061c

08001428 <delay>:
  #define DHT11_PORT  DHT11_GPIO_Port // main.h 참고
  #define DHT11_PIN   DHT11_Pin       // main.h 참고

// usec delay
void delay (uint16_t time)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
 /* change your code here for the delay in microseconds */
 __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <delay+0x30>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
 while ((__HAL_TIM_GET_COUNTER(&htim6)) < time);  // 타이머 7
 800143a:	bf00      	nop
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <delay+0x30>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3f9      	bcc.n	800143c <delay+0x14>
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000544 	.word	0x20000544

0800145c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 GPIO_InitStruct.Pin = GPIO_Pin;
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
 HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4619      	mov	r1, r3
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f002 fd68 	bl	8003f60 <HAL_GPIO_Init>
}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 GPIO_InitStruct.Pin = GPIO_Pin;
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014bc:	2301      	movs	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f002 fd4a 	bl	8003f60 <HAL_GPIO_Init>
}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <DHT11_Start>:

void DHT11_Start (void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
 if(dht_ch1 -> dht11_ch == 1)
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <DHT11_Start+0x50>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f993 3000 	ldrsb.w	r3, [r3]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d11c      	bne.n	800151e <DHT11_Start+0x4a>
   { //ch1
   Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80014e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014e8:	480f      	ldr	r0, [pc, #60]	@ (8001528 <DHT11_Start+0x54>)
 80014ea:	f7ff ffb7 	bl	800145c <Set_Pin_Output>
   HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <DHT11_Start+0x54>)
 80014f6:	f002 fedf 	bl	80042b8 <HAL_GPIO_WritePin>
   delay(18000);   // wait for 18ms
 80014fa:	f244 6050 	movw	r0, #18000	@ 0x4650
 80014fe:	f7ff ff93 	bl	8001428 <delay>
   HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001502:	2201      	movs	r2, #1
 8001504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001508:	4807      	ldr	r0, [pc, #28]	@ (8001528 <DHT11_Start+0x54>)
 800150a:	f002 fed5 	bl	80042b8 <HAL_GPIO_WritePin>
   delay (20);   // wait for 20us
 800150e:	2014      	movs	r0, #20
 8001510:	f7ff ff8a 	bl	8001428 <delay>
   Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001514:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001518:	4803      	ldr	r0, [pc, #12]	@ (8001528 <DHT11_Start+0x54>)
 800151a:	f7ff ffbd 	bl	8001498 <Set_Pin_Input>
   }
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000010 	.word	0x20000010
 8001528:	40020400 	.word	0x40020400

0800152c <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 uint8_t Response = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	71fb      	strb	r3, [r7, #7]
 delay (40);
 8001536:	2028      	movs	r0, #40	@ 0x28
 8001538:	f7ff ff76 	bl	8001428 <delay>
 if(dht_ch1 -> dht11_ch == 1)
 800153c:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <DHT11_Check_Response+0x94>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f993 3000 	ldrsb.w	r3, [r3]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d136      	bne.n	80015b6 <DHT11_Check_Response+0x8a>
  { //ch1
   if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001548:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800154c:	481d      	ldr	r0, [pc, #116]	@ (80015c4 <DHT11_Check_Response+0x98>)
 800154e:	f002 fe9b 	bl	8004288 <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d120      	bne.n	800159a <DHT11_Check_Response+0x6e>
    {
     delay (80);
 8001558:	2050      	movs	r0, #80	@ 0x50
 800155a:	f7ff ff65 	bl	8001428 <delay>
      	  if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800155e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001562:	4818      	ldr	r0, [pc, #96]	@ (80015c4 <DHT11_Check_Response+0x98>)
 8001564:	f002 fe90 	bl	8004288 <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <DHT11_Check_Response+0x48>
 800156e:	2301      	movs	r3, #1
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	e012      	b.n	800159a <DHT11_Check_Response+0x6e>
     else Response = -1; // 255
 8001574:	23ff      	movs	r3, #255	@ 0xff
 8001576:	71fb      	strb	r3, [r7, #7]
    }
   while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001578:	e00f      	b.n	800159a <DHT11_Check_Response+0x6e>
     {
	   // wait for the pin to go low
	   dht_ch1 -> while_cnt++;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <DHT11_Check_Response+0x94>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001582:	b292      	uxth	r2, r2
 8001584:	3201      	adds	r2, #1
 8001586:	b292      	uxth	r2, r2
 8001588:	b212      	sxth	r2, r2
 800158a:	805a      	strh	r2, [r3, #2]
	   if( dht_ch1 -> while_cnt > 500) break;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <DHT11_Check_Response+0x94>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001594:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001598:	dc08      	bgt.n	80015ac <DHT11_Check_Response+0x80>
   while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800159a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800159e:	4809      	ldr	r0, [pc, #36]	@ (80015c4 <DHT11_Check_Response+0x98>)
 80015a0:	f002 fe72 	bl	8004288 <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1e7      	bne.n	800157a <DHT11_Check_Response+0x4e>
 80015aa:	e000      	b.n	80015ae <DHT11_Check_Response+0x82>
	   if( dht_ch1 -> while_cnt > 500) break;
 80015ac:	bf00      	nop
     }
   dht_ch1 -> while_cnt = 0;
 80015ae:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <DHT11_Check_Response+0x94>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	805a      	strh	r2, [r3, #2]
  }
#endif
 return Response;
 80015b6:	79fb      	ldrb	r3, [r7, #7]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000010 	.word	0x20000010
 80015c4:	40020400 	.word	0x40020400

080015c8 <DHT11_Read>:
uint8_t DHT11_Read ()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 uint8_t i,j;
 if(dht_ch1 -> dht11_ch == 1)
 80015ce:	4b3b      	ldr	r3, [pc, #236]	@ (80016bc <DHT11_Read+0xf4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f993 3000 	ldrsb.w	r3, [r3]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d16b      	bne.n	80016b2 <DHT11_Read+0xea>
  {
   for (j=0;j<8;j++)
 80015da:	2300      	movs	r3, #0
 80015dc:	71bb      	strb	r3, [r7, #6]
 80015de:	e065      	b.n	80016ac <DHT11_Read+0xe4>
    {
	  while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
	   {
		  dht_ch1 -> while_cnt++;
 80015e0:	4b36      	ldr	r3, [pc, #216]	@ (80016bc <DHT11_Read+0xf4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80015e8:	b292      	uxth	r2, r2
 80015ea:	3201      	adds	r2, #1
 80015ec:	b292      	uxth	r2, r2
 80015ee:	b212      	sxth	r2, r2
 80015f0:	805a      	strh	r2, [r3, #2]
		// wait for the pin to go high
		if(dht_ch1 -> while_cnt > 500) break;
 80015f2:	4b32      	ldr	r3, [pc, #200]	@ (80016bc <DHT11_Read+0xf4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015fa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015fe:	dc08      	bgt.n	8001612 <DHT11_Read+0x4a>
	  while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001600:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001604:	482e      	ldr	r0, [pc, #184]	@ (80016c0 <DHT11_Read+0xf8>)
 8001606:	f002 fe3f 	bl	8004288 <HAL_GPIO_ReadPin>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0e7      	beq.n	80015e0 <DHT11_Read+0x18>
 8001610:	e000      	b.n	8001614 <DHT11_Read+0x4c>
		if(dht_ch1 -> while_cnt > 500) break;
 8001612:	bf00      	nop
	   }
	  dht_ch1 -> while_cnt = 0;
 8001614:	4b29      	ldr	r3, [pc, #164]	@ (80016bc <DHT11_Read+0xf4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	805a      	strh	r2, [r3, #2]
	  delay (40);   // wait for 40 us
 800161c:	2028      	movs	r0, #40	@ 0x28
 800161e:	f7ff ff03 	bl	8001428 <delay>
	  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001622:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001626:	4826      	ldr	r0, [pc, #152]	@ (80016c0 <DHT11_Read+0xf8>)
 8001628:	f002 fe2e 	bl	8004288 <HAL_GPIO_ReadPin>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <DHT11_Read+0x88>
	   {
	    i&= ~(1<<(7-j));   // write 0
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	f1c3 0307 	rsb	r3, r3, #7
 8001638:	2201      	movs	r2, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	b25b      	sxtb	r3, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	b25a      	sxtb	r2, r3
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4013      	ands	r3, r2
 800164a:	b25b      	sxtb	r3, r3
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	e01c      	b.n	800168a <DHT11_Read+0xc2>
	   }
	  else i|= (1<<(7-j));  // if the pin is high, write 1
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2201      	movs	r2, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	b25a      	sxtb	r2, r3
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	4313      	orrs	r3, r2
 8001664:	b25b      	sxtb	r3, r3
 8001666:	71fb      	strb	r3, [r7, #7]
	  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001668:	e00f      	b.n	800168a <DHT11_Read+0xc2>
	   {
		  dht_ch1 -> while_cnt++;
 800166a:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <DHT11_Read+0xf4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001672:	b292      	uxth	r2, r2
 8001674:	3201      	adds	r2, #1
 8001676:	b292      	uxth	r2, r2
 8001678:	b212      	sxth	r2, r2
 800167a:	805a      	strh	r2, [r3, #2]
		// wait for the pin to go low
		if(dht_ch1 -> while_cnt > 500) break;
 800167c:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <DHT11_Read+0xf4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001684:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001688:	dc08      	bgt.n	800169c <DHT11_Read+0xd4>
	  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800168a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800168e:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <DHT11_Read+0xf8>)
 8001690:	f002 fdfa 	bl	8004288 <HAL_GPIO_ReadPin>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1e7      	bne.n	800166a <DHT11_Read+0xa2>
 800169a:	e000      	b.n	800169e <DHT11_Read+0xd6>
		if(dht_ch1 -> while_cnt > 500) break;
 800169c:	bf00      	nop
	   }
	  dht_ch1 -> while_cnt =  0;
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <DHT11_Read+0xf4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	805a      	strh	r2, [r3, #2]
   for (j=0;j<8;j++)
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	3301      	adds	r3, #1
 80016aa:	71bb      	strb	r3, [r7, #6]
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	2b07      	cmp	r3, #7
 80016b0:	d9a6      	bls.n	8001600 <DHT11_Read+0x38>
    } // for end
  } // if-end
 return i;
 80016b2:	79fb      	ldrb	r3, [r7, #7]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000010 	.word	0x20000010
 80016c0:	40020400 	.word	0x40020400

080016c4 <DHT11_Sensor_Test>:

uint8_t DHT11_Sensor_Test()
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
	uint16_t SUM, RH, TEMP;
	float Temperature = 0;
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
	float Humidity = 0;
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
	uint8_t Presence = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
 // DHT11 Run == Main
 DHT11_Start();
 80016da:	f7ff fefb 	bl	80014d4 <DHT11_Start>
 Presence = DHT11_Check_Response();
 80016de:	f7ff ff25 	bl	800152c <DHT11_Check_Response>
 80016e2:	4603      	mov	r3, r0
 80016e4:	75fb      	strb	r3, [r7, #23]
 Rh_byte1 = DHT11_Read ();
 80016e6:	f7ff ff6f 	bl	80015c8 <DHT11_Read>
 80016ea:	4603      	mov	r3, r0
 80016ec:	75bb      	strb	r3, [r7, #22]
 Rh_byte2 = DHT11_Read ();
 80016ee:	f7ff ff6b 	bl	80015c8 <DHT11_Read>
 80016f2:	4603      	mov	r3, r0
 80016f4:	757b      	strb	r3, [r7, #21]
 Temp_byte1 = DHT11_Read ();
 80016f6:	f7ff ff67 	bl	80015c8 <DHT11_Read>
 80016fa:	4603      	mov	r3, r0
 80016fc:	753b      	strb	r3, [r7, #20]
 Temp_byte2 = DHT11_Read ();
 80016fe:	f7ff ff63 	bl	80015c8 <DHT11_Read>
 8001702:	4603      	mov	r3, r0
 8001704:	74fb      	strb	r3, [r7, #19]
 SUM = DHT11_Read();
 8001706:	f7ff ff5f 	bl	80015c8 <DHT11_Read>
 800170a:	4603      	mov	r3, r0
 800170c:	823b      	strh	r3, [r7, #16]

 // 정수부만 출력 됨
 TEMP = Temp_byte1;
 800170e:	7d3b      	ldrb	r3, [r7, #20]
 8001710:	81fb      	strh	r3, [r7, #14]
 RH = Rh_byte1;
 8001712:	7dbb      	ldrb	r3, [r7, #22]
 8001714:	81bb      	strh	r3, [r7, #12]
 // 소수점 부도 출력 됨
 Temperature = (float) TEMP;
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001720:	edc7 7a07 	vstr	s15, [r7, #28]
 Humidity = (float) RH;
 8001724:	89bb      	ldrh	r3, [r7, #12]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800172e:	edc7 7a06 	vstr	s15, [r7, #24]

 if(dht_ch1 -> dht11_ch == 1)
 8001732:	4b2d      	ldr	r3, [pc, #180]	@ (80017e8 <DHT11_Sensor_Test+0x124>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f993 3000 	ldrsb.w	r3, [r3]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d143      	bne.n	80017c6 <DHT11_Sensor_Test+0x102>
  {
	if(TEMP >= 255) Temperature = dht_ch1 -> old_temp;
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	2bfe      	cmp	r3, #254	@ 0xfe
 8001742:	d909      	bls.n	8001758 <DHT11_Sensor_Test+0x94>
 8001744:	4b28      	ldr	r3, [pc, #160]	@ (80017e8 <DHT11_Sensor_Test+0x124>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	889b      	ldrh	r3, [r3, #4]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001752:	edc7 7a07 	vstr	s15, [r7, #28]
 8001756:	e009      	b.n	800176c <DHT11_Sensor_Test+0xa8>
	else dht_ch1 -> old_temp = Temperature;
 8001758:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <DHT11_Sensor_Test+0x124>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001764:	ee17 2a90 	vmov	r2, s15
 8001768:	b292      	uxth	r2, r2
 800176a:	809a      	strh	r2, [r3, #4]

	if(RH >= 255) Humidity =dht_ch1 -> old_rh;
 800176c:	89bb      	ldrh	r3, [r7, #12]
 800176e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001770:	d909      	bls.n	8001786 <DHT11_Sensor_Test+0xc2>
 8001772:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <DHT11_Sensor_Test+0x124>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	88db      	ldrh	r3, [r3, #6]
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001780:	edc7 7a06 	vstr	s15, [r7, #24]
 8001784:	e009      	b.n	800179a <DHT11_Sensor_Test+0xd6>
	else dht_ch1 -> old_rh = Humidity;
 8001786:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <DHT11_Sensor_Test+0x124>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	edd7 7a06 	vldr	s15, [r7, #24]
 800178e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001792:	ee17 2a90 	vmov	r2, s15
 8001796:	b292      	uxth	r2, r2
 8001798:	80da      	strh	r2, [r3, #6]

	dht_ch1 -> Temp_Ch1_dis = Temperature;
 800179a:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <DHT11_Sensor_Test+0x124>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	edd7 7a07 	vldr	s15, [r7, #28]
 80017a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80017aa:	793a      	ldrb	r2, [r7, #4]
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	729a      	strb	r2, [r3, #10]
	dht_ch1 -> Hum_Ch1_dis = Humidity;
 80017b0:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <DHT11_Sensor_Test+0x124>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80017b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80017c0:	793a      	ldrb	r2, [r7, #4]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	72da      	strb	r2, [r3, #11]
  }
 HAL_Delay(500);
 80017c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017ca:	f001 fe37 	bl	800343c <HAL_Delay>
 if (TEMP != 0 ||  RH != 0) return 1;
 80017ce:	89fb      	ldrh	r3, [r7, #14]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <DHT11_Sensor_Test+0x116>
 80017d4:	89bb      	ldrh	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <DHT11_Sensor_Test+0x11a>
 80017da:	2301      	movs	r3, #1
 80017dc:	e7ff      	b.n	80017de <DHT11_Sensor_Test+0x11a>


}
 80017de:	4618      	mov	r0, r3
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000010 	.word	0x20000010

080017ec <DHT11_Run_RH>:
float DHT11_Run_RH()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	if(DHT11_Sensor_Test()) return dht_ch1 -> Hum_Ch1_dis;
 80017f0:	f7ff ff68 	bl	80016c4 <DHT11_Sensor_Test>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <DHT11_Run_RH+0x1e>
 80017fa:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <DHT11_Run_RH+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	7adb      	ldrb	r3, [r3, #11]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001808:	e7ff      	b.n	800180a <DHT11_Run_RH+0x1e>
}
 800180a:	eeb0 0a67 	vmov.f32	s0, s15
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000010 	.word	0x20000010

08001814 <DHT11_Run_TEMP>:

float DHT11_Run_TEMP()
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	if(DHT11_Sensor_Test()) return dht_ch1 -> Temp_Ch1_dis;
 8001818:	f7ff ff54 	bl	80016c4 <DHT11_Sensor_Test>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <DHT11_Run_TEMP+0x1e>
 8001822:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <DHT11_Run_TEMP+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	7a9b      	ldrb	r3, [r3, #10]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001830:	e7ff      	b.n	8001832 <DHT11_Run_TEMP+0x1e>
}
 8001832:	eeb0 0a67 	vmov.f32	s0, s15
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000010 	.word	0x20000010

0800183c <check_light>:
  uint16_t old_ch2;
  float cds_Ch1_dis;
  float cds_Ch2_dis;
}Cds_ch1 = {1, 0, 0, 0,0};
struct cds *cds_ch1 = &Cds_ch1;
uint8_t check_light(){
 800183c:	b580      	push	{r7, lr}
 800183e:	b09c      	sub	sp, #112	@ 0x70
 8001840:	af00      	add	r7, sp, #0
	uint32_t adc_val = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float lux = 0.0;
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	66bb      	str	r3, [r7, #104]	@ 0x68
	char light_msg[64];
	float r_fixed = 10000.0f; // 10kΩ 고정 저항
 800184c:	4b4b      	ldr	r3, [pc, #300]	@ (800197c <check_light+0x140>)
 800184e:	667b      	str	r3, [r7, #100]	@ 0x64
    if(cds_ch1 -> cds_ch == 1)
 8001850:	4b4b      	ldr	r3, [pc, #300]	@ (8001980 <check_light+0x144>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f993 3000 	ldrsb.w	r3, [r3]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d17c      	bne.n	8001956 <check_light+0x11a>
    {
    	ADC_ChannelConfTypeDef sConfig = {0};
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
    	sConfig.Channel = ADC_CHANNEL_0;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
    	sConfig.Rank = 1;
 800186c:	2301      	movs	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
    	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001870:	2301      	movs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
    	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4842      	ldr	r0, [pc, #264]	@ (8001984 <check_light+0x148>)
 800187a:	f001 ffe5 	bl	8003848 <HAL_ADC_ConfigChannel>
    	HAL_ADC_Start(&hadc1);
 800187e:	4841      	ldr	r0, [pc, #260]	@ (8001984 <check_light+0x148>)
 8001880:	f001 fe44 	bl	800350c <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001884:	210a      	movs	r1, #10
 8001886:	483f      	ldr	r0, [pc, #252]	@ (8001984 <check_light+0x148>)
 8001888:	f001 ff45 	bl	8003716 <HAL_ADC_PollForConversion>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d161      	bne.n	8001956 <check_light+0x11a>
        {
			adc_val = HAL_ADC_GetValue(&hadc1);
 8001892:	483c      	ldr	r0, [pc, #240]	@ (8001984 <check_light+0x148>)
 8001894:	f001 ffca 	bl	800382c <HAL_ADC_GetValue>
 8001898:	66f8      	str	r0, [r7, #108]	@ 0x6c
			cds_ch1 ->  adc_v = adc_val;
 800189a:	4b39      	ldr	r3, [pc, #228]	@ (8001980 <check_light+0x144>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80018a0:	b292      	uxth	r2, r2
 80018a2:	805a      	strh	r2, [r3, #2]
			if(adc_val == 4095 || adc_val == 0) adc_val = cds_ch1 -> old_ch1;
 80018a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018a6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d002      	beq.n	80018b4 <check_light+0x78>
 80018ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d104      	bne.n	80018be <check_light+0x82>
 80018b4:	4b32      	ldr	r3, [pc, #200]	@ (8001980 <check_light+0x144>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	889b      	ldrh	r3, [r3, #4]
 80018ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80018bc:	e004      	b.n	80018c8 <check_light+0x8c>
			else cds_ch1 -> old_ch1 = adc_val;
 80018be:	4b30      	ldr	r3, [pc, #192]	@ (8001980 <check_light+0x144>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80018c4:	b292      	uxth	r2, r2
 80018c6:	809a      	strh	r2, [r3, #4]
			float Vout = (adc_val / 4095.0f) * 3.3f;
 80018c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018ca:	ee07 3a90 	vmov	s15, r3
 80018ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018d2:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001988 <check_light+0x14c>
 80018d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018da:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800198c <check_light+0x150>
 80018de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e2:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			float RLDR = (3.3f - Vout) * 10000.0f / (Vout > 0.0f ? Vout : 1.0f);
 80018e6:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800198c <check_light+0x150>
 80018ea:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80018ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001990 <check_light+0x154>
 80018f6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80018fa:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80018fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	dd02      	ble.n	800190e <check_light+0xd2>
 8001908:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800190c:	e001      	b.n	8001912 <check_light+0xd6>
 800190e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001916:	ed87 7a17 	vstr	s14, [r7, #92]	@ 0x5c
			float Rk = RLDR / 1000.0f;
 800191a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800191e:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001994 <check_light+0x158>
 8001922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001926:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
			float lux = 63.0f * powf(Rk, -0.7f)+50;
 800192a:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001998 <check_light+0x15c>
 800192e:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8001932:	f005 f903 	bl	8006b3c <powf>
 8001936:	eef0 7a40 	vmov.f32	s15, s0
 800193a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800199c <check_light+0x160>
 800193e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001942:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80019a0 <check_light+0x164>
 8001946:	ee77 7a87 	vadd.f32	s15, s15, s14
 800194a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
			cds_ch1 ->  cds_Ch1_dis = lux;
 800194e:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <check_light+0x144>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001954:	609a      	str	r2, [r3, #8]
    	}
    }
    HAL_ADC_Stop(&hadc1);
 8001956:	480b      	ldr	r0, [pc, #44]	@ (8001984 <check_light+0x148>)
 8001958:	f001 feaa 	bl	80036b0 <HAL_ADC_Stop>
    if(adc_val != 4095 || adc_val != 0) return 1;
 800195c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800195e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001962:	4293      	cmp	r3, r2
 8001964:	d102      	bne.n	800196c <check_light+0x130>
 8001966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <check_light+0x134>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <check_light+0x136>
    else return 0;
 8001970:	2300      	movs	r3, #0
    }
 8001972:	4618      	mov	r0, r3
 8001974:	3770      	adds	r7, #112	@ 0x70
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	461c4000 	.word	0x461c4000
 8001980:	20000024 	.word	0x20000024
 8001984:	2000023c 	.word	0x2000023c
 8001988:	457ff000 	.word	0x457ff000
 800198c:	40533333 	.word	0x40533333
 8001990:	461c4000 	.word	0x461c4000
 8001994:	447a0000 	.word	0x447a0000
 8001998:	bf333333 	.word	0xbf333333
 800199c:	427c0000 	.word	0x427c0000
 80019a0:	42480000 	.word	0x42480000

080019a4 <read_light>:
float read_light(){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	if(check_light()) return cds_ch1 ->  adc_v;
 80019a8:	f7ff ff48 	bl	800183c <check_light>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <read_light+0x1e>
 80019b2:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <read_light+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	885b      	ldrh	r3, [r3, #2]
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c0:	e7ff      	b.n	80019c2 <read_light+0x1e>
}
 80019c2:	eeb0 0a67 	vmov.f32	s0, s15
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000024 	.word	0x20000024

080019cc <read_light_lux>:
float read_light_lux(){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	if(check_light()) return cds_ch1 ->  cds_Ch1_dis;
 80019d0:	f7ff ff34 	bl	800183c <check_light>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <read_light_lux+0x1a>
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <read_light_lux+0x20>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	e7ff      	b.n	80019e6 <read_light_lux+0x1a>
}
 80019e6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000024 	.word	0x20000024

080019f0 <get_co2_step>:
  float co2_Ch2_dis;
}Co2_ch1 = {1, 0, 0, 0,0};
struct co2 *co2_ch1 = &Co2_ch1;


float get_co2_step(uint32_t adc_val) {
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	6078      	str	r0, [r7, #4]
    // 12비트 ADC 기준 (0~4095)
//    if (adc_val < 1000) return 0;           //0: < 약 700 ppm  //
//    else if (adc_val < 2000) return 1;      //1: 700~1000 ppm
//    else if (adc_val < 3000) return 2;      //2: 1000~2000 ppm
    float Vref = 3.3; // OR 5.0
 80019f8:	4b39      	ldr	r3, [pc, #228]	@ (8001ae0 <get_co2_step+0xf0>)
 80019fa:	617b      	str	r3, [r7, #20]
	float Vout;
	float CO2_ppm;


	Vout = (adc_val / 4095.0) * Vref;
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7fe fdb1 	bl	8000564 <__aeabi_ui2d>
 8001a02:	a32f      	add	r3, pc, #188	@ (adr r3, 8001ac0 <get_co2_step+0xd0>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe ff50 	bl	80008ac <__aeabi_ddiv>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4614      	mov	r4, r2
 8001a12:	461d      	mov	r5, r3
 8001a14:	6978      	ldr	r0, [r7, #20]
 8001a16:	f7fe fdc7 	bl	80005a8 <__aeabi_f2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4620      	mov	r0, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	f7fe fe19 	bl	8000658 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f90b 	bl	8000c48 <__aeabi_d2f>
 8001a32:	4603      	mov	r3, r0
 8001a34:	613b      	str	r3, [r7, #16]

	//센서를 만든 회사가 배포하는 PDF 문서에서 확인합니다.PWM 출력에 대한 예시:0.4V = 400 ppm2.0V = 5000 ppm
	CO2_ppm = ((Vout - 0.4) / (2.0 - 0.4) ) * (5000 - 400) + 400;
 8001a36:	6938      	ldr	r0, [r7, #16]
 8001a38:	f7fe fdb6 	bl	80005a8 <__aeabi_f2d>
 8001a3c:	a322      	add	r3, pc, #136	@ (adr r3, 8001ac8 <get_co2_step+0xd8>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fc51 	bl	80002e8 <__aeabi_dsub>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	a320      	add	r3, pc, #128	@ (adr r3, 8001ad0 <get_co2_step+0xe0>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe ff2a 	bl	80008ac <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	a31d      	add	r3, pc, #116	@ (adr r3, 8001ad8 <get_co2_step+0xe8>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fdf7 	bl	8000658 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <get_co2_step+0xf4>)
 8001a78:	f7fe fc38 	bl	80002ec <__adddf3>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff f8e0 	bl	8000c48 <__aeabi_d2f>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60fb      	str	r3, [r7, #12]
	printf("vout = %.1f ,Co2 ppm = %.1f\r\n",Vout, CO2_ppm);
 8001a8c:	6938      	ldr	r0, [r7, #16]
 8001a8e:	f7fe fd8b 	bl	80005a8 <__aeabi_f2d>
 8001a92:	4604      	mov	r4, r0
 8001a94:	460d      	mov	r5, r1
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7fe fd86 	bl	80005a8 <__aeabi_f2d>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	e9cd 2300 	strd	r2, r3, [sp]
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	462b      	mov	r3, r5
 8001aa8:	480f      	ldr	r0, [pc, #60]	@ (8001ae8 <get_co2_step+0xf8>)
 8001aaa:	f006 fbbf 	bl	800822c <iprintf>
	return CO2_ppm;                        //3: >2000 ppm
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	ee07 3a90 	vmov	s15, r3
}
 8001ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bdb0      	pop	{r4, r5, r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40affe00 	.word	0x40affe00
 8001ac8:	9999999a 	.word	0x9999999a
 8001acc:	3fd99999 	.word	0x3fd99999
 8001ad0:	9999999a 	.word	0x9999999a
 8001ad4:	3ff99999 	.word	0x3ff99999
 8001ad8:	00000000 	.word	0x00000000
 8001adc:	40b1f800 	.word	0x40b1f800
 8001ae0:	40533333 	.word	0x40533333
 8001ae4:	40790000 	.word	0x40790000
 8001ae8:	0800bab8 	.word	0x0800bab8

08001aec <check_co2>:



uint8_t check_co2() {
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
	uint32_t adc_val = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4821      	ldr	r0, [pc, #132]	@ (8001b98 <check_co2+0xac>)
 8001b14:	f001 fe98 	bl	8003848 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001b18:	481f      	ldr	r0, [pc, #124]	@ (8001b98 <check_co2+0xac>)
 8001b1a:	f001 fcf7 	bl	800350c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001b1e:	210a      	movs	r1, #10
 8001b20:	481d      	ldr	r0, [pc, #116]	@ (8001b98 <check_co2+0xac>)
 8001b22:	f001 fdf8 	bl	8003716 <HAL_ADC_PollForConversion>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d11e      	bne.n	8001b6a <check_co2+0x7e>
    {
    	adc_val = HAL_ADC_GetValue(&hadc1);
 8001b2c:	481a      	ldr	r0, [pc, #104]	@ (8001b98 <check_co2+0xac>)
 8001b2e:	f001 fe7d 	bl	800382c <HAL_ADC_GetValue>
 8001b32:	6178      	str	r0, [r7, #20]


    	if(adc_val == 4095 || adc_val == 0) adc_val = co2_ch1 -> old_ch1;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d002      	beq.n	8001b44 <check_co2+0x58>
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d104      	bne.n	8001b4e <check_co2+0x62>
 8001b44:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <check_co2+0xb0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	885b      	ldrh	r3, [r3, #2]
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	e004      	b.n	8001b58 <check_co2+0x6c>
    	else co2_ch1 -> old_ch1 = adc_val;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <check_co2+0xb0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	b292      	uxth	r2, r2
 8001b56:	805a      	strh	r2, [r3, #2]

    	co2_ch1 ->  co2_Ch1_dis = get_co2_step(adc_val);
 8001b58:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <check_co2+0xb0>)
 8001b5a:	681c      	ldr	r4, [r3, #0]
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7ff ff47 	bl	80019f0 <get_co2_step>
 8001b62:	eef0 7a40 	vmov.f32	s15, s0
 8001b66:	edc4 7a02 	vstr	s15, [r4, #8]
	}
    HAL_ADC_Stop(&hadc1);
 8001b6a:	480b      	ldr	r0, [pc, #44]	@ (8001b98 <check_co2+0xac>)
 8001b6c:	f001 fda0 	bl	80036b0 <HAL_ADC_Stop>
    printf("adc_val2=%d\r\n", adc_val);
 8001b70:	6979      	ldr	r1, [r7, #20]
 8001b72:	480b      	ldr	r0, [pc, #44]	@ (8001ba0 <check_co2+0xb4>)
 8001b74:	f006 fb5a 	bl	800822c <iprintf>
    //printf("CO2 PP, = %0.1f\r\n",co2_ch1 ->  co2_Ch1_dis);
    if(adc_val != 4095 || adc_val != 0) return 1;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d102      	bne.n	8001b88 <check_co2+0x9c>
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <check_co2+0xa0>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <check_co2+0xa2>
    else return 0;
 8001b8c:	2300      	movs	r3, #0
    }
 8001b8e:	4618      	mov	r0, r3
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd90      	pop	{r4, r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000023c 	.word	0x2000023c
 8001b9c:	20000038 	.word	0x20000038
 8001ba0:	0800bad8 	.word	0x0800bad8

08001ba4 <read_co2>:
float read_co2(){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	if(check_co2()) return co2_ch1 ->  co2_Ch1_dis;
 8001ba8:	f7ff ffa0 	bl	8001aec <check_co2>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <read_co2+0x1a>
 8001bb2:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <read_co2+0x20>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	e7ff      	b.n	8001bbe <read_co2+0x1a>
}
 8001bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000038 	.word	0x20000038

08001bc8 <isWaterDetected1>:
struct w_h *w_h = &W_h;


//비접촉 방식
float isWaterDetected1()
{
 8001bc8:	b598      	push	{r3, r4, r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	w_h->w1_h = HAL_GPIO_ReadPin(Water_Chk_GPIO_Port, Water_Chk_Pin);
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <isWaterDetected1+0x34>)
 8001bce:	681c      	ldr	r4, [r3, #0]
 8001bd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bd4:	480a      	ldr	r0, [pc, #40]	@ (8001c00 <isWaterDetected1+0x38>)
 8001bd6:	f002 fb57 	bl	8004288 <HAL_GPIO_ReadPin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	7023      	strb	r3, [r4, #0]
	return (float)(w_h->w1_h == GPIO_PIN_SET);
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <isWaterDetected1+0x34>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d102      	bne.n	8001bee <isWaterDetected1+0x26>
 8001be8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001bec:	e001      	b.n	8001bf2 <isWaterDetected1+0x2a>
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	ee07 3a90 	vmov	s15, r3
}
 8001bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfa:	bd98      	pop	{r3, r4, r7, pc}
 8001bfc:	2000003c 	.word	0x2000003c
 8001c00:	40020400 	.word	0x40020400

08001c04 <parse_fixed_csv>:


#define MAX_VALUES 4
#define MAX_STR_LEN 20
int Cmd_values[4];
void parse_fixed_csv(char* input) {
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b089      	sub	sp, #36	@ 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
    char temp[10] = {0};
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	811a      	strh	r2, [r3, #8]
    int temp_idx = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
    int val_idx = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]

    for (int i = 0; input[i] != '\0' && val_idx < 4; i++) {
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e043      	b.n	8001cae <parse_fixed_csv+0xaa>
        if (input[i] == ',' || input[i] == '\n' || input[i] == '\r') {
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001c30:	d00b      	beq.n	8001c4a <parse_fixed_csv+0x46>
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b0a      	cmp	r3, #10
 8001c3c:	d005      	beq.n	8001c4a <parse_fixed_csv+0x46>
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b0d      	cmp	r3, #13
 8001c48:	d120      	bne.n	8001c8c <parse_fixed_csv+0x88>
            if (temp_idx > 0) {
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	dd2b      	ble.n	8001ca8 <parse_fixed_csv+0xa4>
            	Cmd_values[val_idx++] = atoi(temp);
 8001c50:	69bc      	ldr	r4, [r7, #24]
 8001c52:	1c63      	adds	r3, r4, #1
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f005 fb35 	bl	80072ca <atoi>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a22      	ldr	r2, [pc, #136]	@ (8001cec <parse_fixed_csv+0xe8>)
 8001c64:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
            	printf(Cmd_values[val_idx-1]);
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cec <parse_fixed_csv+0xe8>)
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f006 fada 	bl	800822c <iprintf>
                temp_idx = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
                memset(temp, 0, sizeof(temp));
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	220a      	movs	r2, #10
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f006 fc3b 	bl	8008500 <memset>
            if (temp_idx > 0) {
 8001c8a:	e00d      	b.n	8001ca8 <parse_fixed_csv+0xa4>
            }
        } else {
            if (temp_idx < sizeof(temp) - 1) {
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d80a      	bhi.n	8001ca8 <parse_fixed_csv+0xa4>
                temp[temp_idx++] = input[i];
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	441a      	add	r2, r3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	1c59      	adds	r1, r3, #1
 8001c9c:	61f9      	str	r1, [r7, #28]
 8001c9e:	7812      	ldrb	r2, [r2, #0]
 8001ca0:	3320      	adds	r3, #32
 8001ca2:	443b      	add	r3, r7
 8001ca4:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (int i = 0; input[i] != '\0' && val_idx < 4; i++) {
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <parse_fixed_csv+0xbc>
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	ddb2      	ble.n	8001c26 <parse_fixed_csv+0x22>
            }
        }
    }
    // 마지막 값 처리
    if (temp_idx > 0 && val_idx < 5) {
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	dd0e      	ble.n	8001ce4 <parse_fixed_csv+0xe0>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	dc0b      	bgt.n	8001ce4 <parse_fixed_csv+0xe0>
    	Cmd_values[val_idx++] = atoi(temp);
 8001ccc:	69bc      	ldr	r4, [r7, #24]
 8001cce:	1c63      	adds	r3, r4, #1
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f005 faf7 	bl	80072ca <atoi>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a03      	ldr	r2, [pc, #12]	@ (8001cec <parse_fixed_csv+0xe8>)
 8001ce0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    }
}
 8001ce4:	bf00      	nop
 8001ce6:	3724      	adds	r7, #36	@ 0x24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd90      	pop	{r4, r7, pc}
 8001cec:	2000029c 	.word	0x2000029c

08001cf0 <fan_on>:
//fan3개
//mode 1 co2 로 인해 환기 시스템
//fan1 = 온도로 인해
#if fan_en

void fan_on(){
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(Fan_On_GPIO_Port, Fan_On_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2140      	movs	r1, #64	@ 0x40
 8001cf8:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <fan_on+0x18>)
 8001cfa:	f002 fadd 	bl	80042b8 <HAL_GPIO_WritePin>
	  printf("Fan_on\r\n");
 8001cfe:	4803      	ldr	r0, [pc, #12]	@ (8001d0c <fan_on+0x1c>)
 8001d00:	f006 fafc 	bl	80082fc <puts>

}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	0800bae8 	.word	0x0800bae8

08001d10 <fan_off>:

void fan_off(){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(Fan_On_GPIO_Port, Fan_On_Pin, GPIO_PIN_SET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2140      	movs	r1, #64	@ 0x40
 8001d18:	4803      	ldr	r0, [pc, #12]	@ (8001d28 <fan_off+0x18>)
 8001d1a:	f002 facd 	bl	80042b8 <HAL_GPIO_WritePin>
	  printf("Fan_off\r\n");
 8001d1e:	4803      	ldr	r0, [pc, #12]	@ (8001d2c <fan_off+0x1c>)
 8001d20:	f006 faec 	bl	80082fc <puts>

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	0800baf0 	.word	0x0800baf0

08001d30 <Water_P1_Start>:



#if water_pump_en

void Water_P1_Start() {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P1_GPIO_Port, Water_P1_Pin, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d3a:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <Water_P1_Start+0x14>)
 8001d3c:	f002 fabc 	bl	80042b8 <HAL_GPIO_WritePin>
//	printf("Water pump1 start\r\n");
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40020800 	.word	0x40020800

08001d48 <Water_P2_Start>:
void Water_P2_Start() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P2_GPIO_Port, Water_P2_Pin, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d52:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <Water_P2_Start+0x14>)
 8001d54:	f002 fab0 	bl	80042b8 <HAL_GPIO_WritePin>
	//printf("Water pump2 Start\r\n");
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40020800 	.word	0x40020800

08001d60 <Water_P1_Stop>:

void Water_P1_Stop() {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P1_GPIO_Port, Water_P1_Pin, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d6a:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <Water_P1_Stop+0x14>)
 8001d6c:	f002 faa4 	bl	80042b8 <HAL_GPIO_WritePin>
	//printf("Water pump1 stop\r\n");
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40020800 	.word	0x40020800

08001d78 <Water_P2_Stop>:
void Water_P2_Stop() {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P2_GPIO_Port, Water_P2_Pin, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d82:	4802      	ldr	r0, [pc, #8]	@ (8001d8c <Water_P2_Stop+0x14>)
 8001d84:	f002 fa98 	bl	80042b8 <HAL_GPIO_WritePin>
	//printf("Water pump2 Stop\r\n");
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40020800 	.word	0x40020800

08001d90 <light_on>:
//}
//void light_off(){
//	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin,GPIO_PIN_SET );
//	printf("led off\r\n");
//}
void light_on(uint16_t num){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
	uint16_t Pwm = map(num, 0, 4095, 4095, 0);
 8001d9a:	88f8      	ldrh	r0, [r7, #6]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001da4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001da8:	2100      	movs	r1, #0
 8001daa:	f000 f813 	bl	8001dd4 <map>
 8001dae:	4603      	mov	r3, r0
 8001db0:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001db8:	4804      	ldr	r0, [pc, #16]	@ (8001dcc <light_on+0x3c>)
 8001dba:	f002 fa7d 	bl	80042b8 <HAL_GPIO_WritePin>
	TIM11 -> CCR1 = num;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <light_on+0x40>)
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	6353      	str	r3, [r2, #52]	@ 0x34


}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40014800 	.word	0x40014800

08001dd4 <map>:
		HAL_Delay(50);
	}

}

uint16_t map(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001dd4:	b490      	push	{r4, r7}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4604      	mov	r4, r0
 8001ddc:	4608      	mov	r0, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	80fb      	strh	r3, [r7, #6]
 8001de6:	4603      	mov	r3, r0
 8001de8:	80bb      	strh	r3, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	807b      	strh	r3, [r7, #2]
 8001dee:	4613      	mov	r3, r2
 8001df0:	803b      	strh	r3, [r7, #0]
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001df2:	88fa      	ldrh	r2, [r7, #6]
 8001df4:	88bb      	ldrh	r3, [r7, #4]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	8a39      	ldrh	r1, [r7, #16]
 8001dfa:	883a      	ldrh	r2, [r7, #0]
 8001dfc:	1a8a      	subs	r2, r1, r2
 8001dfe:	fb03 f202 	mul.w	r2, r3, r2
 8001e02:	8879      	ldrh	r1, [r7, #2]
 8001e04:	88bb      	ldrh	r3, [r7, #4]
 8001e06:	1acb      	subs	r3, r1, r3
 8001e08:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	883b      	ldrh	r3, [r7, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	b29b      	uxth	r3, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc90      	pop	{r4, r7}
 8001e1c:	4770      	bx	lr
	...

08001e20 <process_commands>:

//


//제어 명령어 -  팬+팰티어, led. 팬, 모터 센서(급수)
void process_commands(int* Cmd_values) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	int fan_flag = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
	printf("Start\r\n");
 8001e2c:	4845      	ldr	r0, [pc, #276]	@ (8001f44 <process_commands+0x124>)
 8001e2e:	f006 fa65 	bl	80082fc <puts>
    for (int i = 0; i < 4; i++) {
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	e079      	b.n	8001f2c <process_commands+0x10c>
        switch (i) {
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d873      	bhi.n	8001f26 <process_commands+0x106>
 8001e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e44 <process_commands+0x24>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001e55 	.word	0x08001e55
 8001e48:	08001e91 	.word	0x08001e91
 8001e4c:	08001ecd 	.word	0x08001ecd
 8001e50:	08001ee1 	.word	0x08001ee1
            case 0: // 온도 관련

                if (Cmd_values[i]==0) {
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <process_commands+0x48>
                	Peltier_Cooling();
 8001e62:	f000 f871 	bl	8001f48 <Peltier_Cooling>
                }
                else if(Cmd_values[i]==2) {

                    Peltier_Normal();
                }
                break;
 8001e66:	e059      	b.n	8001f1c <process_commands+0xfc>
                else if(Cmd_values[i]==1) {
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <process_commands+0x5c>
                	Peltier_Heating();
 8001e76:	f000 f885 	bl	8001f84 <Peltier_Heating>
                break;
 8001e7a:	e04f      	b.n	8001f1c <process_commands+0xfc>
                else if(Cmd_values[i]==2) {
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d148      	bne.n	8001f1c <process_commands+0xfc>
                    Peltier_Normal();
 8001e8a:	f000 f899 	bl	8001fc0 <Peltier_Normal>
                break;
 8001e8e:	e045      	b.n	8001f1c <process_commands+0xfc>
            case 1: // 습도 관련
            	if (Cmd_values[i]==0) {
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <process_commands+0x84>
                	fan_flag = 1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	60fb      	str	r3, [r7, #12]
                	fan_off();
                }
            	else if(Cmd_values[i]==2) {
                	fan_off();
                }
                break;
 8001ea2:	e03d      	b.n	8001f20 <process_commands+0x100>
            	else if(Cmd_values[i]==1) {
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d102      	bne.n	8001eb8 <process_commands+0x98>
                	fan_off();
 8001eb2:	f7ff ff2d 	bl	8001d10 <fan_off>
                break;
 8001eb6:	e033      	b.n	8001f20 <process_commands+0x100>
            	else if(Cmd_values[i]==2) {
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d12c      	bne.n	8001f20 <process_commands+0x100>
                	fan_off();
 8001ec6:	f7ff ff23 	bl	8001d10 <fan_off>
                break;
 8001eca:	e029      	b.n	8001f20 <process_commands+0x100>
            case 2: // Light 관련
            	light_on(Cmd_values[i]);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff59 	bl	8001d90 <light_on>
                break;
 8001ede:	e022      	b.n	8001f26 <process_commands+0x106>

            case 3: // CO2 관련
            	if (Cmd_values[i]==0) {
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <process_commands+0xd4>
                	fan_flag = 1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
                	fan_off();
                }
            	else if(Cmd_values[i]==2) {
                	fan_off();
                }
                break;
 8001ef2:	e017      	b.n	8001f24 <process_commands+0x104>
            	else if(Cmd_values[i]==1) {
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <process_commands+0xe8>
                	fan_off();
 8001f02:	f7ff ff05 	bl	8001d10 <fan_off>
                break;
 8001f06:	e00d      	b.n	8001f24 <process_commands+0x104>
            	else if(Cmd_values[i]==2) {
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4413      	add	r3, r2
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d106      	bne.n	8001f24 <process_commands+0x104>
                	fan_off();
 8001f16:	f7ff fefb 	bl	8001d10 <fan_off>
                break;
 8001f1a:	e003      	b.n	8001f24 <process_commands+0x104>
                break;
 8001f1c:	bf00      	nop
 8001f1e:	e002      	b.n	8001f26 <process_commands+0x106>
                break;
 8001f20:	bf00      	nop
 8001f22:	e000      	b.n	8001f26 <process_commands+0x106>
                break;
 8001f24:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	dd82      	ble.n	8001e38 <process_commands+0x18>
        }
    }
    if(fan_flag == 1){
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <process_commands+0x11c>
    	fan_on();
 8001f38:	f7ff feda 	bl	8001cf0 <fan_on>
    }
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	0800bb0c 	.word	0x0800bb0c

08001f48 <Peltier_Cooling>:
//펠티어 소자

#if pelt_en
void Peltier_Cooling()
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	printf("Cooling Mode\r\n");
 8001f4c:	480a      	ldr	r0, [pc, #40]	@ (8001f78 <Peltier_Cooling+0x30>)
 8001f4e:	f006 f9d5 	bl	80082fc <puts>
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_SET);   // IN1 = HIGH
 8001f52:	2201      	movs	r2, #1
 8001f54:	2104      	movs	r1, #4
 8001f56:	4809      	ldr	r0, [pc, #36]	@ (8001f7c <Peltier_Cooling+0x34>)
 8001f58:	f002 f9ae 	bl	80042b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Peltier2_GPIO_Port, Peltier2_Pin, GPIO_PIN_RESET); // IN2 = LOW
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2108      	movs	r1, #8
 8001f60:	4806      	ldr	r0, [pc, #24]	@ (8001f7c <Peltier_Cooling+0x34>)
 8001f62:	f002 f9a9 	bl	80042b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Fan_Peltier1_GPIO_Port, Fan_Peltier1_Pin, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f6c:	4804      	ldr	r0, [pc, #16]	@ (8001f80 <Peltier_Cooling+0x38>)
 8001f6e:	f002 f9a3 	bl	80042b8 <HAL_GPIO_WritePin>


}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	0800bb14 	.word	0x0800bb14
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40020400 	.word	0x40020400

08001f84 <Peltier_Heating>:

// 난방 모드
void Peltier_Heating()
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	printf("Heating Mode\r\n");
 8001f88:	480a      	ldr	r0, [pc, #40]	@ (8001fb4 <Peltier_Heating+0x30>)
 8001f8a:	f006 f9b7 	bl	80082fc <puts>
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2104      	movs	r1, #4
 8001f92:	4809      	ldr	r0, [pc, #36]	@ (8001fb8 <Peltier_Heating+0x34>)
 8001f94:	f002 f990 	bl	80042b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Peltier2_GPIO_Port, Peltier2_Pin, GPIO_PIN_SET);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	2108      	movs	r1, #8
 8001f9c:	4806      	ldr	r0, [pc, #24]	@ (8001fb8 <Peltier_Heating+0x34>)
 8001f9e:	f002 f98b 	bl	80042b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Fan_Peltier1_GPIO_Port, Fan_Peltier1_Pin, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fa8:	4804      	ldr	r0, [pc, #16]	@ (8001fbc <Peltier_Heating+0x38>)
 8001faa:	f002 f985 	bl	80042b8 <HAL_GPIO_WritePin>

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	0800bb24 	.word	0x0800bb24
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020400 	.word	0x40020400

08001fc0 <Peltier_Normal>:

void Peltier_Normal()
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	printf("Normal Mode\r\n");
 8001fc4:	480a      	ldr	r0, [pc, #40]	@ (8001ff0 <Peltier_Normal+0x30>)
 8001fc6:	f006 f999 	bl	80082fc <puts>
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2104      	movs	r1, #4
 8001fce:	4809      	ldr	r0, [pc, #36]	@ (8001ff4 <Peltier_Normal+0x34>)
 8001fd0:	f002 f972 	bl	80042b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	4806      	ldr	r0, [pc, #24]	@ (8001ff4 <Peltier_Normal+0x34>)
 8001fda:	f002 f96d 	bl	80042b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Fan_Peltier1_GPIO_Port, Fan_Peltier1_Pin, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fe4:	4804      	ldr	r0, [pc, #16]	@ (8001ff8 <Peltier_Normal+0x38>)
 8001fe6:	f002 f967 	bl	80042b8 <HAL_GPIO_WritePin>

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	0800bb34 	.word	0x0800bb34
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020400 	.word	0x40020400

08001ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002000:	b094      	sub	sp, #80	@ 0x50
 8002002:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002004:	f001 f9d8 	bl	80033b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002008:	f000 f9aa 	bl	8002360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800200c:	f7ff f93c 	bl	8001288 <MX_GPIO_Init>
  MX_TIM6_Init();
 8002010:	f000 ff18 	bl	8002e44 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002014:	f001 f8d6 	bl	80031c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002018:	f001 f8fe 	bl	8003218 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800201c:	f7ff f830 	bl	8001080 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002020:	f000 fd04 	bl	8002a2c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002024:	f000 fdae 	bl	8002b84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002028:	f000 fdfa 	bl	8002c20 <MX_TIM3_Init>
  MX_TIM4_Init();
 800202c:	f000 fe46 	bl	8002cbc <MX_TIM4_Init>
  MX_TIM5_Init();
 8002030:	f000 feba 	bl	8002da8 <MX_TIM5_Init>
  MX_DAC_Init();
 8002034:	f7ff f8ba 	bl	80011ac <MX_DAC_Init>
  MX_TIM11_Init();
 8002038:	f000 ff3a 	bl	8002eb0 <MX_TIM11_Init>
  MX_SPI1_Init();
 800203c:	f000 faa4 	bl	8002588 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002040:	f000 f9fc 	bl	800243c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8002044:	48a7      	ldr	r0, [pc, #668]	@ (80022e4 <main+0x2e8>)
 8002046:	f003 f843 	bl	80050d0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 800204a:	48a7      	ldr	r0, [pc, #668]	@ (80022e8 <main+0x2ec>)
 800204c:	f003 f840 	bl	80050d0 <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 8002050:	48a6      	ldr	r0, [pc, #664]	@ (80022ec <main+0x2f0>)
 8002052:	f001 fa5b 	bl	800350c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002056:	f04f 31ff 	mov.w	r1, #4294967295
 800205a:	48a4      	ldr	r0, [pc, #656]	@ (80022ec <main+0x2f0>)
 800205c:	f001 fb5b 	bl	8003716 <HAL_ADC_PollForConversion>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);



  HAL_TIM_Base_Start_IT(&htim2);
 8002060:	48a3      	ldr	r0, [pc, #652]	@ (80022f0 <main+0x2f4>)
 8002062:	f003 f89d 	bl	80051a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002066:	48a3      	ldr	r0, [pc, #652]	@ (80022f4 <main+0x2f8>)
 8002068:	f003 f89a 	bl	80051a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800206c:	48a2      	ldr	r0, [pc, #648]	@ (80022f8 <main+0x2fc>)
 800206e:	f003 f897 	bl	80051a0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002072:	2100      	movs	r1, #0
 8002074:	48a1      	ldr	r0, [pc, #644]	@ (80022fc <main+0x300>)
 8002076:	f003 f95d 	bl	8005334 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800207a:	2100      	movs	r1, #0
 800207c:	48a0      	ldr	r0, [pc, #640]	@ (8002300 <main+0x304>)
 800207e:	f003 f959 	bl	8005334 <HAL_TIM_PWM_Start>
  fan_off();
 8002082:	f7ff fe45 	bl	8001d10 <fan_off>
  Water_P1_Stop();
 8002086:	f7ff fe6b 	bl	8001d60 <Water_P1_Stop>
  Water_P2_Stop();
 800208a:	f7ff fe75 	bl	8001d78 <Water_P2_Stop>
  {



	  //센서 받을 준비 되었냐
	  if( Sensor_flag == 0)
 800208e:	4b9d      	ldr	r3, [pc, #628]	@ (8002304 <main+0x308>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d163      	bne.n	800215e <main+0x162>
	  {

		  printf("Waiting Rpi Test Mode Msg\r\n");
 8002096:	489c      	ldr	r0, [pc, #624]	@ (8002308 <main+0x30c>)
 8002098:	f006 f930 	bl	80082fc <puts>
//		 				temp = temp_x10 / 10.0;
//		 				humi = humi_x10 / 10.0;
//
//		 				printf("ID=0x%03X, 온도=%.1f, 습도=%.1f \r\n", rxMessage.frame.id, temp, humi);
//		 			}
		  if(HAL_UART_Receive(&huart1, (uint8_t *)Test_Msg, 16, 1000)== HAL_OK)
 800209c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a0:	2210      	movs	r2, #16
 80020a2:	499a      	ldr	r1, [pc, #616]	@ (800230c <main+0x310>)
 80020a4:	489a      	ldr	r0, [pc, #616]	@ (8002310 <main+0x314>)
 80020a6:	f004 f982 	bl	80063ae <HAL_UART_Receive>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f040 8113 	bne.w	80022d8 <main+0x2dc>
		  {

			  printf("pass1\r\n");
 80020b2:	4898      	ldr	r0, [pc, #608]	@ (8002314 <main+0x318>)
 80020b4:	f006 f922 	bl	80082fc <puts>
			  Test_Msg[15] = '\0'; // 강제로 문자열 종료
 80020b8:	4b94      	ldr	r3, [pc, #592]	@ (800230c <main+0x310>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	73da      	strb	r2, [r3, #15]
			  printf("Received data = %s\r\n", Test_Msg);
 80020be:	4993      	ldr	r1, [pc, #588]	@ (800230c <main+0x310>)
 80020c0:	4895      	ldr	r0, [pc, #596]	@ (8002318 <main+0x31c>)
 80020c2:	f006 f8b3 	bl	800822c <iprintf>
//				humi = humi_x10 / 10.0;
//
//				//printf("ID=0x%03X, 온도=%.1f, 습도=%.1f \r\n", rxMessage.frame.id, t, h);
//			}

			  float TEMP1 = DHT11_Run_TEMP();		// 온도
 80020c6:	f7ff fba5 	bl	8001814 <DHT11_Run_TEMP>
 80020ca:	ed87 0a05 	vstr	s0, [r7, #20]
			  float RH1 = DHT11_Run_RH();			// 습도
 80020ce:	f7ff fb8d 	bl	80017ec <DHT11_Run_RH>
 80020d2:	ed87 0a04 	vstr	s0, [r7, #16]
			  float lux1 = read_light();
 80020d6:	f7ff fc65 	bl	80019a4 <read_light>
 80020da:	ed87 0a03 	vstr	s0, [r7, #12]
			  printf("TEMP : %.1f RH : %.1f lux : %.1f\r\n", TEMP1, RH1, lux1);
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7fe fa62 	bl	80005a8 <__aeabi_f2d>
 80020e4:	4680      	mov	r8, r0
 80020e6:	4689      	mov	r9, r1
 80020e8:	6938      	ldr	r0, [r7, #16]
 80020ea:	f7fe fa5d 	bl	80005a8 <__aeabi_f2d>
 80020ee:	4604      	mov	r4, r0
 80020f0:	460d      	mov	r5, r1
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7fe fa58 	bl	80005a8 <__aeabi_f2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002100:	e9cd 4500 	strd	r4, r5, [sp]
 8002104:	4642      	mov	r2, r8
 8002106:	464b      	mov	r3, r9
 8002108:	4884      	ldr	r0, [pc, #528]	@ (800231c <main+0x320>)
 800210a:	f006 f88f 	bl	800822c <iprintf>
			  //받은 데이터가 이거냐?
			  if (strcmp(Test_Msg, "\nSTM32 Test Mod") == 0)
 800210e:	4984      	ldr	r1, [pc, #528]	@ (8002320 <main+0x324>)
 8002110:	487e      	ldr	r0, [pc, #504]	@ (800230c <main+0x310>)
 8002112:	f7fe f87d 	bl	8000210 <strcmp>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	f040 80dd 	bne.w	80022d8 <main+0x2dc>
			  {
				  printf("pass2\r\n");
 800211e:	4881      	ldr	r0, [pc, #516]	@ (8002324 <main+0x328>)
 8002120:	f006 f8ec 	bl	80082fc <puts>
				  if(DHT11_Sensor_Test()&&check_light())
 8002124:	f7ff face 	bl	80016c4 <DHT11_Sensor_Test>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80d4 	beq.w	80022d8 <main+0x2dc>
 8002130:	f7ff fb84 	bl	800183c <check_light>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80ce 	beq.w	80022d8 <main+0x2dc>
				  {
					  Sensor_flag = 1;
 800213c:	4b71      	ldr	r3, [pc, #452]	@ (8002304 <main+0x308>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
					  printf("Sensor Check Complete\r\n");
 8002142:	4879      	ldr	r0, [pc, #484]	@ (8002328 <main+0x32c>)
 8002144:	f006 f8da 	bl	80082fc <puts>
					  HAL_UART_Transmit(&huart1, (uint8_t*)pass_sig, strlen(pass_sig), 10);
 8002148:	4878      	ldr	r0, [pc, #480]	@ (800232c <main+0x330>)
 800214a:	f7fe f8c1 	bl	80002d0 <strlen>
 800214e:	4603      	mov	r3, r0
 8002150:	b29a      	uxth	r2, r3
 8002152:	230a      	movs	r3, #10
 8002154:	4975      	ldr	r1, [pc, #468]	@ (800232c <main+0x330>)
 8002156:	486e      	ldr	r0, [pc, #440]	@ (8002310 <main+0x314>)
 8002158:	f004 f89e 	bl	8006298 <HAL_UART_Transmit>
 800215c:	e0bc      	b.n	80022d8 <main+0x2dc>
	  }
	  else
	  {
		  //물 순환 시작
		  //인터럽트로 1분마다 읽게 만들거
		  float TEMP = DHT11_Run_TEMP();		// 온도
 800215e:	f7ff fb59 	bl	8001814 <DHT11_Run_TEMP>
 8002162:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		  float RH = DHT11_Run_RH();			// 습도
 8002166:	f7ff fb41 	bl	80017ec <DHT11_Run_RH>
 800216a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
//			temp = temp_x10 / 10.0;
//			humi = humi_x10 / 10.0;
//
//			printf("ID=0x%03X, 온도=%.1f, 습도=%.1f \r\n", rxMessage.frame.id, temp, humi);
//		}
		  float lux = read_light_lux();				// 전압값(0~4096)
 800216e:	f7ff fc2d 	bl	80019cc <read_light_lux>
 8002172:	ed87 0a08 	vstr	s0, [r7, #32]
		  float co2 = read_co2();				// c02 ppm
 8002176:	f7ff fd15 	bl	8001ba4 <read_co2>
 800217a:	ed87 0a07 	vstr	s0, [r7, #28]
	  	  float w_1 = isWaterDetected1();		// 둘 중 하나 -> 타이머 인터럽트
 800217e:	f7ff fd23 	bl	8001bc8 <isWaterDetected1>
 8002182:	ed87 0a06 	vstr	s0, [r7, #24]
	  	  act_flag = 0;
 8002186:	4b6a      	ldr	r3, [pc, #424]	@ (8002330 <main+0x334>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]

		  printf("TEMP : %.1f RH : %.1f co2 : %.1f lux : %.1f water : %.1f\r\n", TEMP, RH, co2, lux,w_1);
 800218c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800218e:	f7fe fa0b 	bl	80005a8 <__aeabi_f2d>
 8002192:	e9c7 0100 	strd	r0, r1, [r7]
 8002196:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002198:	f7fe fa06 	bl	80005a8 <__aeabi_f2d>
 800219c:	4604      	mov	r4, r0
 800219e:	460d      	mov	r5, r1
 80021a0:	69f8      	ldr	r0, [r7, #28]
 80021a2:	f7fe fa01 	bl	80005a8 <__aeabi_f2d>
 80021a6:	4680      	mov	r8, r0
 80021a8:	4689      	mov	r9, r1
 80021aa:	6a38      	ldr	r0, [r7, #32]
 80021ac:	f7fe f9fc 	bl	80005a8 <__aeabi_f2d>
 80021b0:	4682      	mov	sl, r0
 80021b2:	468b      	mov	fp, r1
 80021b4:	69b8      	ldr	r0, [r7, #24]
 80021b6:	f7fe f9f7 	bl	80005a8 <__aeabi_f2d>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80021c2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80021c6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80021ca:	e9cd 4500 	strd	r4, r5, [sp]
 80021ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021d2:	4858      	ldr	r0, [pc, #352]	@ (8002334 <main+0x338>)
 80021d4:	f006 f82a 	bl	800822c <iprintf>
		  cnt++;
 80021d8:	4b57      	ldr	r3, [pc, #348]	@ (8002338 <main+0x33c>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	3301      	adds	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b55      	ldr	r3, [pc, #340]	@ (8002338 <main+0x33c>)
 80021e2:	801a      	strh	r2, [r3, #0]

		  if(TEMP && cnt == 3){
 80021e4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80021e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f0:	d03e      	beq.n	8002270 <main+0x274>
 80021f2:	4b51      	ldr	r3, [pc, #324]	@ (8002338 <main+0x33c>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d13a      	bne.n	8002270 <main+0x274>
			  // co2,w_height level 반환 대신 그냥 adc값 반환하도록 변경해야됨
			  // 둘 중 하나 사용
			  cnt = 0;
 80021fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002338 <main+0x33c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	801a      	strh	r2, [r3, #0]
			  sprintf(msg_to_Rpi, "%.1f,%.1f,%.1f,%.1f,%.1f\r\n", TEMP, RH, co2, lux, w_1);
 8002200:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002202:	f7fe f9d1 	bl	80005a8 <__aeabi_f2d>
 8002206:	e9c7 0100 	strd	r0, r1, [r7]
 800220a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800220c:	f7fe f9cc 	bl	80005a8 <__aeabi_f2d>
 8002210:	4604      	mov	r4, r0
 8002212:	460d      	mov	r5, r1
 8002214:	69f8      	ldr	r0, [r7, #28]
 8002216:	f7fe f9c7 	bl	80005a8 <__aeabi_f2d>
 800221a:	4680      	mov	r8, r0
 800221c:	4689      	mov	r9, r1
 800221e:	6a38      	ldr	r0, [r7, #32]
 8002220:	f7fe f9c2 	bl	80005a8 <__aeabi_f2d>
 8002224:	4682      	mov	sl, r0
 8002226:	468b      	mov	fp, r1
 8002228:	69b8      	ldr	r0, [r7, #24]
 800222a:	f7fe f9bd 	bl	80005a8 <__aeabi_f2d>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002236:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800223a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800223e:	e9cd 4500 	strd	r4, r5, [sp]
 8002242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002246:	493d      	ldr	r1, [pc, #244]	@ (800233c <main+0x340>)
 8002248:	483d      	ldr	r0, [pc, #244]	@ (8002340 <main+0x344>)
 800224a:	f006 f85f 	bl	800830c <siprintf>
			  printf("%s", msg_to_Rpi);
 800224e:	493c      	ldr	r1, [pc, #240]	@ (8002340 <main+0x344>)
 8002250:	483c      	ldr	r0, [pc, #240]	@ (8002344 <main+0x348>)
 8002252:	f005 ffeb 	bl	800822c <iprintf>
			  HAL_UART_Transmit(&huart1, (char*)msg_to_Rpi, strlen(msg_to_Rpi), 100);
 8002256:	483a      	ldr	r0, [pc, #232]	@ (8002340 <main+0x344>)
 8002258:	f7fe f83a 	bl	80002d0 <strlen>
 800225c:	4603      	mov	r3, r0
 800225e:	b29a      	uxth	r2, r3
 8002260:	2364      	movs	r3, #100	@ 0x64
 8002262:	4937      	ldr	r1, [pc, #220]	@ (8002340 <main+0x344>)
 8002264:	482a      	ldr	r0, [pc, #168]	@ (8002310 <main+0x314>)
 8002266:	f004 f817 	bl	8006298 <HAL_UART_Transmit>
			  HAL_Delay(10);
 800226a:	200a      	movs	r0, #10
 800226c:	f001 f8e6 	bl	800343c <HAL_Delay>

		  }
		  	  // 제어 신호 받으면?????
		  if(HAL_UART_Receive(&huart1, (uint8_t *)Cmd_Msg, 8, 1000)== HAL_OK)
 8002270:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002274:	2208      	movs	r2, #8
 8002276:	4934      	ldr	r1, [pc, #208]	@ (8002348 <main+0x34c>)
 8002278:	4825      	ldr	r0, [pc, #148]	@ (8002310 <main+0x314>)
 800227a:	f004 f898 	bl	80063ae <HAL_UART_Receive>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d122      	bne.n	80022ca <main+0x2ce>
		  {
			  //제어 명령어 -  팬+팰티어, led. 팬, 모터 센서(급수)
			  printf("Received data\r\n");
 8002284:	4831      	ldr	r0, [pc, #196]	@ (800234c <main+0x350>)
 8002286:	f006 f839 	bl	80082fc <puts>
			  Cmd_Msg[8] = '\0';
 800228a:	4b2f      	ldr	r3, [pc, #188]	@ (8002348 <main+0x34c>)
 800228c:	2200      	movs	r2, #0
 800228e:	721a      	strb	r2, [r3, #8]
			  printf("Cmd_Msg = %s",Cmd_Msg); // 강제로 문자열 종료
 8002290:	492d      	ldr	r1, [pc, #180]	@ (8002348 <main+0x34c>)
 8002292:	482f      	ldr	r0, [pc, #188]	@ (8002350 <main+0x354>)
 8002294:	f005 ffca 	bl	800822c <iprintf>
			  parse_fixed_csv(Cmd_Msg);
 8002298:	482b      	ldr	r0, [pc, #172]	@ (8002348 <main+0x34c>)
 800229a:	f7ff fcb3 	bl	8001c04 <parse_fixed_csv>
			  for (int i = 0; i < 4; i++)
 800229e:	2300      	movs	r3, #0
 80022a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022a2:	e00b      	b.n	80022bc <main+0x2c0>
			  {
				  printf("Cmd_values[%d] = %d\r\n", i, Cmd_values[i]);  // 문제 잡기 물 센서 위치에 따라
 80022a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002354 <main+0x358>)
 80022a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	461a      	mov	r2, r3
 80022ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022b0:	4829      	ldr	r0, [pc, #164]	@ (8002358 <main+0x35c>)
 80022b2:	f005 ffbb 	bl	800822c <iprintf>
			  for (int i = 0; i < 4; i++)
 80022b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b8:	3301      	adds	r3, #1
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022be:	2b03      	cmp	r3, #3
 80022c0:	ddf0      	ble.n	80022a4 <main+0x2a8>
			  }
	  	  	  process_commands(Cmd_values);
 80022c2:	4824      	ldr	r0, [pc, #144]	@ (8002354 <main+0x358>)
 80022c4:	f7ff fdac 	bl	8001e20 <process_commands>
 80022c8:	e002      	b.n	80022d0 <main+0x2d4>

		  }
		  else{
			  printf("Receive stage pass\r\n");
 80022ca:	4824      	ldr	r0, [pc, #144]	@ (800235c <main+0x360>)
 80022cc:	f006 f816 	bl	80082fc <puts>
		  }
		  HAL_Delay(1000);		//1분
 80022d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022d4:	f001 f8b2 	bl	800343c <HAL_Delay>
	  }
	  HAL_Delay(5000);			//5초
 80022d8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80022dc:	f001 f8ae 	bl	800343c <HAL_Delay>
	  if( Sensor_flag == 0)
 80022e0:	e6d5      	b.n	800208e <main+0x92>
 80022e2:	bf00      	nop
 80022e4:	20000544 	.word	0x20000544
 80022e8:	200003dc 	.word	0x200003dc
 80022ec:	2000023c 	.word	0x2000023c
 80022f0:	20000424 	.word	0x20000424
 80022f4:	2000046c 	.word	0x2000046c
 80022f8:	200004fc 	.word	0x200004fc
 80022fc:	200004b4 	.word	0x200004b4
 8002300:	2000058c 	.word	0x2000058c
 8002304:	2000032c 	.word	0x2000032c
 8002308:	0800bb9c 	.word	0x0800bb9c
 800230c:	200002ac 	.word	0x200002ac
 8002310:	200005d4 	.word	0x200005d4
 8002314:	0800bbb8 	.word	0x0800bbb8
 8002318:	0800bbc0 	.word	0x0800bbc0
 800231c:	0800bbd8 	.word	0x0800bbd8
 8002320:	0800bbfc 	.word	0x0800bbfc
 8002324:	0800bc0c 	.word	0x0800bc0c
 8002328:	0800bc14 	.word	0x0800bc14
 800232c:	20000040 	.word	0x20000040
 8002330:	2000032d 	.word	0x2000032d
 8002334:	0800bc2c 	.word	0x0800bc2c
 8002338:	20000334 	.word	0x20000334
 800233c:	0800bc68 	.word	0x0800bc68
 8002340:	200002bc 	.word	0x200002bc
 8002344:	0800bc84 	.word	0x0800bc84
 8002348:	200002dc 	.word	0x200002dc
 800234c:	0800bc88 	.word	0x0800bc88
 8002350:	0800bc98 	.word	0x0800bc98
 8002354:	2000029c 	.word	0x2000029c
 8002358:	0800bca8 	.word	0x0800bca8
 800235c:	0800bcc0 	.word	0x0800bcc0

08002360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b094      	sub	sp, #80	@ 0x50
 8002364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	2234      	movs	r2, #52	@ 0x34
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f006 f8c6 	bl	8008500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002374:	f107 0308 	add.w	r3, r7, #8
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002384:	2300      	movs	r3, #0
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	4b2a      	ldr	r3, [pc, #168]	@ (8002434 <SystemClock_Config+0xd4>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	4a29      	ldr	r2, [pc, #164]	@ (8002434 <SystemClock_Config+0xd4>)
 800238e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002392:	6413      	str	r3, [r2, #64]	@ 0x40
 8002394:	4b27      	ldr	r3, [pc, #156]	@ (8002434 <SystemClock_Config+0xd4>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80023a0:	2300      	movs	r3, #0
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <SystemClock_Config+0xd8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80023ac:	4a22      	ldr	r2, [pc, #136]	@ (8002438 <SystemClock_Config+0xd8>)
 80023ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <SystemClock_Config+0xd8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023c0:	2301      	movs	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ca:	2302      	movs	r3, #2
 80023cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023d4:	2308      	movs	r3, #8
 80023d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80023d8:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80023dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023de:	2302      	movs	r3, #2
 80023e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80023e2:	2302      	movs	r3, #2
 80023e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023e6:	2302      	movs	r3, #2
 80023e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 faf8 	bl	80049e4 <HAL_RCC_OscConfig>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80023fa:	f000 f8bf 	bl	800257c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023fe:	230f      	movs	r3, #15
 8002400:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002402:	2302      	movs	r3, #2
 8002404:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800240a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800240e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002414:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	2102      	movs	r1, #2
 800241c:	4618      	mov	r0, r3
 800241e:	f001 ff65 	bl	80042ec <HAL_RCC_ClockConfig>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002428:	f000 f8a8 	bl	800257c <Error_Handler>
  }
}
 800242c:	bf00      	nop
 800242e:	3750      	adds	r7, #80	@ 0x50
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40023800 	.word	0x40023800
 8002438:	40007000 	.word	0x40007000

0800243c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	201c      	movs	r0, #28
 8002446:	f001 fce5 	bl	8003e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800244a:	201c      	movs	r0, #28
 800244c:	f001 fcfe 	bl	8003e4c <HAL_NVIC_EnableIRQ>
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002464:	d121      	bne.n	80024aa <HAL_TIM_PeriodElapsedCallback+0x56>
	{//	0.1s	급수
		if(Sensor_flag == 1)
 8002466:	4b3d      	ldr	r3, [pc, #244]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d11d      	bne.n	80024aa <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			float light = read_light();
 800246e:	f7ff fa99 	bl	80019a4 <read_light>
 8002472:	ed87 0a03 	vstr	s0, [r7, #12]
			light_on((uint16_t)light);
 8002476:	edd7 7a03 	vldr	s15, [r7, #12]
 800247a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800247e:	ee17 3a90 	vmov	r3, s15
 8002482:	b29b      	uxth	r3, r3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fc83 	bl	8001d90 <light_on>
			float w_2 = isWaterDetected1();
 800248a:	f7ff fb9d 	bl	8001bc8 <isWaterDetected1>
 800248e:	ed87 0a02 	vstr	s0, [r7, #8]
			if(w_2 == 0.0){
 8002492:	edd7 7a02 	vldr	s15, [r7, #8]
 8002496:	eef5 7a40 	vcmp.f32	s15, #0.0
 800249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249e:	d102      	bne.n	80024a6 <HAL_TIM_PeriodElapsedCallback+0x52>
				Water_P1_Start(); //급수
 80024a0:	f7ff fc46 	bl	8001d30 <Water_P1_Start>
 80024a4:	e001      	b.n	80024aa <HAL_TIM_PeriodElapsedCallback+0x56>

			}else{
				Water_P1_Stop();
 80024a6:	f7ff fc5b 	bl	8001d60 <Water_P1_Stop>
			}

		}
	}
	if (htim->Instance == TIM3)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d134      	bne.n	800251e <HAL_TIM_PeriodElapsedCallback+0xca>
	{// 60s
		if(Sensor_flag == 1)
 80024b4:	4b29      	ldr	r3, [pc, #164]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d130      	bne.n	800251e <HAL_TIM_PeriodElapsedCallback+0xca>
		{
			(flag->timer1)+=1;
 80024bc:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	785a      	ldrb	r2, [r3, #1]
 80024c2:	4b28      	ldr	r3, [pc, #160]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	3201      	adds	r2, #1
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	705a      	strb	r2, [r3, #1]

			printf("%.1f min pass\r\n", (flag->timer1)/2.0);
 80024cc:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	785b      	ldrb	r3, [r3, #1]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f856 	bl	8000584 <__aeabi_i2d>
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024e0:	f7fe f9e4 	bl	80008ac <__aeabi_ddiv>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	481f      	ldr	r0, [pc, #124]	@ (8002568 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80024ea:	f005 fe9f 	bl	800822c <iprintf>
			if(flag->timer1 == 5){	//1분마다
 80024ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d10b      	bne.n	8002510 <HAL_TIM_PeriodElapsedCallback+0xbc>

				flag->timer1 = 0;
 80024f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2200      	movs	r2, #0
 80024fe:	705a      	strb	r2, [r3, #1]
				flag->water_sensor_flag = 1;
 8002500:	4b18      	ldr	r3, [pc, #96]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
				printf("Water drainage\r\n");
 8002508:	4818      	ldr	r0, [pc, #96]	@ (800256c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800250a:	f005 fef7 	bl	80082fc <puts>
 800250e:	e006      	b.n	800251e <HAL_TIM_PeriodElapsedCallback+0xca>
			}else{
				flag->water_sensor_flag = 0;
 8002510:	4b14      	ldr	r3, [pc, #80]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
				printf("Water drainage stop\r\n");
 8002518:	4815      	ldr	r0, [pc, #84]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800251a:	f005 feef 	bl	80082fc <puts>
			}
		}
	}
	if (htim->Instance == TIM5)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a14      	ldr	r2, [pc, #80]	@ (8002574 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d10d      	bne.n	8002544 <HAL_TIM_PeriodElapsedCallback+0xf0>
	{	// 10s

		if(Sensor_flag == 1){
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d109      	bne.n	8002544 <HAL_TIM_PeriodElapsedCallback+0xf0>

			if(flag->water_sensor_flag == 1){
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d102      	bne.n	8002540 <HAL_TIM_PeriodElapsedCallback+0xec>
				Water_P2_Start();
 800253a:	f7ff fc05 	bl	8001d48 <Water_P2_Start>
 800253e:	e001      	b.n	8002544 <HAL_TIM_PeriodElapsedCallback+0xf0>

			}else{
				Water_P2_Stop();
 8002540:	f7ff fc1a 	bl	8001d78 <Water_P2_Stop>
			}
		}
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0b      	ldr	r2, [pc, #44]	@ (8002578 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_TIM_PeriodElapsedCallback+0xfe>
  {
    HAL_IncTick();
 800254e:	f000 ff55 	bl	80033fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	2000032c 	.word	0x2000032c
 8002560:	40000400 	.word	0x40000400
 8002564:	20000048 	.word	0x20000048
 8002568:	0800bcd4 	.word	0x0800bcd4
 800256c:	0800bce4 	.word	0x0800bce4
 8002570:	0800bcf4 	.word	0x0800bcf4
 8002574:	40000c00 	.word	0x40000c00
 8002578:	40002000 	.word	0x40002000

0800257c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002580:	b672      	cpsid	i
}
 8002582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <Error_Handler+0x8>

08002588 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800258c:	4b17      	ldr	r3, [pc, #92]	@ (80025ec <MX_SPI1_Init+0x64>)
 800258e:	4a18      	ldr	r2, [pc, #96]	@ (80025f0 <MX_SPI1_Init+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002592:	4b16      	ldr	r3, [pc, #88]	@ (80025ec <MX_SPI1_Init+0x64>)
 8002594:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800259a:	4b14      	ldr	r3, [pc, #80]	@ (80025ec <MX_SPI1_Init+0x64>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a0:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <MX_SPI1_Init+0x64>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a6:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <MX_SPI1_Init+0x64>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ac:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <MX_SPI1_Init+0x64>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	@ (80025ec <MX_SPI1_Init+0x64>)
 80025b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025ba:	4b0c      	ldr	r3, [pc, #48]	@ (80025ec <MX_SPI1_Init+0x64>)
 80025bc:	2218      	movs	r2, #24
 80025be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025c0:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <MX_SPI1_Init+0x64>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025c6:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <MX_SPI1_Init+0x64>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025cc:	4b07      	ldr	r3, [pc, #28]	@ (80025ec <MX_SPI1_Init+0x64>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <MX_SPI1_Init+0x64>)
 80025d4:	220a      	movs	r2, #10
 80025d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025d8:	4804      	ldr	r0, [pc, #16]	@ (80025ec <MX_SPI1_Init+0x64>)
 80025da:	f002 fca1 	bl	8004f20 <HAL_SPI_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80025e4:	f7ff ffca 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000338 	.word	0x20000338
 80025f0:	40013000 	.word	0x40013000

080025f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	@ 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a19      	ldr	r2, [pc, #100]	@ (8002678 <HAL_SPI_MspInit+0x84>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d12b      	bne.n	800266e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b18      	ldr	r3, [pc, #96]	@ (800267c <HAL_SPI_MspInit+0x88>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a17      	ldr	r2, [pc, #92]	@ (800267c <HAL_SPI_MspInit+0x88>)
 8002620:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_SPI_MspInit+0x88>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_SPI_MspInit+0x88>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a10      	ldr	r2, [pc, #64]	@ (800267c <HAL_SPI_MspInit+0x88>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <HAL_SPI_MspInit+0x88>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800264e:	2338      	movs	r3, #56	@ 0x38
 8002650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265a:	2303      	movs	r3, #3
 800265c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800265e:	2305      	movs	r3, #5
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	@ (8002680 <HAL_SPI_MspInit+0x8c>)
 800266a:	f001 fc79 	bl	8003f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	@ 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40013000 	.word	0x40013000
 800267c:	40023800 	.word	0x40023800
 8002680:	40020400 	.word	0x40020400

08002684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <HAL_MspInit+0x4c>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	4a0f      	ldr	r2, [pc, #60]	@ (80026d0 <HAL_MspInit+0x4c>)
 8002694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002698:	6453      	str	r3, [r2, #68]	@ 0x44
 800269a:	4b0d      	ldr	r3, [pc, #52]	@ (80026d0 <HAL_MspInit+0x4c>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <HAL_MspInit+0x4c>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	4a08      	ldr	r2, [pc, #32]	@ (80026d0 <HAL_MspInit+0x4c>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_MspInit+0x4c>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08e      	sub	sp, #56	@ 0x38
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	4b33      	ldr	r3, [pc, #204]	@ (80027b8 <HAL_InitTick+0xe4>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	4a32      	ldr	r2, [pc, #200]	@ (80027b8 <HAL_InitTick+0xe4>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f4:	4b30      	ldr	r3, [pc, #192]	@ (80027b8 <HAL_InitTick+0xe4>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002700:	f107 0210 	add.w	r2, r7, #16
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f001 ff08 	bl	8004520 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800271a:	f001 fed9 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 800271e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002720:	e004      	b.n	800272c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002722:	f001 fed5 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8002726:	4603      	mov	r3, r0
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800272c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272e:	4a23      	ldr	r2, [pc, #140]	@ (80027bc <HAL_InitTick+0xe8>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	0c9b      	lsrs	r3, r3, #18
 8002736:	3b01      	subs	r3, #1
 8002738:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800273a:	4b21      	ldr	r3, [pc, #132]	@ (80027c0 <HAL_InitTick+0xec>)
 800273c:	4a21      	ldr	r2, [pc, #132]	@ (80027c4 <HAL_InitTick+0xf0>)
 800273e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002740:	4b1f      	ldr	r3, [pc, #124]	@ (80027c0 <HAL_InitTick+0xec>)
 8002742:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002746:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002748:	4a1d      	ldr	r2, [pc, #116]	@ (80027c0 <HAL_InitTick+0xec>)
 800274a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800274e:	4b1c      	ldr	r3, [pc, #112]	@ (80027c0 <HAL_InitTick+0xec>)
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002754:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <HAL_InitTick+0xec>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275a:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <HAL_InitTick+0xec>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002760:	4817      	ldr	r0, [pc, #92]	@ (80027c0 <HAL_InitTick+0xec>)
 8002762:	f002 fc66 	bl	8005032 <HAL_TIM_Base_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800276c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11b      	bne.n	80027ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002774:	4812      	ldr	r0, [pc, #72]	@ (80027c0 <HAL_InitTick+0xec>)
 8002776:	f002 fd13 	bl	80051a0 <HAL_TIM_Base_Start_IT>
 800277a:	4603      	mov	r3, r0
 800277c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002780:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002784:	2b00      	cmp	r3, #0
 8002786:	d111      	bne.n	80027ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002788:	202d      	movs	r0, #45	@ 0x2d
 800278a:	f001 fb5f 	bl	8003e4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b0f      	cmp	r3, #15
 8002792:	d808      	bhi.n	80027a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002794:	2200      	movs	r2, #0
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	202d      	movs	r0, #45	@ 0x2d
 800279a:	f001 fb3b 	bl	8003e14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800279e:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <HAL_InitTick+0xf4>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	e002      	b.n	80027ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80027ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3738      	adds	r7, #56	@ 0x38
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	20000390 	.word	0x20000390
 80027c4:	40002000 	.word	0x40002000
 80027c8:	20000050 	.word	0x20000050

080027cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <NMI_Handler+0x4>

080027d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <MemManage_Handler+0x4>

080027e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <BusFault_Handler+0x4>

080027ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <UsageFault_Handler+0x4>

080027f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002830:	4802      	ldr	r0, [pc, #8]	@ (800283c <TIM2_IRQHandler+0x10>)
 8002832:	f002 fe47 	bl	80054c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000424 	.word	0x20000424

08002840 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002844:	4802      	ldr	r0, [pc, #8]	@ (8002850 <TIM3_IRQHandler+0x10>)
 8002846:	f002 fe3d 	bl	80054c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2000046c 	.word	0x2000046c

08002854 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002858:	4802      	ldr	r0, [pc, #8]	@ (8002864 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800285a:	f002 fe33 	bl	80054c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000390 	.word	0x20000390

08002868 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800286c:	4802      	ldr	r0, [pc, #8]	@ (8002878 <TIM5_IRQHandler+0x10>)
 800286e:	f002 fe29 	bl	80054c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200004fc 	.word	0x200004fc

0800287c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return 1;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_kill>:

int _kill(int pid, int sig)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002896:	f005 fe85 	bl	80085a4 <__errno>
 800289a:	4603      	mov	r3, r0
 800289c:	2216      	movs	r2, #22
 800289e:	601a      	str	r2, [r3, #0]
  return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_exit>:

void _exit (int status)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ffe7 	bl	800288c <_kill>
  while (1) {}    /* Make sure we hang here */
 80028be:	bf00      	nop
 80028c0:	e7fd      	b.n	80028be <_exit+0x12>

080028c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e00a      	b.n	80028ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d4:	f3af 8000 	nop.w
 80028d8:	4601      	mov	r1, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	60ba      	str	r2, [r7, #8]
 80028e0:	b2ca      	uxtb	r2, r1
 80028e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	dbf0      	blt.n	80028d4 <_read+0x12>
  }

  return len;
 80028f2:	687b      	ldr	r3, [r7, #4]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e009      	b.n	8002922 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	60ba      	str	r2, [r7, #8]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fd72 	bl	8001400 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3301      	adds	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	dbf1      	blt.n	800290e <_write+0x12>
  }
  return len;
 800292a:	687b      	ldr	r3, [r7, #4]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_close>:

int _close(int file)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800295c:	605a      	str	r2, [r3, #4]
  return 0;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_isatty>:

int _isatty(int file)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002974:	2301      	movs	r3, #1
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <_sbrk+0x5c>)
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <_sbrk+0x60>)
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b8:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <_sbrk+0x64>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <_sbrk+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029cc:	f005 fdea 	bl	80085a4 <__errno>
 80029d0:	4603      	mov	r3, r0
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	e009      	b.n	80029f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029dc:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a05      	ldr	r2, [pc, #20]	@ (8002a00 <_sbrk+0x64>)
 80029ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20020000 	.word	0x20020000
 80029fc:	00000400 	.word	0x00000400
 8002a00:	200003d8 	.word	0x200003d8
 8002a04:	200007b8 	.word	0x200007b8

08002a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <SystemInit+0x20>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	4a05      	ldr	r2, [pc, #20]	@ (8002a28 <SystemInit+0x20>)
 8002a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b096      	sub	sp, #88	@ 0x58
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a32:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
 8002a58:	611a      	str	r2, [r3, #16]
 8002a5a:	615a      	str	r2, [r3, #20]
 8002a5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2220      	movs	r2, #32
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f005 fd4b 	bl	8008500 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a6a:	4b44      	ldr	r3, [pc, #272]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002a6c:	4a44      	ldr	r2, [pc, #272]	@ (8002b80 <MX_TIM1_Init+0x154>)
 8002a6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 8002a70:	4b42      	ldr	r3, [pc, #264]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002a72:	2259      	movs	r2, #89	@ 0x59
 8002a74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a76:	4b41      	ldr	r3, [pc, #260]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8002a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002a7e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002a82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a84:	4b3d      	ldr	r3, [pc, #244]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a90:	4b3a      	ldr	r3, [pc, #232]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a96:	4839      	ldr	r0, [pc, #228]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002a98:	f002 facb 	bl	8005032 <HAL_TIM_Base_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002aa2:	f7ff fd6b 	bl	800257c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002aac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4832      	ldr	r0, [pc, #200]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002ab4:	f002 feb8 	bl	8005828 <HAL_TIM_ConfigClockSource>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002abe:	f7ff fd5d 	bl	800257c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ac2:	482e      	ldr	r0, [pc, #184]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002ac4:	f002 fbdc 	bl	8005280 <HAL_TIM_PWM_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002ace:	f7ff fd55 	bl	800257c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ada:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4826      	ldr	r0, [pc, #152]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002ae2:	f003 faa7 	bl	8006034 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002aec:	f7ff fd46 	bl	800257c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002af0:	2360      	movs	r3, #96	@ 0x60
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002afc:	2300      	movs	r3, #0
 8002afe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b10:	2200      	movs	r2, #0
 8002b12:	4619      	mov	r1, r3
 8002b14:	4819      	ldr	r0, [pc, #100]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002b16:	f002 fdc5 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002b20:	f7ff fd2c 	bl	800257c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b28:	220c      	movs	r2, #12
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4813      	ldr	r0, [pc, #76]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002b2e:	f002 fdb9 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002b38:	f7ff fd20 	bl	800257c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4807      	ldr	r0, [pc, #28]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002b60:	f003 fae4 	bl	800612c <HAL_TIMEx_ConfigBreakDeadTime>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002b6a:	f7ff fd07 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b6e:	4803      	ldr	r0, [pc, #12]	@ (8002b7c <MX_TIM1_Init+0x150>)
 8002b70:	f000 fa9e 	bl	80030b0 <HAL_TIM_MspPostInit>

}
 8002b74:	bf00      	nop
 8002b76:	3758      	adds	r7, #88	@ 0x58
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	200003dc 	.word	0x200003dc
 8002b80:	40010000 	.word	0x40010000

08002b84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b8a:	f107 0308 	add.w	r3, r7, #8
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b98:	463b      	mov	r3, r7
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <MX_TIM2_Init+0x98>)
 8002ba2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000-1;
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c1c <MX_TIM2_Init+0x98>)
 8002baa:	f242 3227 	movw	r2, #8999	@ 0x2327
 8002bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <MX_TIM2_Init+0x98>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002bb6:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <MX_TIM2_Init+0x98>)
 8002bb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbe:	4b17      	ldr	r3, [pc, #92]	@ (8002c1c <MX_TIM2_Init+0x98>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bc4:	4b15      	ldr	r3, [pc, #84]	@ (8002c1c <MX_TIM2_Init+0x98>)
 8002bc6:	2280      	movs	r2, #128	@ 0x80
 8002bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bca:	4814      	ldr	r0, [pc, #80]	@ (8002c1c <MX_TIM2_Init+0x98>)
 8002bcc:	f002 fa31 	bl	8005032 <HAL_TIM_Base_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002bd6:	f7ff fcd1 	bl	800257c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002be0:	f107 0308 	add.w	r3, r7, #8
 8002be4:	4619      	mov	r1, r3
 8002be6:	480d      	ldr	r0, [pc, #52]	@ (8002c1c <MX_TIM2_Init+0x98>)
 8002be8:	f002 fe1e 	bl	8005828 <HAL_TIM_ConfigClockSource>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002bf2:	f7ff fcc3 	bl	800257c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bfe:	463b      	mov	r3, r7
 8002c00:	4619      	mov	r1, r3
 8002c02:	4806      	ldr	r0, [pc, #24]	@ (8002c1c <MX_TIM2_Init+0x98>)
 8002c04:	f003 fa16 	bl	8006034 <HAL_TIMEx_MasterConfigSynchronization>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002c0e:	f7ff fcb5 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000424 	.word	0x20000424

08002c20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c34:	463b      	mov	r3, r7
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb4 <MX_TIM3_Init+0x94>)
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb8 <MX_TIM3_Init+0x98>)
 8002c40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45000-1;
 8002c42:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb4 <MX_TIM3_Init+0x94>)
 8002c44:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 8002c48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb4 <MX_TIM3_Init+0x94>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8002c50:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <MX_TIM3_Init+0x94>)
 8002c52:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002c56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c58:	4b16      	ldr	r3, [pc, #88]	@ (8002cb4 <MX_TIM3_Init+0x94>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c5e:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <MX_TIM3_Init+0x94>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c64:	4813      	ldr	r0, [pc, #76]	@ (8002cb4 <MX_TIM3_Init+0x94>)
 8002c66:	f002 f9e4 	bl	8005032 <HAL_TIM_Base_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002c70:	f7ff fc84 	bl	800257c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	4619      	mov	r1, r3
 8002c80:	480c      	ldr	r0, [pc, #48]	@ (8002cb4 <MX_TIM3_Init+0x94>)
 8002c82:	f002 fdd1 	bl	8005828 <HAL_TIM_ConfigClockSource>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002c8c:	f7ff fc76 	bl	800257c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c90:	2300      	movs	r3, #0
 8002c92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c98:	463b      	mov	r3, r7
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4805      	ldr	r0, [pc, #20]	@ (8002cb4 <MX_TIM3_Init+0x94>)
 8002c9e:	f003 f9c9 	bl	8006034 <HAL_TIMEx_MasterConfigSynchronization>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002ca8:	f7ff fc68 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cac:	bf00      	nop
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	2000046c 	.word	0x2000046c
 8002cb8:	40000400 	.word	0x40000400

08002cbc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08e      	sub	sp, #56	@ 0x38
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd0:	f107 0320 	add.w	r3, r7, #32
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
 8002ce8:	615a      	str	r2, [r3, #20]
 8002cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cec:	4b2c      	ldr	r3, [pc, #176]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002cee:	4a2d      	ldr	r2, [pc, #180]	@ (8002da4 <MX_TIM4_Init+0xe8>)
 8002cf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002cf4:	2259      	movs	r2, #89	@ 0x59
 8002cf6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf8:	4b29      	ldr	r3, [pc, #164]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000-1;
 8002cfe:	4b28      	ldr	r3, [pc, #160]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002d00:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8002d04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d06:	4b26      	ldr	r3, [pc, #152]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d0c:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d12:	4823      	ldr	r0, [pc, #140]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002d14:	f002 f98d 	bl	8005032 <HAL_TIM_Base_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002d1e:	f7ff fc2d 	bl	800257c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	481c      	ldr	r0, [pc, #112]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002d30:	f002 fd7a 	bl	8005828 <HAL_TIM_ConfigClockSource>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002d3a:	f7ff fc1f 	bl	800257c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d3e:	4818      	ldr	r0, [pc, #96]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002d40:	f002 fa9e 	bl	8005280 <HAL_TIM_PWM_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002d4a:	f7ff fc17 	bl	800257c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d56:	f107 0320 	add.w	r3, r7, #32
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4810      	ldr	r0, [pc, #64]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002d5e:	f003 f969 	bl	8006034 <HAL_TIMEx_MasterConfigSynchronization>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002d68:	f7ff fc08 	bl	800257c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d6c:	2360      	movs	r3, #96	@ 0x60
 8002d6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d7c:	1d3b      	adds	r3, r7, #4
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4619      	mov	r1, r3
 8002d82:	4807      	ldr	r0, [pc, #28]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002d84:	f002 fc8e 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002d8e:	f7ff fbf5 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d92:	4803      	ldr	r0, [pc, #12]	@ (8002da0 <MX_TIM4_Init+0xe4>)
 8002d94:	f000 f98c 	bl	80030b0 <HAL_TIM_MspPostInit>

}
 8002d98:	bf00      	nop
 8002d9a:	3738      	adds	r7, #56	@ 0x38
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200004b4 	.word	0x200004b4
 8002da4:	40000800 	.word	0x40000800

08002da8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dae:	f107 0308 	add.w	r3, r7, #8
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <MX_TIM5_Init+0x94>)
 8002dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e40 <MX_TIM5_Init+0x98>)
 8002dc8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9000-1;
 8002dca:	4b1c      	ldr	r3, [pc, #112]	@ (8002e3c <MX_TIM5_Init+0x94>)
 8002dcc:	f242 3227 	movw	r2, #8999	@ 0x2327
 8002dd0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e3c <MX_TIM5_Init+0x94>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002dd8:	4b18      	ldr	r3, [pc, #96]	@ (8002e3c <MX_TIM5_Init+0x94>)
 8002dda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002dde:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de0:	4b16      	ldr	r3, [pc, #88]	@ (8002e3c <MX_TIM5_Init+0x94>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de6:	4b15      	ldr	r3, [pc, #84]	@ (8002e3c <MX_TIM5_Init+0x94>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002dec:	4813      	ldr	r0, [pc, #76]	@ (8002e3c <MX_TIM5_Init+0x94>)
 8002dee:	f002 f920 	bl	8005032 <HAL_TIM_Base_Init>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002df8:	f7ff fbc0 	bl	800257c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e02:	f107 0308 	add.w	r3, r7, #8
 8002e06:	4619      	mov	r1, r3
 8002e08:	480c      	ldr	r0, [pc, #48]	@ (8002e3c <MX_TIM5_Init+0x94>)
 8002e0a:	f002 fd0d 	bl	8005828 <HAL_TIM_ConfigClockSource>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002e14:	f7ff fbb2 	bl	800257c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e20:	463b      	mov	r3, r7
 8002e22:	4619      	mov	r1, r3
 8002e24:	4805      	ldr	r0, [pc, #20]	@ (8002e3c <MX_TIM5_Init+0x94>)
 8002e26:	f003 f905 	bl	8006034 <HAL_TIMEx_MasterConfigSynchronization>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002e30:	f7ff fba4 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	200004fc 	.word	0x200004fc
 8002e40:	40000c00 	.word	0x40000c00

08002e44 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e4a:	463b      	mov	r3, r7
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <MX_TIM6_Init+0x64>)
 8002e54:	4a15      	ldr	r2, [pc, #84]	@ (8002eac <MX_TIM6_Init+0x68>)
 8002e56:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8002e58:	4b13      	ldr	r3, [pc, #76]	@ (8002ea8 <MX_TIM6_Init+0x64>)
 8002e5a:	2259      	movs	r2, #89	@ 0x59
 8002e5c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ea8 <MX_TIM6_Init+0x64>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535-1;
 8002e64:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <MX_TIM6_Init+0x64>)
 8002e66:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002e6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <MX_TIM6_Init+0x64>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e72:	480d      	ldr	r0, [pc, #52]	@ (8002ea8 <MX_TIM6_Init+0x64>)
 8002e74:	f002 f8dd 	bl	8005032 <HAL_TIM_Base_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002e7e:	f7ff fb7d 	bl	800257c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e8a:	463b      	mov	r3, r7
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4806      	ldr	r0, [pc, #24]	@ (8002ea8 <MX_TIM6_Init+0x64>)
 8002e90:	f003 f8d0 	bl	8006034 <HAL_TIMEx_MasterConfigSynchronization>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002e9a:	f7ff fb6f 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000544 	.word	0x20000544
 8002eac:	40001000 	.word	0x40001000

08002eb0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
 8002ec4:	615a      	str	r2, [r3, #20]
 8002ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f44 <MX_TIM11_Init+0x94>)
 8002eca:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <MX_TIM11_Init+0x98>)
 8002ecc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9-1;
 8002ece:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <MX_TIM11_Init+0x94>)
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <MX_TIM11_Init+0x94>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <MX_TIM11_Init+0x94>)
 8002edc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002ee0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee2:	4b18      	ldr	r3, [pc, #96]	@ (8002f44 <MX_TIM11_Init+0x94>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee8:	4b16      	ldr	r3, [pc, #88]	@ (8002f44 <MX_TIM11_Init+0x94>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002eee:	4815      	ldr	r0, [pc, #84]	@ (8002f44 <MX_TIM11_Init+0x94>)
 8002ef0:	f002 f89f 	bl	8005032 <HAL_TIM_Base_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002efa:	f7ff fb3f 	bl	800257c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002efe:	4811      	ldr	r0, [pc, #68]	@ (8002f44 <MX_TIM11_Init+0x94>)
 8002f00:	f002 f9be 	bl	8005280 <HAL_TIM_PWM_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002f0a:	f7ff fb37 	bl	800257c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f0e:	2360      	movs	r3, #96	@ 0x60
 8002f10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	2200      	movs	r2, #0
 8002f22:	4619      	mov	r1, r3
 8002f24:	4807      	ldr	r0, [pc, #28]	@ (8002f44 <MX_TIM11_Init+0x94>)
 8002f26:	f002 fbbd 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002f30:	f7ff fb24 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002f34:	4803      	ldr	r0, [pc, #12]	@ (8002f44 <MX_TIM11_Init+0x94>)
 8002f36:	f000 f8bb 	bl	80030b0 <HAL_TIM_MspPostInit>

}
 8002f3a:	bf00      	nop
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2000058c 	.word	0x2000058c
 8002f48:	40014800 	.word	0x40014800

08002f4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	@ 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a4e      	ldr	r2, [pc, #312]	@ (8003094 <HAL_TIM_Base_MspInit+0x148>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f62:	4b4d      	ldr	r3, [pc, #308]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	4a4c      	ldr	r2, [pc, #304]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002f7a:	e086      	b.n	800308a <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f84:	d10e      	bne.n	8002fa4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	623b      	str	r3, [r7, #32]
 8002f8a:	4b43      	ldr	r3, [pc, #268]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	4a42      	ldr	r2, [pc, #264]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f96:	4b40      	ldr	r3, [pc, #256]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
}
 8002fa2:	e072      	b.n	800308a <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM3)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800309c <HAL_TIM_Base_MspInit+0x150>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d116      	bne.n	8002fdc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	4b39      	ldr	r3, [pc, #228]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	4a38      	ldr	r2, [pc, #224]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002fb8:	f043 0302 	orr.w	r3, r3, #2
 8002fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fbe:	4b36      	ldr	r3, [pc, #216]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	201d      	movs	r0, #29
 8002fd0:	f000 ff20 	bl	8003e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fd4:	201d      	movs	r0, #29
 8002fd6:	f000 ff39 	bl	8003e4c <HAL_NVIC_EnableIRQ>
}
 8002fda:	e056      	b.n	800308a <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM4)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80030a0 <HAL_TIM_Base_MspInit+0x154>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	4b2b      	ldr	r3, [pc, #172]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	4a2a      	ldr	r2, [pc, #168]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff6:	4b28      	ldr	r3, [pc, #160]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	69bb      	ldr	r3, [r7, #24]
}
 8003002:	e042      	b.n	800308a <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM5)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a26      	ldr	r2, [pc, #152]	@ (80030a4 <HAL_TIM_Base_MspInit+0x158>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d116      	bne.n	800303c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	4b21      	ldr	r3, [pc, #132]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	4a20      	ldr	r2, [pc, #128]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8003018:	f043 0308 	orr.w	r3, r3, #8
 800301c:	6413      	str	r3, [r2, #64]	@ 0x40
 800301e:	4b1e      	ldr	r3, [pc, #120]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800302a:	2200      	movs	r2, #0
 800302c:	2100      	movs	r1, #0
 800302e:	2032      	movs	r0, #50	@ 0x32
 8003030:	f000 fef0 	bl	8003e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003034:	2032      	movs	r0, #50	@ 0x32
 8003036:	f000 ff09 	bl	8003e4c <HAL_NVIC_EnableIRQ>
}
 800303a:	e026      	b.n	800308a <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM6)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a19      	ldr	r2, [pc, #100]	@ (80030a8 <HAL_TIM_Base_MspInit+0x15c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	4a12      	ldr	r2, [pc, #72]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8003050:	f043 0310 	orr.w	r3, r3, #16
 8003054:	6413      	str	r3, [r2, #64]	@ 0x40
 8003056:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
}
 8003062:	e012      	b.n	800308a <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM11)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a10      	ldr	r2, [pc, #64]	@ (80030ac <HAL_TIM_Base_MspInit+0x160>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10d      	bne.n	800308a <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	4a08      	ldr	r2, [pc, #32]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800307c:	6453      	str	r3, [r2, #68]	@ 0x44
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <HAL_TIM_Base_MspInit+0x14c>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
}
 800308a:	bf00      	nop
 800308c:	3728      	adds	r7, #40	@ 0x28
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000
 8003098:	40023800 	.word	0x40023800
 800309c:	40000400 	.word	0x40000400
 80030a0:	40000800 	.word	0x40000800
 80030a4:	40000c00 	.word	0x40000c00
 80030a8:	40001000 	.word	0x40001000
 80030ac:	40014800 	.word	0x40014800

080030b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	@ 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a37      	ldr	r2, [pc, #220]	@ (80031ac <HAL_TIM_MspPostInit+0xfc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d11f      	bne.n	8003112 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	4b36      	ldr	r3, [pc, #216]	@ (80031b0 <HAL_TIM_MspPostInit+0x100>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	4a35      	ldr	r2, [pc, #212]	@ (80031b0 <HAL_TIM_MspPostInit+0x100>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e2:	4b33      	ldr	r3, [pc, #204]	@ (80031b0 <HAL_TIM_MspPostInit+0x100>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80030ee:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80030f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f4:	2302      	movs	r3, #2
 80030f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030fc:	2302      	movs	r3, #2
 80030fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003100:	2301      	movs	r3, #1
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	4619      	mov	r1, r3
 800310a:	482a      	ldr	r0, [pc, #168]	@ (80031b4 <HAL_TIM_MspPostInit+0x104>)
 800310c:	f000 ff28 	bl	8003f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003110:	e047      	b.n	80031a2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM4)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a28      	ldr	r2, [pc, #160]	@ (80031b8 <HAL_TIM_MspPostInit+0x108>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d11e      	bne.n	800315a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	4b23      	ldr	r3, [pc, #140]	@ (80031b0 <HAL_TIM_MspPostInit+0x100>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	4a22      	ldr	r2, [pc, #136]	@ (80031b0 <HAL_TIM_MspPostInit+0x100>)
 8003126:	f043 0302 	orr.w	r3, r3, #2
 800312a:	6313      	str	r3, [r2, #48]	@ 0x30
 800312c:	4b20      	ldr	r3, [pc, #128]	@ (80031b0 <HAL_TIM_MspPostInit+0x100>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003138:	2340      	movs	r3, #64	@ 0x40
 800313a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313c:	2302      	movs	r3, #2
 800313e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003144:	2300      	movs	r3, #0
 8003146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003148:	2302      	movs	r3, #2
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	4619      	mov	r1, r3
 8003152:	481a      	ldr	r0, [pc, #104]	@ (80031bc <HAL_TIM_MspPostInit+0x10c>)
 8003154:	f000 ff04 	bl	8003f60 <HAL_GPIO_Init>
}
 8003158:	e023      	b.n	80031a2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM11)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a18      	ldr	r2, [pc, #96]	@ (80031c0 <HAL_TIM_MspPostInit+0x110>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d11e      	bne.n	80031a2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_TIM_MspPostInit+0x100>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316c:	4a10      	ldr	r2, [pc, #64]	@ (80031b0 <HAL_TIM_MspPostInit+0x100>)
 800316e:	f043 0302 	orr.w	r3, r3, #2
 8003172:	6313      	str	r3, [r2, #48]	@ 0x30
 8003174:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <HAL_TIM_MspPostInit+0x100>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003180:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	2300      	movs	r3, #0
 8003190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003192:	2303      	movs	r3, #3
 8003194:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	4619      	mov	r1, r3
 800319c:	4807      	ldr	r0, [pc, #28]	@ (80031bc <HAL_TIM_MspPostInit+0x10c>)
 800319e:	f000 fedf 	bl	8003f60 <HAL_GPIO_Init>
}
 80031a2:	bf00      	nop
 80031a4:	3728      	adds	r7, #40	@ 0x28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	40000800 	.word	0x40000800
 80031bc:	40020400 	.word	0x40020400
 80031c0:	40014800 	.word	0x40014800

080031c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031c8:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <MX_USART1_UART_Init+0x4c>)
 80031ca:	4a12      	ldr	r2, [pc, #72]	@ (8003214 <MX_USART1_UART_Init+0x50>)
 80031cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031ce:	4b10      	ldr	r3, [pc, #64]	@ (8003210 <MX_USART1_UART_Init+0x4c>)
 80031d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <MX_USART1_UART_Init+0x4c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <MX_USART1_UART_Init+0x4c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <MX_USART1_UART_Init+0x4c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <MX_USART1_UART_Init+0x4c>)
 80031ea:	220c      	movs	r2, #12
 80031ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <MX_USART1_UART_Init+0x4c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f4:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <MX_USART1_UART_Init+0x4c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031fa:	4805      	ldr	r0, [pc, #20]	@ (8003210 <MX_USART1_UART_Init+0x4c>)
 80031fc:	f002 fffc 	bl	80061f8 <HAL_UART_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003206:	f7ff f9b9 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200005d4 	.word	0x200005d4
 8003214:	40011000 	.word	0x40011000

08003218 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800321c:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <MX_USART2_UART_Init+0x4c>)
 800321e:	4a12      	ldr	r2, [pc, #72]	@ (8003268 <MX_USART2_UART_Init+0x50>)
 8003220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003222:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <MX_USART2_UART_Init+0x4c>)
 8003224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800322a:	4b0e      	ldr	r3, [pc, #56]	@ (8003264 <MX_USART2_UART_Init+0x4c>)
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003230:	4b0c      	ldr	r3, [pc, #48]	@ (8003264 <MX_USART2_UART_Init+0x4c>)
 8003232:	2200      	movs	r2, #0
 8003234:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003236:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <MX_USART2_UART_Init+0x4c>)
 8003238:	2200      	movs	r2, #0
 800323a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800323c:	4b09      	ldr	r3, [pc, #36]	@ (8003264 <MX_USART2_UART_Init+0x4c>)
 800323e:	220c      	movs	r2, #12
 8003240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003242:	4b08      	ldr	r3, [pc, #32]	@ (8003264 <MX_USART2_UART_Init+0x4c>)
 8003244:	2200      	movs	r2, #0
 8003246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003248:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <MX_USART2_UART_Init+0x4c>)
 800324a:	2200      	movs	r2, #0
 800324c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800324e:	4805      	ldr	r0, [pc, #20]	@ (8003264 <MX_USART2_UART_Init+0x4c>)
 8003250:	f002 ffd2 	bl	80061f8 <HAL_UART_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800325a:	f7ff f98f 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	2000061c 	.word	0x2000061c
 8003268:	40004400 	.word	0x40004400

0800326c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	@ 0x30
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 031c 	add.w	r3, r7, #28
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a32      	ldr	r2, [pc, #200]	@ (8003354 <HAL_UART_MspInit+0xe8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d12d      	bne.n	80032ea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	4b31      	ldr	r3, [pc, #196]	@ (8003358 <HAL_UART_MspInit+0xec>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	4a30      	ldr	r2, [pc, #192]	@ (8003358 <HAL_UART_MspInit+0xec>)
 8003298:	f043 0310 	orr.w	r3, r3, #16
 800329c:	6453      	str	r3, [r2, #68]	@ 0x44
 800329e:	4b2e      	ldr	r3, [pc, #184]	@ (8003358 <HAL_UART_MspInit+0xec>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003358 <HAL_UART_MspInit+0xec>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	4a29      	ldr	r2, [pc, #164]	@ (8003358 <HAL_UART_MspInit+0xec>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ba:	4b27      	ldr	r3, [pc, #156]	@ (8003358 <HAL_UART_MspInit+0xec>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80032ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032cc:	2302      	movs	r3, #2
 80032ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d4:	2303      	movs	r3, #3
 80032d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032d8:	2307      	movs	r3, #7
 80032da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032dc:	f107 031c 	add.w	r3, r7, #28
 80032e0:	4619      	mov	r1, r3
 80032e2:	481e      	ldr	r0, [pc, #120]	@ (800335c <HAL_UART_MspInit+0xf0>)
 80032e4:	f000 fe3c 	bl	8003f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80032e8:	e030      	b.n	800334c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003360 <HAL_UART_MspInit+0xf4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d12b      	bne.n	800334c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	4b17      	ldr	r3, [pc, #92]	@ (8003358 <HAL_UART_MspInit+0xec>)
 80032fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fc:	4a16      	ldr	r2, [pc, #88]	@ (8003358 <HAL_UART_MspInit+0xec>)
 80032fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003302:	6413      	str	r3, [r2, #64]	@ 0x40
 8003304:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <HAL_UART_MspInit+0xec>)
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <HAL_UART_MspInit+0xec>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	4a0f      	ldr	r2, [pc, #60]	@ (8003358 <HAL_UART_MspInit+0xec>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003320:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <HAL_UART_MspInit+0xec>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800332c:	230c      	movs	r3, #12
 800332e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003338:	2303      	movs	r3, #3
 800333a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800333c:	2307      	movs	r3, #7
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003340:	f107 031c 	add.w	r3, r7, #28
 8003344:	4619      	mov	r1, r3
 8003346:	4805      	ldr	r0, [pc, #20]	@ (800335c <HAL_UART_MspInit+0xf0>)
 8003348:	f000 fe0a 	bl	8003f60 <HAL_GPIO_Init>
}
 800334c:	bf00      	nop
 800334e:	3730      	adds	r7, #48	@ 0x30
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40011000 	.word	0x40011000
 8003358:	40023800 	.word	0x40023800
 800335c:	40020000 	.word	0x40020000
 8003360:	40004400 	.word	0x40004400

08003364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003364:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800339c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003368:	f7ff fb4e 	bl	8002a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800336c:	480c      	ldr	r0, [pc, #48]	@ (80033a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800336e:	490d      	ldr	r1, [pc, #52]	@ (80033a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003370:	4a0d      	ldr	r2, [pc, #52]	@ (80033a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003374:	e002      	b.n	800337c <LoopCopyDataInit>

08003376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800337a:	3304      	adds	r3, #4

0800337c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800337c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800337e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003380:	d3f9      	bcc.n	8003376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003382:	4a0a      	ldr	r2, [pc, #40]	@ (80033ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003384:	4c0a      	ldr	r4, [pc, #40]	@ (80033b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003388:	e001      	b.n	800338e <LoopFillZerobss>

0800338a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800338a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800338c:	3204      	adds	r2, #4

0800338e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800338e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003390:	d3fb      	bcc.n	800338a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003392:	f005 f90d 	bl	80085b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003396:	f7fe fe31 	bl	8001ffc <main>
  bx  lr    
 800339a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800339c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033a4:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80033a8:	0800c170 	.word	0x0800c170
  ldr r2, =_sbss
 80033ac:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80033b0:	200007b4 	.word	0x200007b4

080033b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033b4:	e7fe      	b.n	80033b4 <ADC_IRQHandler>
	...

080033b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033bc:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <HAL_Init+0x40>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0d      	ldr	r2, [pc, #52]	@ (80033f8 <HAL_Init+0x40>)
 80033c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <HAL_Init+0x40>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <HAL_Init+0x40>)
 80033ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d4:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <HAL_Init+0x40>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a07      	ldr	r2, [pc, #28]	@ (80033f8 <HAL_Init+0x40>)
 80033da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033e0:	2003      	movs	r0, #3
 80033e2:	f000 fd0c 	bl	8003dfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033e6:	200f      	movs	r0, #15
 80033e8:	f7ff f974 	bl	80026d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033ec:	f7ff f94a 	bl	8002684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023c00 	.word	0x40023c00

080033fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003400:	4b06      	ldr	r3, [pc, #24]	@ (800341c <HAL_IncTick+0x20>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_IncTick+0x24>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4413      	add	r3, r2
 800340c:	4a04      	ldr	r2, [pc, #16]	@ (8003420 <HAL_IncTick+0x24>)
 800340e:	6013      	str	r3, [r2, #0]
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000054 	.word	0x20000054
 8003420:	20000664 	.word	0x20000664

08003424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return uwTick;
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <HAL_GetTick+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000664 	.word	0x20000664

0800343c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003444:	f7ff ffee 	bl	8003424 <HAL_GetTick>
 8003448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d005      	beq.n	8003462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003456:	4b0a      	ldr	r3, [pc, #40]	@ (8003480 <HAL_Delay+0x44>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003462:	bf00      	nop
 8003464:	f7ff ffde 	bl	8003424 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	429a      	cmp	r2, r3
 8003472:	d8f7      	bhi.n	8003464 <HAL_Delay+0x28>
  {
  }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000054 	.word	0x20000054

08003484 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e033      	b.n	8003502 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fe3e 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d118      	bne.n	80034f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034ca:	f023 0302 	bic.w	r3, r3, #2
 80034ce:	f043 0202 	orr.w	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fae8 	bl	8003aac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	f043 0201 	orr.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80034f2:	e001      	b.n	80034f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_ADC_Start+0x1a>
 8003522:	2302      	movs	r3, #2
 8003524:	e0b2      	b.n	800368c <HAL_ADC_Start+0x180>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d018      	beq.n	800356e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800354c:	4b52      	ldr	r3, [pc, #328]	@ (8003698 <HAL_ADC_Start+0x18c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a52      	ldr	r2, [pc, #328]	@ (800369c <HAL_ADC_Start+0x190>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0c9a      	lsrs	r2, r3, #18
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003560:	e002      	b.n	8003568 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	3b01      	subs	r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f9      	bne.n	8003562 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d17a      	bne.n	8003672 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ba:	d106      	bne.n	80035ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	f023 0206 	bic.w	r2, r3, #6
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80035c8:	e002      	b.n	80035d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035d8:	4b31      	ldr	r3, [pc, #196]	@ (80036a0 <HAL_ADC_Start+0x194>)
 80035da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80035e4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d12a      	bne.n	8003648 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2b      	ldr	r2, [pc, #172]	@ (80036a4 <HAL_ADC_Start+0x198>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d015      	beq.n	8003628 <HAL_ADC_Start+0x11c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a29      	ldr	r2, [pc, #164]	@ (80036a8 <HAL_ADC_Start+0x19c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d105      	bne.n	8003612 <HAL_ADC_Start+0x106>
 8003606:	4b26      	ldr	r3, [pc, #152]	@ (80036a0 <HAL_ADC_Start+0x194>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a25      	ldr	r2, [pc, #148]	@ (80036ac <HAL_ADC_Start+0x1a0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d136      	bne.n	800368a <HAL_ADC_Start+0x17e>
 800361c:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <HAL_ADC_Start+0x194>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d130      	bne.n	800368a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d129      	bne.n	800368a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003644:	609a      	str	r2, [r3, #8]
 8003646:	e020      	b.n	800368a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a15      	ldr	r2, [pc, #84]	@ (80036a4 <HAL_ADC_Start+0x198>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d11b      	bne.n	800368a <HAL_ADC_Start+0x17e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d114      	bne.n	800368a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	e00b      	b.n	800368a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	f043 0210 	orr.w	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	f043 0201 	orr.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	2000004c 	.word	0x2000004c
 800369c:	431bde83 	.word	0x431bde83
 80036a0:	40012300 	.word	0x40012300
 80036a4:	40012000 	.word	0x40012000
 80036a8:	40012100 	.word	0x40012100
 80036ac:	40012200 	.word	0x40012200

080036b0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_Stop+0x16>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e021      	b.n	800370a <HAL_ADC_Stop+0x5a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003732:	d113      	bne.n	800375c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800373e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003742:	d10b      	bne.n	800375c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e063      	b.n	8003824 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800375c:	f7ff fe62 	bl	8003424 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003762:	e021      	b.n	80037a8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	d01d      	beq.n	80037a8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_ADC_PollForConversion+0x6c>
 8003772:	f7ff fe57 	bl	8003424 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d212      	bcs.n	80037a8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b02      	cmp	r3, #2
 800378e:	d00b      	beq.n	80037a8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	f043 0204 	orr.w	r2, r3, #4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e03d      	b.n	8003824 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d1d6      	bne.n	8003764 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f06f 0212 	mvn.w	r2, #18
 80037be:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d123      	bne.n	8003822 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11f      	bne.n	8003822 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d111      	bne.n	8003822 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d105      	bne.n	8003822 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	f043 0201 	orr.w	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x1c>
 8003860:	2302      	movs	r3, #2
 8003862:	e113      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x244>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b09      	cmp	r3, #9
 8003872:	d925      	bls.n	80038c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68d9      	ldr	r1, [r3, #12]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	4613      	mov	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	3b1e      	subs	r3, #30
 800388a:	2207      	movs	r2, #7
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43da      	mvns	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	400a      	ands	r2, r1
 8003898:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68d9      	ldr	r1, [r3, #12]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4618      	mov	r0, r3
 80038ac:	4603      	mov	r3, r0
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4403      	add	r3, r0
 80038b2:	3b1e      	subs	r3, #30
 80038b4:	409a      	lsls	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	e022      	b.n	8003906 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6919      	ldr	r1, [r3, #16]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	2207      	movs	r2, #7
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	400a      	ands	r2, r1
 80038e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6919      	ldr	r1, [r3, #16]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	4618      	mov	r0, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4403      	add	r3, r0
 80038fc:	409a      	lsls	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b06      	cmp	r3, #6
 800390c:	d824      	bhi.n	8003958 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	3b05      	subs	r3, #5
 8003920:	221f      	movs	r2, #31
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	400a      	ands	r2, r1
 800392e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	4618      	mov	r0, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	3b05      	subs	r3, #5
 800394a:	fa00 f203 	lsl.w	r2, r0, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	635a      	str	r2, [r3, #52]	@ 0x34
 8003956:	e04c      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b0c      	cmp	r3, #12
 800395e:	d824      	bhi.n	80039aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	3b23      	subs	r3, #35	@ 0x23
 8003972:	221f      	movs	r2, #31
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43da      	mvns	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	400a      	ands	r2, r1
 8003980:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	4618      	mov	r0, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	3b23      	subs	r3, #35	@ 0x23
 800399c:	fa00 f203 	lsl.w	r2, r0, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80039a8:	e023      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	3b41      	subs	r3, #65	@ 0x41
 80039bc:	221f      	movs	r2, #31
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43da      	mvns	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	400a      	ands	r2, r1
 80039ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4618      	mov	r0, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	3b41      	subs	r3, #65	@ 0x41
 80039e6:	fa00 f203 	lsl.w	r2, r0, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039f2:	4b29      	ldr	r3, [pc, #164]	@ (8003a98 <HAL_ADC_ConfigChannel+0x250>)
 80039f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a28      	ldr	r2, [pc, #160]	@ (8003a9c <HAL_ADC_ConfigChannel+0x254>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d10f      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x1d8>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b12      	cmp	r3, #18
 8003a06:	d10b      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <HAL_ADC_ConfigChannel+0x254>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d12b      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x23a>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x258>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <HAL_ADC_ConfigChannel+0x1f4>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b11      	cmp	r3, #17
 8003a3a:	d122      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a11      	ldr	r2, [pc, #68]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x258>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d111      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a5e:	4b11      	ldr	r3, [pc, #68]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x25c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a11      	ldr	r2, [pc, #68]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x260>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	0c9a      	lsrs	r2, r3, #18
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a74:	e002      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f9      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40012300 	.word	0x40012300
 8003a9c:	40012000 	.word	0x40012000
 8003aa0:	10000012 	.word	0x10000012
 8003aa4:	2000004c 	.word	0x2000004c
 8003aa8:	431bde83 	.word	0x431bde83

08003aac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ab4:	4b79      	ldr	r3, [pc, #484]	@ (8003c9c <ADC_Init+0x1f0>)
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6859      	ldr	r1, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6899      	ldr	r1, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	4a58      	ldr	r2, [pc, #352]	@ (8003ca0 <ADC_Init+0x1f4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d022      	beq.n	8003b8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6899      	ldr	r1, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6899      	ldr	r1, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	e00f      	b.n	8003baa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ba8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0202 	bic.w	r2, r2, #2
 8003bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7e1b      	ldrb	r3, [r3, #24]
 8003bc4:	005a      	lsls	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01b      	beq.n	8003c10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003be6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003bf6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	3b01      	subs	r3, #1
 8003c04:	035a      	lsls	r2, r3, #13
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	e007      	b.n	8003c20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c1e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	051a      	lsls	r2, r3, #20
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6899      	ldr	r1, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c62:	025a      	lsls	r2, r3, #9
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6899      	ldr	r1, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	029a      	lsls	r2, r3, #10
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40012300 	.word	0x40012300
 8003ca0:	0f000001 	.word	0x0f000001

08003ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd6:	4a04      	ldr	r2, [pc, #16]	@ (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	60d3      	str	r3, [r2, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf0:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <__NVIC_GetPriorityGrouping+0x18>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 0307 	and.w	r3, r3, #7
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db0b      	blt.n	8003d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	4907      	ldr	r1, [pc, #28]	@ (8003d40 <__NVIC_EnableIRQ+0x38>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2001      	movs	r0, #1
 8003d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000e100 	.word	0xe000e100

08003d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	db0a      	blt.n	8003d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	490c      	ldr	r1, [pc, #48]	@ (8003d90 <__NVIC_SetPriority+0x4c>)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	440b      	add	r3, r1
 8003d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d6c:	e00a      	b.n	8003d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4908      	ldr	r1, [pc, #32]	@ (8003d94 <__NVIC_SetPriority+0x50>)
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	3b04      	subs	r3, #4
 8003d7c:	0112      	lsls	r2, r2, #4
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	440b      	add	r3, r1
 8003d82:	761a      	strb	r2, [r3, #24]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000e100 	.word	0xe000e100
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	@ 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f1c3 0307 	rsb	r3, r3, #7
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	bf28      	it	cs
 8003db6:	2304      	movcs	r3, #4
 8003db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d902      	bls.n	8003dc8 <NVIC_EncodePriority+0x30>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3b03      	subs	r3, #3
 8003dc6:	e000      	b.n	8003dca <NVIC_EncodePriority+0x32>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	401a      	ands	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de0:	f04f 31ff 	mov.w	r1, #4294967295
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	43d9      	mvns	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	4313      	orrs	r3, r2
         );
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3724      	adds	r7, #36	@ 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff ff4c 	bl	8003ca4 <__NVIC_SetPriorityGrouping>
}
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e26:	f7ff ff61 	bl	8003cec <__NVIC_GetPriorityGrouping>
 8003e2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	6978      	ldr	r0, [r7, #20]
 8003e32:	f7ff ffb1 	bl	8003d98 <NVIC_EncodePriority>
 8003e36:	4602      	mov	r2, r0
 8003e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff ff80 	bl	8003d44 <__NVIC_SetPriority>
}
 8003e44:	bf00      	nop
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ff54 	bl	8003d08 <__NVIC_EnableIRQ>
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e014      	b.n	8003ea4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	791b      	ldrb	r3, [r3, #4]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d105      	bne.n	8003e90 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd f9b8 	bl	8001200 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	@ 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_DAC_ConfigChannel+0x1c>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e042      	b.n	8003f52 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	795b      	ldrb	r3, [r3, #5]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_DAC_ConfigChannel+0x2c>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e03c      	b.n	8003f52 <HAL_DAC_ConfigChannel+0xa6>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	22c0      	movs	r2, #192	@ 0xc0
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	400a      	ands	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3724      	adds	r7, #36	@ 0x24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b089      	sub	sp, #36	@ 0x24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	e165      	b.n	8004248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 8154 	bne.w	8004242 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d005      	beq.n	8003fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d130      	bne.n	8004014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe8:	2201      	movs	r2, #1
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 0201 	and.w	r2, r3, #1
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b03      	cmp	r3, #3
 800401e:	d017      	beq.n	8004050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	2203      	movs	r2, #3
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d123      	bne.n	80040a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	08da      	lsrs	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3208      	adds	r2, #8
 8004064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	220f      	movs	r2, #15
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	08da      	lsrs	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3208      	adds	r2, #8
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	2203      	movs	r2, #3
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0203 	and.w	r2, r3, #3
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80ae 	beq.w	8004242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004260 <HAL_GPIO_Init+0x300>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004260 <HAL_GPIO_Init+0x300>)
 80040f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80040f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004260 <HAL_GPIO_Init+0x300>)
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004102:	4a58      	ldr	r2, [pc, #352]	@ (8004264 <HAL_GPIO_Init+0x304>)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	3302      	adds	r3, #2
 800410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	220f      	movs	r2, #15
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4f      	ldr	r2, [pc, #316]	@ (8004268 <HAL_GPIO_Init+0x308>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d025      	beq.n	800417a <HAL_GPIO_Init+0x21a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4e      	ldr	r2, [pc, #312]	@ (800426c <HAL_GPIO_Init+0x30c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01f      	beq.n	8004176 <HAL_GPIO_Init+0x216>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a4d      	ldr	r2, [pc, #308]	@ (8004270 <HAL_GPIO_Init+0x310>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d019      	beq.n	8004172 <HAL_GPIO_Init+0x212>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a4c      	ldr	r2, [pc, #304]	@ (8004274 <HAL_GPIO_Init+0x314>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <HAL_GPIO_Init+0x20e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a4b      	ldr	r2, [pc, #300]	@ (8004278 <HAL_GPIO_Init+0x318>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00d      	beq.n	800416a <HAL_GPIO_Init+0x20a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a4a      	ldr	r2, [pc, #296]	@ (800427c <HAL_GPIO_Init+0x31c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <HAL_GPIO_Init+0x206>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a49      	ldr	r2, [pc, #292]	@ (8004280 <HAL_GPIO_Init+0x320>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d101      	bne.n	8004162 <HAL_GPIO_Init+0x202>
 800415e:	2306      	movs	r3, #6
 8004160:	e00c      	b.n	800417c <HAL_GPIO_Init+0x21c>
 8004162:	2307      	movs	r3, #7
 8004164:	e00a      	b.n	800417c <HAL_GPIO_Init+0x21c>
 8004166:	2305      	movs	r3, #5
 8004168:	e008      	b.n	800417c <HAL_GPIO_Init+0x21c>
 800416a:	2304      	movs	r3, #4
 800416c:	e006      	b.n	800417c <HAL_GPIO_Init+0x21c>
 800416e:	2303      	movs	r3, #3
 8004170:	e004      	b.n	800417c <HAL_GPIO_Init+0x21c>
 8004172:	2302      	movs	r3, #2
 8004174:	e002      	b.n	800417c <HAL_GPIO_Init+0x21c>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_GPIO_Init+0x21c>
 800417a:	2300      	movs	r3, #0
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	f002 0203 	and.w	r2, r2, #3
 8004182:	0092      	lsls	r2, r2, #2
 8004184:	4093      	lsls	r3, r2
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800418c:	4935      	ldr	r1, [pc, #212]	@ (8004264 <HAL_GPIO_Init+0x304>)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	3302      	adds	r3, #2
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800419a:	4b3a      	ldr	r3, [pc, #232]	@ (8004284 <HAL_GPIO_Init+0x324>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041be:	4a31      	ldr	r2, [pc, #196]	@ (8004284 <HAL_GPIO_Init+0x324>)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004284 <HAL_GPIO_Init+0x324>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041e8:	4a26      	ldr	r2, [pc, #152]	@ (8004284 <HAL_GPIO_Init+0x324>)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ee:	4b25      	ldr	r3, [pc, #148]	@ (8004284 <HAL_GPIO_Init+0x324>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004212:	4a1c      	ldr	r2, [pc, #112]	@ (8004284 <HAL_GPIO_Init+0x324>)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004218:	4b1a      	ldr	r3, [pc, #104]	@ (8004284 <HAL_GPIO_Init+0x324>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800423c:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <HAL_GPIO_Init+0x324>)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3301      	adds	r3, #1
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b0f      	cmp	r3, #15
 800424c:	f67f ae96 	bls.w	8003f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004250:	bf00      	nop
 8004252:	bf00      	nop
 8004254:	3724      	adds	r7, #36	@ 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	40013800 	.word	0x40013800
 8004268:	40020000 	.word	0x40020000
 800426c:	40020400 	.word	0x40020400
 8004270:	40020800 	.word	0x40020800
 8004274:	40020c00 	.word	0x40020c00
 8004278:	40021000 	.word	0x40021000
 800427c:	40021400 	.word	0x40021400
 8004280:	40021800 	.word	0x40021800
 8004284:	40013c00 	.word	0x40013c00

08004288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	887b      	ldrh	r3, [r7, #2]
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	e001      	b.n	80042aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042a6:	2300      	movs	r3, #0
 80042a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	807b      	strh	r3, [r7, #2]
 80042c4:	4613      	mov	r3, r2
 80042c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c8:	787b      	ldrb	r3, [r7, #1]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042d4:	e003      	b.n	80042de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042d6:	887b      	ldrh	r3, [r7, #2]
 80042d8:	041a      	lsls	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	619a      	str	r2, [r3, #24]
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0cc      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004300:	4b68      	ldr	r3, [pc, #416]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d90c      	bls.n	8004328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b65      	ldr	r3, [pc, #404]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b63      	ldr	r3, [pc, #396]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0b8      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004340:	4b59      	ldr	r3, [pc, #356]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a58      	ldr	r2, [pc, #352]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800434a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004358:	4b53      	ldr	r3, [pc, #332]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a52      	ldr	r2, [pc, #328]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b50      	ldr	r3, [pc, #320]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	494d      	ldr	r1, [pc, #308]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d044      	beq.n	800440c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	4b47      	ldr	r3, [pc, #284]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d119      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e07f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043aa:	4b3f      	ldr	r3, [pc, #252]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e06f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ba:	4b3b      	ldr	r3, [pc, #236]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e067      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4b37      	ldr	r3, [pc, #220]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f023 0203 	bic.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4934      	ldr	r1, [pc, #208]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043dc:	f7ff f822 	bl	8003424 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7ff f81e 	bl	8003424 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e04f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 020c 	and.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	429a      	cmp	r2, r3
 800440a:	d1eb      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800440c:	4b25      	ldr	r3, [pc, #148]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d20c      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b22      	ldr	r3, [pc, #136]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b20      	ldr	r3, [pc, #128]	@ (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e032      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004440:	4b19      	ldr	r3, [pc, #100]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4916      	ldr	r1, [pc, #88]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800445e:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	490e      	ldr	r1, [pc, #56]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004472:	f000 f887 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8004476:	4602      	mov	r2, r0
 8004478:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	490a      	ldr	r1, [pc, #40]	@ (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 8004484:	5ccb      	ldrb	r3, [r1, r3]
 8004486:	fa22 f303 	lsr.w	r3, r2, r3
 800448a:	4a09      	ldr	r2, [pc, #36]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800448e:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe f91e 	bl	80026d4 <HAL_InitTick>

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023c00 	.word	0x40023c00
 80044a8:	40023800 	.word	0x40023800
 80044ac:	0800bd0c 	.word	0x0800bd0c
 80044b0:	2000004c 	.word	0x2000004c
 80044b4:	20000050 	.word	0x20000050

080044b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b03      	ldr	r3, [pc, #12]	@ (80044cc <HAL_RCC_GetHCLKFreq+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	2000004c 	.word	0x2000004c

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0a9b      	lsrs	r3, r3, #10
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	@ (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	0800bd1c 	.word	0x0800bd1c

080044f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044fc:	f7ff ffdc 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b05      	ldr	r3, [pc, #20]	@ (8004518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	0b5b      	lsrs	r3, r3, #13
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4903      	ldr	r1, [pc, #12]	@ (800451c <HAL_RCC_GetPCLK2Freq+0x24>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	0800bd1c 	.word	0x0800bd1c

08004520 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	220f      	movs	r2, #15
 800452e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004530:	4b12      	ldr	r3, [pc, #72]	@ (800457c <HAL_RCC_GetClockConfig+0x5c>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0203 	and.w	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800453c:	4b0f      	ldr	r3, [pc, #60]	@ (800457c <HAL_RCC_GetClockConfig+0x5c>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <HAL_RCC_GetClockConfig+0x5c>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004554:	4b09      	ldr	r3, [pc, #36]	@ (800457c <HAL_RCC_GetClockConfig+0x5c>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004562:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <HAL_RCC_GetClockConfig+0x60>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	601a      	str	r2, [r3, #0]
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
 8004580:	40023c00 	.word	0x40023c00

08004584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004588:	b0ae      	sub	sp, #184	@ 0xb8
 800458a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045aa:	4bcb      	ldr	r3, [pc, #812]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b0c      	cmp	r3, #12
 80045b4:	f200 8206 	bhi.w	80049c4 <HAL_RCC_GetSysClockFreq+0x440>
 80045b8:	a201      	add	r2, pc, #4	@ (adr r2, 80045c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045f5 	.word	0x080045f5
 80045c4:	080049c5 	.word	0x080049c5
 80045c8:	080049c5 	.word	0x080049c5
 80045cc:	080049c5 	.word	0x080049c5
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	080049c5 	.word	0x080049c5
 80045d8:	080049c5 	.word	0x080049c5
 80045dc:	080049c5 	.word	0x080049c5
 80045e0:	08004605 	.word	0x08004605
 80045e4:	080049c5 	.word	0x080049c5
 80045e8:	080049c5 	.word	0x080049c5
 80045ec:	080049c5 	.word	0x080049c5
 80045f0:	080047f5 	.word	0x080047f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f4:	4bb9      	ldr	r3, [pc, #740]	@ (80048dc <HAL_RCC_GetSysClockFreq+0x358>)
 80045f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045fa:	e1e7      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045fc:	4bb8      	ldr	r3, [pc, #736]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80045fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004602:	e1e3      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004604:	4bb4      	ldr	r3, [pc, #720]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800460c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004610:	4bb1      	ldr	r3, [pc, #708]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d071      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461c:	4bae      	ldr	r3, [pc, #696]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	099b      	lsrs	r3, r3, #6
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004628:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800462c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004634:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004638:	2300      	movs	r3, #0
 800463a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800463e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004642:	4622      	mov	r2, r4
 8004644:	462b      	mov	r3, r5
 8004646:	f04f 0000 	mov.w	r0, #0
 800464a:	f04f 0100 	mov.w	r1, #0
 800464e:	0159      	lsls	r1, r3, #5
 8004650:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004654:	0150      	lsls	r0, r2, #5
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4621      	mov	r1, r4
 800465c:	1a51      	subs	r1, r2, r1
 800465e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004660:	4629      	mov	r1, r5
 8004662:	eb63 0301 	sbc.w	r3, r3, r1
 8004666:	647b      	str	r3, [r7, #68]	@ 0x44
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004674:	4649      	mov	r1, r9
 8004676:	018b      	lsls	r3, r1, #6
 8004678:	4641      	mov	r1, r8
 800467a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800467e:	4641      	mov	r1, r8
 8004680:	018a      	lsls	r2, r1, #6
 8004682:	4641      	mov	r1, r8
 8004684:	1a51      	subs	r1, r2, r1
 8004686:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004688:	4649      	mov	r1, r9
 800468a:	eb63 0301 	sbc.w	r3, r3, r1
 800468e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800469c:	4649      	mov	r1, r9
 800469e:	00cb      	lsls	r3, r1, #3
 80046a0:	4641      	mov	r1, r8
 80046a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a6:	4641      	mov	r1, r8
 80046a8:	00ca      	lsls	r2, r1, #3
 80046aa:	4610      	mov	r0, r2
 80046ac:	4619      	mov	r1, r3
 80046ae:	4603      	mov	r3, r0
 80046b0:	4622      	mov	r2, r4
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80046b6:	462b      	mov	r3, r5
 80046b8:	460a      	mov	r2, r1
 80046ba:	eb42 0303 	adc.w	r3, r2, r3
 80046be:	637b      	str	r3, [r7, #52]	@ 0x34
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046cc:	4629      	mov	r1, r5
 80046ce:	024b      	lsls	r3, r1, #9
 80046d0:	4621      	mov	r1, r4
 80046d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046d6:	4621      	mov	r1, r4
 80046d8:	024a      	lsls	r2, r1, #9
 80046da:	4610      	mov	r0, r2
 80046dc:	4619      	mov	r1, r3
 80046de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80046f0:	f7fc fafa 	bl	8000ce8 <__aeabi_uldivmod>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4613      	mov	r3, r2
 80046fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046fe:	e067      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004700:	4b75      	ldr	r3, [pc, #468]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	099b      	lsrs	r3, r3, #6
 8004706:	2200      	movs	r2, #0
 8004708:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800470c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004710:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004718:	67bb      	str	r3, [r7, #120]	@ 0x78
 800471a:	2300      	movs	r3, #0
 800471c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800471e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004722:	4622      	mov	r2, r4
 8004724:	462b      	mov	r3, r5
 8004726:	f04f 0000 	mov.w	r0, #0
 800472a:	f04f 0100 	mov.w	r1, #0
 800472e:	0159      	lsls	r1, r3, #5
 8004730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004734:	0150      	lsls	r0, r2, #5
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4621      	mov	r1, r4
 800473c:	1a51      	subs	r1, r2, r1
 800473e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004740:	4629      	mov	r1, r5
 8004742:	eb63 0301 	sbc.w	r3, r3, r1
 8004746:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004754:	4649      	mov	r1, r9
 8004756:	018b      	lsls	r3, r1, #6
 8004758:	4641      	mov	r1, r8
 800475a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800475e:	4641      	mov	r1, r8
 8004760:	018a      	lsls	r2, r1, #6
 8004762:	4641      	mov	r1, r8
 8004764:	ebb2 0a01 	subs.w	sl, r2, r1
 8004768:	4649      	mov	r1, r9
 800476a:	eb63 0b01 	sbc.w	fp, r3, r1
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800477a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800477e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004782:	4692      	mov	sl, r2
 8004784:	469b      	mov	fp, r3
 8004786:	4623      	mov	r3, r4
 8004788:	eb1a 0303 	adds.w	r3, sl, r3
 800478c:	623b      	str	r3, [r7, #32]
 800478e:	462b      	mov	r3, r5
 8004790:	eb4b 0303 	adc.w	r3, fp, r3
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80047a2:	4629      	mov	r1, r5
 80047a4:	028b      	lsls	r3, r1, #10
 80047a6:	4621      	mov	r1, r4
 80047a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047ac:	4621      	mov	r1, r4
 80047ae:	028a      	lsls	r2, r1, #10
 80047b0:	4610      	mov	r0, r2
 80047b2:	4619      	mov	r1, r3
 80047b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047b8:	2200      	movs	r2, #0
 80047ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80047bc:	677a      	str	r2, [r7, #116]	@ 0x74
 80047be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80047c2:	f7fc fa91 	bl	8000ce8 <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4613      	mov	r3, r2
 80047cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047d0:	4b41      	ldr	r3, [pc, #260]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	3301      	adds	r3, #1
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80047e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047f2:	e0eb      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f4:	4b38      	ldr	r3, [pc, #224]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004800:	4b35      	ldr	r3, [pc, #212]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d06b      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480c:	4b32      	ldr	r3, [pc, #200]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	2200      	movs	r2, #0
 8004814:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004818:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004820:	2300      	movs	r3, #0
 8004822:	667b      	str	r3, [r7, #100]	@ 0x64
 8004824:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004828:	4622      	mov	r2, r4
 800482a:	462b      	mov	r3, r5
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	f04f 0100 	mov.w	r1, #0
 8004834:	0159      	lsls	r1, r3, #5
 8004836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483a:	0150      	lsls	r0, r2, #5
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4621      	mov	r1, r4
 8004842:	1a51      	subs	r1, r2, r1
 8004844:	61b9      	str	r1, [r7, #24]
 8004846:	4629      	mov	r1, r5
 8004848:	eb63 0301 	sbc.w	r3, r3, r1
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800485a:	4659      	mov	r1, fp
 800485c:	018b      	lsls	r3, r1, #6
 800485e:	4651      	mov	r1, sl
 8004860:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004864:	4651      	mov	r1, sl
 8004866:	018a      	lsls	r2, r1, #6
 8004868:	4651      	mov	r1, sl
 800486a:	ebb2 0801 	subs.w	r8, r2, r1
 800486e:	4659      	mov	r1, fp
 8004870:	eb63 0901 	sbc.w	r9, r3, r1
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004880:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004884:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004888:	4690      	mov	r8, r2
 800488a:	4699      	mov	r9, r3
 800488c:	4623      	mov	r3, r4
 800488e:	eb18 0303 	adds.w	r3, r8, r3
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	462b      	mov	r3, r5
 8004896:	eb49 0303 	adc.w	r3, r9, r3
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80048a8:	4629      	mov	r1, r5
 80048aa:	024b      	lsls	r3, r1, #9
 80048ac:	4621      	mov	r1, r4
 80048ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048b2:	4621      	mov	r1, r4
 80048b4:	024a      	lsls	r2, r1, #9
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048be:	2200      	movs	r2, #0
 80048c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80048c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048c8:	f7fc fa0e 	bl	8000ce8 <__aeabi_uldivmod>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4613      	mov	r3, r2
 80048d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048d6:	e065      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x420>
 80048d8:	40023800 	.word	0x40023800
 80048dc:	00f42400 	.word	0x00f42400
 80048e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e4:	4b3d      	ldr	r3, [pc, #244]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x458>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	099b      	lsrs	r3, r3, #6
 80048ea:	2200      	movs	r2, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	4611      	mov	r1, r2
 80048f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f6:	2300      	movs	r3, #0
 80048f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80048fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80048fe:	4642      	mov	r2, r8
 8004900:	464b      	mov	r3, r9
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	0159      	lsls	r1, r3, #5
 800490c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004910:	0150      	lsls	r0, r2, #5
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4641      	mov	r1, r8
 8004918:	1a51      	subs	r1, r2, r1
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	4649      	mov	r1, r9
 800491e:	eb63 0301 	sbc.w	r3, r3, r1
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004930:	4659      	mov	r1, fp
 8004932:	018b      	lsls	r3, r1, #6
 8004934:	4651      	mov	r1, sl
 8004936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800493a:	4651      	mov	r1, sl
 800493c:	018a      	lsls	r2, r1, #6
 800493e:	4651      	mov	r1, sl
 8004940:	1a54      	subs	r4, r2, r1
 8004942:	4659      	mov	r1, fp
 8004944:	eb63 0501 	sbc.w	r5, r3, r1
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	00eb      	lsls	r3, r5, #3
 8004952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004956:	00e2      	lsls	r2, r4, #3
 8004958:	4614      	mov	r4, r2
 800495a:	461d      	mov	r5, r3
 800495c:	4643      	mov	r3, r8
 800495e:	18e3      	adds	r3, r4, r3
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	464b      	mov	r3, r9
 8004964:	eb45 0303 	adc.w	r3, r5, r3
 8004968:	607b      	str	r3, [r7, #4]
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004976:	4629      	mov	r1, r5
 8004978:	028b      	lsls	r3, r1, #10
 800497a:	4621      	mov	r1, r4
 800497c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004980:	4621      	mov	r1, r4
 8004982:	028a      	lsls	r2, r1, #10
 8004984:	4610      	mov	r0, r2
 8004986:	4619      	mov	r1, r3
 8004988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800498c:	2200      	movs	r2, #0
 800498e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004990:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004992:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004996:	f7fc f9a7 	bl	8000ce8 <__aeabi_uldivmod>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4613      	mov	r3, r2
 80049a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049a4:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x458>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	0f1b      	lsrs	r3, r3, #28
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80049b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80049ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80049be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049c2:	e003      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c4:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80049c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	37b8      	adds	r7, #184	@ 0xb8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
 80049e0:	00f42400 	.word	0x00f42400

080049e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e28d      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 8083 	beq.w	8004b0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a04:	4b94      	ldr	r3, [pc, #592]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 030c 	and.w	r3, r3, #12
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d019      	beq.n	8004a44 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a10:	4b91      	ldr	r3, [pc, #580]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d106      	bne.n	8004a2a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a1c:	4b8e      	ldr	r3, [pc, #568]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a28:	d00c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2a:	4b8b      	ldr	r3, [pc, #556]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d112      	bne.n	8004a5c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a36:	4b88      	ldr	r3, [pc, #544]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a42:	d10b      	bne.n	8004a5c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	4b84      	ldr	r3, [pc, #528]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05b      	beq.n	8004b08 <HAL_RCC_OscConfig+0x124>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d157      	bne.n	8004b08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e25a      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a64:	d106      	bne.n	8004a74 <HAL_RCC_OscConfig+0x90>
 8004a66:	4b7c      	ldr	r3, [pc, #496]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a7b      	ldr	r2, [pc, #492]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e01d      	b.n	8004ab0 <HAL_RCC_OscConfig+0xcc>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0xb4>
 8004a7e:	4b76      	ldr	r3, [pc, #472]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a75      	ldr	r2, [pc, #468]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b73      	ldr	r3, [pc, #460]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a72      	ldr	r2, [pc, #456]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e00b      	b.n	8004ab0 <HAL_RCC_OscConfig+0xcc>
 8004a98:	4b6f      	ldr	r3, [pc, #444]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a6b      	ldr	r2, [pc, #428]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d013      	beq.n	8004ae0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fe fcb4 	bl	8003424 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac0:	f7fe fcb0 	bl	8003424 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	@ 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e21f      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b61      	ldr	r3, [pc, #388]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0xdc>
 8004ade:	e014      	b.n	8004b0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fe fca0 	bl	8003424 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7fe fc9c 	bl	8003424 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	@ 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e20b      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afa:	4b57      	ldr	r3, [pc, #348]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x104>
 8004b06:	e000      	b.n	8004b0a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d06f      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b16:	4b50      	ldr	r3, [pc, #320]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d017      	beq.n	8004b52 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b22:	4b4d      	ldr	r3, [pc, #308]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d105      	bne.n	8004b3a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b3a:	4b47      	ldr	r3, [pc, #284]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b42:	2b0c      	cmp	r3, #12
 8004b44:	d11c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b46:	4b44      	ldr	r3, [pc, #272]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d116      	bne.n	8004b80 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b52:	4b41      	ldr	r3, [pc, #260]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_RCC_OscConfig+0x186>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d001      	beq.n	8004b6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e1d3      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4937      	ldr	r1, [pc, #220]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7e:	e03a      	b.n	8004bf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d020      	beq.n	8004bca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b88:	4b34      	ldr	r3, [pc, #208]	@ (8004c5c <HAL_RCC_OscConfig+0x278>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8e:	f7fe fc49 	bl	8003424 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b96:	f7fe fc45 	bl	8003424 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e1b4      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb4:	4b28      	ldr	r3, [pc, #160]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4925      	ldr	r1, [pc, #148]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]
 8004bc8:	e015      	b.n	8004bf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bca:	4b24      	ldr	r3, [pc, #144]	@ (8004c5c <HAL_RCC_OscConfig+0x278>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fe fc28 	bl	8003424 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd8:	f7fe fc24 	bl	8003424 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e193      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bea:	4b1b      	ldr	r3, [pc, #108]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d036      	beq.n	8004c70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d016      	beq.n	8004c38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c0a:	4b15      	ldr	r3, [pc, #84]	@ (8004c60 <HAL_RCC_OscConfig+0x27c>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fe fc08 	bl	8003424 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c18:	f7fe fc04 	bl	8003424 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e173      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x234>
 8004c36:	e01b      	b.n	8004c70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c38:	4b09      	ldr	r3, [pc, #36]	@ (8004c60 <HAL_RCC_OscConfig+0x27c>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3e:	f7fe fbf1 	bl	8003424 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c44:	e00e      	b.n	8004c64 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c46:	f7fe fbed 	bl	8003424 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d907      	bls.n	8004c64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e15c      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	42470000 	.word	0x42470000
 8004c60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c64:	4b8a      	ldr	r3, [pc, #552]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004c66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1ea      	bne.n	8004c46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8097 	beq.w	8004dac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c82:	4b83      	ldr	r3, [pc, #524]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10f      	bne.n	8004cae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60bb      	str	r3, [r7, #8]
 8004c92:	4b7f      	ldr	r3, [pc, #508]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	4a7e      	ldr	r2, [pc, #504]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca6:	60bb      	str	r3, [r7, #8]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004caa:	2301      	movs	r3, #1
 8004cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cae:	4b79      	ldr	r3, [pc, #484]	@ (8004e94 <HAL_RCC_OscConfig+0x4b0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d118      	bne.n	8004cec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cba:	4b76      	ldr	r3, [pc, #472]	@ (8004e94 <HAL_RCC_OscConfig+0x4b0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a75      	ldr	r2, [pc, #468]	@ (8004e94 <HAL_RCC_OscConfig+0x4b0>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc6:	f7fe fbad 	bl	8003424 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cce:	f7fe fba9 	bl	8003424 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e118      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8004e94 <HAL_RCC_OscConfig+0x4b0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d106      	bne.n	8004d02 <HAL_RCC_OscConfig+0x31e>
 8004cf4:	4b66      	ldr	r3, [pc, #408]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf8:	4a65      	ldr	r2, [pc, #404]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d00:	e01c      	b.n	8004d3c <HAL_RCC_OscConfig+0x358>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b05      	cmp	r3, #5
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x340>
 8004d0a:	4b61      	ldr	r3, [pc, #388]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0e:	4a60      	ldr	r2, [pc, #384]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004d10:	f043 0304 	orr.w	r3, r3, #4
 8004d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d16:	4b5e      	ldr	r3, [pc, #376]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1a:	4a5d      	ldr	r2, [pc, #372]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0x358>
 8004d24:	4b5a      	ldr	r3, [pc, #360]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d28:	4a59      	ldr	r2, [pc, #356]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d30:	4b57      	ldr	r3, [pc, #348]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d34:	4a56      	ldr	r2, [pc, #344]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004d36:	f023 0304 	bic.w	r3, r3, #4
 8004d3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d015      	beq.n	8004d70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fe fb6e 	bl	8003424 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fe fb6a 	bl	8003424 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e0d7      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d62:	4b4b      	ldr	r3, [pc, #300]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0ee      	beq.n	8004d4c <HAL_RCC_OscConfig+0x368>
 8004d6e:	e014      	b.n	8004d9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d70:	f7fe fb58 	bl	8003424 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d78:	f7fe fb54 	bl	8003424 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e0c1      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d8e:	4b40      	ldr	r3, [pc, #256]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1ee      	bne.n	8004d78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da0:	4b3b      	ldr	r3, [pc, #236]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	4a3a      	ldr	r2, [pc, #232]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004da6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004daa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80ad 	beq.w	8004f10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004db6:	4b36      	ldr	r3, [pc, #216]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d060      	beq.n	8004e84 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d145      	bne.n	8004e56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dca:	4b33      	ldr	r3, [pc, #204]	@ (8004e98 <HAL_RCC_OscConfig+0x4b4>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7fe fb28 	bl	8003424 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fe fb24 	bl	8003424 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e093      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dea:	4b29      	ldr	r3, [pc, #164]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69da      	ldr	r2, [r3, #28]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	019b      	lsls	r3, r3, #6
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0c:	085b      	lsrs	r3, r3, #1
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	041b      	lsls	r3, r3, #16
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e18:	061b      	lsls	r3, r3, #24
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e20:	071b      	lsls	r3, r3, #28
 8004e22:	491b      	ldr	r1, [pc, #108]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e28:	4b1b      	ldr	r3, [pc, #108]	@ (8004e98 <HAL_RCC_OscConfig+0x4b4>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2e:	f7fe faf9 	bl	8003424 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e36:	f7fe faf5 	bl	8003424 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e064      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e48:	4b11      	ldr	r3, [pc, #68]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x452>
 8004e54:	e05c      	b.n	8004f10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e56:	4b10      	ldr	r3, [pc, #64]	@ (8004e98 <HAL_RCC_OscConfig+0x4b4>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fe fae2 	bl	8003424 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e64:	f7fe fade 	bl	8003424 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e04d      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e76:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <HAL_RCC_OscConfig+0x4ac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x480>
 8004e82:	e045      	b.n	8004f10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d107      	bne.n	8004e9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e040      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
 8004e90:	40023800 	.word	0x40023800
 8004e94:	40007000 	.word	0x40007000
 8004e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8004f1c <HAL_RCC_OscConfig+0x538>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d030      	beq.n	8004f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d129      	bne.n	8004f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d122      	bne.n	8004f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ecc:	4013      	ands	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d119      	bne.n	8004f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d10f      	bne.n	8004f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d107      	bne.n	8004f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40023800 	.word	0x40023800

08004f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e07b      	b.n	800502a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d108      	bne.n	8004f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f42:	d009      	beq.n	8004f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	61da      	str	r2, [r3, #28]
 8004f4a:	e005      	b.n	8004f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fd fb3e 	bl	80025f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fdc:	ea42 0103 	orr.w	r1, r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	0c1b      	lsrs	r3, r3, #16
 8004ff6:	f003 0104 	and.w	r1, r3, #4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	f003 0210 	and.w	r2, r3, #16
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e041      	b.n	80050c8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fd ff77 	bl	8002f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f000 fcc9 	bl	8005a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d001      	beq.n	80050e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e046      	b.n	8005176 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a23      	ldr	r2, [pc, #140]	@ (8005184 <HAL_TIM_Base_Start+0xb4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d022      	beq.n	8005140 <HAL_TIM_Base_Start+0x70>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005102:	d01d      	beq.n	8005140 <HAL_TIM_Base_Start+0x70>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1f      	ldr	r2, [pc, #124]	@ (8005188 <HAL_TIM_Base_Start+0xb8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d018      	beq.n	8005140 <HAL_TIM_Base_Start+0x70>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1e      	ldr	r2, [pc, #120]	@ (800518c <HAL_TIM_Base_Start+0xbc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d013      	beq.n	8005140 <HAL_TIM_Base_Start+0x70>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1c      	ldr	r2, [pc, #112]	@ (8005190 <HAL_TIM_Base_Start+0xc0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00e      	beq.n	8005140 <HAL_TIM_Base_Start+0x70>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1b      	ldr	r2, [pc, #108]	@ (8005194 <HAL_TIM_Base_Start+0xc4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d009      	beq.n	8005140 <HAL_TIM_Base_Start+0x70>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a19      	ldr	r2, [pc, #100]	@ (8005198 <HAL_TIM_Base_Start+0xc8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d004      	beq.n	8005140 <HAL_TIM_Base_Start+0x70>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a18      	ldr	r2, [pc, #96]	@ (800519c <HAL_TIM_Base_Start+0xcc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d111      	bne.n	8005164 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b06      	cmp	r3, #6
 8005150:	d010      	beq.n	8005174 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0201 	orr.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005162:	e007      	b.n	8005174 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0201 	orr.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40010000 	.word	0x40010000
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800
 8005190:	40000c00 	.word	0x40000c00
 8005194:	40010400 	.word	0x40010400
 8005198:	40014000 	.word	0x40014000
 800519c:	40001800 	.word	0x40001800

080051a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d001      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e04e      	b.n	8005256 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a23      	ldr	r2, [pc, #140]	@ (8005264 <HAL_TIM_Base_Start_IT+0xc4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d022      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x80>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e2:	d01d      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x80>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005268 <HAL_TIM_Base_Start_IT+0xc8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d018      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x80>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1e      	ldr	r2, [pc, #120]	@ (800526c <HAL_TIM_Base_Start_IT+0xcc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x80>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005270 <HAL_TIM_Base_Start_IT+0xd0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x80>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1b      	ldr	r2, [pc, #108]	@ (8005274 <HAL_TIM_Base_Start_IT+0xd4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d009      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x80>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a19      	ldr	r2, [pc, #100]	@ (8005278 <HAL_TIM_Base_Start_IT+0xd8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x80>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a18      	ldr	r2, [pc, #96]	@ (800527c <HAL_TIM_Base_Start_IT+0xdc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d111      	bne.n	8005244 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b06      	cmp	r3, #6
 8005230:	d010      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005242:	e007      	b.n	8005254 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40010000 	.word	0x40010000
 8005268:	40000400 	.word	0x40000400
 800526c:	40000800 	.word	0x40000800
 8005270:	40000c00 	.word	0x40000c00
 8005274:	40010400 	.word	0x40010400
 8005278:	40014000 	.word	0x40014000
 800527c:	40001800 	.word	0x40001800

08005280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e041      	b.n	8005316 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f839 	bl	800531e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f000 fba2 	bl	8005a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <HAL_TIM_PWM_Start+0x24>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b01      	cmp	r3, #1
 800534e:	bf14      	ite	ne
 8005350:	2301      	movne	r3, #1
 8005352:	2300      	moveq	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	e022      	b.n	800539e <HAL_TIM_PWM_Start+0x6a>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b04      	cmp	r3, #4
 800535c:	d109      	bne.n	8005372 <HAL_TIM_PWM_Start+0x3e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b01      	cmp	r3, #1
 8005368:	bf14      	ite	ne
 800536a:	2301      	movne	r3, #1
 800536c:	2300      	moveq	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	e015      	b.n	800539e <HAL_TIM_PWM_Start+0x6a>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d109      	bne.n	800538c <HAL_TIM_PWM_Start+0x58>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	bf14      	ite	ne
 8005384:	2301      	movne	r3, #1
 8005386:	2300      	moveq	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	e008      	b.n	800539e <HAL_TIM_PWM_Start+0x6a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e07c      	b.n	80054a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Start+0x82>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053b4:	e013      	b.n	80053de <HAL_TIM_PWM_Start+0xaa>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Start+0x92>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c4:	e00b      	b.n	80053de <HAL_TIM_PWM_Start+0xaa>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Start+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053d4:	e003      	b.n	80053de <HAL_TIM_PWM_Start+0xaa>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2202      	movs	r2, #2
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2201      	movs	r2, #1
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fdfe 	bl	8005fe8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a2d      	ldr	r2, [pc, #180]	@ (80054a8 <HAL_TIM_PWM_Start+0x174>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_TIM_PWM_Start+0xcc>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2c      	ldr	r2, [pc, #176]	@ (80054ac <HAL_TIM_PWM_Start+0x178>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d101      	bne.n	8005404 <HAL_TIM_PWM_Start+0xd0>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <HAL_TIM_PWM_Start+0xd2>
 8005404:	2300      	movs	r3, #0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a22      	ldr	r2, [pc, #136]	@ (80054a8 <HAL_TIM_PWM_Start+0x174>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d022      	beq.n	800546a <HAL_TIM_PWM_Start+0x136>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542c:	d01d      	beq.n	800546a <HAL_TIM_PWM_Start+0x136>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1f      	ldr	r2, [pc, #124]	@ (80054b0 <HAL_TIM_PWM_Start+0x17c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d018      	beq.n	800546a <HAL_TIM_PWM_Start+0x136>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1d      	ldr	r2, [pc, #116]	@ (80054b4 <HAL_TIM_PWM_Start+0x180>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d013      	beq.n	800546a <HAL_TIM_PWM_Start+0x136>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1c      	ldr	r2, [pc, #112]	@ (80054b8 <HAL_TIM_PWM_Start+0x184>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00e      	beq.n	800546a <HAL_TIM_PWM_Start+0x136>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a16      	ldr	r2, [pc, #88]	@ (80054ac <HAL_TIM_PWM_Start+0x178>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_TIM_PWM_Start+0x136>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a18      	ldr	r2, [pc, #96]	@ (80054bc <HAL_TIM_PWM_Start+0x188>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_TIM_PWM_Start+0x136>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a16      	ldr	r2, [pc, #88]	@ (80054c0 <HAL_TIM_PWM_Start+0x18c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d111      	bne.n	800548e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b06      	cmp	r3, #6
 800547a:	d010      	beq.n	800549e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548c:	e007      	b.n	800549e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40010000 	.word	0x40010000
 80054ac:	40010400 	.word	0x40010400
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40000c00 	.word	0x40000c00
 80054bc:	40014000 	.word	0x40014000
 80054c0:	40001800 	.word	0x40001800

080054c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d020      	beq.n	8005528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01b      	beq.n	8005528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0202 	mvn.w	r2, #2
 80054f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa5b 	bl	80059ca <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fa4d 	bl	80059b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fa5e 	bl	80059de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d020      	beq.n	8005574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01b      	beq.n	8005574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0204 	mvn.w	r2, #4
 8005544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2202      	movs	r2, #2
 800554a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fa35 	bl	80059ca <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fa27 	bl	80059b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa38 	bl	80059de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d020      	beq.n	80055c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01b      	beq.n	80055c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0208 	mvn.w	r2, #8
 8005590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2204      	movs	r2, #4
 8005596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fa0f 	bl	80059ca <HAL_TIM_IC_CaptureCallback>
 80055ac:	e005      	b.n	80055ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa01 	bl	80059b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fa12 	bl	80059de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d020      	beq.n	800560c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01b      	beq.n	800560c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0210 	mvn.w	r2, #16
 80055dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2208      	movs	r2, #8
 80055e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f9e9 	bl	80059ca <HAL_TIM_IC_CaptureCallback>
 80055f8:	e005      	b.n	8005606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f9db 	bl	80059b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f9ec 	bl	80059de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00c      	beq.n	8005630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0201 	mvn.w	r2, #1
 8005628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fc ff12 	bl	8002454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00c      	beq.n	8005654 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800564c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fdc8 	bl	80061e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00c      	beq.n	8005678 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f9bd 	bl	80059f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00c      	beq.n	800569c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0220 	mvn.w	r2, #32
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fd9a 	bl	80061d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056be:	2302      	movs	r3, #2
 80056c0:	e0ae      	b.n	8005820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b0c      	cmp	r3, #12
 80056ce:	f200 809f 	bhi.w	8005810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056d2:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	0800570d 	.word	0x0800570d
 80056dc:	08005811 	.word	0x08005811
 80056e0:	08005811 	.word	0x08005811
 80056e4:	08005811 	.word	0x08005811
 80056e8:	0800574d 	.word	0x0800574d
 80056ec:	08005811 	.word	0x08005811
 80056f0:	08005811 	.word	0x08005811
 80056f4:	08005811 	.word	0x08005811
 80056f8:	0800578f 	.word	0x0800578f
 80056fc:	08005811 	.word	0x08005811
 8005700:	08005811 	.word	0x08005811
 8005704:	08005811 	.word	0x08005811
 8005708:	080057cf 	.word	0x080057cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fa1e 	bl	8005b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0208 	orr.w	r2, r2, #8
 8005726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0204 	bic.w	r2, r2, #4
 8005736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6999      	ldr	r1, [r3, #24]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	619a      	str	r2, [r3, #24]
      break;
 800574a:	e064      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fa6e 	bl	8005c34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6999      	ldr	r1, [r3, #24]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	619a      	str	r2, [r3, #24]
      break;
 800578c:	e043      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fac3 	bl	8005d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0208 	orr.w	r2, r2, #8
 80057a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0204 	bic.w	r2, r2, #4
 80057b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69d9      	ldr	r1, [r3, #28]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	61da      	str	r2, [r3, #28]
      break;
 80057cc:	e023      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fb17 	bl	8005e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69d9      	ldr	r1, [r3, #28]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	021a      	lsls	r2, r3, #8
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	61da      	str	r2, [r3, #28]
      break;
 800580e:	e002      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	75fb      	strb	r3, [r7, #23]
      break;
 8005814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800581e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIM_ConfigClockSource+0x1c>
 8005840:	2302      	movs	r3, #2
 8005842:	e0b4      	b.n	80059ae <HAL_TIM_ConfigClockSource+0x186>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800586a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800587c:	d03e      	beq.n	80058fc <HAL_TIM_ConfigClockSource+0xd4>
 800587e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005882:	f200 8087 	bhi.w	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 8005886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588a:	f000 8086 	beq.w	800599a <HAL_TIM_ConfigClockSource+0x172>
 800588e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005892:	d87f      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b70      	cmp	r3, #112	@ 0x70
 8005896:	d01a      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0xa6>
 8005898:	2b70      	cmp	r3, #112	@ 0x70
 800589a:	d87b      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b60      	cmp	r3, #96	@ 0x60
 800589e:	d050      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x11a>
 80058a0:	2b60      	cmp	r3, #96	@ 0x60
 80058a2:	d877      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b50      	cmp	r3, #80	@ 0x50
 80058a6:	d03c      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0xfa>
 80058a8:	2b50      	cmp	r3, #80	@ 0x50
 80058aa:	d873      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b40      	cmp	r3, #64	@ 0x40
 80058ae:	d058      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x13a>
 80058b0:	2b40      	cmp	r3, #64	@ 0x40
 80058b2:	d86f      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b30      	cmp	r3, #48	@ 0x30
 80058b6:	d064      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x15a>
 80058b8:	2b30      	cmp	r3, #48	@ 0x30
 80058ba:	d86b      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d060      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x15a>
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d867      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d05c      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x15a>
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d05a      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x15a>
 80058cc:	e062      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058de:	f000 fb63 	bl	8005fa8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	609a      	str	r2, [r3, #8]
      break;
 80058fa:	e04f      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800590c:	f000 fb4c 	bl	8005fa8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800591e:	609a      	str	r2, [r3, #8]
      break;
 8005920:	e03c      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800592e:	461a      	mov	r2, r3
 8005930:	f000 fac0 	bl	8005eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2150      	movs	r1, #80	@ 0x50
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fb19 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005940:	e02c      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800594e:	461a      	mov	r2, r3
 8005950:	f000 fadf 	bl	8005f12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2160      	movs	r1, #96	@ 0x60
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fb09 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005960:	e01c      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800596e:	461a      	mov	r2, r3
 8005970:	f000 faa0 	bl	8005eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2140      	movs	r1, #64	@ 0x40
 800597a:	4618      	mov	r0, r3
 800597c:	f000 faf9 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005980:	e00c      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4619      	mov	r1, r3
 800598c:	4610      	mov	r0, r2
 800598e:	f000 faf0 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005992:	e003      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
      break;
 8005998:	e000      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800599a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a43      	ldr	r2, [pc, #268]	@ (8005b28 <TIM_Base_SetConfig+0x120>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a26:	d00f      	beq.n	8005a48 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a40      	ldr	r2, [pc, #256]	@ (8005b2c <TIM_Base_SetConfig+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00b      	beq.n	8005a48 <TIM_Base_SetConfig+0x40>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a3f      	ldr	r2, [pc, #252]	@ (8005b30 <TIM_Base_SetConfig+0x128>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d007      	beq.n	8005a48 <TIM_Base_SetConfig+0x40>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a3e      	ldr	r2, [pc, #248]	@ (8005b34 <TIM_Base_SetConfig+0x12c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_Base_SetConfig+0x40>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a3d      	ldr	r2, [pc, #244]	@ (8005b38 <TIM_Base_SetConfig+0x130>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d108      	bne.n	8005a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a32      	ldr	r2, [pc, #200]	@ (8005b28 <TIM_Base_SetConfig+0x120>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d02b      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a68:	d027      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8005b2c <TIM_Base_SetConfig+0x124>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d023      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2e      	ldr	r2, [pc, #184]	@ (8005b30 <TIM_Base_SetConfig+0x128>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01f      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b34 <TIM_Base_SetConfig+0x12c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d01b      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2c      	ldr	r2, [pc, #176]	@ (8005b38 <TIM_Base_SetConfig+0x130>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d017      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005b3c <TIM_Base_SetConfig+0x134>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d013      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a2a      	ldr	r2, [pc, #168]	@ (8005b40 <TIM_Base_SetConfig+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00f      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a29      	ldr	r2, [pc, #164]	@ (8005b44 <TIM_Base_SetConfig+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00b      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a28      	ldr	r2, [pc, #160]	@ (8005b48 <TIM_Base_SetConfig+0x140>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d007      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a27      	ldr	r2, [pc, #156]	@ (8005b4c <TIM_Base_SetConfig+0x144>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d003      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a26      	ldr	r2, [pc, #152]	@ (8005b50 <TIM_Base_SetConfig+0x148>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d108      	bne.n	8005acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a0e      	ldr	r2, [pc, #56]	@ (8005b28 <TIM_Base_SetConfig+0x120>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <TIM_Base_SetConfig+0xf2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a10      	ldr	r2, [pc, #64]	@ (8005b38 <TIM_Base_SetConfig+0x130>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d103      	bne.n	8005b02 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f043 0204 	orr.w	r2, r3, #4
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	601a      	str	r2, [r3, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40010400 	.word	0x40010400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40014400 	.word	0x40014400
 8005b44:	40014800 	.word	0x40014800
 8005b48:	40001800 	.word	0x40001800
 8005b4c:	40001c00 	.word	0x40001c00
 8005b50:	40002000 	.word	0x40002000

08005b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f023 0201 	bic.w	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f023 0302 	bic.w	r3, r3, #2
 8005b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a20      	ldr	r2, [pc, #128]	@ (8005c2c <TIM_OC1_SetConfig+0xd8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC1_SetConfig+0x64>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c30 <TIM_OC1_SetConfig+0xdc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d10c      	bne.n	8005bd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0308 	bic.w	r3, r3, #8
 8005bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f023 0304 	bic.w	r3, r3, #4
 8005bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a15      	ldr	r2, [pc, #84]	@ (8005c2c <TIM_OC1_SetConfig+0xd8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_OC1_SetConfig+0x8e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a14      	ldr	r2, [pc, #80]	@ (8005c30 <TIM_OC1_SetConfig+0xdc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d111      	bne.n	8005c06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	621a      	str	r2, [r3, #32]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010400 	.word	0x40010400

08005c34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f023 0210 	bic.w	r2, r3, #16
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0320 	bic.w	r3, r3, #32
 8005c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a22      	ldr	r2, [pc, #136]	@ (8005d18 <TIM_OC2_SetConfig+0xe4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_OC2_SetConfig+0x68>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a21      	ldr	r2, [pc, #132]	@ (8005d1c <TIM_OC2_SetConfig+0xe8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d10d      	bne.n	8005cb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a17      	ldr	r2, [pc, #92]	@ (8005d18 <TIM_OC2_SetConfig+0xe4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC2_SetConfig+0x94>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <TIM_OC2_SetConfig+0xe8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d113      	bne.n	8005cf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	40010400 	.word	0x40010400

08005d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a21      	ldr	r2, [pc, #132]	@ (8005e00 <TIM_OC3_SetConfig+0xe0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_OC3_SetConfig+0x66>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a20      	ldr	r2, [pc, #128]	@ (8005e04 <TIM_OC3_SetConfig+0xe4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d10d      	bne.n	8005da2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a16      	ldr	r2, [pc, #88]	@ (8005e00 <TIM_OC3_SetConfig+0xe0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <TIM_OC3_SetConfig+0x92>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a15      	ldr	r2, [pc, #84]	@ (8005e04 <TIM_OC3_SetConfig+0xe4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d113      	bne.n	8005dda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40010400 	.word	0x40010400

08005e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	031b      	lsls	r3, r3, #12
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a12      	ldr	r2, [pc, #72]	@ (8005eac <TIM_OC4_SetConfig+0xa4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC4_SetConfig+0x68>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a11      	ldr	r2, [pc, #68]	@ (8005eb0 <TIM_OC4_SetConfig+0xa8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d109      	bne.n	8005e84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	019b      	lsls	r3, r3, #6
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40010400 	.word	0x40010400

08005eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f023 0201 	bic.w	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f023 030a 	bic.w	r3, r3, #10
 8005ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b087      	sub	sp, #28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f023 0210 	bic.w	r2, r3, #16
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	031b      	lsls	r3, r3, #12
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f043 0307 	orr.w	r3, r3, #7
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	609a      	str	r2, [r3, #8]
}
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	021a      	lsls	r2, r3, #8
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	609a      	str	r2, [r3, #8]
}
 8005fdc:	bf00      	nop
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f003 031f 	and.w	r3, r3, #31
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8006000:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a1a      	ldr	r2, [r3, #32]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	43db      	mvns	r3, r3
 800600a:	401a      	ands	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a1a      	ldr	r2, [r3, #32]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	fa01 f303 	lsl.w	r3, r1, r3
 8006020:	431a      	orrs	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
	...

08006034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006048:	2302      	movs	r3, #2
 800604a:	e05a      	b.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a21      	ldr	r2, [pc, #132]	@ (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d022      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006098:	d01d      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1d      	ldr	r2, [pc, #116]	@ (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d018      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d013      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1a      	ldr	r2, [pc, #104]	@ (800611c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00e      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a18      	ldr	r2, [pc, #96]	@ (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d009      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a17      	ldr	r2, [pc, #92]	@ (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d004      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a15      	ldr	r2, [pc, #84]	@ (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d10c      	bne.n	80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40010400 	.word	0x40010400
 8006124:	40014000 	.word	0x40014000
 8006128:	40001800 	.word	0x40001800

0800612c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006144:	2302      	movs	r3, #2
 8006146:	e03d      	b.n	80061c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4313      	orrs	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e042      	b.n	8006290 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fd f824 	bl	800326c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2224      	movs	r2, #36	@ 0x24
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800623a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fa09 	bl	8006654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695a      	ldr	r2, [r3, #20]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08a      	sub	sp, #40	@ 0x28
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	4613      	mov	r3, r2
 80062a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	d175      	bne.n	80063a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <HAL_UART_Transmit+0x2c>
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e06e      	b.n	80063a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2221      	movs	r2, #33	@ 0x21
 80062d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062d6:	f7fd f8a5 	bl	8003424 <HAL_GetTick>
 80062da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	88fa      	ldrh	r2, [r7, #6]
 80062e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f0:	d108      	bne.n	8006304 <HAL_UART_Transmit+0x6c>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	e003      	b.n	800630c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006308:	2300      	movs	r3, #0
 800630a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800630c:	e02e      	b.n	800636c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2200      	movs	r2, #0
 8006316:	2180      	movs	r1, #128	@ 0x80
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f8df 	bl	80064dc <UART_WaitOnFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e03a      	b.n	80063a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10b      	bne.n	800634e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	3302      	adds	r3, #2
 800634a:	61bb      	str	r3, [r7, #24]
 800634c:	e007      	b.n	800635e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	781a      	ldrb	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	3301      	adds	r3, #1
 800635c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006362:	b29b      	uxth	r3, r3
 8006364:	3b01      	subs	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1cb      	bne.n	800630e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2200      	movs	r2, #0
 800637e:	2140      	movs	r1, #64	@ 0x40
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f8ab 	bl	80064dc <UART_WaitOnFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e006      	b.n	80063a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	e000      	b.n	80063a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
  }
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b08a      	sub	sp, #40	@ 0x28
 80063b2:	af02      	add	r7, sp, #8
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	4613      	mov	r3, r2
 80063bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	f040 8081 	bne.w	80064d2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_UART_Receive+0x2e>
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e079      	b.n	80064d4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2222      	movs	r2, #34	@ 0x22
 80063ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063f4:	f7fd f816 	bl	8003424 <HAL_GetTick>
 80063f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800640e:	d108      	bne.n	8006422 <HAL_UART_Receive+0x74>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	61bb      	str	r3, [r7, #24]
 8006420:	e003      	b.n	800642a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800642a:	e047      	b.n	80064bc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2200      	movs	r2, #0
 8006434:	2120      	movs	r1, #32
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 f850 	bl	80064dc <UART_WaitOnFlagUntilTimeout>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d005      	beq.n	800644e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e042      	b.n	80064d4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10c      	bne.n	800646e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006460:	b29a      	uxth	r2, r3
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	3302      	adds	r3, #2
 800646a:	61bb      	str	r3, [r7, #24]
 800646c:	e01f      	b.n	80064ae <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006476:	d007      	beq.n	8006488 <HAL_UART_Receive+0xda>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <HAL_UART_Receive+0xe8>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e008      	b.n	80064a8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	3301      	adds	r3, #1
 80064ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1b2      	bne.n	800642c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e000      	b.n	80064d4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
  }
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	4613      	mov	r3, r2
 80064ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ec:	e03b      	b.n	8006566 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f4:	d037      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f6:	f7fc ff95 	bl	8003424 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	429a      	cmp	r2, r3
 8006504:	d302      	bcc.n	800650c <UART_WaitOnFlagUntilTimeout+0x30>
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e03a      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d023      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0x8a>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b80      	cmp	r3, #128	@ 0x80
 8006522:	d020      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b40      	cmp	r3, #64	@ 0x40
 8006528:	d01d      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b08      	cmp	r3, #8
 8006536:	d116      	bne.n	8006566 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f81d 	bl	800658e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2208      	movs	r2, #8
 8006558:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e00f      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4013      	ands	r3, r2
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	429a      	cmp	r2, r3
 8006574:	bf0c      	ite	eq
 8006576:	2301      	moveq	r3, #1
 8006578:	2300      	movne	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	79fb      	ldrb	r3, [r7, #7]
 8006580:	429a      	cmp	r2, r3
 8006582:	d0b4      	beq.n	80064ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800658e:	b480      	push	{r7}
 8006590:	b095      	sub	sp, #84	@ 0x54
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	330c      	adds	r3, #12
 80065b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80065b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e5      	bne.n	8006596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3314      	adds	r3, #20
 80065d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3314      	adds	r3, #20
 80065e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e5      	bne.n	80065ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006602:	2b01      	cmp	r3, #1
 8006604:	d119      	bne.n	800663a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	330c      	adds	r3, #12
 800660c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	60bb      	str	r3, [r7, #8]
   return(result);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f023 0310 	bic.w	r3, r3, #16
 800661c:	647b      	str	r3, [r7, #68]	@ 0x44
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	330c      	adds	r3, #12
 8006624:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006626:	61ba      	str	r2, [r7, #24]
 8006628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6979      	ldr	r1, [r7, #20]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	613b      	str	r3, [r7, #16]
   return(result);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e5      	bne.n	8006606 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006648:	bf00      	nop
 800664a:	3754      	adds	r7, #84	@ 0x54
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006658:	b0c0      	sub	sp, #256	@ 0x100
 800665a:	af00      	add	r7, sp, #0
 800665c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006670:	68d9      	ldr	r1, [r3, #12]
 8006672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	ea40 0301 	orr.w	r3, r0, r1
 800667c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800667e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	431a      	orrs	r2, r3
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	431a      	orrs	r2, r3
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80066ac:	f021 010c 	bic.w	r1, r1, #12
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066ba:	430b      	orrs	r3, r1
 80066bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80066ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ce:	6999      	ldr	r1, [r3, #24]
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	ea40 0301 	orr.w	r3, r0, r1
 80066da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b8f      	ldr	r3, [pc, #572]	@ (8006920 <UART_SetConfig+0x2cc>)
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d005      	beq.n	80066f4 <UART_SetConfig+0xa0>
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4b8d      	ldr	r3, [pc, #564]	@ (8006924 <UART_SetConfig+0x2d0>)
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d104      	bne.n	80066fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066f4:	f7fd ff00 	bl	80044f8 <HAL_RCC_GetPCLK2Freq>
 80066f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066fc:	e003      	b.n	8006706 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066fe:	f7fd fee7 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8006702:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006710:	f040 810c 	bne.w	800692c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006718:	2200      	movs	r2, #0
 800671a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800671e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006722:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006726:	4622      	mov	r2, r4
 8006728:	462b      	mov	r3, r5
 800672a:	1891      	adds	r1, r2, r2
 800672c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800672e:	415b      	adcs	r3, r3
 8006730:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006732:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006736:	4621      	mov	r1, r4
 8006738:	eb12 0801 	adds.w	r8, r2, r1
 800673c:	4629      	mov	r1, r5
 800673e:	eb43 0901 	adc.w	r9, r3, r1
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800674e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006756:	4690      	mov	r8, r2
 8006758:	4699      	mov	r9, r3
 800675a:	4623      	mov	r3, r4
 800675c:	eb18 0303 	adds.w	r3, r8, r3
 8006760:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006764:	462b      	mov	r3, r5
 8006766:	eb49 0303 	adc.w	r3, r9, r3
 800676a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800676e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800677a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800677e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006782:	460b      	mov	r3, r1
 8006784:	18db      	adds	r3, r3, r3
 8006786:	653b      	str	r3, [r7, #80]	@ 0x50
 8006788:	4613      	mov	r3, r2
 800678a:	eb42 0303 	adc.w	r3, r2, r3
 800678e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006790:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006794:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006798:	f7fa faa6 	bl	8000ce8 <__aeabi_uldivmod>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4b61      	ldr	r3, [pc, #388]	@ (8006928 <UART_SetConfig+0x2d4>)
 80067a2:	fba3 2302 	umull	r2, r3, r3, r2
 80067a6:	095b      	lsrs	r3, r3, #5
 80067a8:	011c      	lsls	r4, r3, #4
 80067aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80067b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80067bc:	4642      	mov	r2, r8
 80067be:	464b      	mov	r3, r9
 80067c0:	1891      	adds	r1, r2, r2
 80067c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80067c4:	415b      	adcs	r3, r3
 80067c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80067cc:	4641      	mov	r1, r8
 80067ce:	eb12 0a01 	adds.w	sl, r2, r1
 80067d2:	4649      	mov	r1, r9
 80067d4:	eb43 0b01 	adc.w	fp, r3, r1
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067ec:	4692      	mov	sl, r2
 80067ee:	469b      	mov	fp, r3
 80067f0:	4643      	mov	r3, r8
 80067f2:	eb1a 0303 	adds.w	r3, sl, r3
 80067f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067fa:	464b      	mov	r3, r9
 80067fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006800:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006810:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006814:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006818:	460b      	mov	r3, r1
 800681a:	18db      	adds	r3, r3, r3
 800681c:	643b      	str	r3, [r7, #64]	@ 0x40
 800681e:	4613      	mov	r3, r2
 8006820:	eb42 0303 	adc.w	r3, r2, r3
 8006824:	647b      	str	r3, [r7, #68]	@ 0x44
 8006826:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800682a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800682e:	f7fa fa5b 	bl	8000ce8 <__aeabi_uldivmod>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4611      	mov	r1, r2
 8006838:	4b3b      	ldr	r3, [pc, #236]	@ (8006928 <UART_SetConfig+0x2d4>)
 800683a:	fba3 2301 	umull	r2, r3, r3, r1
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	2264      	movs	r2, #100	@ 0x64
 8006842:	fb02 f303 	mul.w	r3, r2, r3
 8006846:	1acb      	subs	r3, r1, r3
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800684e:	4b36      	ldr	r3, [pc, #216]	@ (8006928 <UART_SetConfig+0x2d4>)
 8006850:	fba3 2302 	umull	r2, r3, r3, r2
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800685c:	441c      	add	r4, r3
 800685e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006862:	2200      	movs	r2, #0
 8006864:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006868:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800686c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006870:	4642      	mov	r2, r8
 8006872:	464b      	mov	r3, r9
 8006874:	1891      	adds	r1, r2, r2
 8006876:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006878:	415b      	adcs	r3, r3
 800687a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800687c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006880:	4641      	mov	r1, r8
 8006882:	1851      	adds	r1, r2, r1
 8006884:	6339      	str	r1, [r7, #48]	@ 0x30
 8006886:	4649      	mov	r1, r9
 8006888:	414b      	adcs	r3, r1
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006898:	4659      	mov	r1, fp
 800689a:	00cb      	lsls	r3, r1, #3
 800689c:	4651      	mov	r1, sl
 800689e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068a2:	4651      	mov	r1, sl
 80068a4:	00ca      	lsls	r2, r1, #3
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	4642      	mov	r2, r8
 80068ae:	189b      	adds	r3, r3, r2
 80068b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068b4:	464b      	mov	r3, r9
 80068b6:	460a      	mov	r2, r1
 80068b8:	eb42 0303 	adc.w	r3, r2, r3
 80068bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80068d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068d4:	460b      	mov	r3, r1
 80068d6:	18db      	adds	r3, r3, r3
 80068d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068da:	4613      	mov	r3, r2
 80068dc:	eb42 0303 	adc.w	r3, r2, r3
 80068e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80068ea:	f7fa f9fd 	bl	8000ce8 <__aeabi_uldivmod>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006928 <UART_SetConfig+0x2d4>)
 80068f4:	fba3 1302 	umull	r1, r3, r3, r2
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	2164      	movs	r1, #100	@ 0x64
 80068fc:	fb01 f303 	mul.w	r3, r1, r3
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	3332      	adds	r3, #50	@ 0x32
 8006906:	4a08      	ldr	r2, [pc, #32]	@ (8006928 <UART_SetConfig+0x2d4>)
 8006908:	fba2 2303 	umull	r2, r3, r2, r3
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	f003 0207 	and.w	r2, r3, #7
 8006912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4422      	add	r2, r4
 800691a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800691c:	e106      	b.n	8006b2c <UART_SetConfig+0x4d8>
 800691e:	bf00      	nop
 8006920:	40011000 	.word	0x40011000
 8006924:	40011400 	.word	0x40011400
 8006928:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800692c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006930:	2200      	movs	r2, #0
 8006932:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006936:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800693a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800693e:	4642      	mov	r2, r8
 8006940:	464b      	mov	r3, r9
 8006942:	1891      	adds	r1, r2, r2
 8006944:	6239      	str	r1, [r7, #32]
 8006946:	415b      	adcs	r3, r3
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
 800694a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800694e:	4641      	mov	r1, r8
 8006950:	1854      	adds	r4, r2, r1
 8006952:	4649      	mov	r1, r9
 8006954:	eb43 0501 	adc.w	r5, r3, r1
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	00eb      	lsls	r3, r5, #3
 8006962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006966:	00e2      	lsls	r2, r4, #3
 8006968:	4614      	mov	r4, r2
 800696a:	461d      	mov	r5, r3
 800696c:	4643      	mov	r3, r8
 800696e:	18e3      	adds	r3, r4, r3
 8006970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006974:	464b      	mov	r3, r9
 8006976:	eb45 0303 	adc.w	r3, r5, r3
 800697a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800697e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800698a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	f04f 0300 	mov.w	r3, #0
 8006996:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800699a:	4629      	mov	r1, r5
 800699c:	008b      	lsls	r3, r1, #2
 800699e:	4621      	mov	r1, r4
 80069a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069a4:	4621      	mov	r1, r4
 80069a6:	008a      	lsls	r2, r1, #2
 80069a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80069ac:	f7fa f99c 	bl	8000ce8 <__aeabi_uldivmod>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4b60      	ldr	r3, [pc, #384]	@ (8006b38 <UART_SetConfig+0x4e4>)
 80069b6:	fba3 2302 	umull	r2, r3, r3, r2
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	011c      	lsls	r4, r3, #4
 80069be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80069cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	1891      	adds	r1, r2, r2
 80069d6:	61b9      	str	r1, [r7, #24]
 80069d8:	415b      	adcs	r3, r3
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069e0:	4641      	mov	r1, r8
 80069e2:	1851      	adds	r1, r2, r1
 80069e4:	6139      	str	r1, [r7, #16]
 80069e6:	4649      	mov	r1, r9
 80069e8:	414b      	adcs	r3, r1
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069f8:	4659      	mov	r1, fp
 80069fa:	00cb      	lsls	r3, r1, #3
 80069fc:	4651      	mov	r1, sl
 80069fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a02:	4651      	mov	r1, sl
 8006a04:	00ca      	lsls	r2, r1, #3
 8006a06:	4610      	mov	r0, r2
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	189b      	adds	r3, r3, r2
 8006a10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a14:	464b      	mov	r3, r9
 8006a16:	460a      	mov	r2, r1
 8006a18:	eb42 0303 	adc.w	r3, r2, r3
 8006a1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a38:	4649      	mov	r1, r9
 8006a3a:	008b      	lsls	r3, r1, #2
 8006a3c:	4641      	mov	r1, r8
 8006a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a42:	4641      	mov	r1, r8
 8006a44:	008a      	lsls	r2, r1, #2
 8006a46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a4a:	f7fa f94d 	bl	8000ce8 <__aeabi_uldivmod>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4611      	mov	r1, r2
 8006a54:	4b38      	ldr	r3, [pc, #224]	@ (8006b38 <UART_SetConfig+0x4e4>)
 8006a56:	fba3 2301 	umull	r2, r3, r3, r1
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	2264      	movs	r2, #100	@ 0x64
 8006a5e:	fb02 f303 	mul.w	r3, r2, r3
 8006a62:	1acb      	subs	r3, r1, r3
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	3332      	adds	r3, #50	@ 0x32
 8006a68:	4a33      	ldr	r2, [pc, #204]	@ (8006b38 <UART_SetConfig+0x4e4>)
 8006a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6e:	095b      	lsrs	r3, r3, #5
 8006a70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a74:	441c      	add	r4, r3
 8006a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a84:	4642      	mov	r2, r8
 8006a86:	464b      	mov	r3, r9
 8006a88:	1891      	adds	r1, r2, r2
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	415b      	adcs	r3, r3
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a94:	4641      	mov	r1, r8
 8006a96:	1851      	adds	r1, r2, r1
 8006a98:	6039      	str	r1, [r7, #0]
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	414b      	adcs	r3, r1
 8006a9e:	607b      	str	r3, [r7, #4]
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006aac:	4659      	mov	r1, fp
 8006aae:	00cb      	lsls	r3, r1, #3
 8006ab0:	4651      	mov	r1, sl
 8006ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ab6:	4651      	mov	r1, sl
 8006ab8:	00ca      	lsls	r2, r1, #3
 8006aba:	4610      	mov	r0, r2
 8006abc:	4619      	mov	r1, r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	189b      	adds	r3, r3, r2
 8006ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	460a      	mov	r2, r1
 8006aca:	eb42 0303 	adc.w	r3, r2, r3
 8006ace:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ada:	667a      	str	r2, [r7, #100]	@ 0x64
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ae8:	4649      	mov	r1, r9
 8006aea:	008b      	lsls	r3, r1, #2
 8006aec:	4641      	mov	r1, r8
 8006aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006af2:	4641      	mov	r1, r8
 8006af4:	008a      	lsls	r2, r1, #2
 8006af6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006afa:	f7fa f8f5 	bl	8000ce8 <__aeabi_uldivmod>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4b0d      	ldr	r3, [pc, #52]	@ (8006b38 <UART_SetConfig+0x4e4>)
 8006b04:	fba3 1302 	umull	r1, r3, r3, r2
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	2164      	movs	r1, #100	@ 0x64
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	3332      	adds	r3, #50	@ 0x32
 8006b16:	4a08      	ldr	r2, [pc, #32]	@ (8006b38 <UART_SetConfig+0x4e4>)
 8006b18:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1c:	095b      	lsrs	r3, r3, #5
 8006b1e:	f003 020f 	and.w	r2, r3, #15
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4422      	add	r2, r4
 8006b2a:	609a      	str	r2, [r3, #8]
}
 8006b2c:	bf00      	nop
 8006b2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b32:	46bd      	mov	sp, r7
 8006b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b38:	51eb851f 	.word	0x51eb851f

08006b3c <powf>:
 8006b3c:	b508      	push	{r3, lr}
 8006b3e:	ed2d 8b04 	vpush	{d8-d9}
 8006b42:	eeb0 8a60 	vmov.f32	s16, s1
 8006b46:	eeb0 9a40 	vmov.f32	s18, s0
 8006b4a:	f000 f859 	bl	8006c00 <__ieee754_powf>
 8006b4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b56:	eef0 8a40 	vmov.f32	s17, s0
 8006b5a:	d63e      	bvs.n	8006bda <powf+0x9e>
 8006b5c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b64:	d112      	bne.n	8006b8c <powf+0x50>
 8006b66:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b6e:	d039      	beq.n	8006be4 <powf+0xa8>
 8006b70:	eeb0 0a48 	vmov.f32	s0, s16
 8006b74:	f000 f839 	bl	8006bea <finitef>
 8006b78:	b378      	cbz	r0, 8006bda <powf+0x9e>
 8006b7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b82:	d52a      	bpl.n	8006bda <powf+0x9e>
 8006b84:	f001 fd0e 	bl	80085a4 <__errno>
 8006b88:	2322      	movs	r3, #34	@ 0x22
 8006b8a:	e014      	b.n	8006bb6 <powf+0x7a>
 8006b8c:	f000 f82d 	bl	8006bea <finitef>
 8006b90:	b998      	cbnz	r0, 8006bba <powf+0x7e>
 8006b92:	eeb0 0a49 	vmov.f32	s0, s18
 8006b96:	f000 f828 	bl	8006bea <finitef>
 8006b9a:	b170      	cbz	r0, 8006bba <powf+0x7e>
 8006b9c:	eeb0 0a48 	vmov.f32	s0, s16
 8006ba0:	f000 f823 	bl	8006bea <finitef>
 8006ba4:	b148      	cbz	r0, 8006bba <powf+0x7e>
 8006ba6:	eef4 8a68 	vcmp.f32	s17, s17
 8006baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bae:	d7e9      	bvc.n	8006b84 <powf+0x48>
 8006bb0:	f001 fcf8 	bl	80085a4 <__errno>
 8006bb4:	2321      	movs	r3, #33	@ 0x21
 8006bb6:	6003      	str	r3, [r0, #0]
 8006bb8:	e00f      	b.n	8006bda <powf+0x9e>
 8006bba:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc2:	d10a      	bne.n	8006bda <powf+0x9e>
 8006bc4:	eeb0 0a49 	vmov.f32	s0, s18
 8006bc8:	f000 f80f 	bl	8006bea <finitef>
 8006bcc:	b128      	cbz	r0, 8006bda <powf+0x9e>
 8006bce:	eeb0 0a48 	vmov.f32	s0, s16
 8006bd2:	f000 f80a 	bl	8006bea <finitef>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d1d4      	bne.n	8006b84 <powf+0x48>
 8006bda:	eeb0 0a68 	vmov.f32	s0, s17
 8006bde:	ecbd 8b04 	vpop	{d8-d9}
 8006be2:	bd08      	pop	{r3, pc}
 8006be4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8006be8:	e7f7      	b.n	8006bda <powf+0x9e>

08006bea <finitef>:
 8006bea:	ee10 3a10 	vmov	r3, s0
 8006bee:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8006bf2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8006bf6:	bfac      	ite	ge
 8006bf8:	2000      	movge	r0, #0
 8006bfa:	2001      	movlt	r0, #1
 8006bfc:	4770      	bx	lr
	...

08006c00 <__ieee754_powf>:
 8006c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c04:	ee10 4a90 	vmov	r4, s1
 8006c08:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8006c0c:	ed2d 8b02 	vpush	{d8}
 8006c10:	ee10 6a10 	vmov	r6, s0
 8006c14:	eeb0 8a40 	vmov.f32	s16, s0
 8006c18:	eef0 8a60 	vmov.f32	s17, s1
 8006c1c:	d10c      	bne.n	8006c38 <__ieee754_powf+0x38>
 8006c1e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8006c22:	0076      	lsls	r6, r6, #1
 8006c24:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8006c28:	f240 8274 	bls.w	8007114 <__ieee754_powf+0x514>
 8006c2c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006c30:	ecbd 8b02 	vpop	{d8}
 8006c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c38:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8006c3c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8006c40:	d802      	bhi.n	8006c48 <__ieee754_powf+0x48>
 8006c42:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8006c46:	d908      	bls.n	8006c5a <__ieee754_powf+0x5a>
 8006c48:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8006c4c:	d1ee      	bne.n	8006c2c <__ieee754_powf+0x2c>
 8006c4e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8006c52:	0064      	lsls	r4, r4, #1
 8006c54:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8006c58:	e7e6      	b.n	8006c28 <__ieee754_powf+0x28>
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	da1f      	bge.n	8006c9e <__ieee754_powf+0x9e>
 8006c5e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8006c62:	f080 8260 	bcs.w	8007126 <__ieee754_powf+0x526>
 8006c66:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8006c6a:	d32f      	bcc.n	8006ccc <__ieee754_powf+0xcc>
 8006c6c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8006c70:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8006c74:	fa49 f503 	asr.w	r5, r9, r3
 8006c78:	fa05 f303 	lsl.w	r3, r5, r3
 8006c7c:	454b      	cmp	r3, r9
 8006c7e:	d123      	bne.n	8006cc8 <__ieee754_powf+0xc8>
 8006c80:	f005 0501 	and.w	r5, r5, #1
 8006c84:	f1c5 0502 	rsb	r5, r5, #2
 8006c88:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8006c8c:	d11f      	bne.n	8006cce <__ieee754_powf+0xce>
 8006c8e:	2c00      	cmp	r4, #0
 8006c90:	f280 8246 	bge.w	8007120 <__ieee754_powf+0x520>
 8006c94:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006c98:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006c9c:	e7c8      	b.n	8006c30 <__ieee754_powf+0x30>
 8006c9e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8006ca2:	d111      	bne.n	8006cc8 <__ieee754_powf+0xc8>
 8006ca4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8006ca8:	f000 8234 	beq.w	8007114 <__ieee754_powf+0x514>
 8006cac:	d906      	bls.n	8006cbc <__ieee754_powf+0xbc>
 8006cae:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8006fc4 <__ieee754_powf+0x3c4>
 8006cb2:	2c00      	cmp	r4, #0
 8006cb4:	bfa8      	it	ge
 8006cb6:	eeb0 0a68 	vmovge.f32	s0, s17
 8006cba:	e7b9      	b.n	8006c30 <__ieee754_powf+0x30>
 8006cbc:	2c00      	cmp	r4, #0
 8006cbe:	f280 822c 	bge.w	800711a <__ieee754_powf+0x51a>
 8006cc2:	eeb1 0a68 	vneg.f32	s0, s17
 8006cc6:	e7b3      	b.n	8006c30 <__ieee754_powf+0x30>
 8006cc8:	2500      	movs	r5, #0
 8006cca:	e7dd      	b.n	8006c88 <__ieee754_powf+0x88>
 8006ccc:	2500      	movs	r5, #0
 8006cce:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8006cd2:	d102      	bne.n	8006cda <__ieee754_powf+0xda>
 8006cd4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006cd8:	e7aa      	b.n	8006c30 <__ieee754_powf+0x30>
 8006cda:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8006cde:	f040 8227 	bne.w	8007130 <__ieee754_powf+0x530>
 8006ce2:	2e00      	cmp	r6, #0
 8006ce4:	f2c0 8224 	blt.w	8007130 <__ieee754_powf+0x530>
 8006ce8:	eeb0 0a48 	vmov.f32	s0, s16
 8006cec:	ecbd 8b02 	vpop	{d8}
 8006cf0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cf4:	f000 bae6 	b.w	80072c4 <__ieee754_sqrtf>
 8006cf8:	2d01      	cmp	r5, #1
 8006cfa:	d199      	bne.n	8006c30 <__ieee754_powf+0x30>
 8006cfc:	eeb1 0a40 	vneg.f32	s0, s0
 8006d00:	e796      	b.n	8006c30 <__ieee754_powf+0x30>
 8006d02:	0ff0      	lsrs	r0, r6, #31
 8006d04:	3801      	subs	r0, #1
 8006d06:	ea55 0300 	orrs.w	r3, r5, r0
 8006d0a:	d104      	bne.n	8006d16 <__ieee754_powf+0x116>
 8006d0c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006d10:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006d14:	e78c      	b.n	8006c30 <__ieee754_powf+0x30>
 8006d16:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8006d1a:	d96d      	bls.n	8006df8 <__ieee754_powf+0x1f8>
 8006d1c:	4baa      	ldr	r3, [pc, #680]	@ (8006fc8 <__ieee754_powf+0x3c8>)
 8006d1e:	4598      	cmp	r8, r3
 8006d20:	d808      	bhi.n	8006d34 <__ieee754_powf+0x134>
 8006d22:	2c00      	cmp	r4, #0
 8006d24:	da0b      	bge.n	8006d3e <__ieee754_powf+0x13e>
 8006d26:	2000      	movs	r0, #0
 8006d28:	ecbd 8b02 	vpop	{d8}
 8006d2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d30:	f000 bac2 	b.w	80072b8 <__math_oflowf>
 8006d34:	4ba5      	ldr	r3, [pc, #660]	@ (8006fcc <__ieee754_powf+0x3cc>)
 8006d36:	4598      	cmp	r8, r3
 8006d38:	d908      	bls.n	8006d4c <__ieee754_powf+0x14c>
 8006d3a:	2c00      	cmp	r4, #0
 8006d3c:	dcf3      	bgt.n	8006d26 <__ieee754_powf+0x126>
 8006d3e:	2000      	movs	r0, #0
 8006d40:	ecbd 8b02 	vpop	{d8}
 8006d44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d48:	f000 bab0 	b.w	80072ac <__math_uflowf>
 8006d4c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006d50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006d54:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8006fd0 <__ieee754_powf+0x3d0>
 8006d58:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8006d5c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8006d60:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006d64:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006d68:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006d6c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8006fd4 <__ieee754_powf+0x3d4>
 8006d70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d74:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8006fd8 <__ieee754_powf+0x3d8>
 8006d78:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8006d7c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006fdc <__ieee754_powf+0x3dc>
 8006d80:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006d84:	eeb0 7a67 	vmov.f32	s14, s15
 8006d88:	eea0 7a26 	vfma.f32	s14, s0, s13
 8006d8c:	ee17 3a10 	vmov	r3, s14
 8006d90:	f36f 030b 	bfc	r3, #0, #12
 8006d94:	ee07 3a10 	vmov	s14, r3
 8006d98:	eeb0 6a47 	vmov.f32	s12, s14
 8006d9c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8006da0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006da4:	3d01      	subs	r5, #1
 8006da6:	4305      	orrs	r5, r0
 8006da8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dac:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8006db0:	f36f 040b 	bfc	r4, #0, #12
 8006db4:	bf18      	it	ne
 8006db6:	eeb0 8a66 	vmovne.f32	s16, s13
 8006dba:	ee06 4a90 	vmov	s13, r4
 8006dbe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006dc2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8006dc6:	ee67 7a26 	vmul.f32	s15, s14, s13
 8006dca:	eee6 0a07 	vfma.f32	s1, s12, s14
 8006dce:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006dd2:	ee17 1a10 	vmov	r1, s14
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006ddc:	f340 80dd 	ble.w	8006f9a <__ieee754_powf+0x39a>
 8006de0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8006de4:	f240 80ca 	bls.w	8006f7c <__ieee754_powf+0x37c>
 8006de8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df0:	bf4c      	ite	mi
 8006df2:	2001      	movmi	r0, #1
 8006df4:	2000      	movpl	r0, #0
 8006df6:	e797      	b.n	8006d28 <__ieee754_powf+0x128>
 8006df8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8006dfc:	bf01      	itttt	eq
 8006dfe:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8006fe0 <__ieee754_powf+0x3e0>
 8006e02:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006e06:	f06f 0317 	mvneq.w	r3, #23
 8006e0a:	ee17 7a90 	vmoveq	r7, s15
 8006e0e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8006e12:	bf18      	it	ne
 8006e14:	2300      	movne	r3, #0
 8006e16:	3a7f      	subs	r2, #127	@ 0x7f
 8006e18:	441a      	add	r2, r3
 8006e1a:	4b72      	ldr	r3, [pc, #456]	@ (8006fe4 <__ieee754_powf+0x3e4>)
 8006e1c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8006e20:	429f      	cmp	r7, r3
 8006e22:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8006e26:	dd06      	ble.n	8006e36 <__ieee754_powf+0x236>
 8006e28:	4b6f      	ldr	r3, [pc, #444]	@ (8006fe8 <__ieee754_powf+0x3e8>)
 8006e2a:	429f      	cmp	r7, r3
 8006e2c:	f340 80a4 	ble.w	8006f78 <__ieee754_powf+0x378>
 8006e30:	3201      	adds	r2, #1
 8006e32:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8006e36:	2600      	movs	r6, #0
 8006e38:	4b6c      	ldr	r3, [pc, #432]	@ (8006fec <__ieee754_powf+0x3ec>)
 8006e3a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8006e3e:	ee07 1a10 	vmov	s14, r1
 8006e42:	edd3 5a00 	vldr	s11, [r3]
 8006e46:	4b6a      	ldr	r3, [pc, #424]	@ (8006ff0 <__ieee754_powf+0x3f0>)
 8006e48:	ee75 7a87 	vadd.f32	s15, s11, s14
 8006e4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e50:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8006e54:	1049      	asrs	r1, r1, #1
 8006e56:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8006e5a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8006e5e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8006e62:	ee37 6a65 	vsub.f32	s12, s14, s11
 8006e66:	ee07 1a90 	vmov	s15, r1
 8006e6a:	ee26 5a24 	vmul.f32	s10, s12, s9
 8006e6e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8006e72:	ee15 7a10 	vmov	r7, s10
 8006e76:	401f      	ands	r7, r3
 8006e78:	ee06 7a90 	vmov	s13, r7
 8006e7c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8006e80:	ee37 7a65 	vsub.f32	s14, s14, s11
 8006e84:	ee65 7a05 	vmul.f32	s15, s10, s10
 8006e88:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006e8c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006ff4 <__ieee754_powf+0x3f4>
 8006e90:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8006ff8 <__ieee754_powf+0x3f8>
 8006e94:	eee7 5a87 	vfma.f32	s11, s15, s14
 8006e98:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006ffc <__ieee754_powf+0x3fc>
 8006e9c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006ea0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8006fd0 <__ieee754_powf+0x3d0>
 8006ea4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006ea8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8007000 <__ieee754_powf+0x400>
 8006eac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006eb0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8007004 <__ieee754_powf+0x404>
 8006eb4:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006eb8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006ebc:	ee35 7a26 	vadd.f32	s14, s10, s13
 8006ec0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8006ec4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006ec8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8006ecc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8006ed0:	eef0 5a67 	vmov.f32	s11, s15
 8006ed4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8006ed8:	ee75 5a87 	vadd.f32	s11, s11, s14
 8006edc:	ee15 1a90 	vmov	r1, s11
 8006ee0:	4019      	ands	r1, r3
 8006ee2:	ee05 1a90 	vmov	s11, r1
 8006ee6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8006eea:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8006eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ef2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006ef6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006efa:	eeb0 6a67 	vmov.f32	s12, s15
 8006efe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8006f02:	ee16 1a10 	vmov	r1, s12
 8006f06:	4019      	ands	r1, r3
 8006f08:	ee06 1a10 	vmov	s12, r1
 8006f0c:	eeb0 7a46 	vmov.f32	s14, s12
 8006f10:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8006f14:	493c      	ldr	r1, [pc, #240]	@ (8007008 <__ieee754_powf+0x408>)
 8006f16:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8006f1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f1e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800700c <__ieee754_powf+0x40c>
 8006f22:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8007010 <__ieee754_powf+0x410>
 8006f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f2a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007014 <__ieee754_powf+0x414>
 8006f2e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006f32:	ed91 7a00 	vldr	s14, [r1]
 8006f36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f3a:	ee07 2a10 	vmov	s14, r2
 8006f3e:	4a36      	ldr	r2, [pc, #216]	@ (8007018 <__ieee754_powf+0x418>)
 8006f40:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f44:	eeb0 7a67 	vmov.f32	s14, s15
 8006f48:	eea6 7a25 	vfma.f32	s14, s12, s11
 8006f4c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8006f50:	ed92 5a00 	vldr	s10, [r2]
 8006f54:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006f58:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006f5c:	ee17 2a10 	vmov	r2, s14
 8006f60:	401a      	ands	r2, r3
 8006f62:	ee07 2a10 	vmov	s14, r2
 8006f66:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006f6a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8006f6e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8006f72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f76:	e715      	b.n	8006da4 <__ieee754_powf+0x1a4>
 8006f78:	2601      	movs	r6, #1
 8006f7a:	e75d      	b.n	8006e38 <__ieee754_powf+0x238>
 8006f7c:	d152      	bne.n	8007024 <__ieee754_powf+0x424>
 8006f7e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800701c <__ieee754_powf+0x41c>
 8006f82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f86:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006f8a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f92:	f73f af29 	bgt.w	8006de8 <__ieee754_powf+0x1e8>
 8006f96:	2386      	movs	r3, #134	@ 0x86
 8006f98:	e048      	b.n	800702c <__ieee754_powf+0x42c>
 8006f9a:	4a21      	ldr	r2, [pc, #132]	@ (8007020 <__ieee754_powf+0x420>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d907      	bls.n	8006fb0 <__ieee754_powf+0x3b0>
 8006fa0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa8:	bf4c      	ite	mi
 8006faa:	2001      	movmi	r0, #1
 8006fac:	2000      	movpl	r0, #0
 8006fae:	e6c7      	b.n	8006d40 <__ieee754_powf+0x140>
 8006fb0:	d138      	bne.n	8007024 <__ieee754_powf+0x424>
 8006fb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fb6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fbe:	dbea      	blt.n	8006f96 <__ieee754_powf+0x396>
 8006fc0:	e7ee      	b.n	8006fa0 <__ieee754_powf+0x3a0>
 8006fc2:	bf00      	nop
 8006fc4:	00000000 	.word	0x00000000
 8006fc8:	3f7ffff3 	.word	0x3f7ffff3
 8006fcc:	3f800007 	.word	0x3f800007
 8006fd0:	3eaaaaab 	.word	0x3eaaaaab
 8006fd4:	3fb8aa00 	.word	0x3fb8aa00
 8006fd8:	3fb8aa3b 	.word	0x3fb8aa3b
 8006fdc:	36eca570 	.word	0x36eca570
 8006fe0:	4b800000 	.word	0x4b800000
 8006fe4:	001cc471 	.word	0x001cc471
 8006fe8:	005db3d6 	.word	0x005db3d6
 8006fec:	0800bd34 	.word	0x0800bd34
 8006ff0:	fffff000 	.word	0xfffff000
 8006ff4:	3e6c3255 	.word	0x3e6c3255
 8006ff8:	3e53f142 	.word	0x3e53f142
 8006ffc:	3e8ba305 	.word	0x3e8ba305
 8007000:	3edb6db7 	.word	0x3edb6db7
 8007004:	3f19999a 	.word	0x3f19999a
 8007008:	0800bd24 	.word	0x0800bd24
 800700c:	3f76384f 	.word	0x3f76384f
 8007010:	3f763800 	.word	0x3f763800
 8007014:	369dc3a0 	.word	0x369dc3a0
 8007018:	0800bd2c 	.word	0x0800bd2c
 800701c:	3338aa3c 	.word	0x3338aa3c
 8007020:	43160000 	.word	0x43160000
 8007024:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8007028:	d96f      	bls.n	800710a <__ieee754_powf+0x50a>
 800702a:	15db      	asrs	r3, r3, #23
 800702c:	3b7e      	subs	r3, #126	@ 0x7e
 800702e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8007032:	4118      	asrs	r0, r3
 8007034:	4408      	add	r0, r1
 8007036:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800703a:	4a4e      	ldr	r2, [pc, #312]	@ (8007174 <__ieee754_powf+0x574>)
 800703c:	3b7f      	subs	r3, #127	@ 0x7f
 800703e:	411a      	asrs	r2, r3
 8007040:	4002      	ands	r2, r0
 8007042:	ee07 2a10 	vmov	s14, r2
 8007046:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800704a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800704e:	f1c3 0317 	rsb	r3, r3, #23
 8007052:	4118      	asrs	r0, r3
 8007054:	2900      	cmp	r1, #0
 8007056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800705a:	bfb8      	it	lt
 800705c:	4240      	neglt	r0, r0
 800705e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8007062:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8007178 <__ieee754_powf+0x578>
 8007066:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800717c <__ieee754_powf+0x57c>
 800706a:	ee16 3a90 	vmov	r3, s13
 800706e:	f36f 030b 	bfc	r3, #0, #12
 8007072:	ee06 3a90 	vmov	s13, r3
 8007076:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800707a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800707e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007082:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8007180 <__ieee754_powf+0x580>
 8007086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800708a:	eee0 7a87 	vfma.f32	s15, s1, s14
 800708e:	eeb0 7a67 	vmov.f32	s14, s15
 8007092:	eea6 7a86 	vfma.f32	s14, s13, s12
 8007096:	eef0 5a47 	vmov.f32	s11, s14
 800709a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800709e:	ee67 6a07 	vmul.f32	s13, s14, s14
 80070a2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80070a6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8007184 <__ieee754_powf+0x584>
 80070aa:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8007188 <__ieee754_powf+0x588>
 80070ae:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80070b2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800718c <__ieee754_powf+0x58c>
 80070b6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80070ba:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8007190 <__ieee754_powf+0x590>
 80070be:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80070c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007194 <__ieee754_powf+0x594>
 80070c6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80070ca:	eeb0 6a47 	vmov.f32	s12, s14
 80070ce:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80070d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80070d6:	ee67 5a06 	vmul.f32	s11, s14, s12
 80070da:	ee36 6a66 	vsub.f32	s12, s12, s13
 80070de:	eee7 7a27 	vfma.f32	s15, s14, s15
 80070e2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80070e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80070ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80070ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80070f2:	ee10 3a10 	vmov	r3, s0
 80070f6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80070fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070fe:	da06      	bge.n	800710e <__ieee754_powf+0x50e>
 8007100:	f000 f854 	bl	80071ac <scalbnf>
 8007104:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007108:	e592      	b.n	8006c30 <__ieee754_powf+0x30>
 800710a:	2000      	movs	r0, #0
 800710c:	e7a7      	b.n	800705e <__ieee754_powf+0x45e>
 800710e:	ee00 3a10 	vmov	s0, r3
 8007112:	e7f7      	b.n	8007104 <__ieee754_powf+0x504>
 8007114:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007118:	e58a      	b.n	8006c30 <__ieee754_powf+0x30>
 800711a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8007198 <__ieee754_powf+0x598>
 800711e:	e587      	b.n	8006c30 <__ieee754_powf+0x30>
 8007120:	eeb0 0a48 	vmov.f32	s0, s16
 8007124:	e584      	b.n	8006c30 <__ieee754_powf+0x30>
 8007126:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800712a:	f43f adbb 	beq.w	8006ca4 <__ieee754_powf+0xa4>
 800712e:	2502      	movs	r5, #2
 8007130:	eeb0 0a48 	vmov.f32	s0, s16
 8007134:	f000 f832 	bl	800719c <fabsf>
 8007138:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800713c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8007140:	4647      	mov	r7, r8
 8007142:	d003      	beq.n	800714c <__ieee754_powf+0x54c>
 8007144:	f1b8 0f00 	cmp.w	r8, #0
 8007148:	f47f addb 	bne.w	8006d02 <__ieee754_powf+0x102>
 800714c:	2c00      	cmp	r4, #0
 800714e:	bfbc      	itt	lt
 8007150:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8007154:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007158:	2e00      	cmp	r6, #0
 800715a:	f6bf ad69 	bge.w	8006c30 <__ieee754_powf+0x30>
 800715e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8007162:	ea58 0805 	orrs.w	r8, r8, r5
 8007166:	f47f adc7 	bne.w	8006cf8 <__ieee754_powf+0xf8>
 800716a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800716e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007172:	e55d      	b.n	8006c30 <__ieee754_powf+0x30>
 8007174:	ff800000 	.word	0xff800000
 8007178:	3f317218 	.word	0x3f317218
 800717c:	3f317200 	.word	0x3f317200
 8007180:	35bfbe8c 	.word	0x35bfbe8c
 8007184:	b5ddea0e 	.word	0xb5ddea0e
 8007188:	3331bb4c 	.word	0x3331bb4c
 800718c:	388ab355 	.word	0x388ab355
 8007190:	bb360b61 	.word	0xbb360b61
 8007194:	3e2aaaab 	.word	0x3e2aaaab
 8007198:	00000000 	.word	0x00000000

0800719c <fabsf>:
 800719c:	ee10 3a10 	vmov	r3, s0
 80071a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071a4:	ee00 3a10 	vmov	s0, r3
 80071a8:	4770      	bx	lr
	...

080071ac <scalbnf>:
 80071ac:	ee10 3a10 	vmov	r3, s0
 80071b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80071b4:	d02b      	beq.n	800720e <scalbnf+0x62>
 80071b6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80071ba:	d302      	bcc.n	80071c2 <scalbnf+0x16>
 80071bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80071c0:	4770      	bx	lr
 80071c2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80071c6:	d123      	bne.n	8007210 <scalbnf+0x64>
 80071c8:	4b24      	ldr	r3, [pc, #144]	@ (800725c <scalbnf+0xb0>)
 80071ca:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007260 <scalbnf+0xb4>
 80071ce:	4298      	cmp	r0, r3
 80071d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80071d4:	db17      	blt.n	8007206 <scalbnf+0x5a>
 80071d6:	ee10 3a10 	vmov	r3, s0
 80071da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80071de:	3a19      	subs	r2, #25
 80071e0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80071e4:	4288      	cmp	r0, r1
 80071e6:	dd15      	ble.n	8007214 <scalbnf+0x68>
 80071e8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007264 <scalbnf+0xb8>
 80071ec:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007268 <scalbnf+0xbc>
 80071f0:	ee10 3a10 	vmov	r3, s0
 80071f4:	eeb0 7a67 	vmov.f32	s14, s15
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bfb8      	it	lt
 80071fc:	eef0 7a66 	vmovlt.f32	s15, s13
 8007200:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007204:	4770      	bx	lr
 8007206:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800726c <scalbnf+0xc0>
 800720a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800720e:	4770      	bx	lr
 8007210:	0dd2      	lsrs	r2, r2, #23
 8007212:	e7e5      	b.n	80071e0 <scalbnf+0x34>
 8007214:	4410      	add	r0, r2
 8007216:	28fe      	cmp	r0, #254	@ 0xfe
 8007218:	dce6      	bgt.n	80071e8 <scalbnf+0x3c>
 800721a:	2800      	cmp	r0, #0
 800721c:	dd06      	ble.n	800722c <scalbnf+0x80>
 800721e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007222:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007226:	ee00 3a10 	vmov	s0, r3
 800722a:	4770      	bx	lr
 800722c:	f110 0f16 	cmn.w	r0, #22
 8007230:	da09      	bge.n	8007246 <scalbnf+0x9a>
 8007232:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800726c <scalbnf+0xc0>
 8007236:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007270 <scalbnf+0xc4>
 800723a:	ee10 3a10 	vmov	r3, s0
 800723e:	eeb0 7a67 	vmov.f32	s14, s15
 8007242:	2b00      	cmp	r3, #0
 8007244:	e7d9      	b.n	80071fa <scalbnf+0x4e>
 8007246:	3019      	adds	r0, #25
 8007248:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800724c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007250:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007274 <scalbnf+0xc8>
 8007254:	ee07 3a90 	vmov	s15, r3
 8007258:	e7d7      	b.n	800720a <scalbnf+0x5e>
 800725a:	bf00      	nop
 800725c:	ffff3cb0 	.word	0xffff3cb0
 8007260:	4c000000 	.word	0x4c000000
 8007264:	7149f2ca 	.word	0x7149f2ca
 8007268:	f149f2ca 	.word	0xf149f2ca
 800726c:	0da24260 	.word	0x0da24260
 8007270:	8da24260 	.word	0x8da24260
 8007274:	33000000 	.word	0x33000000

08007278 <with_errnof>:
 8007278:	b510      	push	{r4, lr}
 800727a:	ed2d 8b02 	vpush	{d8}
 800727e:	eeb0 8a40 	vmov.f32	s16, s0
 8007282:	4604      	mov	r4, r0
 8007284:	f001 f98e 	bl	80085a4 <__errno>
 8007288:	eeb0 0a48 	vmov.f32	s0, s16
 800728c:	ecbd 8b02 	vpop	{d8}
 8007290:	6004      	str	r4, [r0, #0]
 8007292:	bd10      	pop	{r4, pc}

08007294 <xflowf>:
 8007294:	b130      	cbz	r0, 80072a4 <xflowf+0x10>
 8007296:	eef1 7a40 	vneg.f32	s15, s0
 800729a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800729e:	2022      	movs	r0, #34	@ 0x22
 80072a0:	f7ff bfea 	b.w	8007278 <with_errnof>
 80072a4:	eef0 7a40 	vmov.f32	s15, s0
 80072a8:	e7f7      	b.n	800729a <xflowf+0x6>
	...

080072ac <__math_uflowf>:
 80072ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80072b4 <__math_uflowf+0x8>
 80072b0:	f7ff bff0 	b.w	8007294 <xflowf>
 80072b4:	10000000 	.word	0x10000000

080072b8 <__math_oflowf>:
 80072b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80072c0 <__math_oflowf+0x8>
 80072bc:	f7ff bfea 	b.w	8007294 <xflowf>
 80072c0:	70000000 	.word	0x70000000

080072c4 <__ieee754_sqrtf>:
 80072c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80072c8:	4770      	bx	lr

080072ca <atoi>:
 80072ca:	220a      	movs	r2, #10
 80072cc:	2100      	movs	r1, #0
 80072ce:	f000 b87d 	b.w	80073cc <strtol>
	...

080072d4 <_strtol_l.isra.0>:
 80072d4:	2b24      	cmp	r3, #36	@ 0x24
 80072d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072da:	4686      	mov	lr, r0
 80072dc:	4690      	mov	r8, r2
 80072de:	d801      	bhi.n	80072e4 <_strtol_l.isra.0+0x10>
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d106      	bne.n	80072f2 <_strtol_l.isra.0+0x1e>
 80072e4:	f001 f95e 	bl	80085a4 <__errno>
 80072e8:	2316      	movs	r3, #22
 80072ea:	6003      	str	r3, [r0, #0]
 80072ec:	2000      	movs	r0, #0
 80072ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f2:	4834      	ldr	r0, [pc, #208]	@ (80073c4 <_strtol_l.isra.0+0xf0>)
 80072f4:	460d      	mov	r5, r1
 80072f6:	462a      	mov	r2, r5
 80072f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072fc:	5d06      	ldrb	r6, [r0, r4]
 80072fe:	f016 0608 	ands.w	r6, r6, #8
 8007302:	d1f8      	bne.n	80072f6 <_strtol_l.isra.0+0x22>
 8007304:	2c2d      	cmp	r4, #45	@ 0x2d
 8007306:	d110      	bne.n	800732a <_strtol_l.isra.0+0x56>
 8007308:	782c      	ldrb	r4, [r5, #0]
 800730a:	2601      	movs	r6, #1
 800730c:	1c95      	adds	r5, r2, #2
 800730e:	f033 0210 	bics.w	r2, r3, #16
 8007312:	d115      	bne.n	8007340 <_strtol_l.isra.0+0x6c>
 8007314:	2c30      	cmp	r4, #48	@ 0x30
 8007316:	d10d      	bne.n	8007334 <_strtol_l.isra.0+0x60>
 8007318:	782a      	ldrb	r2, [r5, #0]
 800731a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800731e:	2a58      	cmp	r2, #88	@ 0x58
 8007320:	d108      	bne.n	8007334 <_strtol_l.isra.0+0x60>
 8007322:	786c      	ldrb	r4, [r5, #1]
 8007324:	3502      	adds	r5, #2
 8007326:	2310      	movs	r3, #16
 8007328:	e00a      	b.n	8007340 <_strtol_l.isra.0+0x6c>
 800732a:	2c2b      	cmp	r4, #43	@ 0x2b
 800732c:	bf04      	itt	eq
 800732e:	782c      	ldrbeq	r4, [r5, #0]
 8007330:	1c95      	addeq	r5, r2, #2
 8007332:	e7ec      	b.n	800730e <_strtol_l.isra.0+0x3a>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1f6      	bne.n	8007326 <_strtol_l.isra.0+0x52>
 8007338:	2c30      	cmp	r4, #48	@ 0x30
 800733a:	bf14      	ite	ne
 800733c:	230a      	movne	r3, #10
 800733e:	2308      	moveq	r3, #8
 8007340:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007344:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007348:	2200      	movs	r2, #0
 800734a:	fbbc f9f3 	udiv	r9, ip, r3
 800734e:	4610      	mov	r0, r2
 8007350:	fb03 ca19 	mls	sl, r3, r9, ip
 8007354:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007358:	2f09      	cmp	r7, #9
 800735a:	d80f      	bhi.n	800737c <_strtol_l.isra.0+0xa8>
 800735c:	463c      	mov	r4, r7
 800735e:	42a3      	cmp	r3, r4
 8007360:	dd1b      	ble.n	800739a <_strtol_l.isra.0+0xc6>
 8007362:	1c57      	adds	r7, r2, #1
 8007364:	d007      	beq.n	8007376 <_strtol_l.isra.0+0xa2>
 8007366:	4581      	cmp	r9, r0
 8007368:	d314      	bcc.n	8007394 <_strtol_l.isra.0+0xc0>
 800736a:	d101      	bne.n	8007370 <_strtol_l.isra.0+0x9c>
 800736c:	45a2      	cmp	sl, r4
 800736e:	db11      	blt.n	8007394 <_strtol_l.isra.0+0xc0>
 8007370:	fb00 4003 	mla	r0, r0, r3, r4
 8007374:	2201      	movs	r2, #1
 8007376:	f815 4b01 	ldrb.w	r4, [r5], #1
 800737a:	e7eb      	b.n	8007354 <_strtol_l.isra.0+0x80>
 800737c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007380:	2f19      	cmp	r7, #25
 8007382:	d801      	bhi.n	8007388 <_strtol_l.isra.0+0xb4>
 8007384:	3c37      	subs	r4, #55	@ 0x37
 8007386:	e7ea      	b.n	800735e <_strtol_l.isra.0+0x8a>
 8007388:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800738c:	2f19      	cmp	r7, #25
 800738e:	d804      	bhi.n	800739a <_strtol_l.isra.0+0xc6>
 8007390:	3c57      	subs	r4, #87	@ 0x57
 8007392:	e7e4      	b.n	800735e <_strtol_l.isra.0+0x8a>
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	e7ed      	b.n	8007376 <_strtol_l.isra.0+0xa2>
 800739a:	1c53      	adds	r3, r2, #1
 800739c:	d108      	bne.n	80073b0 <_strtol_l.isra.0+0xdc>
 800739e:	2322      	movs	r3, #34	@ 0x22
 80073a0:	f8ce 3000 	str.w	r3, [lr]
 80073a4:	4660      	mov	r0, ip
 80073a6:	f1b8 0f00 	cmp.w	r8, #0
 80073aa:	d0a0      	beq.n	80072ee <_strtol_l.isra.0+0x1a>
 80073ac:	1e69      	subs	r1, r5, #1
 80073ae:	e006      	b.n	80073be <_strtol_l.isra.0+0xea>
 80073b0:	b106      	cbz	r6, 80073b4 <_strtol_l.isra.0+0xe0>
 80073b2:	4240      	negs	r0, r0
 80073b4:	f1b8 0f00 	cmp.w	r8, #0
 80073b8:	d099      	beq.n	80072ee <_strtol_l.isra.0+0x1a>
 80073ba:	2a00      	cmp	r2, #0
 80073bc:	d1f6      	bne.n	80073ac <_strtol_l.isra.0+0xd8>
 80073be:	f8c8 1000 	str.w	r1, [r8]
 80073c2:	e794      	b.n	80072ee <_strtol_l.isra.0+0x1a>
 80073c4:	0800bd3d 	.word	0x0800bd3d

080073c8 <_strtol_r>:
 80073c8:	f7ff bf84 	b.w	80072d4 <_strtol_l.isra.0>

080073cc <strtol>:
 80073cc:	4613      	mov	r3, r2
 80073ce:	460a      	mov	r2, r1
 80073d0:	4601      	mov	r1, r0
 80073d2:	4802      	ldr	r0, [pc, #8]	@ (80073dc <strtol+0x10>)
 80073d4:	6800      	ldr	r0, [r0, #0]
 80073d6:	f7ff bf7d 	b.w	80072d4 <_strtol_l.isra.0>
 80073da:	bf00      	nop
 80073dc:	20000064 	.word	0x20000064

080073e0 <__cvt>:
 80073e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073e4:	ec57 6b10 	vmov	r6, r7, d0
 80073e8:	2f00      	cmp	r7, #0
 80073ea:	460c      	mov	r4, r1
 80073ec:	4619      	mov	r1, r3
 80073ee:	463b      	mov	r3, r7
 80073f0:	bfbb      	ittet	lt
 80073f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80073f6:	461f      	movlt	r7, r3
 80073f8:	2300      	movge	r3, #0
 80073fa:	232d      	movlt	r3, #45	@ 0x2d
 80073fc:	700b      	strb	r3, [r1, #0]
 80073fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007400:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007404:	4691      	mov	r9, r2
 8007406:	f023 0820 	bic.w	r8, r3, #32
 800740a:	bfbc      	itt	lt
 800740c:	4632      	movlt	r2, r6
 800740e:	4616      	movlt	r6, r2
 8007410:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007414:	d005      	beq.n	8007422 <__cvt+0x42>
 8007416:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800741a:	d100      	bne.n	800741e <__cvt+0x3e>
 800741c:	3401      	adds	r4, #1
 800741e:	2102      	movs	r1, #2
 8007420:	e000      	b.n	8007424 <__cvt+0x44>
 8007422:	2103      	movs	r1, #3
 8007424:	ab03      	add	r3, sp, #12
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	ab02      	add	r3, sp, #8
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	ec47 6b10 	vmov	d0, r6, r7
 8007430:	4653      	mov	r3, sl
 8007432:	4622      	mov	r2, r4
 8007434:	f001 f974 	bl	8008720 <_dtoa_r>
 8007438:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800743c:	4605      	mov	r5, r0
 800743e:	d119      	bne.n	8007474 <__cvt+0x94>
 8007440:	f019 0f01 	tst.w	r9, #1
 8007444:	d00e      	beq.n	8007464 <__cvt+0x84>
 8007446:	eb00 0904 	add.w	r9, r0, r4
 800744a:	2200      	movs	r2, #0
 800744c:	2300      	movs	r3, #0
 800744e:	4630      	mov	r0, r6
 8007450:	4639      	mov	r1, r7
 8007452:	f7f9 fb69 	bl	8000b28 <__aeabi_dcmpeq>
 8007456:	b108      	cbz	r0, 800745c <__cvt+0x7c>
 8007458:	f8cd 900c 	str.w	r9, [sp, #12]
 800745c:	2230      	movs	r2, #48	@ 0x30
 800745e:	9b03      	ldr	r3, [sp, #12]
 8007460:	454b      	cmp	r3, r9
 8007462:	d31e      	bcc.n	80074a2 <__cvt+0xc2>
 8007464:	9b03      	ldr	r3, [sp, #12]
 8007466:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007468:	1b5b      	subs	r3, r3, r5
 800746a:	4628      	mov	r0, r5
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	b004      	add	sp, #16
 8007470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007474:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007478:	eb00 0904 	add.w	r9, r0, r4
 800747c:	d1e5      	bne.n	800744a <__cvt+0x6a>
 800747e:	7803      	ldrb	r3, [r0, #0]
 8007480:	2b30      	cmp	r3, #48	@ 0x30
 8007482:	d10a      	bne.n	800749a <__cvt+0xba>
 8007484:	2200      	movs	r2, #0
 8007486:	2300      	movs	r3, #0
 8007488:	4630      	mov	r0, r6
 800748a:	4639      	mov	r1, r7
 800748c:	f7f9 fb4c 	bl	8000b28 <__aeabi_dcmpeq>
 8007490:	b918      	cbnz	r0, 800749a <__cvt+0xba>
 8007492:	f1c4 0401 	rsb	r4, r4, #1
 8007496:	f8ca 4000 	str.w	r4, [sl]
 800749a:	f8da 3000 	ldr.w	r3, [sl]
 800749e:	4499      	add	r9, r3
 80074a0:	e7d3      	b.n	800744a <__cvt+0x6a>
 80074a2:	1c59      	adds	r1, r3, #1
 80074a4:	9103      	str	r1, [sp, #12]
 80074a6:	701a      	strb	r2, [r3, #0]
 80074a8:	e7d9      	b.n	800745e <__cvt+0x7e>

080074aa <__exponent>:
 80074aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ac:	2900      	cmp	r1, #0
 80074ae:	bfba      	itte	lt
 80074b0:	4249      	neglt	r1, r1
 80074b2:	232d      	movlt	r3, #45	@ 0x2d
 80074b4:	232b      	movge	r3, #43	@ 0x2b
 80074b6:	2909      	cmp	r1, #9
 80074b8:	7002      	strb	r2, [r0, #0]
 80074ba:	7043      	strb	r3, [r0, #1]
 80074bc:	dd29      	ble.n	8007512 <__exponent+0x68>
 80074be:	f10d 0307 	add.w	r3, sp, #7
 80074c2:	461d      	mov	r5, r3
 80074c4:	270a      	movs	r7, #10
 80074c6:	461a      	mov	r2, r3
 80074c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80074cc:	fb07 1416 	mls	r4, r7, r6, r1
 80074d0:	3430      	adds	r4, #48	@ 0x30
 80074d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80074d6:	460c      	mov	r4, r1
 80074d8:	2c63      	cmp	r4, #99	@ 0x63
 80074da:	f103 33ff 	add.w	r3, r3, #4294967295
 80074de:	4631      	mov	r1, r6
 80074e0:	dcf1      	bgt.n	80074c6 <__exponent+0x1c>
 80074e2:	3130      	adds	r1, #48	@ 0x30
 80074e4:	1e94      	subs	r4, r2, #2
 80074e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074ea:	1c41      	adds	r1, r0, #1
 80074ec:	4623      	mov	r3, r4
 80074ee:	42ab      	cmp	r3, r5
 80074f0:	d30a      	bcc.n	8007508 <__exponent+0x5e>
 80074f2:	f10d 0309 	add.w	r3, sp, #9
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	42ac      	cmp	r4, r5
 80074fa:	bf88      	it	hi
 80074fc:	2300      	movhi	r3, #0
 80074fe:	3302      	adds	r3, #2
 8007500:	4403      	add	r3, r0
 8007502:	1a18      	subs	r0, r3, r0
 8007504:	b003      	add	sp, #12
 8007506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007508:	f813 6b01 	ldrb.w	r6, [r3], #1
 800750c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007510:	e7ed      	b.n	80074ee <__exponent+0x44>
 8007512:	2330      	movs	r3, #48	@ 0x30
 8007514:	3130      	adds	r1, #48	@ 0x30
 8007516:	7083      	strb	r3, [r0, #2]
 8007518:	70c1      	strb	r1, [r0, #3]
 800751a:	1d03      	adds	r3, r0, #4
 800751c:	e7f1      	b.n	8007502 <__exponent+0x58>
	...

08007520 <_printf_float>:
 8007520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007524:	b08d      	sub	sp, #52	@ 0x34
 8007526:	460c      	mov	r4, r1
 8007528:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800752c:	4616      	mov	r6, r2
 800752e:	461f      	mov	r7, r3
 8007530:	4605      	mov	r5, r0
 8007532:	f000 ffed 	bl	8008510 <_localeconv_r>
 8007536:	6803      	ldr	r3, [r0, #0]
 8007538:	9304      	str	r3, [sp, #16]
 800753a:	4618      	mov	r0, r3
 800753c:	f7f8 fec8 	bl	80002d0 <strlen>
 8007540:	2300      	movs	r3, #0
 8007542:	930a      	str	r3, [sp, #40]	@ 0x28
 8007544:	f8d8 3000 	ldr.w	r3, [r8]
 8007548:	9005      	str	r0, [sp, #20]
 800754a:	3307      	adds	r3, #7
 800754c:	f023 0307 	bic.w	r3, r3, #7
 8007550:	f103 0208 	add.w	r2, r3, #8
 8007554:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007558:	f8d4 b000 	ldr.w	fp, [r4]
 800755c:	f8c8 2000 	str.w	r2, [r8]
 8007560:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007564:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007568:	9307      	str	r3, [sp, #28]
 800756a:	f8cd 8018 	str.w	r8, [sp, #24]
 800756e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007576:	4b9c      	ldr	r3, [pc, #624]	@ (80077e8 <_printf_float+0x2c8>)
 8007578:	f04f 32ff 	mov.w	r2, #4294967295
 800757c:	f7f9 fb06 	bl	8000b8c <__aeabi_dcmpun>
 8007580:	bb70      	cbnz	r0, 80075e0 <_printf_float+0xc0>
 8007582:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007586:	4b98      	ldr	r3, [pc, #608]	@ (80077e8 <_printf_float+0x2c8>)
 8007588:	f04f 32ff 	mov.w	r2, #4294967295
 800758c:	f7f9 fae0 	bl	8000b50 <__aeabi_dcmple>
 8007590:	bb30      	cbnz	r0, 80075e0 <_printf_float+0xc0>
 8007592:	2200      	movs	r2, #0
 8007594:	2300      	movs	r3, #0
 8007596:	4640      	mov	r0, r8
 8007598:	4649      	mov	r1, r9
 800759a:	f7f9 facf 	bl	8000b3c <__aeabi_dcmplt>
 800759e:	b110      	cbz	r0, 80075a6 <_printf_float+0x86>
 80075a0:	232d      	movs	r3, #45	@ 0x2d
 80075a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075a6:	4a91      	ldr	r2, [pc, #580]	@ (80077ec <_printf_float+0x2cc>)
 80075a8:	4b91      	ldr	r3, [pc, #580]	@ (80077f0 <_printf_float+0x2d0>)
 80075aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80075ae:	bf8c      	ite	hi
 80075b0:	4690      	movhi	r8, r2
 80075b2:	4698      	movls	r8, r3
 80075b4:	2303      	movs	r3, #3
 80075b6:	6123      	str	r3, [r4, #16]
 80075b8:	f02b 0304 	bic.w	r3, fp, #4
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	f04f 0900 	mov.w	r9, #0
 80075c2:	9700      	str	r7, [sp, #0]
 80075c4:	4633      	mov	r3, r6
 80075c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80075c8:	4621      	mov	r1, r4
 80075ca:	4628      	mov	r0, r5
 80075cc:	f000 f9d2 	bl	8007974 <_printf_common>
 80075d0:	3001      	adds	r0, #1
 80075d2:	f040 808d 	bne.w	80076f0 <_printf_float+0x1d0>
 80075d6:	f04f 30ff 	mov.w	r0, #4294967295
 80075da:	b00d      	add	sp, #52	@ 0x34
 80075dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e0:	4642      	mov	r2, r8
 80075e2:	464b      	mov	r3, r9
 80075e4:	4640      	mov	r0, r8
 80075e6:	4649      	mov	r1, r9
 80075e8:	f7f9 fad0 	bl	8000b8c <__aeabi_dcmpun>
 80075ec:	b140      	cbz	r0, 8007600 <_printf_float+0xe0>
 80075ee:	464b      	mov	r3, r9
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bfbc      	itt	lt
 80075f4:	232d      	movlt	r3, #45	@ 0x2d
 80075f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80075fa:	4a7e      	ldr	r2, [pc, #504]	@ (80077f4 <_printf_float+0x2d4>)
 80075fc:	4b7e      	ldr	r3, [pc, #504]	@ (80077f8 <_printf_float+0x2d8>)
 80075fe:	e7d4      	b.n	80075aa <_printf_float+0x8a>
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007606:	9206      	str	r2, [sp, #24]
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	d13b      	bne.n	8007684 <_printf_float+0x164>
 800760c:	2306      	movs	r3, #6
 800760e:	6063      	str	r3, [r4, #4]
 8007610:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007614:	2300      	movs	r3, #0
 8007616:	6022      	str	r2, [r4, #0]
 8007618:	9303      	str	r3, [sp, #12]
 800761a:	ab0a      	add	r3, sp, #40	@ 0x28
 800761c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007620:	ab09      	add	r3, sp, #36	@ 0x24
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	6861      	ldr	r1, [r4, #4]
 8007626:	ec49 8b10 	vmov	d0, r8, r9
 800762a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800762e:	4628      	mov	r0, r5
 8007630:	f7ff fed6 	bl	80073e0 <__cvt>
 8007634:	9b06      	ldr	r3, [sp, #24]
 8007636:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007638:	2b47      	cmp	r3, #71	@ 0x47
 800763a:	4680      	mov	r8, r0
 800763c:	d129      	bne.n	8007692 <_printf_float+0x172>
 800763e:	1cc8      	adds	r0, r1, #3
 8007640:	db02      	blt.n	8007648 <_printf_float+0x128>
 8007642:	6863      	ldr	r3, [r4, #4]
 8007644:	4299      	cmp	r1, r3
 8007646:	dd41      	ble.n	80076cc <_printf_float+0x1ac>
 8007648:	f1aa 0a02 	sub.w	sl, sl, #2
 800764c:	fa5f fa8a 	uxtb.w	sl, sl
 8007650:	3901      	subs	r1, #1
 8007652:	4652      	mov	r2, sl
 8007654:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007658:	9109      	str	r1, [sp, #36]	@ 0x24
 800765a:	f7ff ff26 	bl	80074aa <__exponent>
 800765e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007660:	1813      	adds	r3, r2, r0
 8007662:	2a01      	cmp	r2, #1
 8007664:	4681      	mov	r9, r0
 8007666:	6123      	str	r3, [r4, #16]
 8007668:	dc02      	bgt.n	8007670 <_printf_float+0x150>
 800766a:	6822      	ldr	r2, [r4, #0]
 800766c:	07d2      	lsls	r2, r2, #31
 800766e:	d501      	bpl.n	8007674 <_printf_float+0x154>
 8007670:	3301      	adds	r3, #1
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0a2      	beq.n	80075c2 <_printf_float+0xa2>
 800767c:	232d      	movs	r3, #45	@ 0x2d
 800767e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007682:	e79e      	b.n	80075c2 <_printf_float+0xa2>
 8007684:	9a06      	ldr	r2, [sp, #24]
 8007686:	2a47      	cmp	r2, #71	@ 0x47
 8007688:	d1c2      	bne.n	8007610 <_printf_float+0xf0>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1c0      	bne.n	8007610 <_printf_float+0xf0>
 800768e:	2301      	movs	r3, #1
 8007690:	e7bd      	b.n	800760e <_printf_float+0xee>
 8007692:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007696:	d9db      	bls.n	8007650 <_printf_float+0x130>
 8007698:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800769c:	d118      	bne.n	80076d0 <_printf_float+0x1b0>
 800769e:	2900      	cmp	r1, #0
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	dd0b      	ble.n	80076bc <_printf_float+0x19c>
 80076a4:	6121      	str	r1, [r4, #16]
 80076a6:	b913      	cbnz	r3, 80076ae <_printf_float+0x18e>
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	07d0      	lsls	r0, r2, #31
 80076ac:	d502      	bpl.n	80076b4 <_printf_float+0x194>
 80076ae:	3301      	adds	r3, #1
 80076b0:	440b      	add	r3, r1
 80076b2:	6123      	str	r3, [r4, #16]
 80076b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80076b6:	f04f 0900 	mov.w	r9, #0
 80076ba:	e7db      	b.n	8007674 <_printf_float+0x154>
 80076bc:	b913      	cbnz	r3, 80076c4 <_printf_float+0x1a4>
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	07d2      	lsls	r2, r2, #31
 80076c2:	d501      	bpl.n	80076c8 <_printf_float+0x1a8>
 80076c4:	3302      	adds	r3, #2
 80076c6:	e7f4      	b.n	80076b2 <_printf_float+0x192>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e7f2      	b.n	80076b2 <_printf_float+0x192>
 80076cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80076d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076d2:	4299      	cmp	r1, r3
 80076d4:	db05      	blt.n	80076e2 <_printf_float+0x1c2>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	6121      	str	r1, [r4, #16]
 80076da:	07d8      	lsls	r0, r3, #31
 80076dc:	d5ea      	bpl.n	80076b4 <_printf_float+0x194>
 80076de:	1c4b      	adds	r3, r1, #1
 80076e0:	e7e7      	b.n	80076b2 <_printf_float+0x192>
 80076e2:	2900      	cmp	r1, #0
 80076e4:	bfd4      	ite	le
 80076e6:	f1c1 0202 	rsble	r2, r1, #2
 80076ea:	2201      	movgt	r2, #1
 80076ec:	4413      	add	r3, r2
 80076ee:	e7e0      	b.n	80076b2 <_printf_float+0x192>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	055a      	lsls	r2, r3, #21
 80076f4:	d407      	bmi.n	8007706 <_printf_float+0x1e6>
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	4642      	mov	r2, r8
 80076fa:	4631      	mov	r1, r6
 80076fc:	4628      	mov	r0, r5
 80076fe:	47b8      	blx	r7
 8007700:	3001      	adds	r0, #1
 8007702:	d12b      	bne.n	800775c <_printf_float+0x23c>
 8007704:	e767      	b.n	80075d6 <_printf_float+0xb6>
 8007706:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800770a:	f240 80dd 	bls.w	80078c8 <_printf_float+0x3a8>
 800770e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007712:	2200      	movs	r2, #0
 8007714:	2300      	movs	r3, #0
 8007716:	f7f9 fa07 	bl	8000b28 <__aeabi_dcmpeq>
 800771a:	2800      	cmp	r0, #0
 800771c:	d033      	beq.n	8007786 <_printf_float+0x266>
 800771e:	4a37      	ldr	r2, [pc, #220]	@ (80077fc <_printf_float+0x2dc>)
 8007720:	2301      	movs	r3, #1
 8007722:	4631      	mov	r1, r6
 8007724:	4628      	mov	r0, r5
 8007726:	47b8      	blx	r7
 8007728:	3001      	adds	r0, #1
 800772a:	f43f af54 	beq.w	80075d6 <_printf_float+0xb6>
 800772e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007732:	4543      	cmp	r3, r8
 8007734:	db02      	blt.n	800773c <_printf_float+0x21c>
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	07d8      	lsls	r0, r3, #31
 800773a:	d50f      	bpl.n	800775c <_printf_float+0x23c>
 800773c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007740:	4631      	mov	r1, r6
 8007742:	4628      	mov	r0, r5
 8007744:	47b8      	blx	r7
 8007746:	3001      	adds	r0, #1
 8007748:	f43f af45 	beq.w	80075d6 <_printf_float+0xb6>
 800774c:	f04f 0900 	mov.w	r9, #0
 8007750:	f108 38ff 	add.w	r8, r8, #4294967295
 8007754:	f104 0a1a 	add.w	sl, r4, #26
 8007758:	45c8      	cmp	r8, r9
 800775a:	dc09      	bgt.n	8007770 <_printf_float+0x250>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	079b      	lsls	r3, r3, #30
 8007760:	f100 8103 	bmi.w	800796a <_printf_float+0x44a>
 8007764:	68e0      	ldr	r0, [r4, #12]
 8007766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007768:	4298      	cmp	r0, r3
 800776a:	bfb8      	it	lt
 800776c:	4618      	movlt	r0, r3
 800776e:	e734      	b.n	80075da <_printf_float+0xba>
 8007770:	2301      	movs	r3, #1
 8007772:	4652      	mov	r2, sl
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	f43f af2b 	beq.w	80075d6 <_printf_float+0xb6>
 8007780:	f109 0901 	add.w	r9, r9, #1
 8007784:	e7e8      	b.n	8007758 <_printf_float+0x238>
 8007786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007788:	2b00      	cmp	r3, #0
 800778a:	dc39      	bgt.n	8007800 <_printf_float+0x2e0>
 800778c:	4a1b      	ldr	r2, [pc, #108]	@ (80077fc <_printf_float+0x2dc>)
 800778e:	2301      	movs	r3, #1
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	f43f af1d 	beq.w	80075d6 <_printf_float+0xb6>
 800779c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077a0:	ea59 0303 	orrs.w	r3, r9, r3
 80077a4:	d102      	bne.n	80077ac <_printf_float+0x28c>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	07d9      	lsls	r1, r3, #31
 80077aa:	d5d7      	bpl.n	800775c <_printf_float+0x23c>
 80077ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f af0d 	beq.w	80075d6 <_printf_float+0xb6>
 80077bc:	f04f 0a00 	mov.w	sl, #0
 80077c0:	f104 0b1a 	add.w	fp, r4, #26
 80077c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c6:	425b      	negs	r3, r3
 80077c8:	4553      	cmp	r3, sl
 80077ca:	dc01      	bgt.n	80077d0 <_printf_float+0x2b0>
 80077cc:	464b      	mov	r3, r9
 80077ce:	e793      	b.n	80076f8 <_printf_float+0x1d8>
 80077d0:	2301      	movs	r3, #1
 80077d2:	465a      	mov	r2, fp
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	f43f aefb 	beq.w	80075d6 <_printf_float+0xb6>
 80077e0:	f10a 0a01 	add.w	sl, sl, #1
 80077e4:	e7ee      	b.n	80077c4 <_printf_float+0x2a4>
 80077e6:	bf00      	nop
 80077e8:	7fefffff 	.word	0x7fefffff
 80077ec:	0800be41 	.word	0x0800be41
 80077f0:	0800be3d 	.word	0x0800be3d
 80077f4:	0800be49 	.word	0x0800be49
 80077f8:	0800be45 	.word	0x0800be45
 80077fc:	0800be4d 	.word	0x0800be4d
 8007800:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007802:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007806:	4553      	cmp	r3, sl
 8007808:	bfa8      	it	ge
 800780a:	4653      	movge	r3, sl
 800780c:	2b00      	cmp	r3, #0
 800780e:	4699      	mov	r9, r3
 8007810:	dc36      	bgt.n	8007880 <_printf_float+0x360>
 8007812:	f04f 0b00 	mov.w	fp, #0
 8007816:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800781a:	f104 021a 	add.w	r2, r4, #26
 800781e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007820:	9306      	str	r3, [sp, #24]
 8007822:	eba3 0309 	sub.w	r3, r3, r9
 8007826:	455b      	cmp	r3, fp
 8007828:	dc31      	bgt.n	800788e <_printf_float+0x36e>
 800782a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800782c:	459a      	cmp	sl, r3
 800782e:	dc3a      	bgt.n	80078a6 <_printf_float+0x386>
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	07da      	lsls	r2, r3, #31
 8007834:	d437      	bmi.n	80078a6 <_printf_float+0x386>
 8007836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007838:	ebaa 0903 	sub.w	r9, sl, r3
 800783c:	9b06      	ldr	r3, [sp, #24]
 800783e:	ebaa 0303 	sub.w	r3, sl, r3
 8007842:	4599      	cmp	r9, r3
 8007844:	bfa8      	it	ge
 8007846:	4699      	movge	r9, r3
 8007848:	f1b9 0f00 	cmp.w	r9, #0
 800784c:	dc33      	bgt.n	80078b6 <_printf_float+0x396>
 800784e:	f04f 0800 	mov.w	r8, #0
 8007852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007856:	f104 0b1a 	add.w	fp, r4, #26
 800785a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785c:	ebaa 0303 	sub.w	r3, sl, r3
 8007860:	eba3 0309 	sub.w	r3, r3, r9
 8007864:	4543      	cmp	r3, r8
 8007866:	f77f af79 	ble.w	800775c <_printf_float+0x23c>
 800786a:	2301      	movs	r3, #1
 800786c:	465a      	mov	r2, fp
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	f43f aeae 	beq.w	80075d6 <_printf_float+0xb6>
 800787a:	f108 0801 	add.w	r8, r8, #1
 800787e:	e7ec      	b.n	800785a <_printf_float+0x33a>
 8007880:	4642      	mov	r2, r8
 8007882:	4631      	mov	r1, r6
 8007884:	4628      	mov	r0, r5
 8007886:	47b8      	blx	r7
 8007888:	3001      	adds	r0, #1
 800788a:	d1c2      	bne.n	8007812 <_printf_float+0x2f2>
 800788c:	e6a3      	b.n	80075d6 <_printf_float+0xb6>
 800788e:	2301      	movs	r3, #1
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	9206      	str	r2, [sp, #24]
 8007896:	47b8      	blx	r7
 8007898:	3001      	adds	r0, #1
 800789a:	f43f ae9c 	beq.w	80075d6 <_printf_float+0xb6>
 800789e:	9a06      	ldr	r2, [sp, #24]
 80078a0:	f10b 0b01 	add.w	fp, fp, #1
 80078a4:	e7bb      	b.n	800781e <_printf_float+0x2fe>
 80078a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078aa:	4631      	mov	r1, r6
 80078ac:	4628      	mov	r0, r5
 80078ae:	47b8      	blx	r7
 80078b0:	3001      	adds	r0, #1
 80078b2:	d1c0      	bne.n	8007836 <_printf_float+0x316>
 80078b4:	e68f      	b.n	80075d6 <_printf_float+0xb6>
 80078b6:	9a06      	ldr	r2, [sp, #24]
 80078b8:	464b      	mov	r3, r9
 80078ba:	4442      	add	r2, r8
 80078bc:	4631      	mov	r1, r6
 80078be:	4628      	mov	r0, r5
 80078c0:	47b8      	blx	r7
 80078c2:	3001      	adds	r0, #1
 80078c4:	d1c3      	bne.n	800784e <_printf_float+0x32e>
 80078c6:	e686      	b.n	80075d6 <_printf_float+0xb6>
 80078c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078cc:	f1ba 0f01 	cmp.w	sl, #1
 80078d0:	dc01      	bgt.n	80078d6 <_printf_float+0x3b6>
 80078d2:	07db      	lsls	r3, r3, #31
 80078d4:	d536      	bpl.n	8007944 <_printf_float+0x424>
 80078d6:	2301      	movs	r3, #1
 80078d8:	4642      	mov	r2, r8
 80078da:	4631      	mov	r1, r6
 80078dc:	4628      	mov	r0, r5
 80078de:	47b8      	blx	r7
 80078e0:	3001      	adds	r0, #1
 80078e2:	f43f ae78 	beq.w	80075d6 <_printf_float+0xb6>
 80078e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ea:	4631      	mov	r1, r6
 80078ec:	4628      	mov	r0, r5
 80078ee:	47b8      	blx	r7
 80078f0:	3001      	adds	r0, #1
 80078f2:	f43f ae70 	beq.w	80075d6 <_printf_float+0xb6>
 80078f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078fa:	2200      	movs	r2, #0
 80078fc:	2300      	movs	r3, #0
 80078fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007902:	f7f9 f911 	bl	8000b28 <__aeabi_dcmpeq>
 8007906:	b9c0      	cbnz	r0, 800793a <_printf_float+0x41a>
 8007908:	4653      	mov	r3, sl
 800790a:	f108 0201 	add.w	r2, r8, #1
 800790e:	4631      	mov	r1, r6
 8007910:	4628      	mov	r0, r5
 8007912:	47b8      	blx	r7
 8007914:	3001      	adds	r0, #1
 8007916:	d10c      	bne.n	8007932 <_printf_float+0x412>
 8007918:	e65d      	b.n	80075d6 <_printf_float+0xb6>
 800791a:	2301      	movs	r3, #1
 800791c:	465a      	mov	r2, fp
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	f43f ae56 	beq.w	80075d6 <_printf_float+0xb6>
 800792a:	f108 0801 	add.w	r8, r8, #1
 800792e:	45d0      	cmp	r8, sl
 8007930:	dbf3      	blt.n	800791a <_printf_float+0x3fa>
 8007932:	464b      	mov	r3, r9
 8007934:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007938:	e6df      	b.n	80076fa <_printf_float+0x1da>
 800793a:	f04f 0800 	mov.w	r8, #0
 800793e:	f104 0b1a 	add.w	fp, r4, #26
 8007942:	e7f4      	b.n	800792e <_printf_float+0x40e>
 8007944:	2301      	movs	r3, #1
 8007946:	4642      	mov	r2, r8
 8007948:	e7e1      	b.n	800790e <_printf_float+0x3ee>
 800794a:	2301      	movs	r3, #1
 800794c:	464a      	mov	r2, r9
 800794e:	4631      	mov	r1, r6
 8007950:	4628      	mov	r0, r5
 8007952:	47b8      	blx	r7
 8007954:	3001      	adds	r0, #1
 8007956:	f43f ae3e 	beq.w	80075d6 <_printf_float+0xb6>
 800795a:	f108 0801 	add.w	r8, r8, #1
 800795e:	68e3      	ldr	r3, [r4, #12]
 8007960:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007962:	1a5b      	subs	r3, r3, r1
 8007964:	4543      	cmp	r3, r8
 8007966:	dcf0      	bgt.n	800794a <_printf_float+0x42a>
 8007968:	e6fc      	b.n	8007764 <_printf_float+0x244>
 800796a:	f04f 0800 	mov.w	r8, #0
 800796e:	f104 0919 	add.w	r9, r4, #25
 8007972:	e7f4      	b.n	800795e <_printf_float+0x43e>

08007974 <_printf_common>:
 8007974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007978:	4616      	mov	r6, r2
 800797a:	4698      	mov	r8, r3
 800797c:	688a      	ldr	r2, [r1, #8]
 800797e:	690b      	ldr	r3, [r1, #16]
 8007980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007984:	4293      	cmp	r3, r2
 8007986:	bfb8      	it	lt
 8007988:	4613      	movlt	r3, r2
 800798a:	6033      	str	r3, [r6, #0]
 800798c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007990:	4607      	mov	r7, r0
 8007992:	460c      	mov	r4, r1
 8007994:	b10a      	cbz	r2, 800799a <_printf_common+0x26>
 8007996:	3301      	adds	r3, #1
 8007998:	6033      	str	r3, [r6, #0]
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	0699      	lsls	r1, r3, #26
 800799e:	bf42      	ittt	mi
 80079a0:	6833      	ldrmi	r3, [r6, #0]
 80079a2:	3302      	addmi	r3, #2
 80079a4:	6033      	strmi	r3, [r6, #0]
 80079a6:	6825      	ldr	r5, [r4, #0]
 80079a8:	f015 0506 	ands.w	r5, r5, #6
 80079ac:	d106      	bne.n	80079bc <_printf_common+0x48>
 80079ae:	f104 0a19 	add.w	sl, r4, #25
 80079b2:	68e3      	ldr	r3, [r4, #12]
 80079b4:	6832      	ldr	r2, [r6, #0]
 80079b6:	1a9b      	subs	r3, r3, r2
 80079b8:	42ab      	cmp	r3, r5
 80079ba:	dc26      	bgt.n	8007a0a <_printf_common+0x96>
 80079bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079c0:	6822      	ldr	r2, [r4, #0]
 80079c2:	3b00      	subs	r3, #0
 80079c4:	bf18      	it	ne
 80079c6:	2301      	movne	r3, #1
 80079c8:	0692      	lsls	r2, r2, #26
 80079ca:	d42b      	bmi.n	8007a24 <_printf_common+0xb0>
 80079cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079d0:	4641      	mov	r1, r8
 80079d2:	4638      	mov	r0, r7
 80079d4:	47c8      	blx	r9
 80079d6:	3001      	adds	r0, #1
 80079d8:	d01e      	beq.n	8007a18 <_printf_common+0xa4>
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	6922      	ldr	r2, [r4, #16]
 80079de:	f003 0306 	and.w	r3, r3, #6
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	bf02      	ittt	eq
 80079e6:	68e5      	ldreq	r5, [r4, #12]
 80079e8:	6833      	ldreq	r3, [r6, #0]
 80079ea:	1aed      	subeq	r5, r5, r3
 80079ec:	68a3      	ldr	r3, [r4, #8]
 80079ee:	bf0c      	ite	eq
 80079f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079f4:	2500      	movne	r5, #0
 80079f6:	4293      	cmp	r3, r2
 80079f8:	bfc4      	itt	gt
 80079fa:	1a9b      	subgt	r3, r3, r2
 80079fc:	18ed      	addgt	r5, r5, r3
 80079fe:	2600      	movs	r6, #0
 8007a00:	341a      	adds	r4, #26
 8007a02:	42b5      	cmp	r5, r6
 8007a04:	d11a      	bne.n	8007a3c <_printf_common+0xc8>
 8007a06:	2000      	movs	r0, #0
 8007a08:	e008      	b.n	8007a1c <_printf_common+0xa8>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4652      	mov	r2, sl
 8007a0e:	4641      	mov	r1, r8
 8007a10:	4638      	mov	r0, r7
 8007a12:	47c8      	blx	r9
 8007a14:	3001      	adds	r0, #1
 8007a16:	d103      	bne.n	8007a20 <_printf_common+0xac>
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a20:	3501      	adds	r5, #1
 8007a22:	e7c6      	b.n	80079b2 <_printf_common+0x3e>
 8007a24:	18e1      	adds	r1, r4, r3
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	2030      	movs	r0, #48	@ 0x30
 8007a2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a2e:	4422      	add	r2, r4
 8007a30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a38:	3302      	adds	r3, #2
 8007a3a:	e7c7      	b.n	80079cc <_printf_common+0x58>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	4622      	mov	r2, r4
 8007a40:	4641      	mov	r1, r8
 8007a42:	4638      	mov	r0, r7
 8007a44:	47c8      	blx	r9
 8007a46:	3001      	adds	r0, #1
 8007a48:	d0e6      	beq.n	8007a18 <_printf_common+0xa4>
 8007a4a:	3601      	adds	r6, #1
 8007a4c:	e7d9      	b.n	8007a02 <_printf_common+0x8e>
	...

08007a50 <_printf_i>:
 8007a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a54:	7e0f      	ldrb	r7, [r1, #24]
 8007a56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a58:	2f78      	cmp	r7, #120	@ 0x78
 8007a5a:	4691      	mov	r9, r2
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	460c      	mov	r4, r1
 8007a60:	469a      	mov	sl, r3
 8007a62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a66:	d807      	bhi.n	8007a78 <_printf_i+0x28>
 8007a68:	2f62      	cmp	r7, #98	@ 0x62
 8007a6a:	d80a      	bhi.n	8007a82 <_printf_i+0x32>
 8007a6c:	2f00      	cmp	r7, #0
 8007a6e:	f000 80d1 	beq.w	8007c14 <_printf_i+0x1c4>
 8007a72:	2f58      	cmp	r7, #88	@ 0x58
 8007a74:	f000 80b8 	beq.w	8007be8 <_printf_i+0x198>
 8007a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a80:	e03a      	b.n	8007af8 <_printf_i+0xa8>
 8007a82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a86:	2b15      	cmp	r3, #21
 8007a88:	d8f6      	bhi.n	8007a78 <_printf_i+0x28>
 8007a8a:	a101      	add	r1, pc, #4	@ (adr r1, 8007a90 <_printf_i+0x40>)
 8007a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a90:	08007ae9 	.word	0x08007ae9
 8007a94:	08007afd 	.word	0x08007afd
 8007a98:	08007a79 	.word	0x08007a79
 8007a9c:	08007a79 	.word	0x08007a79
 8007aa0:	08007a79 	.word	0x08007a79
 8007aa4:	08007a79 	.word	0x08007a79
 8007aa8:	08007afd 	.word	0x08007afd
 8007aac:	08007a79 	.word	0x08007a79
 8007ab0:	08007a79 	.word	0x08007a79
 8007ab4:	08007a79 	.word	0x08007a79
 8007ab8:	08007a79 	.word	0x08007a79
 8007abc:	08007bfb 	.word	0x08007bfb
 8007ac0:	08007b27 	.word	0x08007b27
 8007ac4:	08007bb5 	.word	0x08007bb5
 8007ac8:	08007a79 	.word	0x08007a79
 8007acc:	08007a79 	.word	0x08007a79
 8007ad0:	08007c1d 	.word	0x08007c1d
 8007ad4:	08007a79 	.word	0x08007a79
 8007ad8:	08007b27 	.word	0x08007b27
 8007adc:	08007a79 	.word	0x08007a79
 8007ae0:	08007a79 	.word	0x08007a79
 8007ae4:	08007bbd 	.word	0x08007bbd
 8007ae8:	6833      	ldr	r3, [r6, #0]
 8007aea:	1d1a      	adds	r2, r3, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6032      	str	r2, [r6, #0]
 8007af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007af4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007af8:	2301      	movs	r3, #1
 8007afa:	e09c      	b.n	8007c36 <_printf_i+0x1e6>
 8007afc:	6833      	ldr	r3, [r6, #0]
 8007afe:	6820      	ldr	r0, [r4, #0]
 8007b00:	1d19      	adds	r1, r3, #4
 8007b02:	6031      	str	r1, [r6, #0]
 8007b04:	0606      	lsls	r6, r0, #24
 8007b06:	d501      	bpl.n	8007b0c <_printf_i+0xbc>
 8007b08:	681d      	ldr	r5, [r3, #0]
 8007b0a:	e003      	b.n	8007b14 <_printf_i+0xc4>
 8007b0c:	0645      	lsls	r5, r0, #25
 8007b0e:	d5fb      	bpl.n	8007b08 <_printf_i+0xb8>
 8007b10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b14:	2d00      	cmp	r5, #0
 8007b16:	da03      	bge.n	8007b20 <_printf_i+0xd0>
 8007b18:	232d      	movs	r3, #45	@ 0x2d
 8007b1a:	426d      	negs	r5, r5
 8007b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b20:	4858      	ldr	r0, [pc, #352]	@ (8007c84 <_printf_i+0x234>)
 8007b22:	230a      	movs	r3, #10
 8007b24:	e011      	b.n	8007b4a <_printf_i+0xfa>
 8007b26:	6821      	ldr	r1, [r4, #0]
 8007b28:	6833      	ldr	r3, [r6, #0]
 8007b2a:	0608      	lsls	r0, r1, #24
 8007b2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b30:	d402      	bmi.n	8007b38 <_printf_i+0xe8>
 8007b32:	0649      	lsls	r1, r1, #25
 8007b34:	bf48      	it	mi
 8007b36:	b2ad      	uxthmi	r5, r5
 8007b38:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b3a:	4852      	ldr	r0, [pc, #328]	@ (8007c84 <_printf_i+0x234>)
 8007b3c:	6033      	str	r3, [r6, #0]
 8007b3e:	bf14      	ite	ne
 8007b40:	230a      	movne	r3, #10
 8007b42:	2308      	moveq	r3, #8
 8007b44:	2100      	movs	r1, #0
 8007b46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b4a:	6866      	ldr	r6, [r4, #4]
 8007b4c:	60a6      	str	r6, [r4, #8]
 8007b4e:	2e00      	cmp	r6, #0
 8007b50:	db05      	blt.n	8007b5e <_printf_i+0x10e>
 8007b52:	6821      	ldr	r1, [r4, #0]
 8007b54:	432e      	orrs	r6, r5
 8007b56:	f021 0104 	bic.w	r1, r1, #4
 8007b5a:	6021      	str	r1, [r4, #0]
 8007b5c:	d04b      	beq.n	8007bf6 <_printf_i+0x1a6>
 8007b5e:	4616      	mov	r6, r2
 8007b60:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b64:	fb03 5711 	mls	r7, r3, r1, r5
 8007b68:	5dc7      	ldrb	r7, [r0, r7]
 8007b6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b6e:	462f      	mov	r7, r5
 8007b70:	42bb      	cmp	r3, r7
 8007b72:	460d      	mov	r5, r1
 8007b74:	d9f4      	bls.n	8007b60 <_printf_i+0x110>
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d10b      	bne.n	8007b92 <_printf_i+0x142>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	07df      	lsls	r7, r3, #31
 8007b7e:	d508      	bpl.n	8007b92 <_printf_i+0x142>
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	6861      	ldr	r1, [r4, #4]
 8007b84:	4299      	cmp	r1, r3
 8007b86:	bfde      	ittt	le
 8007b88:	2330      	movle	r3, #48	@ 0x30
 8007b8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b92:	1b92      	subs	r2, r2, r6
 8007b94:	6122      	str	r2, [r4, #16]
 8007b96:	f8cd a000 	str.w	sl, [sp]
 8007b9a:	464b      	mov	r3, r9
 8007b9c:	aa03      	add	r2, sp, #12
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	f7ff fee7 	bl	8007974 <_printf_common>
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d14a      	bne.n	8007c40 <_printf_i+0x1f0>
 8007baa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bae:	b004      	add	sp, #16
 8007bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	f043 0320 	orr.w	r3, r3, #32
 8007bba:	6023      	str	r3, [r4, #0]
 8007bbc:	4832      	ldr	r0, [pc, #200]	@ (8007c88 <_printf_i+0x238>)
 8007bbe:	2778      	movs	r7, #120	@ 0x78
 8007bc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	6831      	ldr	r1, [r6, #0]
 8007bc8:	061f      	lsls	r7, r3, #24
 8007bca:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bce:	d402      	bmi.n	8007bd6 <_printf_i+0x186>
 8007bd0:	065f      	lsls	r7, r3, #25
 8007bd2:	bf48      	it	mi
 8007bd4:	b2ad      	uxthmi	r5, r5
 8007bd6:	6031      	str	r1, [r6, #0]
 8007bd8:	07d9      	lsls	r1, r3, #31
 8007bda:	bf44      	itt	mi
 8007bdc:	f043 0320 	orrmi.w	r3, r3, #32
 8007be0:	6023      	strmi	r3, [r4, #0]
 8007be2:	b11d      	cbz	r5, 8007bec <_printf_i+0x19c>
 8007be4:	2310      	movs	r3, #16
 8007be6:	e7ad      	b.n	8007b44 <_printf_i+0xf4>
 8007be8:	4826      	ldr	r0, [pc, #152]	@ (8007c84 <_printf_i+0x234>)
 8007bea:	e7e9      	b.n	8007bc0 <_printf_i+0x170>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	f023 0320 	bic.w	r3, r3, #32
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	e7f6      	b.n	8007be4 <_printf_i+0x194>
 8007bf6:	4616      	mov	r6, r2
 8007bf8:	e7bd      	b.n	8007b76 <_printf_i+0x126>
 8007bfa:	6833      	ldr	r3, [r6, #0]
 8007bfc:	6825      	ldr	r5, [r4, #0]
 8007bfe:	6961      	ldr	r1, [r4, #20]
 8007c00:	1d18      	adds	r0, r3, #4
 8007c02:	6030      	str	r0, [r6, #0]
 8007c04:	062e      	lsls	r6, r5, #24
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	d501      	bpl.n	8007c0e <_printf_i+0x1be>
 8007c0a:	6019      	str	r1, [r3, #0]
 8007c0c:	e002      	b.n	8007c14 <_printf_i+0x1c4>
 8007c0e:	0668      	lsls	r0, r5, #25
 8007c10:	d5fb      	bpl.n	8007c0a <_printf_i+0x1ba>
 8007c12:	8019      	strh	r1, [r3, #0]
 8007c14:	2300      	movs	r3, #0
 8007c16:	6123      	str	r3, [r4, #16]
 8007c18:	4616      	mov	r6, r2
 8007c1a:	e7bc      	b.n	8007b96 <_printf_i+0x146>
 8007c1c:	6833      	ldr	r3, [r6, #0]
 8007c1e:	1d1a      	adds	r2, r3, #4
 8007c20:	6032      	str	r2, [r6, #0]
 8007c22:	681e      	ldr	r6, [r3, #0]
 8007c24:	6862      	ldr	r2, [r4, #4]
 8007c26:	2100      	movs	r1, #0
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7f8 fb01 	bl	8000230 <memchr>
 8007c2e:	b108      	cbz	r0, 8007c34 <_printf_i+0x1e4>
 8007c30:	1b80      	subs	r0, r0, r6
 8007c32:	6060      	str	r0, [r4, #4]
 8007c34:	6863      	ldr	r3, [r4, #4]
 8007c36:	6123      	str	r3, [r4, #16]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c3e:	e7aa      	b.n	8007b96 <_printf_i+0x146>
 8007c40:	6923      	ldr	r3, [r4, #16]
 8007c42:	4632      	mov	r2, r6
 8007c44:	4649      	mov	r1, r9
 8007c46:	4640      	mov	r0, r8
 8007c48:	47d0      	blx	sl
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d0ad      	beq.n	8007baa <_printf_i+0x15a>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	079b      	lsls	r3, r3, #30
 8007c52:	d413      	bmi.n	8007c7c <_printf_i+0x22c>
 8007c54:	68e0      	ldr	r0, [r4, #12]
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	4298      	cmp	r0, r3
 8007c5a:	bfb8      	it	lt
 8007c5c:	4618      	movlt	r0, r3
 8007c5e:	e7a6      	b.n	8007bae <_printf_i+0x15e>
 8007c60:	2301      	movs	r3, #1
 8007c62:	4632      	mov	r2, r6
 8007c64:	4649      	mov	r1, r9
 8007c66:	4640      	mov	r0, r8
 8007c68:	47d0      	blx	sl
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d09d      	beq.n	8007baa <_printf_i+0x15a>
 8007c6e:	3501      	adds	r5, #1
 8007c70:	68e3      	ldr	r3, [r4, #12]
 8007c72:	9903      	ldr	r1, [sp, #12]
 8007c74:	1a5b      	subs	r3, r3, r1
 8007c76:	42ab      	cmp	r3, r5
 8007c78:	dcf2      	bgt.n	8007c60 <_printf_i+0x210>
 8007c7a:	e7eb      	b.n	8007c54 <_printf_i+0x204>
 8007c7c:	2500      	movs	r5, #0
 8007c7e:	f104 0619 	add.w	r6, r4, #25
 8007c82:	e7f5      	b.n	8007c70 <_printf_i+0x220>
 8007c84:	0800be4f 	.word	0x0800be4f
 8007c88:	0800be60 	.word	0x0800be60

08007c8c <_scanf_float>:
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	b087      	sub	sp, #28
 8007c92:	4691      	mov	r9, r2
 8007c94:	9303      	str	r3, [sp, #12]
 8007c96:	688b      	ldr	r3, [r1, #8]
 8007c98:	1e5a      	subs	r2, r3, #1
 8007c9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007c9e:	bf81      	itttt	hi
 8007ca0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007ca4:	eb03 0b05 	addhi.w	fp, r3, r5
 8007ca8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007cac:	608b      	strhi	r3, [r1, #8]
 8007cae:	680b      	ldr	r3, [r1, #0]
 8007cb0:	460a      	mov	r2, r1
 8007cb2:	f04f 0500 	mov.w	r5, #0
 8007cb6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007cba:	f842 3b1c 	str.w	r3, [r2], #28
 8007cbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007cc2:	4680      	mov	r8, r0
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	bf98      	it	ls
 8007cc8:	f04f 0b00 	movls.w	fp, #0
 8007ccc:	9201      	str	r2, [sp, #4]
 8007cce:	4616      	mov	r6, r2
 8007cd0:	46aa      	mov	sl, r5
 8007cd2:	462f      	mov	r7, r5
 8007cd4:	9502      	str	r5, [sp, #8]
 8007cd6:	68a2      	ldr	r2, [r4, #8]
 8007cd8:	b15a      	cbz	r2, 8007cf2 <_scanf_float+0x66>
 8007cda:	f8d9 3000 	ldr.w	r3, [r9]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b4e      	cmp	r3, #78	@ 0x4e
 8007ce2:	d863      	bhi.n	8007dac <_scanf_float+0x120>
 8007ce4:	2b40      	cmp	r3, #64	@ 0x40
 8007ce6:	d83b      	bhi.n	8007d60 <_scanf_float+0xd4>
 8007ce8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007cec:	b2c8      	uxtb	r0, r1
 8007cee:	280e      	cmp	r0, #14
 8007cf0:	d939      	bls.n	8007d66 <_scanf_float+0xda>
 8007cf2:	b11f      	cbz	r7, 8007cfc <_scanf_float+0x70>
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cfa:	6023      	str	r3, [r4, #0]
 8007cfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d00:	f1ba 0f01 	cmp.w	sl, #1
 8007d04:	f200 8114 	bhi.w	8007f30 <_scanf_float+0x2a4>
 8007d08:	9b01      	ldr	r3, [sp, #4]
 8007d0a:	429e      	cmp	r6, r3
 8007d0c:	f200 8105 	bhi.w	8007f1a <_scanf_float+0x28e>
 8007d10:	2001      	movs	r0, #1
 8007d12:	b007      	add	sp, #28
 8007d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d18:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007d1c:	2a0d      	cmp	r2, #13
 8007d1e:	d8e8      	bhi.n	8007cf2 <_scanf_float+0x66>
 8007d20:	a101      	add	r1, pc, #4	@ (adr r1, 8007d28 <_scanf_float+0x9c>)
 8007d22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007e71 	.word	0x08007e71
 8007d2c:	08007cf3 	.word	0x08007cf3
 8007d30:	08007cf3 	.word	0x08007cf3
 8007d34:	08007cf3 	.word	0x08007cf3
 8007d38:	08007ecd 	.word	0x08007ecd
 8007d3c:	08007ea7 	.word	0x08007ea7
 8007d40:	08007cf3 	.word	0x08007cf3
 8007d44:	08007cf3 	.word	0x08007cf3
 8007d48:	08007e7f 	.word	0x08007e7f
 8007d4c:	08007cf3 	.word	0x08007cf3
 8007d50:	08007cf3 	.word	0x08007cf3
 8007d54:	08007cf3 	.word	0x08007cf3
 8007d58:	08007cf3 	.word	0x08007cf3
 8007d5c:	08007e3b 	.word	0x08007e3b
 8007d60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007d64:	e7da      	b.n	8007d1c <_scanf_float+0x90>
 8007d66:	290e      	cmp	r1, #14
 8007d68:	d8c3      	bhi.n	8007cf2 <_scanf_float+0x66>
 8007d6a:	a001      	add	r0, pc, #4	@ (adr r0, 8007d70 <_scanf_float+0xe4>)
 8007d6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007d70:	08007e2b 	.word	0x08007e2b
 8007d74:	08007cf3 	.word	0x08007cf3
 8007d78:	08007e2b 	.word	0x08007e2b
 8007d7c:	08007ebb 	.word	0x08007ebb
 8007d80:	08007cf3 	.word	0x08007cf3
 8007d84:	08007dcd 	.word	0x08007dcd
 8007d88:	08007e11 	.word	0x08007e11
 8007d8c:	08007e11 	.word	0x08007e11
 8007d90:	08007e11 	.word	0x08007e11
 8007d94:	08007e11 	.word	0x08007e11
 8007d98:	08007e11 	.word	0x08007e11
 8007d9c:	08007e11 	.word	0x08007e11
 8007da0:	08007e11 	.word	0x08007e11
 8007da4:	08007e11 	.word	0x08007e11
 8007da8:	08007e11 	.word	0x08007e11
 8007dac:	2b6e      	cmp	r3, #110	@ 0x6e
 8007dae:	d809      	bhi.n	8007dc4 <_scanf_float+0x138>
 8007db0:	2b60      	cmp	r3, #96	@ 0x60
 8007db2:	d8b1      	bhi.n	8007d18 <_scanf_float+0x8c>
 8007db4:	2b54      	cmp	r3, #84	@ 0x54
 8007db6:	d07b      	beq.n	8007eb0 <_scanf_float+0x224>
 8007db8:	2b59      	cmp	r3, #89	@ 0x59
 8007dba:	d19a      	bne.n	8007cf2 <_scanf_float+0x66>
 8007dbc:	2d07      	cmp	r5, #7
 8007dbe:	d198      	bne.n	8007cf2 <_scanf_float+0x66>
 8007dc0:	2508      	movs	r5, #8
 8007dc2:	e02f      	b.n	8007e24 <_scanf_float+0x198>
 8007dc4:	2b74      	cmp	r3, #116	@ 0x74
 8007dc6:	d073      	beq.n	8007eb0 <_scanf_float+0x224>
 8007dc8:	2b79      	cmp	r3, #121	@ 0x79
 8007dca:	e7f6      	b.n	8007dba <_scanf_float+0x12e>
 8007dcc:	6821      	ldr	r1, [r4, #0]
 8007dce:	05c8      	lsls	r0, r1, #23
 8007dd0:	d51e      	bpl.n	8007e10 <_scanf_float+0x184>
 8007dd2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007dd6:	6021      	str	r1, [r4, #0]
 8007dd8:	3701      	adds	r7, #1
 8007dda:	f1bb 0f00 	cmp.w	fp, #0
 8007dde:	d003      	beq.n	8007de8 <_scanf_float+0x15c>
 8007de0:	3201      	adds	r2, #1
 8007de2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007de6:	60a2      	str	r2, [r4, #8]
 8007de8:	68a3      	ldr	r3, [r4, #8]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	60a3      	str	r3, [r4, #8]
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	3301      	adds	r3, #1
 8007df2:	6123      	str	r3, [r4, #16]
 8007df4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f8c9 3004 	str.w	r3, [r9, #4]
 8007e00:	f340 8082 	ble.w	8007f08 <_scanf_float+0x27c>
 8007e04:	f8d9 3000 	ldr.w	r3, [r9]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	f8c9 3000 	str.w	r3, [r9]
 8007e0e:	e762      	b.n	8007cd6 <_scanf_float+0x4a>
 8007e10:	eb1a 0105 	adds.w	r1, sl, r5
 8007e14:	f47f af6d 	bne.w	8007cf2 <_scanf_float+0x66>
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007e1e:	6022      	str	r2, [r4, #0]
 8007e20:	460d      	mov	r5, r1
 8007e22:	468a      	mov	sl, r1
 8007e24:	f806 3b01 	strb.w	r3, [r6], #1
 8007e28:	e7de      	b.n	8007de8 <_scanf_float+0x15c>
 8007e2a:	6822      	ldr	r2, [r4, #0]
 8007e2c:	0610      	lsls	r0, r2, #24
 8007e2e:	f57f af60 	bpl.w	8007cf2 <_scanf_float+0x66>
 8007e32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e36:	6022      	str	r2, [r4, #0]
 8007e38:	e7f4      	b.n	8007e24 <_scanf_float+0x198>
 8007e3a:	f1ba 0f00 	cmp.w	sl, #0
 8007e3e:	d10c      	bne.n	8007e5a <_scanf_float+0x1ce>
 8007e40:	b977      	cbnz	r7, 8007e60 <_scanf_float+0x1d4>
 8007e42:	6822      	ldr	r2, [r4, #0]
 8007e44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007e48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007e4c:	d108      	bne.n	8007e60 <_scanf_float+0x1d4>
 8007e4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e52:	6022      	str	r2, [r4, #0]
 8007e54:	f04f 0a01 	mov.w	sl, #1
 8007e58:	e7e4      	b.n	8007e24 <_scanf_float+0x198>
 8007e5a:	f1ba 0f02 	cmp.w	sl, #2
 8007e5e:	d050      	beq.n	8007f02 <_scanf_float+0x276>
 8007e60:	2d01      	cmp	r5, #1
 8007e62:	d002      	beq.n	8007e6a <_scanf_float+0x1de>
 8007e64:	2d04      	cmp	r5, #4
 8007e66:	f47f af44 	bne.w	8007cf2 <_scanf_float+0x66>
 8007e6a:	3501      	adds	r5, #1
 8007e6c:	b2ed      	uxtb	r5, r5
 8007e6e:	e7d9      	b.n	8007e24 <_scanf_float+0x198>
 8007e70:	f1ba 0f01 	cmp.w	sl, #1
 8007e74:	f47f af3d 	bne.w	8007cf2 <_scanf_float+0x66>
 8007e78:	f04f 0a02 	mov.w	sl, #2
 8007e7c:	e7d2      	b.n	8007e24 <_scanf_float+0x198>
 8007e7e:	b975      	cbnz	r5, 8007e9e <_scanf_float+0x212>
 8007e80:	2f00      	cmp	r7, #0
 8007e82:	f47f af37 	bne.w	8007cf4 <_scanf_float+0x68>
 8007e86:	6822      	ldr	r2, [r4, #0]
 8007e88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007e8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007e90:	f040 8103 	bne.w	800809a <_scanf_float+0x40e>
 8007e94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e98:	6022      	str	r2, [r4, #0]
 8007e9a:	2501      	movs	r5, #1
 8007e9c:	e7c2      	b.n	8007e24 <_scanf_float+0x198>
 8007e9e:	2d03      	cmp	r5, #3
 8007ea0:	d0e3      	beq.n	8007e6a <_scanf_float+0x1de>
 8007ea2:	2d05      	cmp	r5, #5
 8007ea4:	e7df      	b.n	8007e66 <_scanf_float+0x1da>
 8007ea6:	2d02      	cmp	r5, #2
 8007ea8:	f47f af23 	bne.w	8007cf2 <_scanf_float+0x66>
 8007eac:	2503      	movs	r5, #3
 8007eae:	e7b9      	b.n	8007e24 <_scanf_float+0x198>
 8007eb0:	2d06      	cmp	r5, #6
 8007eb2:	f47f af1e 	bne.w	8007cf2 <_scanf_float+0x66>
 8007eb6:	2507      	movs	r5, #7
 8007eb8:	e7b4      	b.n	8007e24 <_scanf_float+0x198>
 8007eba:	6822      	ldr	r2, [r4, #0]
 8007ebc:	0591      	lsls	r1, r2, #22
 8007ebe:	f57f af18 	bpl.w	8007cf2 <_scanf_float+0x66>
 8007ec2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007ec6:	6022      	str	r2, [r4, #0]
 8007ec8:	9702      	str	r7, [sp, #8]
 8007eca:	e7ab      	b.n	8007e24 <_scanf_float+0x198>
 8007ecc:	6822      	ldr	r2, [r4, #0]
 8007ece:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007ed2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007ed6:	d005      	beq.n	8007ee4 <_scanf_float+0x258>
 8007ed8:	0550      	lsls	r0, r2, #21
 8007eda:	f57f af0a 	bpl.w	8007cf2 <_scanf_float+0x66>
 8007ede:	2f00      	cmp	r7, #0
 8007ee0:	f000 80db 	beq.w	800809a <_scanf_float+0x40e>
 8007ee4:	0591      	lsls	r1, r2, #22
 8007ee6:	bf58      	it	pl
 8007ee8:	9902      	ldrpl	r1, [sp, #8]
 8007eea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007eee:	bf58      	it	pl
 8007ef0:	1a79      	subpl	r1, r7, r1
 8007ef2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007ef6:	bf58      	it	pl
 8007ef8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007efc:	6022      	str	r2, [r4, #0]
 8007efe:	2700      	movs	r7, #0
 8007f00:	e790      	b.n	8007e24 <_scanf_float+0x198>
 8007f02:	f04f 0a03 	mov.w	sl, #3
 8007f06:	e78d      	b.n	8007e24 <_scanf_float+0x198>
 8007f08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4798      	blx	r3
 8007f12:	2800      	cmp	r0, #0
 8007f14:	f43f aedf 	beq.w	8007cd6 <_scanf_float+0x4a>
 8007f18:	e6eb      	b.n	8007cf2 <_scanf_float+0x66>
 8007f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f22:	464a      	mov	r2, r9
 8007f24:	4640      	mov	r0, r8
 8007f26:	4798      	blx	r3
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	6123      	str	r3, [r4, #16]
 8007f2e:	e6eb      	b.n	8007d08 <_scanf_float+0x7c>
 8007f30:	1e6b      	subs	r3, r5, #1
 8007f32:	2b06      	cmp	r3, #6
 8007f34:	d824      	bhi.n	8007f80 <_scanf_float+0x2f4>
 8007f36:	2d02      	cmp	r5, #2
 8007f38:	d836      	bhi.n	8007fa8 <_scanf_float+0x31c>
 8007f3a:	9b01      	ldr	r3, [sp, #4]
 8007f3c:	429e      	cmp	r6, r3
 8007f3e:	f67f aee7 	bls.w	8007d10 <_scanf_float+0x84>
 8007f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f4a:	464a      	mov	r2, r9
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	4798      	blx	r3
 8007f50:	6923      	ldr	r3, [r4, #16]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	e7f0      	b.n	8007f3a <_scanf_float+0x2ae>
 8007f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007f60:	464a      	mov	r2, r9
 8007f62:	4640      	mov	r0, r8
 8007f64:	4798      	blx	r3
 8007f66:	6923      	ldr	r3, [r4, #16]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	6123      	str	r3, [r4, #16]
 8007f6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f70:	fa5f fa8a 	uxtb.w	sl, sl
 8007f74:	f1ba 0f02 	cmp.w	sl, #2
 8007f78:	d1ee      	bne.n	8007f58 <_scanf_float+0x2cc>
 8007f7a:	3d03      	subs	r5, #3
 8007f7c:	b2ed      	uxtb	r5, r5
 8007f7e:	1b76      	subs	r6, r6, r5
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	05da      	lsls	r2, r3, #23
 8007f84:	d530      	bpl.n	8007fe8 <_scanf_float+0x35c>
 8007f86:	055b      	lsls	r3, r3, #21
 8007f88:	d511      	bpl.n	8007fae <_scanf_float+0x322>
 8007f8a:	9b01      	ldr	r3, [sp, #4]
 8007f8c:	429e      	cmp	r6, r3
 8007f8e:	f67f aebf 	bls.w	8007d10 <_scanf_float+0x84>
 8007f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f9a:	464a      	mov	r2, r9
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	4798      	blx	r3
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	e7f0      	b.n	8007f8a <_scanf_float+0x2fe>
 8007fa8:	46aa      	mov	sl, r5
 8007faa:	46b3      	mov	fp, r6
 8007fac:	e7de      	b.n	8007f6c <_scanf_float+0x2e0>
 8007fae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007fb2:	6923      	ldr	r3, [r4, #16]
 8007fb4:	2965      	cmp	r1, #101	@ 0x65
 8007fb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fba:	f106 35ff 	add.w	r5, r6, #4294967295
 8007fbe:	6123      	str	r3, [r4, #16]
 8007fc0:	d00c      	beq.n	8007fdc <_scanf_float+0x350>
 8007fc2:	2945      	cmp	r1, #69	@ 0x45
 8007fc4:	d00a      	beq.n	8007fdc <_scanf_float+0x350>
 8007fc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007fca:	464a      	mov	r2, r9
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4798      	blx	r3
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	1eb5      	subs	r5, r6, #2
 8007fda:	6123      	str	r3, [r4, #16]
 8007fdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007fe0:	464a      	mov	r2, r9
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	4798      	blx	r3
 8007fe6:	462e      	mov	r6, r5
 8007fe8:	6822      	ldr	r2, [r4, #0]
 8007fea:	f012 0210 	ands.w	r2, r2, #16
 8007fee:	d001      	beq.n	8007ff4 <_scanf_float+0x368>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	e68e      	b.n	8007d12 <_scanf_float+0x86>
 8007ff4:	7032      	strb	r2, [r6, #0]
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008000:	d125      	bne.n	800804e <_scanf_float+0x3c2>
 8008002:	9b02      	ldr	r3, [sp, #8]
 8008004:	429f      	cmp	r7, r3
 8008006:	d00a      	beq.n	800801e <_scanf_float+0x392>
 8008008:	1bda      	subs	r2, r3, r7
 800800a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800800e:	429e      	cmp	r6, r3
 8008010:	bf28      	it	cs
 8008012:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008016:	4922      	ldr	r1, [pc, #136]	@ (80080a0 <_scanf_float+0x414>)
 8008018:	4630      	mov	r0, r6
 800801a:	f000 f977 	bl	800830c <siprintf>
 800801e:	9901      	ldr	r1, [sp, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	4640      	mov	r0, r8
 8008024:	f002 fcf8 	bl	800aa18 <_strtod_r>
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	6821      	ldr	r1, [r4, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f011 0f02 	tst.w	r1, #2
 8008032:	ec57 6b10 	vmov	r6, r7, d0
 8008036:	f103 0204 	add.w	r2, r3, #4
 800803a:	d015      	beq.n	8008068 <_scanf_float+0x3dc>
 800803c:	9903      	ldr	r1, [sp, #12]
 800803e:	600a      	str	r2, [r1, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	e9c3 6700 	strd	r6, r7, [r3]
 8008046:	68e3      	ldr	r3, [r4, #12]
 8008048:	3301      	adds	r3, #1
 800804a:	60e3      	str	r3, [r4, #12]
 800804c:	e7d0      	b.n	8007ff0 <_scanf_float+0x364>
 800804e:	9b04      	ldr	r3, [sp, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d0e4      	beq.n	800801e <_scanf_float+0x392>
 8008054:	9905      	ldr	r1, [sp, #20]
 8008056:	230a      	movs	r3, #10
 8008058:	3101      	adds	r1, #1
 800805a:	4640      	mov	r0, r8
 800805c:	f7ff f9b4 	bl	80073c8 <_strtol_r>
 8008060:	9b04      	ldr	r3, [sp, #16]
 8008062:	9e05      	ldr	r6, [sp, #20]
 8008064:	1ac2      	subs	r2, r0, r3
 8008066:	e7d0      	b.n	800800a <_scanf_float+0x37e>
 8008068:	f011 0f04 	tst.w	r1, #4
 800806c:	9903      	ldr	r1, [sp, #12]
 800806e:	600a      	str	r2, [r1, #0]
 8008070:	d1e6      	bne.n	8008040 <_scanf_float+0x3b4>
 8008072:	681d      	ldr	r5, [r3, #0]
 8008074:	4632      	mov	r2, r6
 8008076:	463b      	mov	r3, r7
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f7f8 fd86 	bl	8000b8c <__aeabi_dcmpun>
 8008080:	b128      	cbz	r0, 800808e <_scanf_float+0x402>
 8008082:	4808      	ldr	r0, [pc, #32]	@ (80080a4 <_scanf_float+0x418>)
 8008084:	f000 fabc 	bl	8008600 <nanf>
 8008088:	ed85 0a00 	vstr	s0, [r5]
 800808c:	e7db      	b.n	8008046 <_scanf_float+0x3ba>
 800808e:	4630      	mov	r0, r6
 8008090:	4639      	mov	r1, r7
 8008092:	f7f8 fdd9 	bl	8000c48 <__aeabi_d2f>
 8008096:	6028      	str	r0, [r5, #0]
 8008098:	e7d5      	b.n	8008046 <_scanf_float+0x3ba>
 800809a:	2700      	movs	r7, #0
 800809c:	e62e      	b.n	8007cfc <_scanf_float+0x70>
 800809e:	bf00      	nop
 80080a0:	0800be71 	.word	0x0800be71
 80080a4:	0800bfb2 	.word	0x0800bfb2

080080a8 <std>:
 80080a8:	2300      	movs	r3, #0
 80080aa:	b510      	push	{r4, lr}
 80080ac:	4604      	mov	r4, r0
 80080ae:	e9c0 3300 	strd	r3, r3, [r0]
 80080b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080b6:	6083      	str	r3, [r0, #8]
 80080b8:	8181      	strh	r1, [r0, #12]
 80080ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80080bc:	81c2      	strh	r2, [r0, #14]
 80080be:	6183      	str	r3, [r0, #24]
 80080c0:	4619      	mov	r1, r3
 80080c2:	2208      	movs	r2, #8
 80080c4:	305c      	adds	r0, #92	@ 0x5c
 80080c6:	f000 fa1b 	bl	8008500 <memset>
 80080ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008100 <std+0x58>)
 80080cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80080ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008104 <std+0x5c>)
 80080d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <std+0x60>)
 80080d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080d6:	4b0d      	ldr	r3, [pc, #52]	@ (800810c <std+0x64>)
 80080d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80080da:	4b0d      	ldr	r3, [pc, #52]	@ (8008110 <std+0x68>)
 80080dc:	6224      	str	r4, [r4, #32]
 80080de:	429c      	cmp	r4, r3
 80080e0:	d006      	beq.n	80080f0 <std+0x48>
 80080e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080e6:	4294      	cmp	r4, r2
 80080e8:	d002      	beq.n	80080f0 <std+0x48>
 80080ea:	33d0      	adds	r3, #208	@ 0xd0
 80080ec:	429c      	cmp	r4, r3
 80080ee:	d105      	bne.n	80080fc <std+0x54>
 80080f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f8:	f000 ba7e 	b.w	80085f8 <__retarget_lock_init_recursive>
 80080fc:	bd10      	pop	{r4, pc}
 80080fe:	bf00      	nop
 8008100:	08008351 	.word	0x08008351
 8008104:	08008373 	.word	0x08008373
 8008108:	080083ab 	.word	0x080083ab
 800810c:	080083cf 	.word	0x080083cf
 8008110:	20000668 	.word	0x20000668

08008114 <stdio_exit_handler>:
 8008114:	4a02      	ldr	r2, [pc, #8]	@ (8008120 <stdio_exit_handler+0xc>)
 8008116:	4903      	ldr	r1, [pc, #12]	@ (8008124 <stdio_exit_handler+0x10>)
 8008118:	4803      	ldr	r0, [pc, #12]	@ (8008128 <stdio_exit_handler+0x14>)
 800811a:	f000 b869 	b.w	80081f0 <_fwalk_sglue>
 800811e:	bf00      	nop
 8008120:	20000058 	.word	0x20000058
 8008124:	0800b061 	.word	0x0800b061
 8008128:	20000068 	.word	0x20000068

0800812c <cleanup_stdio>:
 800812c:	6841      	ldr	r1, [r0, #4]
 800812e:	4b0c      	ldr	r3, [pc, #48]	@ (8008160 <cleanup_stdio+0x34>)
 8008130:	4299      	cmp	r1, r3
 8008132:	b510      	push	{r4, lr}
 8008134:	4604      	mov	r4, r0
 8008136:	d001      	beq.n	800813c <cleanup_stdio+0x10>
 8008138:	f002 ff92 	bl	800b060 <_fflush_r>
 800813c:	68a1      	ldr	r1, [r4, #8]
 800813e:	4b09      	ldr	r3, [pc, #36]	@ (8008164 <cleanup_stdio+0x38>)
 8008140:	4299      	cmp	r1, r3
 8008142:	d002      	beq.n	800814a <cleanup_stdio+0x1e>
 8008144:	4620      	mov	r0, r4
 8008146:	f002 ff8b 	bl	800b060 <_fflush_r>
 800814a:	68e1      	ldr	r1, [r4, #12]
 800814c:	4b06      	ldr	r3, [pc, #24]	@ (8008168 <cleanup_stdio+0x3c>)
 800814e:	4299      	cmp	r1, r3
 8008150:	d004      	beq.n	800815c <cleanup_stdio+0x30>
 8008152:	4620      	mov	r0, r4
 8008154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008158:	f002 bf82 	b.w	800b060 <_fflush_r>
 800815c:	bd10      	pop	{r4, pc}
 800815e:	bf00      	nop
 8008160:	20000668 	.word	0x20000668
 8008164:	200006d0 	.word	0x200006d0
 8008168:	20000738 	.word	0x20000738

0800816c <global_stdio_init.part.0>:
 800816c:	b510      	push	{r4, lr}
 800816e:	4b0b      	ldr	r3, [pc, #44]	@ (800819c <global_stdio_init.part.0+0x30>)
 8008170:	4c0b      	ldr	r4, [pc, #44]	@ (80081a0 <global_stdio_init.part.0+0x34>)
 8008172:	4a0c      	ldr	r2, [pc, #48]	@ (80081a4 <global_stdio_init.part.0+0x38>)
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	4620      	mov	r0, r4
 8008178:	2200      	movs	r2, #0
 800817a:	2104      	movs	r1, #4
 800817c:	f7ff ff94 	bl	80080a8 <std>
 8008180:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008184:	2201      	movs	r2, #1
 8008186:	2109      	movs	r1, #9
 8008188:	f7ff ff8e 	bl	80080a8 <std>
 800818c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008190:	2202      	movs	r2, #2
 8008192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008196:	2112      	movs	r1, #18
 8008198:	f7ff bf86 	b.w	80080a8 <std>
 800819c:	200007a0 	.word	0x200007a0
 80081a0:	20000668 	.word	0x20000668
 80081a4:	08008115 	.word	0x08008115

080081a8 <__sfp_lock_acquire>:
 80081a8:	4801      	ldr	r0, [pc, #4]	@ (80081b0 <__sfp_lock_acquire+0x8>)
 80081aa:	f000 ba26 	b.w	80085fa <__retarget_lock_acquire_recursive>
 80081ae:	bf00      	nop
 80081b0:	200007a9 	.word	0x200007a9

080081b4 <__sfp_lock_release>:
 80081b4:	4801      	ldr	r0, [pc, #4]	@ (80081bc <__sfp_lock_release+0x8>)
 80081b6:	f000 ba21 	b.w	80085fc <__retarget_lock_release_recursive>
 80081ba:	bf00      	nop
 80081bc:	200007a9 	.word	0x200007a9

080081c0 <__sinit>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4604      	mov	r4, r0
 80081c4:	f7ff fff0 	bl	80081a8 <__sfp_lock_acquire>
 80081c8:	6a23      	ldr	r3, [r4, #32]
 80081ca:	b11b      	cbz	r3, 80081d4 <__sinit+0x14>
 80081cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d0:	f7ff bff0 	b.w	80081b4 <__sfp_lock_release>
 80081d4:	4b04      	ldr	r3, [pc, #16]	@ (80081e8 <__sinit+0x28>)
 80081d6:	6223      	str	r3, [r4, #32]
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__sinit+0x2c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1f5      	bne.n	80081cc <__sinit+0xc>
 80081e0:	f7ff ffc4 	bl	800816c <global_stdio_init.part.0>
 80081e4:	e7f2      	b.n	80081cc <__sinit+0xc>
 80081e6:	bf00      	nop
 80081e8:	0800812d 	.word	0x0800812d
 80081ec:	200007a0 	.word	0x200007a0

080081f0 <_fwalk_sglue>:
 80081f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f4:	4607      	mov	r7, r0
 80081f6:	4688      	mov	r8, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	2600      	movs	r6, #0
 80081fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008200:	f1b9 0901 	subs.w	r9, r9, #1
 8008204:	d505      	bpl.n	8008212 <_fwalk_sglue+0x22>
 8008206:	6824      	ldr	r4, [r4, #0]
 8008208:	2c00      	cmp	r4, #0
 800820a:	d1f7      	bne.n	80081fc <_fwalk_sglue+0xc>
 800820c:	4630      	mov	r0, r6
 800820e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008212:	89ab      	ldrh	r3, [r5, #12]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d907      	bls.n	8008228 <_fwalk_sglue+0x38>
 8008218:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800821c:	3301      	adds	r3, #1
 800821e:	d003      	beq.n	8008228 <_fwalk_sglue+0x38>
 8008220:	4629      	mov	r1, r5
 8008222:	4638      	mov	r0, r7
 8008224:	47c0      	blx	r8
 8008226:	4306      	orrs	r6, r0
 8008228:	3568      	adds	r5, #104	@ 0x68
 800822a:	e7e9      	b.n	8008200 <_fwalk_sglue+0x10>

0800822c <iprintf>:
 800822c:	b40f      	push	{r0, r1, r2, r3}
 800822e:	b507      	push	{r0, r1, r2, lr}
 8008230:	4906      	ldr	r1, [pc, #24]	@ (800824c <iprintf+0x20>)
 8008232:	ab04      	add	r3, sp, #16
 8008234:	6808      	ldr	r0, [r1, #0]
 8008236:	f853 2b04 	ldr.w	r2, [r3], #4
 800823a:	6881      	ldr	r1, [r0, #8]
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	f002 fd73 	bl	800ad28 <_vfiprintf_r>
 8008242:	b003      	add	sp, #12
 8008244:	f85d eb04 	ldr.w	lr, [sp], #4
 8008248:	b004      	add	sp, #16
 800824a:	4770      	bx	lr
 800824c:	20000064 	.word	0x20000064

08008250 <_puts_r>:
 8008250:	6a03      	ldr	r3, [r0, #32]
 8008252:	b570      	push	{r4, r5, r6, lr}
 8008254:	6884      	ldr	r4, [r0, #8]
 8008256:	4605      	mov	r5, r0
 8008258:	460e      	mov	r6, r1
 800825a:	b90b      	cbnz	r3, 8008260 <_puts_r+0x10>
 800825c:	f7ff ffb0 	bl	80081c0 <__sinit>
 8008260:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008262:	07db      	lsls	r3, r3, #31
 8008264:	d405      	bmi.n	8008272 <_puts_r+0x22>
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	0598      	lsls	r0, r3, #22
 800826a:	d402      	bmi.n	8008272 <_puts_r+0x22>
 800826c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800826e:	f000 f9c4 	bl	80085fa <__retarget_lock_acquire_recursive>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	0719      	lsls	r1, r3, #28
 8008276:	d502      	bpl.n	800827e <_puts_r+0x2e>
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d135      	bne.n	80082ea <_puts_r+0x9a>
 800827e:	4621      	mov	r1, r4
 8008280:	4628      	mov	r0, r5
 8008282:	f000 f8e7 	bl	8008454 <__swsetup_r>
 8008286:	b380      	cbz	r0, 80082ea <_puts_r+0x9a>
 8008288:	f04f 35ff 	mov.w	r5, #4294967295
 800828c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800828e:	07da      	lsls	r2, r3, #31
 8008290:	d405      	bmi.n	800829e <_puts_r+0x4e>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	059b      	lsls	r3, r3, #22
 8008296:	d402      	bmi.n	800829e <_puts_r+0x4e>
 8008298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800829a:	f000 f9af 	bl	80085fc <__retarget_lock_release_recursive>
 800829e:	4628      	mov	r0, r5
 80082a0:	bd70      	pop	{r4, r5, r6, pc}
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	da04      	bge.n	80082b0 <_puts_r+0x60>
 80082a6:	69a2      	ldr	r2, [r4, #24]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	dc17      	bgt.n	80082dc <_puts_r+0x8c>
 80082ac:	290a      	cmp	r1, #10
 80082ae:	d015      	beq.n	80082dc <_puts_r+0x8c>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	6022      	str	r2, [r4, #0]
 80082b6:	7019      	strb	r1, [r3, #0]
 80082b8:	68a3      	ldr	r3, [r4, #8]
 80082ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082be:	3b01      	subs	r3, #1
 80082c0:	60a3      	str	r3, [r4, #8]
 80082c2:	2900      	cmp	r1, #0
 80082c4:	d1ed      	bne.n	80082a2 <_puts_r+0x52>
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	da11      	bge.n	80082ee <_puts_r+0x9e>
 80082ca:	4622      	mov	r2, r4
 80082cc:	210a      	movs	r1, #10
 80082ce:	4628      	mov	r0, r5
 80082d0:	f000 f881 	bl	80083d6 <__swbuf_r>
 80082d4:	3001      	adds	r0, #1
 80082d6:	d0d7      	beq.n	8008288 <_puts_r+0x38>
 80082d8:	250a      	movs	r5, #10
 80082da:	e7d7      	b.n	800828c <_puts_r+0x3c>
 80082dc:	4622      	mov	r2, r4
 80082de:	4628      	mov	r0, r5
 80082e0:	f000 f879 	bl	80083d6 <__swbuf_r>
 80082e4:	3001      	adds	r0, #1
 80082e6:	d1e7      	bne.n	80082b8 <_puts_r+0x68>
 80082e8:	e7ce      	b.n	8008288 <_puts_r+0x38>
 80082ea:	3e01      	subs	r6, #1
 80082ec:	e7e4      	b.n	80082b8 <_puts_r+0x68>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	6022      	str	r2, [r4, #0]
 80082f4:	220a      	movs	r2, #10
 80082f6:	701a      	strb	r2, [r3, #0]
 80082f8:	e7ee      	b.n	80082d8 <_puts_r+0x88>
	...

080082fc <puts>:
 80082fc:	4b02      	ldr	r3, [pc, #8]	@ (8008308 <puts+0xc>)
 80082fe:	4601      	mov	r1, r0
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	f7ff bfa5 	b.w	8008250 <_puts_r>
 8008306:	bf00      	nop
 8008308:	20000064 	.word	0x20000064

0800830c <siprintf>:
 800830c:	b40e      	push	{r1, r2, r3}
 800830e:	b510      	push	{r4, lr}
 8008310:	b09d      	sub	sp, #116	@ 0x74
 8008312:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008314:	9002      	str	r0, [sp, #8]
 8008316:	9006      	str	r0, [sp, #24]
 8008318:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800831c:	480a      	ldr	r0, [pc, #40]	@ (8008348 <siprintf+0x3c>)
 800831e:	9107      	str	r1, [sp, #28]
 8008320:	9104      	str	r1, [sp, #16]
 8008322:	490a      	ldr	r1, [pc, #40]	@ (800834c <siprintf+0x40>)
 8008324:	f853 2b04 	ldr.w	r2, [r3], #4
 8008328:	9105      	str	r1, [sp, #20]
 800832a:	2400      	movs	r4, #0
 800832c:	a902      	add	r1, sp, #8
 800832e:	6800      	ldr	r0, [r0, #0]
 8008330:	9301      	str	r3, [sp, #4]
 8008332:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008334:	f002 fbd2 	bl	800aadc <_svfiprintf_r>
 8008338:	9b02      	ldr	r3, [sp, #8]
 800833a:	701c      	strb	r4, [r3, #0]
 800833c:	b01d      	add	sp, #116	@ 0x74
 800833e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008342:	b003      	add	sp, #12
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	20000064 	.word	0x20000064
 800834c:	ffff0208 	.word	0xffff0208

08008350 <__sread>:
 8008350:	b510      	push	{r4, lr}
 8008352:	460c      	mov	r4, r1
 8008354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008358:	f000 f900 	bl	800855c <_read_r>
 800835c:	2800      	cmp	r0, #0
 800835e:	bfab      	itete	ge
 8008360:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008362:	89a3      	ldrhlt	r3, [r4, #12]
 8008364:	181b      	addge	r3, r3, r0
 8008366:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800836a:	bfac      	ite	ge
 800836c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800836e:	81a3      	strhlt	r3, [r4, #12]
 8008370:	bd10      	pop	{r4, pc}

08008372 <__swrite>:
 8008372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008376:	461f      	mov	r7, r3
 8008378:	898b      	ldrh	r3, [r1, #12]
 800837a:	05db      	lsls	r3, r3, #23
 800837c:	4605      	mov	r5, r0
 800837e:	460c      	mov	r4, r1
 8008380:	4616      	mov	r6, r2
 8008382:	d505      	bpl.n	8008390 <__swrite+0x1e>
 8008384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008388:	2302      	movs	r3, #2
 800838a:	2200      	movs	r2, #0
 800838c:	f000 f8d4 	bl	8008538 <_lseek_r>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008396:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	4632      	mov	r2, r6
 800839e:	463b      	mov	r3, r7
 80083a0:	4628      	mov	r0, r5
 80083a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083a6:	f000 b8eb 	b.w	8008580 <_write_r>

080083aa <__sseek>:
 80083aa:	b510      	push	{r4, lr}
 80083ac:	460c      	mov	r4, r1
 80083ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b2:	f000 f8c1 	bl	8008538 <_lseek_r>
 80083b6:	1c43      	adds	r3, r0, #1
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	bf15      	itete	ne
 80083bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083c6:	81a3      	strheq	r3, [r4, #12]
 80083c8:	bf18      	it	ne
 80083ca:	81a3      	strhne	r3, [r4, #12]
 80083cc:	bd10      	pop	{r4, pc}

080083ce <__sclose>:
 80083ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d2:	f000 b8a1 	b.w	8008518 <_close_r>

080083d6 <__swbuf_r>:
 80083d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d8:	460e      	mov	r6, r1
 80083da:	4614      	mov	r4, r2
 80083dc:	4605      	mov	r5, r0
 80083de:	b118      	cbz	r0, 80083e8 <__swbuf_r+0x12>
 80083e0:	6a03      	ldr	r3, [r0, #32]
 80083e2:	b90b      	cbnz	r3, 80083e8 <__swbuf_r+0x12>
 80083e4:	f7ff feec 	bl	80081c0 <__sinit>
 80083e8:	69a3      	ldr	r3, [r4, #24]
 80083ea:	60a3      	str	r3, [r4, #8]
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	071a      	lsls	r2, r3, #28
 80083f0:	d501      	bpl.n	80083f6 <__swbuf_r+0x20>
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	b943      	cbnz	r3, 8008408 <__swbuf_r+0x32>
 80083f6:	4621      	mov	r1, r4
 80083f8:	4628      	mov	r0, r5
 80083fa:	f000 f82b 	bl	8008454 <__swsetup_r>
 80083fe:	b118      	cbz	r0, 8008408 <__swbuf_r+0x32>
 8008400:	f04f 37ff 	mov.w	r7, #4294967295
 8008404:	4638      	mov	r0, r7
 8008406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	6922      	ldr	r2, [r4, #16]
 800840c:	1a98      	subs	r0, r3, r2
 800840e:	6963      	ldr	r3, [r4, #20]
 8008410:	b2f6      	uxtb	r6, r6
 8008412:	4283      	cmp	r3, r0
 8008414:	4637      	mov	r7, r6
 8008416:	dc05      	bgt.n	8008424 <__swbuf_r+0x4e>
 8008418:	4621      	mov	r1, r4
 800841a:	4628      	mov	r0, r5
 800841c:	f002 fe20 	bl	800b060 <_fflush_r>
 8008420:	2800      	cmp	r0, #0
 8008422:	d1ed      	bne.n	8008400 <__swbuf_r+0x2a>
 8008424:	68a3      	ldr	r3, [r4, #8]
 8008426:	3b01      	subs	r3, #1
 8008428:	60a3      	str	r3, [r4, #8]
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	6022      	str	r2, [r4, #0]
 8008430:	701e      	strb	r6, [r3, #0]
 8008432:	6962      	ldr	r2, [r4, #20]
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	429a      	cmp	r2, r3
 8008438:	d004      	beq.n	8008444 <__swbuf_r+0x6e>
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	07db      	lsls	r3, r3, #31
 800843e:	d5e1      	bpl.n	8008404 <__swbuf_r+0x2e>
 8008440:	2e0a      	cmp	r6, #10
 8008442:	d1df      	bne.n	8008404 <__swbuf_r+0x2e>
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f002 fe0a 	bl	800b060 <_fflush_r>
 800844c:	2800      	cmp	r0, #0
 800844e:	d0d9      	beq.n	8008404 <__swbuf_r+0x2e>
 8008450:	e7d6      	b.n	8008400 <__swbuf_r+0x2a>
	...

08008454 <__swsetup_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	4b29      	ldr	r3, [pc, #164]	@ (80084fc <__swsetup_r+0xa8>)
 8008458:	4605      	mov	r5, r0
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	460c      	mov	r4, r1
 800845e:	b118      	cbz	r0, 8008468 <__swsetup_r+0x14>
 8008460:	6a03      	ldr	r3, [r0, #32]
 8008462:	b90b      	cbnz	r3, 8008468 <__swsetup_r+0x14>
 8008464:	f7ff feac 	bl	80081c0 <__sinit>
 8008468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846c:	0719      	lsls	r1, r3, #28
 800846e:	d422      	bmi.n	80084b6 <__swsetup_r+0x62>
 8008470:	06da      	lsls	r2, r3, #27
 8008472:	d407      	bmi.n	8008484 <__swsetup_r+0x30>
 8008474:	2209      	movs	r2, #9
 8008476:	602a      	str	r2, [r5, #0]
 8008478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	f04f 30ff 	mov.w	r0, #4294967295
 8008482:	e033      	b.n	80084ec <__swsetup_r+0x98>
 8008484:	0758      	lsls	r0, r3, #29
 8008486:	d512      	bpl.n	80084ae <__swsetup_r+0x5a>
 8008488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800848a:	b141      	cbz	r1, 800849e <__swsetup_r+0x4a>
 800848c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008490:	4299      	cmp	r1, r3
 8008492:	d002      	beq.n	800849a <__swsetup_r+0x46>
 8008494:	4628      	mov	r0, r5
 8008496:	f000 ff13 	bl	80092c0 <_free_r>
 800849a:	2300      	movs	r3, #0
 800849c:	6363      	str	r3, [r4, #52]	@ 0x34
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	2300      	movs	r3, #0
 80084a8:	6063      	str	r3, [r4, #4]
 80084aa:	6923      	ldr	r3, [r4, #16]
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	f043 0308 	orr.w	r3, r3, #8
 80084b4:	81a3      	strh	r3, [r4, #12]
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	b94b      	cbnz	r3, 80084ce <__swsetup_r+0x7a>
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084c4:	d003      	beq.n	80084ce <__swsetup_r+0x7a>
 80084c6:	4621      	mov	r1, r4
 80084c8:	4628      	mov	r0, r5
 80084ca:	f002 fe17 	bl	800b0fc <__smakebuf_r>
 80084ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d2:	f013 0201 	ands.w	r2, r3, #1
 80084d6:	d00a      	beq.n	80084ee <__swsetup_r+0x9a>
 80084d8:	2200      	movs	r2, #0
 80084da:	60a2      	str	r2, [r4, #8]
 80084dc:	6962      	ldr	r2, [r4, #20]
 80084de:	4252      	negs	r2, r2
 80084e0:	61a2      	str	r2, [r4, #24]
 80084e2:	6922      	ldr	r2, [r4, #16]
 80084e4:	b942      	cbnz	r2, 80084f8 <__swsetup_r+0xa4>
 80084e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80084ea:	d1c5      	bne.n	8008478 <__swsetup_r+0x24>
 80084ec:	bd38      	pop	{r3, r4, r5, pc}
 80084ee:	0799      	lsls	r1, r3, #30
 80084f0:	bf58      	it	pl
 80084f2:	6962      	ldrpl	r2, [r4, #20]
 80084f4:	60a2      	str	r2, [r4, #8]
 80084f6:	e7f4      	b.n	80084e2 <__swsetup_r+0x8e>
 80084f8:	2000      	movs	r0, #0
 80084fa:	e7f7      	b.n	80084ec <__swsetup_r+0x98>
 80084fc:	20000064 	.word	0x20000064

08008500 <memset>:
 8008500:	4402      	add	r2, r0
 8008502:	4603      	mov	r3, r0
 8008504:	4293      	cmp	r3, r2
 8008506:	d100      	bne.n	800850a <memset+0xa>
 8008508:	4770      	bx	lr
 800850a:	f803 1b01 	strb.w	r1, [r3], #1
 800850e:	e7f9      	b.n	8008504 <memset+0x4>

08008510 <_localeconv_r>:
 8008510:	4800      	ldr	r0, [pc, #0]	@ (8008514 <_localeconv_r+0x4>)
 8008512:	4770      	bx	lr
 8008514:	200001a4 	.word	0x200001a4

08008518 <_close_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4d06      	ldr	r5, [pc, #24]	@ (8008534 <_close_r+0x1c>)
 800851c:	2300      	movs	r3, #0
 800851e:	4604      	mov	r4, r0
 8008520:	4608      	mov	r0, r1
 8008522:	602b      	str	r3, [r5, #0]
 8008524:	f7fa fa06 	bl	8002934 <_close>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_close_r+0x1a>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_close_r+0x1a>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	200007a4 	.word	0x200007a4

08008538 <_lseek_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d07      	ldr	r5, [pc, #28]	@ (8008558 <_lseek_r+0x20>)
 800853c:	4604      	mov	r4, r0
 800853e:	4608      	mov	r0, r1
 8008540:	4611      	mov	r1, r2
 8008542:	2200      	movs	r2, #0
 8008544:	602a      	str	r2, [r5, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	f7fa fa1b 	bl	8002982 <_lseek>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	d102      	bne.n	8008556 <_lseek_r+0x1e>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	b103      	cbz	r3, 8008556 <_lseek_r+0x1e>
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	200007a4 	.word	0x200007a4

0800855c <_read_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d07      	ldr	r5, [pc, #28]	@ (800857c <_read_r+0x20>)
 8008560:	4604      	mov	r4, r0
 8008562:	4608      	mov	r0, r1
 8008564:	4611      	mov	r1, r2
 8008566:	2200      	movs	r2, #0
 8008568:	602a      	str	r2, [r5, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	f7fa f9a9 	bl	80028c2 <_read>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d102      	bne.n	800857a <_read_r+0x1e>
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	b103      	cbz	r3, 800857a <_read_r+0x1e>
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	200007a4 	.word	0x200007a4

08008580 <_write_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4d07      	ldr	r5, [pc, #28]	@ (80085a0 <_write_r+0x20>)
 8008584:	4604      	mov	r4, r0
 8008586:	4608      	mov	r0, r1
 8008588:	4611      	mov	r1, r2
 800858a:	2200      	movs	r2, #0
 800858c:	602a      	str	r2, [r5, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	f7fa f9b4 	bl	80028fc <_write>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	d102      	bne.n	800859e <_write_r+0x1e>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	b103      	cbz	r3, 800859e <_write_r+0x1e>
 800859c:	6023      	str	r3, [r4, #0]
 800859e:	bd38      	pop	{r3, r4, r5, pc}
 80085a0:	200007a4 	.word	0x200007a4

080085a4 <__errno>:
 80085a4:	4b01      	ldr	r3, [pc, #4]	@ (80085ac <__errno+0x8>)
 80085a6:	6818      	ldr	r0, [r3, #0]
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	20000064 	.word	0x20000064

080085b0 <__libc_init_array>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	4d0d      	ldr	r5, [pc, #52]	@ (80085e8 <__libc_init_array+0x38>)
 80085b4:	4c0d      	ldr	r4, [pc, #52]	@ (80085ec <__libc_init_array+0x3c>)
 80085b6:	1b64      	subs	r4, r4, r5
 80085b8:	10a4      	asrs	r4, r4, #2
 80085ba:	2600      	movs	r6, #0
 80085bc:	42a6      	cmp	r6, r4
 80085be:	d109      	bne.n	80085d4 <__libc_init_array+0x24>
 80085c0:	4d0b      	ldr	r5, [pc, #44]	@ (80085f0 <__libc_init_array+0x40>)
 80085c2:	4c0c      	ldr	r4, [pc, #48]	@ (80085f4 <__libc_init_array+0x44>)
 80085c4:	f003 fa6a 	bl	800ba9c <_init>
 80085c8:	1b64      	subs	r4, r4, r5
 80085ca:	10a4      	asrs	r4, r4, #2
 80085cc:	2600      	movs	r6, #0
 80085ce:	42a6      	cmp	r6, r4
 80085d0:	d105      	bne.n	80085de <__libc_init_array+0x2e>
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
 80085d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d8:	4798      	blx	r3
 80085da:	3601      	adds	r6, #1
 80085dc:	e7ee      	b.n	80085bc <__libc_init_array+0xc>
 80085de:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e2:	4798      	blx	r3
 80085e4:	3601      	adds	r6, #1
 80085e6:	e7f2      	b.n	80085ce <__libc_init_array+0x1e>
 80085e8:	0800c168 	.word	0x0800c168
 80085ec:	0800c168 	.word	0x0800c168
 80085f0:	0800c168 	.word	0x0800c168
 80085f4:	0800c16c 	.word	0x0800c16c

080085f8 <__retarget_lock_init_recursive>:
 80085f8:	4770      	bx	lr

080085fa <__retarget_lock_acquire_recursive>:
 80085fa:	4770      	bx	lr

080085fc <__retarget_lock_release_recursive>:
 80085fc:	4770      	bx	lr
	...

08008600 <nanf>:
 8008600:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008608 <nanf+0x8>
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	7fc00000 	.word	0x7fc00000

0800860c <quorem>:
 800860c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008610:	6903      	ldr	r3, [r0, #16]
 8008612:	690c      	ldr	r4, [r1, #16]
 8008614:	42a3      	cmp	r3, r4
 8008616:	4607      	mov	r7, r0
 8008618:	db7e      	blt.n	8008718 <quorem+0x10c>
 800861a:	3c01      	subs	r4, #1
 800861c:	f101 0814 	add.w	r8, r1, #20
 8008620:	00a3      	lsls	r3, r4, #2
 8008622:	f100 0514 	add.w	r5, r0, #20
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008636:	3301      	adds	r3, #1
 8008638:	429a      	cmp	r2, r3
 800863a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800863e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008642:	d32e      	bcc.n	80086a2 <quorem+0x96>
 8008644:	f04f 0a00 	mov.w	sl, #0
 8008648:	46c4      	mov	ip, r8
 800864a:	46ae      	mov	lr, r5
 800864c:	46d3      	mov	fp, sl
 800864e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008652:	b298      	uxth	r0, r3
 8008654:	fb06 a000 	mla	r0, r6, r0, sl
 8008658:	0c02      	lsrs	r2, r0, #16
 800865a:	0c1b      	lsrs	r3, r3, #16
 800865c:	fb06 2303 	mla	r3, r6, r3, r2
 8008660:	f8de 2000 	ldr.w	r2, [lr]
 8008664:	b280      	uxth	r0, r0
 8008666:	b292      	uxth	r2, r2
 8008668:	1a12      	subs	r2, r2, r0
 800866a:	445a      	add	r2, fp
 800866c:	f8de 0000 	ldr.w	r0, [lr]
 8008670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008674:	b29b      	uxth	r3, r3
 8008676:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800867a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800867e:	b292      	uxth	r2, r2
 8008680:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008684:	45e1      	cmp	r9, ip
 8008686:	f84e 2b04 	str.w	r2, [lr], #4
 800868a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800868e:	d2de      	bcs.n	800864e <quorem+0x42>
 8008690:	9b00      	ldr	r3, [sp, #0]
 8008692:	58eb      	ldr	r3, [r5, r3]
 8008694:	b92b      	cbnz	r3, 80086a2 <quorem+0x96>
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	3b04      	subs	r3, #4
 800869a:	429d      	cmp	r5, r3
 800869c:	461a      	mov	r2, r3
 800869e:	d32f      	bcc.n	8008700 <quorem+0xf4>
 80086a0:	613c      	str	r4, [r7, #16]
 80086a2:	4638      	mov	r0, r7
 80086a4:	f001 f9c8 	bl	8009a38 <__mcmp>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	db25      	blt.n	80086f8 <quorem+0xec>
 80086ac:	4629      	mov	r1, r5
 80086ae:	2000      	movs	r0, #0
 80086b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80086b4:	f8d1 c000 	ldr.w	ip, [r1]
 80086b8:	fa1f fe82 	uxth.w	lr, r2
 80086bc:	fa1f f38c 	uxth.w	r3, ip
 80086c0:	eba3 030e 	sub.w	r3, r3, lr
 80086c4:	4403      	add	r3, r0
 80086c6:	0c12      	lsrs	r2, r2, #16
 80086c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80086cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086d6:	45c1      	cmp	r9, r8
 80086d8:	f841 3b04 	str.w	r3, [r1], #4
 80086dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80086e0:	d2e6      	bcs.n	80086b0 <quorem+0xa4>
 80086e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086ea:	b922      	cbnz	r2, 80086f6 <quorem+0xea>
 80086ec:	3b04      	subs	r3, #4
 80086ee:	429d      	cmp	r5, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	d30b      	bcc.n	800870c <quorem+0x100>
 80086f4:	613c      	str	r4, [r7, #16]
 80086f6:	3601      	adds	r6, #1
 80086f8:	4630      	mov	r0, r6
 80086fa:	b003      	add	sp, #12
 80086fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008700:	6812      	ldr	r2, [r2, #0]
 8008702:	3b04      	subs	r3, #4
 8008704:	2a00      	cmp	r2, #0
 8008706:	d1cb      	bne.n	80086a0 <quorem+0x94>
 8008708:	3c01      	subs	r4, #1
 800870a:	e7c6      	b.n	800869a <quorem+0x8e>
 800870c:	6812      	ldr	r2, [r2, #0]
 800870e:	3b04      	subs	r3, #4
 8008710:	2a00      	cmp	r2, #0
 8008712:	d1ef      	bne.n	80086f4 <quorem+0xe8>
 8008714:	3c01      	subs	r4, #1
 8008716:	e7ea      	b.n	80086ee <quorem+0xe2>
 8008718:	2000      	movs	r0, #0
 800871a:	e7ee      	b.n	80086fa <quorem+0xee>
 800871c:	0000      	movs	r0, r0
	...

08008720 <_dtoa_r>:
 8008720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008724:	69c7      	ldr	r7, [r0, #28]
 8008726:	b097      	sub	sp, #92	@ 0x5c
 8008728:	ed8d 0b04 	vstr	d0, [sp, #16]
 800872c:	ec55 4b10 	vmov	r4, r5, d0
 8008730:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008732:	9107      	str	r1, [sp, #28]
 8008734:	4681      	mov	r9, r0
 8008736:	920c      	str	r2, [sp, #48]	@ 0x30
 8008738:	9311      	str	r3, [sp, #68]	@ 0x44
 800873a:	b97f      	cbnz	r7, 800875c <_dtoa_r+0x3c>
 800873c:	2010      	movs	r0, #16
 800873e:	f000 fe09 	bl	8009354 <malloc>
 8008742:	4602      	mov	r2, r0
 8008744:	f8c9 001c 	str.w	r0, [r9, #28]
 8008748:	b920      	cbnz	r0, 8008754 <_dtoa_r+0x34>
 800874a:	4ba9      	ldr	r3, [pc, #676]	@ (80089f0 <_dtoa_r+0x2d0>)
 800874c:	21ef      	movs	r1, #239	@ 0xef
 800874e:	48a9      	ldr	r0, [pc, #676]	@ (80089f4 <_dtoa_r+0x2d4>)
 8008750:	f002 fd86 	bl	800b260 <__assert_func>
 8008754:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008758:	6007      	str	r7, [r0, #0]
 800875a:	60c7      	str	r7, [r0, #12]
 800875c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008760:	6819      	ldr	r1, [r3, #0]
 8008762:	b159      	cbz	r1, 800877c <_dtoa_r+0x5c>
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	604a      	str	r2, [r1, #4]
 8008768:	2301      	movs	r3, #1
 800876a:	4093      	lsls	r3, r2
 800876c:	608b      	str	r3, [r1, #8]
 800876e:	4648      	mov	r0, r9
 8008770:	f000 fee6 	bl	8009540 <_Bfree>
 8008774:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	1e2b      	subs	r3, r5, #0
 800877e:	bfb9      	ittee	lt
 8008780:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008784:	9305      	strlt	r3, [sp, #20]
 8008786:	2300      	movge	r3, #0
 8008788:	6033      	strge	r3, [r6, #0]
 800878a:	9f05      	ldr	r7, [sp, #20]
 800878c:	4b9a      	ldr	r3, [pc, #616]	@ (80089f8 <_dtoa_r+0x2d8>)
 800878e:	bfbc      	itt	lt
 8008790:	2201      	movlt	r2, #1
 8008792:	6032      	strlt	r2, [r6, #0]
 8008794:	43bb      	bics	r3, r7
 8008796:	d112      	bne.n	80087be <_dtoa_r+0x9e>
 8008798:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800879a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087a4:	4323      	orrs	r3, r4
 80087a6:	f000 855a 	beq.w	800925e <_dtoa_r+0xb3e>
 80087aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008a0c <_dtoa_r+0x2ec>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 855c 	beq.w	800926e <_dtoa_r+0xb4e>
 80087b6:	f10a 0303 	add.w	r3, sl, #3
 80087ba:	f000 bd56 	b.w	800926a <_dtoa_r+0xb4a>
 80087be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80087c2:	2200      	movs	r2, #0
 80087c4:	ec51 0b17 	vmov	r0, r1, d7
 80087c8:	2300      	movs	r3, #0
 80087ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80087ce:	f7f8 f9ab 	bl	8000b28 <__aeabi_dcmpeq>
 80087d2:	4680      	mov	r8, r0
 80087d4:	b158      	cbz	r0, 80087ee <_dtoa_r+0xce>
 80087d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80087d8:	2301      	movs	r3, #1
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087de:	b113      	cbz	r3, 80087e6 <_dtoa_r+0xc6>
 80087e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80087e2:	4b86      	ldr	r3, [pc, #536]	@ (80089fc <_dtoa_r+0x2dc>)
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008a10 <_dtoa_r+0x2f0>
 80087ea:	f000 bd40 	b.w	800926e <_dtoa_r+0xb4e>
 80087ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80087f2:	aa14      	add	r2, sp, #80	@ 0x50
 80087f4:	a915      	add	r1, sp, #84	@ 0x54
 80087f6:	4648      	mov	r0, r9
 80087f8:	f001 fa3e 	bl	8009c78 <__d2b>
 80087fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008800:	9002      	str	r0, [sp, #8]
 8008802:	2e00      	cmp	r6, #0
 8008804:	d078      	beq.n	80088f8 <_dtoa_r+0x1d8>
 8008806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008808:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800880c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008810:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008814:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008818:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800881c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008820:	4619      	mov	r1, r3
 8008822:	2200      	movs	r2, #0
 8008824:	4b76      	ldr	r3, [pc, #472]	@ (8008a00 <_dtoa_r+0x2e0>)
 8008826:	f7f7 fd5f 	bl	80002e8 <__aeabi_dsub>
 800882a:	a36b      	add	r3, pc, #428	@ (adr r3, 80089d8 <_dtoa_r+0x2b8>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f7f7 ff12 	bl	8000658 <__aeabi_dmul>
 8008834:	a36a      	add	r3, pc, #424	@ (adr r3, 80089e0 <_dtoa_r+0x2c0>)
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fd57 	bl	80002ec <__adddf3>
 800883e:	4604      	mov	r4, r0
 8008840:	4630      	mov	r0, r6
 8008842:	460d      	mov	r5, r1
 8008844:	f7f7 fe9e 	bl	8000584 <__aeabi_i2d>
 8008848:	a367      	add	r3, pc, #412	@ (adr r3, 80089e8 <_dtoa_r+0x2c8>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	f7f7 ff03 	bl	8000658 <__aeabi_dmul>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4620      	mov	r0, r4
 8008858:	4629      	mov	r1, r5
 800885a:	f7f7 fd47 	bl	80002ec <__adddf3>
 800885e:	4604      	mov	r4, r0
 8008860:	460d      	mov	r5, r1
 8008862:	f7f8 f9a9 	bl	8000bb8 <__aeabi_d2iz>
 8008866:	2200      	movs	r2, #0
 8008868:	4607      	mov	r7, r0
 800886a:	2300      	movs	r3, #0
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f7f8 f964 	bl	8000b3c <__aeabi_dcmplt>
 8008874:	b140      	cbz	r0, 8008888 <_dtoa_r+0x168>
 8008876:	4638      	mov	r0, r7
 8008878:	f7f7 fe84 	bl	8000584 <__aeabi_i2d>
 800887c:	4622      	mov	r2, r4
 800887e:	462b      	mov	r3, r5
 8008880:	f7f8 f952 	bl	8000b28 <__aeabi_dcmpeq>
 8008884:	b900      	cbnz	r0, 8008888 <_dtoa_r+0x168>
 8008886:	3f01      	subs	r7, #1
 8008888:	2f16      	cmp	r7, #22
 800888a:	d852      	bhi.n	8008932 <_dtoa_r+0x212>
 800888c:	4b5d      	ldr	r3, [pc, #372]	@ (8008a04 <_dtoa_r+0x2e4>)
 800888e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800889a:	f7f8 f94f 	bl	8000b3c <__aeabi_dcmplt>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d049      	beq.n	8008936 <_dtoa_r+0x216>
 80088a2:	3f01      	subs	r7, #1
 80088a4:	2300      	movs	r3, #0
 80088a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80088a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088aa:	1b9b      	subs	r3, r3, r6
 80088ac:	1e5a      	subs	r2, r3, #1
 80088ae:	bf45      	ittet	mi
 80088b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80088b4:	9300      	strmi	r3, [sp, #0]
 80088b6:	2300      	movpl	r3, #0
 80088b8:	2300      	movmi	r3, #0
 80088ba:	9206      	str	r2, [sp, #24]
 80088bc:	bf54      	ite	pl
 80088be:	9300      	strpl	r3, [sp, #0]
 80088c0:	9306      	strmi	r3, [sp, #24]
 80088c2:	2f00      	cmp	r7, #0
 80088c4:	db39      	blt.n	800893a <_dtoa_r+0x21a>
 80088c6:	9b06      	ldr	r3, [sp, #24]
 80088c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80088ca:	443b      	add	r3, r7
 80088cc:	9306      	str	r3, [sp, #24]
 80088ce:	2300      	movs	r3, #0
 80088d0:	9308      	str	r3, [sp, #32]
 80088d2:	9b07      	ldr	r3, [sp, #28]
 80088d4:	2b09      	cmp	r3, #9
 80088d6:	d863      	bhi.n	80089a0 <_dtoa_r+0x280>
 80088d8:	2b05      	cmp	r3, #5
 80088da:	bfc4      	itt	gt
 80088dc:	3b04      	subgt	r3, #4
 80088de:	9307      	strgt	r3, [sp, #28]
 80088e0:	9b07      	ldr	r3, [sp, #28]
 80088e2:	f1a3 0302 	sub.w	r3, r3, #2
 80088e6:	bfcc      	ite	gt
 80088e8:	2400      	movgt	r4, #0
 80088ea:	2401      	movle	r4, #1
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d863      	bhi.n	80089b8 <_dtoa_r+0x298>
 80088f0:	e8df f003 	tbb	[pc, r3]
 80088f4:	2b375452 	.word	0x2b375452
 80088f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80088fc:	441e      	add	r6, r3
 80088fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008902:	2b20      	cmp	r3, #32
 8008904:	bfc1      	itttt	gt
 8008906:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800890a:	409f      	lslgt	r7, r3
 800890c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008910:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008914:	bfd6      	itet	le
 8008916:	f1c3 0320 	rsble	r3, r3, #32
 800891a:	ea47 0003 	orrgt.w	r0, r7, r3
 800891e:	fa04 f003 	lslle.w	r0, r4, r3
 8008922:	f7f7 fe1f 	bl	8000564 <__aeabi_ui2d>
 8008926:	2201      	movs	r2, #1
 8008928:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800892c:	3e01      	subs	r6, #1
 800892e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008930:	e776      	b.n	8008820 <_dtoa_r+0x100>
 8008932:	2301      	movs	r3, #1
 8008934:	e7b7      	b.n	80088a6 <_dtoa_r+0x186>
 8008936:	9010      	str	r0, [sp, #64]	@ 0x40
 8008938:	e7b6      	b.n	80088a8 <_dtoa_r+0x188>
 800893a:	9b00      	ldr	r3, [sp, #0]
 800893c:	1bdb      	subs	r3, r3, r7
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	427b      	negs	r3, r7
 8008942:	9308      	str	r3, [sp, #32]
 8008944:	2300      	movs	r3, #0
 8008946:	930d      	str	r3, [sp, #52]	@ 0x34
 8008948:	e7c3      	b.n	80088d2 <_dtoa_r+0x1b2>
 800894a:	2301      	movs	r3, #1
 800894c:	9309      	str	r3, [sp, #36]	@ 0x24
 800894e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008950:	eb07 0b03 	add.w	fp, r7, r3
 8008954:	f10b 0301 	add.w	r3, fp, #1
 8008958:	2b01      	cmp	r3, #1
 800895a:	9303      	str	r3, [sp, #12]
 800895c:	bfb8      	it	lt
 800895e:	2301      	movlt	r3, #1
 8008960:	e006      	b.n	8008970 <_dtoa_r+0x250>
 8008962:	2301      	movs	r3, #1
 8008964:	9309      	str	r3, [sp, #36]	@ 0x24
 8008966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008968:	2b00      	cmp	r3, #0
 800896a:	dd28      	ble.n	80089be <_dtoa_r+0x29e>
 800896c:	469b      	mov	fp, r3
 800896e:	9303      	str	r3, [sp, #12]
 8008970:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008974:	2100      	movs	r1, #0
 8008976:	2204      	movs	r2, #4
 8008978:	f102 0514 	add.w	r5, r2, #20
 800897c:	429d      	cmp	r5, r3
 800897e:	d926      	bls.n	80089ce <_dtoa_r+0x2ae>
 8008980:	6041      	str	r1, [r0, #4]
 8008982:	4648      	mov	r0, r9
 8008984:	f000 fd9c 	bl	80094c0 <_Balloc>
 8008988:	4682      	mov	sl, r0
 800898a:	2800      	cmp	r0, #0
 800898c:	d142      	bne.n	8008a14 <_dtoa_r+0x2f4>
 800898e:	4b1e      	ldr	r3, [pc, #120]	@ (8008a08 <_dtoa_r+0x2e8>)
 8008990:	4602      	mov	r2, r0
 8008992:	f240 11af 	movw	r1, #431	@ 0x1af
 8008996:	e6da      	b.n	800874e <_dtoa_r+0x2e>
 8008998:	2300      	movs	r3, #0
 800899a:	e7e3      	b.n	8008964 <_dtoa_r+0x244>
 800899c:	2300      	movs	r3, #0
 800899e:	e7d5      	b.n	800894c <_dtoa_r+0x22c>
 80089a0:	2401      	movs	r4, #1
 80089a2:	2300      	movs	r3, #0
 80089a4:	9307      	str	r3, [sp, #28]
 80089a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80089a8:	f04f 3bff 	mov.w	fp, #4294967295
 80089ac:	2200      	movs	r2, #0
 80089ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80089b2:	2312      	movs	r3, #18
 80089b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80089b6:	e7db      	b.n	8008970 <_dtoa_r+0x250>
 80089b8:	2301      	movs	r3, #1
 80089ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80089bc:	e7f4      	b.n	80089a8 <_dtoa_r+0x288>
 80089be:	f04f 0b01 	mov.w	fp, #1
 80089c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80089c6:	465b      	mov	r3, fp
 80089c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80089cc:	e7d0      	b.n	8008970 <_dtoa_r+0x250>
 80089ce:	3101      	adds	r1, #1
 80089d0:	0052      	lsls	r2, r2, #1
 80089d2:	e7d1      	b.n	8008978 <_dtoa_r+0x258>
 80089d4:	f3af 8000 	nop.w
 80089d8:	636f4361 	.word	0x636f4361
 80089dc:	3fd287a7 	.word	0x3fd287a7
 80089e0:	8b60c8b3 	.word	0x8b60c8b3
 80089e4:	3fc68a28 	.word	0x3fc68a28
 80089e8:	509f79fb 	.word	0x509f79fb
 80089ec:	3fd34413 	.word	0x3fd34413
 80089f0:	0800be83 	.word	0x0800be83
 80089f4:	0800be9a 	.word	0x0800be9a
 80089f8:	7ff00000 	.word	0x7ff00000
 80089fc:	0800be4e 	.word	0x0800be4e
 8008a00:	3ff80000 	.word	0x3ff80000
 8008a04:	0800c048 	.word	0x0800c048
 8008a08:	0800bef2 	.word	0x0800bef2
 8008a0c:	0800be7f 	.word	0x0800be7f
 8008a10:	0800be4d 	.word	0x0800be4d
 8008a14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008a18:	6018      	str	r0, [r3, #0]
 8008a1a:	9b03      	ldr	r3, [sp, #12]
 8008a1c:	2b0e      	cmp	r3, #14
 8008a1e:	f200 80a1 	bhi.w	8008b64 <_dtoa_r+0x444>
 8008a22:	2c00      	cmp	r4, #0
 8008a24:	f000 809e 	beq.w	8008b64 <_dtoa_r+0x444>
 8008a28:	2f00      	cmp	r7, #0
 8008a2a:	dd33      	ble.n	8008a94 <_dtoa_r+0x374>
 8008a2c:	4b9c      	ldr	r3, [pc, #624]	@ (8008ca0 <_dtoa_r+0x580>)
 8008a2e:	f007 020f 	and.w	r2, r7, #15
 8008a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a36:	ed93 7b00 	vldr	d7, [r3]
 8008a3a:	05f8      	lsls	r0, r7, #23
 8008a3c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008a40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008a44:	d516      	bpl.n	8008a74 <_dtoa_r+0x354>
 8008a46:	4b97      	ldr	r3, [pc, #604]	@ (8008ca4 <_dtoa_r+0x584>)
 8008a48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a50:	f7f7 ff2c 	bl	80008ac <__aeabi_ddiv>
 8008a54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a58:	f004 040f 	and.w	r4, r4, #15
 8008a5c:	2603      	movs	r6, #3
 8008a5e:	4d91      	ldr	r5, [pc, #580]	@ (8008ca4 <_dtoa_r+0x584>)
 8008a60:	b954      	cbnz	r4, 8008a78 <_dtoa_r+0x358>
 8008a62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a6a:	f7f7 ff1f 	bl	80008ac <__aeabi_ddiv>
 8008a6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a72:	e028      	b.n	8008ac6 <_dtoa_r+0x3a6>
 8008a74:	2602      	movs	r6, #2
 8008a76:	e7f2      	b.n	8008a5e <_dtoa_r+0x33e>
 8008a78:	07e1      	lsls	r1, r4, #31
 8008a7a:	d508      	bpl.n	8008a8e <_dtoa_r+0x36e>
 8008a7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a84:	f7f7 fde8 	bl	8000658 <__aeabi_dmul>
 8008a88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a8c:	3601      	adds	r6, #1
 8008a8e:	1064      	asrs	r4, r4, #1
 8008a90:	3508      	adds	r5, #8
 8008a92:	e7e5      	b.n	8008a60 <_dtoa_r+0x340>
 8008a94:	f000 80af 	beq.w	8008bf6 <_dtoa_r+0x4d6>
 8008a98:	427c      	negs	r4, r7
 8008a9a:	4b81      	ldr	r3, [pc, #516]	@ (8008ca0 <_dtoa_r+0x580>)
 8008a9c:	4d81      	ldr	r5, [pc, #516]	@ (8008ca4 <_dtoa_r+0x584>)
 8008a9e:	f004 020f 	and.w	r2, r4, #15
 8008aa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008aae:	f7f7 fdd3 	bl	8000658 <__aeabi_dmul>
 8008ab2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ab6:	1124      	asrs	r4, r4, #4
 8008ab8:	2300      	movs	r3, #0
 8008aba:	2602      	movs	r6, #2
 8008abc:	2c00      	cmp	r4, #0
 8008abe:	f040 808f 	bne.w	8008be0 <_dtoa_r+0x4c0>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1d3      	bne.n	8008a6e <_dtoa_r+0x34e>
 8008ac6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ac8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 8094 	beq.w	8008bfa <_dtoa_r+0x4da>
 8008ad2:	4b75      	ldr	r3, [pc, #468]	@ (8008ca8 <_dtoa_r+0x588>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	f7f8 f82f 	bl	8000b3c <__aeabi_dcmplt>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	f000 808b 	beq.w	8008bfa <_dtoa_r+0x4da>
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 8087 	beq.w	8008bfa <_dtoa_r+0x4da>
 8008aec:	f1bb 0f00 	cmp.w	fp, #0
 8008af0:	dd34      	ble.n	8008b5c <_dtoa_r+0x43c>
 8008af2:	4620      	mov	r0, r4
 8008af4:	4b6d      	ldr	r3, [pc, #436]	@ (8008cac <_dtoa_r+0x58c>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	4629      	mov	r1, r5
 8008afa:	f7f7 fdad 	bl	8000658 <__aeabi_dmul>
 8008afe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b02:	f107 38ff 	add.w	r8, r7, #4294967295
 8008b06:	3601      	adds	r6, #1
 8008b08:	465c      	mov	r4, fp
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7f7 fd3a 	bl	8000584 <__aeabi_i2d>
 8008b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b14:	f7f7 fda0 	bl	8000658 <__aeabi_dmul>
 8008b18:	4b65      	ldr	r3, [pc, #404]	@ (8008cb0 <_dtoa_r+0x590>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f7f7 fbe6 	bl	80002ec <__adddf3>
 8008b20:	4605      	mov	r5, r0
 8008b22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008b26:	2c00      	cmp	r4, #0
 8008b28:	d16a      	bne.n	8008c00 <_dtoa_r+0x4e0>
 8008b2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b2e:	4b61      	ldr	r3, [pc, #388]	@ (8008cb4 <_dtoa_r+0x594>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	f7f7 fbd9 	bl	80002e8 <__aeabi_dsub>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b3e:	462a      	mov	r2, r5
 8008b40:	4633      	mov	r3, r6
 8008b42:	f7f8 f819 	bl	8000b78 <__aeabi_dcmpgt>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f040 8298 	bne.w	800907c <_dtoa_r+0x95c>
 8008b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b50:	462a      	mov	r2, r5
 8008b52:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008b56:	f7f7 fff1 	bl	8000b3c <__aeabi_dcmplt>
 8008b5a:	bb38      	cbnz	r0, 8008bac <_dtoa_r+0x48c>
 8008b5c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008b60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008b64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f2c0 8157 	blt.w	8008e1a <_dtoa_r+0x6fa>
 8008b6c:	2f0e      	cmp	r7, #14
 8008b6e:	f300 8154 	bgt.w	8008e1a <_dtoa_r+0x6fa>
 8008b72:	4b4b      	ldr	r3, [pc, #300]	@ (8008ca0 <_dtoa_r+0x580>)
 8008b74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b78:	ed93 7b00 	vldr	d7, [r3]
 8008b7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	ed8d 7b00 	vstr	d7, [sp]
 8008b84:	f280 80e5 	bge.w	8008d52 <_dtoa_r+0x632>
 8008b88:	9b03      	ldr	r3, [sp, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f300 80e1 	bgt.w	8008d52 <_dtoa_r+0x632>
 8008b90:	d10c      	bne.n	8008bac <_dtoa_r+0x48c>
 8008b92:	4b48      	ldr	r3, [pc, #288]	@ (8008cb4 <_dtoa_r+0x594>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	ec51 0b17 	vmov	r0, r1, d7
 8008b9a:	f7f7 fd5d 	bl	8000658 <__aeabi_dmul>
 8008b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ba2:	f7f7 ffdf 	bl	8000b64 <__aeabi_dcmpge>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f000 8266 	beq.w	8009078 <_dtoa_r+0x958>
 8008bac:	2400      	movs	r4, #0
 8008bae:	4625      	mov	r5, r4
 8008bb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bb2:	4656      	mov	r6, sl
 8008bb4:	ea6f 0803 	mvn.w	r8, r3
 8008bb8:	2700      	movs	r7, #0
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4648      	mov	r0, r9
 8008bbe:	f000 fcbf 	bl	8009540 <_Bfree>
 8008bc2:	2d00      	cmp	r5, #0
 8008bc4:	f000 80bd 	beq.w	8008d42 <_dtoa_r+0x622>
 8008bc8:	b12f      	cbz	r7, 8008bd6 <_dtoa_r+0x4b6>
 8008bca:	42af      	cmp	r7, r5
 8008bcc:	d003      	beq.n	8008bd6 <_dtoa_r+0x4b6>
 8008bce:	4639      	mov	r1, r7
 8008bd0:	4648      	mov	r0, r9
 8008bd2:	f000 fcb5 	bl	8009540 <_Bfree>
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	4648      	mov	r0, r9
 8008bda:	f000 fcb1 	bl	8009540 <_Bfree>
 8008bde:	e0b0      	b.n	8008d42 <_dtoa_r+0x622>
 8008be0:	07e2      	lsls	r2, r4, #31
 8008be2:	d505      	bpl.n	8008bf0 <_dtoa_r+0x4d0>
 8008be4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008be8:	f7f7 fd36 	bl	8000658 <__aeabi_dmul>
 8008bec:	3601      	adds	r6, #1
 8008bee:	2301      	movs	r3, #1
 8008bf0:	1064      	asrs	r4, r4, #1
 8008bf2:	3508      	adds	r5, #8
 8008bf4:	e762      	b.n	8008abc <_dtoa_r+0x39c>
 8008bf6:	2602      	movs	r6, #2
 8008bf8:	e765      	b.n	8008ac6 <_dtoa_r+0x3a6>
 8008bfa:	9c03      	ldr	r4, [sp, #12]
 8008bfc:	46b8      	mov	r8, r7
 8008bfe:	e784      	b.n	8008b0a <_dtoa_r+0x3ea>
 8008c00:	4b27      	ldr	r3, [pc, #156]	@ (8008ca0 <_dtoa_r+0x580>)
 8008c02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c0c:	4454      	add	r4, sl
 8008c0e:	2900      	cmp	r1, #0
 8008c10:	d054      	beq.n	8008cbc <_dtoa_r+0x59c>
 8008c12:	4929      	ldr	r1, [pc, #164]	@ (8008cb8 <_dtoa_r+0x598>)
 8008c14:	2000      	movs	r0, #0
 8008c16:	f7f7 fe49 	bl	80008ac <__aeabi_ddiv>
 8008c1a:	4633      	mov	r3, r6
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	f7f7 fb63 	bl	80002e8 <__aeabi_dsub>
 8008c22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008c26:	4656      	mov	r6, sl
 8008c28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c2c:	f7f7 ffc4 	bl	8000bb8 <__aeabi_d2iz>
 8008c30:	4605      	mov	r5, r0
 8008c32:	f7f7 fca7 	bl	8000584 <__aeabi_i2d>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c3e:	f7f7 fb53 	bl	80002e8 <__aeabi_dsub>
 8008c42:	3530      	adds	r5, #48	@ 0x30
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c4c:	f806 5b01 	strb.w	r5, [r6], #1
 8008c50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c54:	f7f7 ff72 	bl	8000b3c <__aeabi_dcmplt>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d172      	bne.n	8008d42 <_dtoa_r+0x622>
 8008c5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c60:	4911      	ldr	r1, [pc, #68]	@ (8008ca8 <_dtoa_r+0x588>)
 8008c62:	2000      	movs	r0, #0
 8008c64:	f7f7 fb40 	bl	80002e8 <__aeabi_dsub>
 8008c68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c6c:	f7f7 ff66 	bl	8000b3c <__aeabi_dcmplt>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f040 80b4 	bne.w	8008dde <_dtoa_r+0x6be>
 8008c76:	42a6      	cmp	r6, r4
 8008c78:	f43f af70 	beq.w	8008b5c <_dtoa_r+0x43c>
 8008c7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008c80:	4b0a      	ldr	r3, [pc, #40]	@ (8008cac <_dtoa_r+0x58c>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	f7f7 fce8 	bl	8000658 <__aeabi_dmul>
 8008c88:	4b08      	ldr	r3, [pc, #32]	@ (8008cac <_dtoa_r+0x58c>)
 8008c8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008c8e:	2200      	movs	r2, #0
 8008c90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c94:	f7f7 fce0 	bl	8000658 <__aeabi_dmul>
 8008c98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c9c:	e7c4      	b.n	8008c28 <_dtoa_r+0x508>
 8008c9e:	bf00      	nop
 8008ca0:	0800c048 	.word	0x0800c048
 8008ca4:	0800c020 	.word	0x0800c020
 8008ca8:	3ff00000 	.word	0x3ff00000
 8008cac:	40240000 	.word	0x40240000
 8008cb0:	401c0000 	.word	0x401c0000
 8008cb4:	40140000 	.word	0x40140000
 8008cb8:	3fe00000 	.word	0x3fe00000
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f7f7 fcca 	bl	8000658 <__aeabi_dmul>
 8008cc4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008cc8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008cca:	4656      	mov	r6, sl
 8008ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cd0:	f7f7 ff72 	bl	8000bb8 <__aeabi_d2iz>
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	f7f7 fc55 	bl	8000584 <__aeabi_i2d>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ce2:	f7f7 fb01 	bl	80002e8 <__aeabi_dsub>
 8008ce6:	3530      	adds	r5, #48	@ 0x30
 8008ce8:	f806 5b01 	strb.w	r5, [r6], #1
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	42a6      	cmp	r6, r4
 8008cf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cf6:	f04f 0200 	mov.w	r2, #0
 8008cfa:	d124      	bne.n	8008d46 <_dtoa_r+0x626>
 8008cfc:	4baf      	ldr	r3, [pc, #700]	@ (8008fbc <_dtoa_r+0x89c>)
 8008cfe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008d02:	f7f7 faf3 	bl	80002ec <__adddf3>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d0e:	f7f7 ff33 	bl	8000b78 <__aeabi_dcmpgt>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d163      	bne.n	8008dde <_dtoa_r+0x6be>
 8008d16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d1a:	49a8      	ldr	r1, [pc, #672]	@ (8008fbc <_dtoa_r+0x89c>)
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	f7f7 fae3 	bl	80002e8 <__aeabi_dsub>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d2a:	f7f7 ff07 	bl	8000b3c <__aeabi_dcmplt>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	f43f af14 	beq.w	8008b5c <_dtoa_r+0x43c>
 8008d34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008d36:	1e73      	subs	r3, r6, #1
 8008d38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d3e:	2b30      	cmp	r3, #48	@ 0x30
 8008d40:	d0f8      	beq.n	8008d34 <_dtoa_r+0x614>
 8008d42:	4647      	mov	r7, r8
 8008d44:	e03b      	b.n	8008dbe <_dtoa_r+0x69e>
 8008d46:	4b9e      	ldr	r3, [pc, #632]	@ (8008fc0 <_dtoa_r+0x8a0>)
 8008d48:	f7f7 fc86 	bl	8000658 <__aeabi_dmul>
 8008d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d50:	e7bc      	b.n	8008ccc <_dtoa_r+0x5ac>
 8008d52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008d56:	4656      	mov	r6, sl
 8008d58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	4629      	mov	r1, r5
 8008d60:	f7f7 fda4 	bl	80008ac <__aeabi_ddiv>
 8008d64:	f7f7 ff28 	bl	8000bb8 <__aeabi_d2iz>
 8008d68:	4680      	mov	r8, r0
 8008d6a:	f7f7 fc0b 	bl	8000584 <__aeabi_i2d>
 8008d6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d72:	f7f7 fc71 	bl	8000658 <__aeabi_dmul>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d82:	f7f7 fab1 	bl	80002e8 <__aeabi_dsub>
 8008d86:	f806 4b01 	strb.w	r4, [r6], #1
 8008d8a:	9d03      	ldr	r5, [sp, #12]
 8008d8c:	eba6 040a 	sub.w	r4, r6, sl
 8008d90:	42a5      	cmp	r5, r4
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	d133      	bne.n	8008e00 <_dtoa_r+0x6e0>
 8008d98:	f7f7 faa8 	bl	80002ec <__adddf3>
 8008d9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008da0:	4604      	mov	r4, r0
 8008da2:	460d      	mov	r5, r1
 8008da4:	f7f7 fee8 	bl	8000b78 <__aeabi_dcmpgt>
 8008da8:	b9c0      	cbnz	r0, 8008ddc <_dtoa_r+0x6bc>
 8008daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dae:	4620      	mov	r0, r4
 8008db0:	4629      	mov	r1, r5
 8008db2:	f7f7 feb9 	bl	8000b28 <__aeabi_dcmpeq>
 8008db6:	b110      	cbz	r0, 8008dbe <_dtoa_r+0x69e>
 8008db8:	f018 0f01 	tst.w	r8, #1
 8008dbc:	d10e      	bne.n	8008ddc <_dtoa_r+0x6bc>
 8008dbe:	9902      	ldr	r1, [sp, #8]
 8008dc0:	4648      	mov	r0, r9
 8008dc2:	f000 fbbd 	bl	8009540 <_Bfree>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	7033      	strb	r3, [r6, #0]
 8008dca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008dcc:	3701      	adds	r7, #1
 8008dce:	601f      	str	r7, [r3, #0]
 8008dd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 824b 	beq.w	800926e <_dtoa_r+0xb4e>
 8008dd8:	601e      	str	r6, [r3, #0]
 8008dda:	e248      	b.n	800926e <_dtoa_r+0xb4e>
 8008ddc:	46b8      	mov	r8, r7
 8008dde:	4633      	mov	r3, r6
 8008de0:	461e      	mov	r6, r3
 8008de2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008de6:	2a39      	cmp	r2, #57	@ 0x39
 8008de8:	d106      	bne.n	8008df8 <_dtoa_r+0x6d8>
 8008dea:	459a      	cmp	sl, r3
 8008dec:	d1f8      	bne.n	8008de0 <_dtoa_r+0x6c0>
 8008dee:	2230      	movs	r2, #48	@ 0x30
 8008df0:	f108 0801 	add.w	r8, r8, #1
 8008df4:	f88a 2000 	strb.w	r2, [sl]
 8008df8:	781a      	ldrb	r2, [r3, #0]
 8008dfa:	3201      	adds	r2, #1
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	e7a0      	b.n	8008d42 <_dtoa_r+0x622>
 8008e00:	4b6f      	ldr	r3, [pc, #444]	@ (8008fc0 <_dtoa_r+0x8a0>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	f7f7 fc28 	bl	8000658 <__aeabi_dmul>
 8008e08:	2200      	movs	r2, #0
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	460d      	mov	r5, r1
 8008e10:	f7f7 fe8a 	bl	8000b28 <__aeabi_dcmpeq>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d09f      	beq.n	8008d58 <_dtoa_r+0x638>
 8008e18:	e7d1      	b.n	8008dbe <_dtoa_r+0x69e>
 8008e1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e1c:	2a00      	cmp	r2, #0
 8008e1e:	f000 80ea 	beq.w	8008ff6 <_dtoa_r+0x8d6>
 8008e22:	9a07      	ldr	r2, [sp, #28]
 8008e24:	2a01      	cmp	r2, #1
 8008e26:	f300 80cd 	bgt.w	8008fc4 <_dtoa_r+0x8a4>
 8008e2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008e2c:	2a00      	cmp	r2, #0
 8008e2e:	f000 80c1 	beq.w	8008fb4 <_dtoa_r+0x894>
 8008e32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008e36:	9c08      	ldr	r4, [sp, #32]
 8008e38:	9e00      	ldr	r6, [sp, #0]
 8008e3a:	9a00      	ldr	r2, [sp, #0]
 8008e3c:	441a      	add	r2, r3
 8008e3e:	9200      	str	r2, [sp, #0]
 8008e40:	9a06      	ldr	r2, [sp, #24]
 8008e42:	2101      	movs	r1, #1
 8008e44:	441a      	add	r2, r3
 8008e46:	4648      	mov	r0, r9
 8008e48:	9206      	str	r2, [sp, #24]
 8008e4a:	f000 fc77 	bl	800973c <__i2b>
 8008e4e:	4605      	mov	r5, r0
 8008e50:	b166      	cbz	r6, 8008e6c <_dtoa_r+0x74c>
 8008e52:	9b06      	ldr	r3, [sp, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	dd09      	ble.n	8008e6c <_dtoa_r+0x74c>
 8008e58:	42b3      	cmp	r3, r6
 8008e5a:	9a00      	ldr	r2, [sp, #0]
 8008e5c:	bfa8      	it	ge
 8008e5e:	4633      	movge	r3, r6
 8008e60:	1ad2      	subs	r2, r2, r3
 8008e62:	9200      	str	r2, [sp, #0]
 8008e64:	9a06      	ldr	r2, [sp, #24]
 8008e66:	1af6      	subs	r6, r6, r3
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	9306      	str	r3, [sp, #24]
 8008e6c:	9b08      	ldr	r3, [sp, #32]
 8008e6e:	b30b      	cbz	r3, 8008eb4 <_dtoa_r+0x794>
 8008e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 80c6 	beq.w	8009004 <_dtoa_r+0x8e4>
 8008e78:	2c00      	cmp	r4, #0
 8008e7a:	f000 80c0 	beq.w	8008ffe <_dtoa_r+0x8de>
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4622      	mov	r2, r4
 8008e82:	4648      	mov	r0, r9
 8008e84:	f000 fd12 	bl	80098ac <__pow5mult>
 8008e88:	9a02      	ldr	r2, [sp, #8]
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	4648      	mov	r0, r9
 8008e90:	f000 fc6a 	bl	8009768 <__multiply>
 8008e94:	9902      	ldr	r1, [sp, #8]
 8008e96:	4680      	mov	r8, r0
 8008e98:	4648      	mov	r0, r9
 8008e9a:	f000 fb51 	bl	8009540 <_Bfree>
 8008e9e:	9b08      	ldr	r3, [sp, #32]
 8008ea0:	1b1b      	subs	r3, r3, r4
 8008ea2:	9308      	str	r3, [sp, #32]
 8008ea4:	f000 80b1 	beq.w	800900a <_dtoa_r+0x8ea>
 8008ea8:	9a08      	ldr	r2, [sp, #32]
 8008eaa:	4641      	mov	r1, r8
 8008eac:	4648      	mov	r0, r9
 8008eae:	f000 fcfd 	bl	80098ac <__pow5mult>
 8008eb2:	9002      	str	r0, [sp, #8]
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	4648      	mov	r0, r9
 8008eb8:	f000 fc40 	bl	800973c <__i2b>
 8008ebc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 81d8 	beq.w	8009276 <_dtoa_r+0xb56>
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	4601      	mov	r1, r0
 8008eca:	4648      	mov	r0, r9
 8008ecc:	f000 fcee 	bl	80098ac <__pow5mult>
 8008ed0:	9b07      	ldr	r3, [sp, #28]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	f300 809f 	bgt.w	8009018 <_dtoa_r+0x8f8>
 8008eda:	9b04      	ldr	r3, [sp, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f040 8097 	bne.w	8009010 <_dtoa_r+0x8f0>
 8008ee2:	9b05      	ldr	r3, [sp, #20]
 8008ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f040 8093 	bne.w	8009014 <_dtoa_r+0x8f4>
 8008eee:	9b05      	ldr	r3, [sp, #20]
 8008ef0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ef4:	0d1b      	lsrs	r3, r3, #20
 8008ef6:	051b      	lsls	r3, r3, #20
 8008ef8:	b133      	cbz	r3, 8008f08 <_dtoa_r+0x7e8>
 8008efa:	9b00      	ldr	r3, [sp, #0]
 8008efc:	3301      	adds	r3, #1
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	9b06      	ldr	r3, [sp, #24]
 8008f02:	3301      	adds	r3, #1
 8008f04:	9306      	str	r3, [sp, #24]
 8008f06:	2301      	movs	r3, #1
 8008f08:	9308      	str	r3, [sp, #32]
 8008f0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 81b8 	beq.w	8009282 <_dtoa_r+0xb62>
 8008f12:	6923      	ldr	r3, [r4, #16]
 8008f14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f18:	6918      	ldr	r0, [r3, #16]
 8008f1a:	f000 fbc3 	bl	80096a4 <__hi0bits>
 8008f1e:	f1c0 0020 	rsb	r0, r0, #32
 8008f22:	9b06      	ldr	r3, [sp, #24]
 8008f24:	4418      	add	r0, r3
 8008f26:	f010 001f 	ands.w	r0, r0, #31
 8008f2a:	f000 8082 	beq.w	8009032 <_dtoa_r+0x912>
 8008f2e:	f1c0 0320 	rsb	r3, r0, #32
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	dd73      	ble.n	800901e <_dtoa_r+0x8fe>
 8008f36:	9b00      	ldr	r3, [sp, #0]
 8008f38:	f1c0 001c 	rsb	r0, r0, #28
 8008f3c:	4403      	add	r3, r0
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	9b06      	ldr	r3, [sp, #24]
 8008f42:	4403      	add	r3, r0
 8008f44:	4406      	add	r6, r0
 8008f46:	9306      	str	r3, [sp, #24]
 8008f48:	9b00      	ldr	r3, [sp, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	dd05      	ble.n	8008f5a <_dtoa_r+0x83a>
 8008f4e:	9902      	ldr	r1, [sp, #8]
 8008f50:	461a      	mov	r2, r3
 8008f52:	4648      	mov	r0, r9
 8008f54:	f000 fd04 	bl	8009960 <__lshift>
 8008f58:	9002      	str	r0, [sp, #8]
 8008f5a:	9b06      	ldr	r3, [sp, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	dd05      	ble.n	8008f6c <_dtoa_r+0x84c>
 8008f60:	4621      	mov	r1, r4
 8008f62:	461a      	mov	r2, r3
 8008f64:	4648      	mov	r0, r9
 8008f66:	f000 fcfb 	bl	8009960 <__lshift>
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d061      	beq.n	8009036 <_dtoa_r+0x916>
 8008f72:	9802      	ldr	r0, [sp, #8]
 8008f74:	4621      	mov	r1, r4
 8008f76:	f000 fd5f 	bl	8009a38 <__mcmp>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	da5b      	bge.n	8009036 <_dtoa_r+0x916>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	9902      	ldr	r1, [sp, #8]
 8008f82:	220a      	movs	r2, #10
 8008f84:	4648      	mov	r0, r9
 8008f86:	f000 fafd 	bl	8009584 <__multadd>
 8008f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f8c:	9002      	str	r0, [sp, #8]
 8008f8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f000 8177 	beq.w	8009286 <_dtoa_r+0xb66>
 8008f98:	4629      	mov	r1, r5
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	220a      	movs	r2, #10
 8008f9e:	4648      	mov	r0, r9
 8008fa0:	f000 faf0 	bl	8009584 <__multadd>
 8008fa4:	f1bb 0f00 	cmp.w	fp, #0
 8008fa8:	4605      	mov	r5, r0
 8008faa:	dc6f      	bgt.n	800908c <_dtoa_r+0x96c>
 8008fac:	9b07      	ldr	r3, [sp, #28]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	dc49      	bgt.n	8009046 <_dtoa_r+0x926>
 8008fb2:	e06b      	b.n	800908c <_dtoa_r+0x96c>
 8008fb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008fb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008fba:	e73c      	b.n	8008e36 <_dtoa_r+0x716>
 8008fbc:	3fe00000 	.word	0x3fe00000
 8008fc0:	40240000 	.word	0x40240000
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	1e5c      	subs	r4, r3, #1
 8008fc8:	9b08      	ldr	r3, [sp, #32]
 8008fca:	42a3      	cmp	r3, r4
 8008fcc:	db09      	blt.n	8008fe2 <_dtoa_r+0x8c2>
 8008fce:	1b1c      	subs	r4, r3, r4
 8008fd0:	9b03      	ldr	r3, [sp, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f6bf af30 	bge.w	8008e38 <_dtoa_r+0x718>
 8008fd8:	9b00      	ldr	r3, [sp, #0]
 8008fda:	9a03      	ldr	r2, [sp, #12]
 8008fdc:	1a9e      	subs	r6, r3, r2
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e72b      	b.n	8008e3a <_dtoa_r+0x71a>
 8008fe2:	9b08      	ldr	r3, [sp, #32]
 8008fe4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008fe6:	9408      	str	r4, [sp, #32]
 8008fe8:	1ae3      	subs	r3, r4, r3
 8008fea:	441a      	add	r2, r3
 8008fec:	9e00      	ldr	r6, [sp, #0]
 8008fee:	9b03      	ldr	r3, [sp, #12]
 8008ff0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008ff2:	2400      	movs	r4, #0
 8008ff4:	e721      	b.n	8008e3a <_dtoa_r+0x71a>
 8008ff6:	9c08      	ldr	r4, [sp, #32]
 8008ff8:	9e00      	ldr	r6, [sp, #0]
 8008ffa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008ffc:	e728      	b.n	8008e50 <_dtoa_r+0x730>
 8008ffe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009002:	e751      	b.n	8008ea8 <_dtoa_r+0x788>
 8009004:	9a08      	ldr	r2, [sp, #32]
 8009006:	9902      	ldr	r1, [sp, #8]
 8009008:	e750      	b.n	8008eac <_dtoa_r+0x78c>
 800900a:	f8cd 8008 	str.w	r8, [sp, #8]
 800900e:	e751      	b.n	8008eb4 <_dtoa_r+0x794>
 8009010:	2300      	movs	r3, #0
 8009012:	e779      	b.n	8008f08 <_dtoa_r+0x7e8>
 8009014:	9b04      	ldr	r3, [sp, #16]
 8009016:	e777      	b.n	8008f08 <_dtoa_r+0x7e8>
 8009018:	2300      	movs	r3, #0
 800901a:	9308      	str	r3, [sp, #32]
 800901c:	e779      	b.n	8008f12 <_dtoa_r+0x7f2>
 800901e:	d093      	beq.n	8008f48 <_dtoa_r+0x828>
 8009020:	9a00      	ldr	r2, [sp, #0]
 8009022:	331c      	adds	r3, #28
 8009024:	441a      	add	r2, r3
 8009026:	9200      	str	r2, [sp, #0]
 8009028:	9a06      	ldr	r2, [sp, #24]
 800902a:	441a      	add	r2, r3
 800902c:	441e      	add	r6, r3
 800902e:	9206      	str	r2, [sp, #24]
 8009030:	e78a      	b.n	8008f48 <_dtoa_r+0x828>
 8009032:	4603      	mov	r3, r0
 8009034:	e7f4      	b.n	8009020 <_dtoa_r+0x900>
 8009036:	9b03      	ldr	r3, [sp, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	46b8      	mov	r8, r7
 800903c:	dc20      	bgt.n	8009080 <_dtoa_r+0x960>
 800903e:	469b      	mov	fp, r3
 8009040:	9b07      	ldr	r3, [sp, #28]
 8009042:	2b02      	cmp	r3, #2
 8009044:	dd1e      	ble.n	8009084 <_dtoa_r+0x964>
 8009046:	f1bb 0f00 	cmp.w	fp, #0
 800904a:	f47f adb1 	bne.w	8008bb0 <_dtoa_r+0x490>
 800904e:	4621      	mov	r1, r4
 8009050:	465b      	mov	r3, fp
 8009052:	2205      	movs	r2, #5
 8009054:	4648      	mov	r0, r9
 8009056:	f000 fa95 	bl	8009584 <__multadd>
 800905a:	4601      	mov	r1, r0
 800905c:	4604      	mov	r4, r0
 800905e:	9802      	ldr	r0, [sp, #8]
 8009060:	f000 fcea 	bl	8009a38 <__mcmp>
 8009064:	2800      	cmp	r0, #0
 8009066:	f77f ada3 	ble.w	8008bb0 <_dtoa_r+0x490>
 800906a:	4656      	mov	r6, sl
 800906c:	2331      	movs	r3, #49	@ 0x31
 800906e:	f806 3b01 	strb.w	r3, [r6], #1
 8009072:	f108 0801 	add.w	r8, r8, #1
 8009076:	e59f      	b.n	8008bb8 <_dtoa_r+0x498>
 8009078:	9c03      	ldr	r4, [sp, #12]
 800907a:	46b8      	mov	r8, r7
 800907c:	4625      	mov	r5, r4
 800907e:	e7f4      	b.n	800906a <_dtoa_r+0x94a>
 8009080:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 8101 	beq.w	800928e <_dtoa_r+0xb6e>
 800908c:	2e00      	cmp	r6, #0
 800908e:	dd05      	ble.n	800909c <_dtoa_r+0x97c>
 8009090:	4629      	mov	r1, r5
 8009092:	4632      	mov	r2, r6
 8009094:	4648      	mov	r0, r9
 8009096:	f000 fc63 	bl	8009960 <__lshift>
 800909a:	4605      	mov	r5, r0
 800909c:	9b08      	ldr	r3, [sp, #32]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d05c      	beq.n	800915c <_dtoa_r+0xa3c>
 80090a2:	6869      	ldr	r1, [r5, #4]
 80090a4:	4648      	mov	r0, r9
 80090a6:	f000 fa0b 	bl	80094c0 <_Balloc>
 80090aa:	4606      	mov	r6, r0
 80090ac:	b928      	cbnz	r0, 80090ba <_dtoa_r+0x99a>
 80090ae:	4b82      	ldr	r3, [pc, #520]	@ (80092b8 <_dtoa_r+0xb98>)
 80090b0:	4602      	mov	r2, r0
 80090b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80090b6:	f7ff bb4a 	b.w	800874e <_dtoa_r+0x2e>
 80090ba:	692a      	ldr	r2, [r5, #16]
 80090bc:	3202      	adds	r2, #2
 80090be:	0092      	lsls	r2, r2, #2
 80090c0:	f105 010c 	add.w	r1, r5, #12
 80090c4:	300c      	adds	r0, #12
 80090c6:	f002 f8b3 	bl	800b230 <memcpy>
 80090ca:	2201      	movs	r2, #1
 80090cc:	4631      	mov	r1, r6
 80090ce:	4648      	mov	r0, r9
 80090d0:	f000 fc46 	bl	8009960 <__lshift>
 80090d4:	f10a 0301 	add.w	r3, sl, #1
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	eb0a 030b 	add.w	r3, sl, fp
 80090de:	9308      	str	r3, [sp, #32]
 80090e0:	9b04      	ldr	r3, [sp, #16]
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	462f      	mov	r7, r5
 80090e8:	9306      	str	r3, [sp, #24]
 80090ea:	4605      	mov	r5, r0
 80090ec:	9b00      	ldr	r3, [sp, #0]
 80090ee:	9802      	ldr	r0, [sp, #8]
 80090f0:	4621      	mov	r1, r4
 80090f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80090f6:	f7ff fa89 	bl	800860c <quorem>
 80090fa:	4603      	mov	r3, r0
 80090fc:	3330      	adds	r3, #48	@ 0x30
 80090fe:	9003      	str	r0, [sp, #12]
 8009100:	4639      	mov	r1, r7
 8009102:	9802      	ldr	r0, [sp, #8]
 8009104:	9309      	str	r3, [sp, #36]	@ 0x24
 8009106:	f000 fc97 	bl	8009a38 <__mcmp>
 800910a:	462a      	mov	r2, r5
 800910c:	9004      	str	r0, [sp, #16]
 800910e:	4621      	mov	r1, r4
 8009110:	4648      	mov	r0, r9
 8009112:	f000 fcad 	bl	8009a70 <__mdiff>
 8009116:	68c2      	ldr	r2, [r0, #12]
 8009118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800911a:	4606      	mov	r6, r0
 800911c:	bb02      	cbnz	r2, 8009160 <_dtoa_r+0xa40>
 800911e:	4601      	mov	r1, r0
 8009120:	9802      	ldr	r0, [sp, #8]
 8009122:	f000 fc89 	bl	8009a38 <__mcmp>
 8009126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009128:	4602      	mov	r2, r0
 800912a:	4631      	mov	r1, r6
 800912c:	4648      	mov	r0, r9
 800912e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009130:	9309      	str	r3, [sp, #36]	@ 0x24
 8009132:	f000 fa05 	bl	8009540 <_Bfree>
 8009136:	9b07      	ldr	r3, [sp, #28]
 8009138:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800913a:	9e00      	ldr	r6, [sp, #0]
 800913c:	ea42 0103 	orr.w	r1, r2, r3
 8009140:	9b06      	ldr	r3, [sp, #24]
 8009142:	4319      	orrs	r1, r3
 8009144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009146:	d10d      	bne.n	8009164 <_dtoa_r+0xa44>
 8009148:	2b39      	cmp	r3, #57	@ 0x39
 800914a:	d027      	beq.n	800919c <_dtoa_r+0xa7c>
 800914c:	9a04      	ldr	r2, [sp, #16]
 800914e:	2a00      	cmp	r2, #0
 8009150:	dd01      	ble.n	8009156 <_dtoa_r+0xa36>
 8009152:	9b03      	ldr	r3, [sp, #12]
 8009154:	3331      	adds	r3, #49	@ 0x31
 8009156:	f88b 3000 	strb.w	r3, [fp]
 800915a:	e52e      	b.n	8008bba <_dtoa_r+0x49a>
 800915c:	4628      	mov	r0, r5
 800915e:	e7b9      	b.n	80090d4 <_dtoa_r+0x9b4>
 8009160:	2201      	movs	r2, #1
 8009162:	e7e2      	b.n	800912a <_dtoa_r+0xa0a>
 8009164:	9904      	ldr	r1, [sp, #16]
 8009166:	2900      	cmp	r1, #0
 8009168:	db04      	blt.n	8009174 <_dtoa_r+0xa54>
 800916a:	9807      	ldr	r0, [sp, #28]
 800916c:	4301      	orrs	r1, r0
 800916e:	9806      	ldr	r0, [sp, #24]
 8009170:	4301      	orrs	r1, r0
 8009172:	d120      	bne.n	80091b6 <_dtoa_r+0xa96>
 8009174:	2a00      	cmp	r2, #0
 8009176:	ddee      	ble.n	8009156 <_dtoa_r+0xa36>
 8009178:	9902      	ldr	r1, [sp, #8]
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	2201      	movs	r2, #1
 800917e:	4648      	mov	r0, r9
 8009180:	f000 fbee 	bl	8009960 <__lshift>
 8009184:	4621      	mov	r1, r4
 8009186:	9002      	str	r0, [sp, #8]
 8009188:	f000 fc56 	bl	8009a38 <__mcmp>
 800918c:	2800      	cmp	r0, #0
 800918e:	9b00      	ldr	r3, [sp, #0]
 8009190:	dc02      	bgt.n	8009198 <_dtoa_r+0xa78>
 8009192:	d1e0      	bne.n	8009156 <_dtoa_r+0xa36>
 8009194:	07da      	lsls	r2, r3, #31
 8009196:	d5de      	bpl.n	8009156 <_dtoa_r+0xa36>
 8009198:	2b39      	cmp	r3, #57	@ 0x39
 800919a:	d1da      	bne.n	8009152 <_dtoa_r+0xa32>
 800919c:	2339      	movs	r3, #57	@ 0x39
 800919e:	f88b 3000 	strb.w	r3, [fp]
 80091a2:	4633      	mov	r3, r6
 80091a4:	461e      	mov	r6, r3
 80091a6:	3b01      	subs	r3, #1
 80091a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80091ac:	2a39      	cmp	r2, #57	@ 0x39
 80091ae:	d04e      	beq.n	800924e <_dtoa_r+0xb2e>
 80091b0:	3201      	adds	r2, #1
 80091b2:	701a      	strb	r2, [r3, #0]
 80091b4:	e501      	b.n	8008bba <_dtoa_r+0x49a>
 80091b6:	2a00      	cmp	r2, #0
 80091b8:	dd03      	ble.n	80091c2 <_dtoa_r+0xaa2>
 80091ba:	2b39      	cmp	r3, #57	@ 0x39
 80091bc:	d0ee      	beq.n	800919c <_dtoa_r+0xa7c>
 80091be:	3301      	adds	r3, #1
 80091c0:	e7c9      	b.n	8009156 <_dtoa_r+0xa36>
 80091c2:	9a00      	ldr	r2, [sp, #0]
 80091c4:	9908      	ldr	r1, [sp, #32]
 80091c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80091ca:	428a      	cmp	r2, r1
 80091cc:	d028      	beq.n	8009220 <_dtoa_r+0xb00>
 80091ce:	9902      	ldr	r1, [sp, #8]
 80091d0:	2300      	movs	r3, #0
 80091d2:	220a      	movs	r2, #10
 80091d4:	4648      	mov	r0, r9
 80091d6:	f000 f9d5 	bl	8009584 <__multadd>
 80091da:	42af      	cmp	r7, r5
 80091dc:	9002      	str	r0, [sp, #8]
 80091de:	f04f 0300 	mov.w	r3, #0
 80091e2:	f04f 020a 	mov.w	r2, #10
 80091e6:	4639      	mov	r1, r7
 80091e8:	4648      	mov	r0, r9
 80091ea:	d107      	bne.n	80091fc <_dtoa_r+0xadc>
 80091ec:	f000 f9ca 	bl	8009584 <__multadd>
 80091f0:	4607      	mov	r7, r0
 80091f2:	4605      	mov	r5, r0
 80091f4:	9b00      	ldr	r3, [sp, #0]
 80091f6:	3301      	adds	r3, #1
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	e777      	b.n	80090ec <_dtoa_r+0x9cc>
 80091fc:	f000 f9c2 	bl	8009584 <__multadd>
 8009200:	4629      	mov	r1, r5
 8009202:	4607      	mov	r7, r0
 8009204:	2300      	movs	r3, #0
 8009206:	220a      	movs	r2, #10
 8009208:	4648      	mov	r0, r9
 800920a:	f000 f9bb 	bl	8009584 <__multadd>
 800920e:	4605      	mov	r5, r0
 8009210:	e7f0      	b.n	80091f4 <_dtoa_r+0xad4>
 8009212:	f1bb 0f00 	cmp.w	fp, #0
 8009216:	bfcc      	ite	gt
 8009218:	465e      	movgt	r6, fp
 800921a:	2601      	movle	r6, #1
 800921c:	4456      	add	r6, sl
 800921e:	2700      	movs	r7, #0
 8009220:	9902      	ldr	r1, [sp, #8]
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	2201      	movs	r2, #1
 8009226:	4648      	mov	r0, r9
 8009228:	f000 fb9a 	bl	8009960 <__lshift>
 800922c:	4621      	mov	r1, r4
 800922e:	9002      	str	r0, [sp, #8]
 8009230:	f000 fc02 	bl	8009a38 <__mcmp>
 8009234:	2800      	cmp	r0, #0
 8009236:	dcb4      	bgt.n	80091a2 <_dtoa_r+0xa82>
 8009238:	d102      	bne.n	8009240 <_dtoa_r+0xb20>
 800923a:	9b00      	ldr	r3, [sp, #0]
 800923c:	07db      	lsls	r3, r3, #31
 800923e:	d4b0      	bmi.n	80091a2 <_dtoa_r+0xa82>
 8009240:	4633      	mov	r3, r6
 8009242:	461e      	mov	r6, r3
 8009244:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009248:	2a30      	cmp	r2, #48	@ 0x30
 800924a:	d0fa      	beq.n	8009242 <_dtoa_r+0xb22>
 800924c:	e4b5      	b.n	8008bba <_dtoa_r+0x49a>
 800924e:	459a      	cmp	sl, r3
 8009250:	d1a8      	bne.n	80091a4 <_dtoa_r+0xa84>
 8009252:	2331      	movs	r3, #49	@ 0x31
 8009254:	f108 0801 	add.w	r8, r8, #1
 8009258:	f88a 3000 	strb.w	r3, [sl]
 800925c:	e4ad      	b.n	8008bba <_dtoa_r+0x49a>
 800925e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009260:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80092bc <_dtoa_r+0xb9c>
 8009264:	b11b      	cbz	r3, 800926e <_dtoa_r+0xb4e>
 8009266:	f10a 0308 	add.w	r3, sl, #8
 800926a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800926c:	6013      	str	r3, [r2, #0]
 800926e:	4650      	mov	r0, sl
 8009270:	b017      	add	sp, #92	@ 0x5c
 8009272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009276:	9b07      	ldr	r3, [sp, #28]
 8009278:	2b01      	cmp	r3, #1
 800927a:	f77f ae2e 	ble.w	8008eda <_dtoa_r+0x7ba>
 800927e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009280:	9308      	str	r3, [sp, #32]
 8009282:	2001      	movs	r0, #1
 8009284:	e64d      	b.n	8008f22 <_dtoa_r+0x802>
 8009286:	f1bb 0f00 	cmp.w	fp, #0
 800928a:	f77f aed9 	ble.w	8009040 <_dtoa_r+0x920>
 800928e:	4656      	mov	r6, sl
 8009290:	9802      	ldr	r0, [sp, #8]
 8009292:	4621      	mov	r1, r4
 8009294:	f7ff f9ba 	bl	800860c <quorem>
 8009298:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800929c:	f806 3b01 	strb.w	r3, [r6], #1
 80092a0:	eba6 020a 	sub.w	r2, r6, sl
 80092a4:	4593      	cmp	fp, r2
 80092a6:	ddb4      	ble.n	8009212 <_dtoa_r+0xaf2>
 80092a8:	9902      	ldr	r1, [sp, #8]
 80092aa:	2300      	movs	r3, #0
 80092ac:	220a      	movs	r2, #10
 80092ae:	4648      	mov	r0, r9
 80092b0:	f000 f968 	bl	8009584 <__multadd>
 80092b4:	9002      	str	r0, [sp, #8]
 80092b6:	e7eb      	b.n	8009290 <_dtoa_r+0xb70>
 80092b8:	0800bef2 	.word	0x0800bef2
 80092bc:	0800be76 	.word	0x0800be76

080092c0 <_free_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4605      	mov	r5, r0
 80092c4:	2900      	cmp	r1, #0
 80092c6:	d041      	beq.n	800934c <_free_r+0x8c>
 80092c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092cc:	1f0c      	subs	r4, r1, #4
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	bfb8      	it	lt
 80092d2:	18e4      	addlt	r4, r4, r3
 80092d4:	f000 f8e8 	bl	80094a8 <__malloc_lock>
 80092d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009350 <_free_r+0x90>)
 80092da:	6813      	ldr	r3, [r2, #0]
 80092dc:	b933      	cbnz	r3, 80092ec <_free_r+0x2c>
 80092de:	6063      	str	r3, [r4, #4]
 80092e0:	6014      	str	r4, [r2, #0]
 80092e2:	4628      	mov	r0, r5
 80092e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092e8:	f000 b8e4 	b.w	80094b4 <__malloc_unlock>
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	d908      	bls.n	8009302 <_free_r+0x42>
 80092f0:	6820      	ldr	r0, [r4, #0]
 80092f2:	1821      	adds	r1, r4, r0
 80092f4:	428b      	cmp	r3, r1
 80092f6:	bf01      	itttt	eq
 80092f8:	6819      	ldreq	r1, [r3, #0]
 80092fa:	685b      	ldreq	r3, [r3, #4]
 80092fc:	1809      	addeq	r1, r1, r0
 80092fe:	6021      	streq	r1, [r4, #0]
 8009300:	e7ed      	b.n	80092de <_free_r+0x1e>
 8009302:	461a      	mov	r2, r3
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	b10b      	cbz	r3, 800930c <_free_r+0x4c>
 8009308:	42a3      	cmp	r3, r4
 800930a:	d9fa      	bls.n	8009302 <_free_r+0x42>
 800930c:	6811      	ldr	r1, [r2, #0]
 800930e:	1850      	adds	r0, r2, r1
 8009310:	42a0      	cmp	r0, r4
 8009312:	d10b      	bne.n	800932c <_free_r+0x6c>
 8009314:	6820      	ldr	r0, [r4, #0]
 8009316:	4401      	add	r1, r0
 8009318:	1850      	adds	r0, r2, r1
 800931a:	4283      	cmp	r3, r0
 800931c:	6011      	str	r1, [r2, #0]
 800931e:	d1e0      	bne.n	80092e2 <_free_r+0x22>
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	6053      	str	r3, [r2, #4]
 8009326:	4408      	add	r0, r1
 8009328:	6010      	str	r0, [r2, #0]
 800932a:	e7da      	b.n	80092e2 <_free_r+0x22>
 800932c:	d902      	bls.n	8009334 <_free_r+0x74>
 800932e:	230c      	movs	r3, #12
 8009330:	602b      	str	r3, [r5, #0]
 8009332:	e7d6      	b.n	80092e2 <_free_r+0x22>
 8009334:	6820      	ldr	r0, [r4, #0]
 8009336:	1821      	adds	r1, r4, r0
 8009338:	428b      	cmp	r3, r1
 800933a:	bf04      	itt	eq
 800933c:	6819      	ldreq	r1, [r3, #0]
 800933e:	685b      	ldreq	r3, [r3, #4]
 8009340:	6063      	str	r3, [r4, #4]
 8009342:	bf04      	itt	eq
 8009344:	1809      	addeq	r1, r1, r0
 8009346:	6021      	streq	r1, [r4, #0]
 8009348:	6054      	str	r4, [r2, #4]
 800934a:	e7ca      	b.n	80092e2 <_free_r+0x22>
 800934c:	bd38      	pop	{r3, r4, r5, pc}
 800934e:	bf00      	nop
 8009350:	200007b0 	.word	0x200007b0

08009354 <malloc>:
 8009354:	4b02      	ldr	r3, [pc, #8]	@ (8009360 <malloc+0xc>)
 8009356:	4601      	mov	r1, r0
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	f000 b825 	b.w	80093a8 <_malloc_r>
 800935e:	bf00      	nop
 8009360:	20000064 	.word	0x20000064

08009364 <sbrk_aligned>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	4e0f      	ldr	r6, [pc, #60]	@ (80093a4 <sbrk_aligned+0x40>)
 8009368:	460c      	mov	r4, r1
 800936a:	6831      	ldr	r1, [r6, #0]
 800936c:	4605      	mov	r5, r0
 800936e:	b911      	cbnz	r1, 8009376 <sbrk_aligned+0x12>
 8009370:	f001 ff4e 	bl	800b210 <_sbrk_r>
 8009374:	6030      	str	r0, [r6, #0]
 8009376:	4621      	mov	r1, r4
 8009378:	4628      	mov	r0, r5
 800937a:	f001 ff49 	bl	800b210 <_sbrk_r>
 800937e:	1c43      	adds	r3, r0, #1
 8009380:	d103      	bne.n	800938a <sbrk_aligned+0x26>
 8009382:	f04f 34ff 	mov.w	r4, #4294967295
 8009386:	4620      	mov	r0, r4
 8009388:	bd70      	pop	{r4, r5, r6, pc}
 800938a:	1cc4      	adds	r4, r0, #3
 800938c:	f024 0403 	bic.w	r4, r4, #3
 8009390:	42a0      	cmp	r0, r4
 8009392:	d0f8      	beq.n	8009386 <sbrk_aligned+0x22>
 8009394:	1a21      	subs	r1, r4, r0
 8009396:	4628      	mov	r0, r5
 8009398:	f001 ff3a 	bl	800b210 <_sbrk_r>
 800939c:	3001      	adds	r0, #1
 800939e:	d1f2      	bne.n	8009386 <sbrk_aligned+0x22>
 80093a0:	e7ef      	b.n	8009382 <sbrk_aligned+0x1e>
 80093a2:	bf00      	nop
 80093a4:	200007ac 	.word	0x200007ac

080093a8 <_malloc_r>:
 80093a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ac:	1ccd      	adds	r5, r1, #3
 80093ae:	f025 0503 	bic.w	r5, r5, #3
 80093b2:	3508      	adds	r5, #8
 80093b4:	2d0c      	cmp	r5, #12
 80093b6:	bf38      	it	cc
 80093b8:	250c      	movcc	r5, #12
 80093ba:	2d00      	cmp	r5, #0
 80093bc:	4606      	mov	r6, r0
 80093be:	db01      	blt.n	80093c4 <_malloc_r+0x1c>
 80093c0:	42a9      	cmp	r1, r5
 80093c2:	d904      	bls.n	80093ce <_malloc_r+0x26>
 80093c4:	230c      	movs	r3, #12
 80093c6:	6033      	str	r3, [r6, #0]
 80093c8:	2000      	movs	r0, #0
 80093ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094a4 <_malloc_r+0xfc>
 80093d2:	f000 f869 	bl	80094a8 <__malloc_lock>
 80093d6:	f8d8 3000 	ldr.w	r3, [r8]
 80093da:	461c      	mov	r4, r3
 80093dc:	bb44      	cbnz	r4, 8009430 <_malloc_r+0x88>
 80093de:	4629      	mov	r1, r5
 80093e0:	4630      	mov	r0, r6
 80093e2:	f7ff ffbf 	bl	8009364 <sbrk_aligned>
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	4604      	mov	r4, r0
 80093ea:	d158      	bne.n	800949e <_malloc_r+0xf6>
 80093ec:	f8d8 4000 	ldr.w	r4, [r8]
 80093f0:	4627      	mov	r7, r4
 80093f2:	2f00      	cmp	r7, #0
 80093f4:	d143      	bne.n	800947e <_malloc_r+0xd6>
 80093f6:	2c00      	cmp	r4, #0
 80093f8:	d04b      	beq.n	8009492 <_malloc_r+0xea>
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	4639      	mov	r1, r7
 80093fe:	4630      	mov	r0, r6
 8009400:	eb04 0903 	add.w	r9, r4, r3
 8009404:	f001 ff04 	bl	800b210 <_sbrk_r>
 8009408:	4581      	cmp	r9, r0
 800940a:	d142      	bne.n	8009492 <_malloc_r+0xea>
 800940c:	6821      	ldr	r1, [r4, #0]
 800940e:	1a6d      	subs	r5, r5, r1
 8009410:	4629      	mov	r1, r5
 8009412:	4630      	mov	r0, r6
 8009414:	f7ff ffa6 	bl	8009364 <sbrk_aligned>
 8009418:	3001      	adds	r0, #1
 800941a:	d03a      	beq.n	8009492 <_malloc_r+0xea>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	442b      	add	r3, r5
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	f8d8 3000 	ldr.w	r3, [r8]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	bb62      	cbnz	r2, 8009484 <_malloc_r+0xdc>
 800942a:	f8c8 7000 	str.w	r7, [r8]
 800942e:	e00f      	b.n	8009450 <_malloc_r+0xa8>
 8009430:	6822      	ldr	r2, [r4, #0]
 8009432:	1b52      	subs	r2, r2, r5
 8009434:	d420      	bmi.n	8009478 <_malloc_r+0xd0>
 8009436:	2a0b      	cmp	r2, #11
 8009438:	d917      	bls.n	800946a <_malloc_r+0xc2>
 800943a:	1961      	adds	r1, r4, r5
 800943c:	42a3      	cmp	r3, r4
 800943e:	6025      	str	r5, [r4, #0]
 8009440:	bf18      	it	ne
 8009442:	6059      	strne	r1, [r3, #4]
 8009444:	6863      	ldr	r3, [r4, #4]
 8009446:	bf08      	it	eq
 8009448:	f8c8 1000 	streq.w	r1, [r8]
 800944c:	5162      	str	r2, [r4, r5]
 800944e:	604b      	str	r3, [r1, #4]
 8009450:	4630      	mov	r0, r6
 8009452:	f000 f82f 	bl	80094b4 <__malloc_unlock>
 8009456:	f104 000b 	add.w	r0, r4, #11
 800945a:	1d23      	adds	r3, r4, #4
 800945c:	f020 0007 	bic.w	r0, r0, #7
 8009460:	1ac2      	subs	r2, r0, r3
 8009462:	bf1c      	itt	ne
 8009464:	1a1b      	subne	r3, r3, r0
 8009466:	50a3      	strne	r3, [r4, r2]
 8009468:	e7af      	b.n	80093ca <_malloc_r+0x22>
 800946a:	6862      	ldr	r2, [r4, #4]
 800946c:	42a3      	cmp	r3, r4
 800946e:	bf0c      	ite	eq
 8009470:	f8c8 2000 	streq.w	r2, [r8]
 8009474:	605a      	strne	r2, [r3, #4]
 8009476:	e7eb      	b.n	8009450 <_malloc_r+0xa8>
 8009478:	4623      	mov	r3, r4
 800947a:	6864      	ldr	r4, [r4, #4]
 800947c:	e7ae      	b.n	80093dc <_malloc_r+0x34>
 800947e:	463c      	mov	r4, r7
 8009480:	687f      	ldr	r7, [r7, #4]
 8009482:	e7b6      	b.n	80093f2 <_malloc_r+0x4a>
 8009484:	461a      	mov	r2, r3
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	42a3      	cmp	r3, r4
 800948a:	d1fb      	bne.n	8009484 <_malloc_r+0xdc>
 800948c:	2300      	movs	r3, #0
 800948e:	6053      	str	r3, [r2, #4]
 8009490:	e7de      	b.n	8009450 <_malloc_r+0xa8>
 8009492:	230c      	movs	r3, #12
 8009494:	6033      	str	r3, [r6, #0]
 8009496:	4630      	mov	r0, r6
 8009498:	f000 f80c 	bl	80094b4 <__malloc_unlock>
 800949c:	e794      	b.n	80093c8 <_malloc_r+0x20>
 800949e:	6005      	str	r5, [r0, #0]
 80094a0:	e7d6      	b.n	8009450 <_malloc_r+0xa8>
 80094a2:	bf00      	nop
 80094a4:	200007b0 	.word	0x200007b0

080094a8 <__malloc_lock>:
 80094a8:	4801      	ldr	r0, [pc, #4]	@ (80094b0 <__malloc_lock+0x8>)
 80094aa:	f7ff b8a6 	b.w	80085fa <__retarget_lock_acquire_recursive>
 80094ae:	bf00      	nop
 80094b0:	200007a8 	.word	0x200007a8

080094b4 <__malloc_unlock>:
 80094b4:	4801      	ldr	r0, [pc, #4]	@ (80094bc <__malloc_unlock+0x8>)
 80094b6:	f7ff b8a1 	b.w	80085fc <__retarget_lock_release_recursive>
 80094ba:	bf00      	nop
 80094bc:	200007a8 	.word	0x200007a8

080094c0 <_Balloc>:
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	69c6      	ldr	r6, [r0, #28]
 80094c4:	4604      	mov	r4, r0
 80094c6:	460d      	mov	r5, r1
 80094c8:	b976      	cbnz	r6, 80094e8 <_Balloc+0x28>
 80094ca:	2010      	movs	r0, #16
 80094cc:	f7ff ff42 	bl	8009354 <malloc>
 80094d0:	4602      	mov	r2, r0
 80094d2:	61e0      	str	r0, [r4, #28]
 80094d4:	b920      	cbnz	r0, 80094e0 <_Balloc+0x20>
 80094d6:	4b18      	ldr	r3, [pc, #96]	@ (8009538 <_Balloc+0x78>)
 80094d8:	4818      	ldr	r0, [pc, #96]	@ (800953c <_Balloc+0x7c>)
 80094da:	216b      	movs	r1, #107	@ 0x6b
 80094dc:	f001 fec0 	bl	800b260 <__assert_func>
 80094e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094e4:	6006      	str	r6, [r0, #0]
 80094e6:	60c6      	str	r6, [r0, #12]
 80094e8:	69e6      	ldr	r6, [r4, #28]
 80094ea:	68f3      	ldr	r3, [r6, #12]
 80094ec:	b183      	cbz	r3, 8009510 <_Balloc+0x50>
 80094ee:	69e3      	ldr	r3, [r4, #28]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094f6:	b9b8      	cbnz	r0, 8009528 <_Balloc+0x68>
 80094f8:	2101      	movs	r1, #1
 80094fa:	fa01 f605 	lsl.w	r6, r1, r5
 80094fe:	1d72      	adds	r2, r6, #5
 8009500:	0092      	lsls	r2, r2, #2
 8009502:	4620      	mov	r0, r4
 8009504:	f001 feca 	bl	800b29c <_calloc_r>
 8009508:	b160      	cbz	r0, 8009524 <_Balloc+0x64>
 800950a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800950e:	e00e      	b.n	800952e <_Balloc+0x6e>
 8009510:	2221      	movs	r2, #33	@ 0x21
 8009512:	2104      	movs	r1, #4
 8009514:	4620      	mov	r0, r4
 8009516:	f001 fec1 	bl	800b29c <_calloc_r>
 800951a:	69e3      	ldr	r3, [r4, #28]
 800951c:	60f0      	str	r0, [r6, #12]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e4      	bne.n	80094ee <_Balloc+0x2e>
 8009524:	2000      	movs	r0, #0
 8009526:	bd70      	pop	{r4, r5, r6, pc}
 8009528:	6802      	ldr	r2, [r0, #0]
 800952a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800952e:	2300      	movs	r3, #0
 8009530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009534:	e7f7      	b.n	8009526 <_Balloc+0x66>
 8009536:	bf00      	nop
 8009538:	0800be83 	.word	0x0800be83
 800953c:	0800bf03 	.word	0x0800bf03

08009540 <_Bfree>:
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	69c6      	ldr	r6, [r0, #28]
 8009544:	4605      	mov	r5, r0
 8009546:	460c      	mov	r4, r1
 8009548:	b976      	cbnz	r6, 8009568 <_Bfree+0x28>
 800954a:	2010      	movs	r0, #16
 800954c:	f7ff ff02 	bl	8009354 <malloc>
 8009550:	4602      	mov	r2, r0
 8009552:	61e8      	str	r0, [r5, #28]
 8009554:	b920      	cbnz	r0, 8009560 <_Bfree+0x20>
 8009556:	4b09      	ldr	r3, [pc, #36]	@ (800957c <_Bfree+0x3c>)
 8009558:	4809      	ldr	r0, [pc, #36]	@ (8009580 <_Bfree+0x40>)
 800955a:	218f      	movs	r1, #143	@ 0x8f
 800955c:	f001 fe80 	bl	800b260 <__assert_func>
 8009560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009564:	6006      	str	r6, [r0, #0]
 8009566:	60c6      	str	r6, [r0, #12]
 8009568:	b13c      	cbz	r4, 800957a <_Bfree+0x3a>
 800956a:	69eb      	ldr	r3, [r5, #28]
 800956c:	6862      	ldr	r2, [r4, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009574:	6021      	str	r1, [r4, #0]
 8009576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	0800be83 	.word	0x0800be83
 8009580:	0800bf03 	.word	0x0800bf03

08009584 <__multadd>:
 8009584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009588:	690d      	ldr	r5, [r1, #16]
 800958a:	4607      	mov	r7, r0
 800958c:	460c      	mov	r4, r1
 800958e:	461e      	mov	r6, r3
 8009590:	f101 0c14 	add.w	ip, r1, #20
 8009594:	2000      	movs	r0, #0
 8009596:	f8dc 3000 	ldr.w	r3, [ip]
 800959a:	b299      	uxth	r1, r3
 800959c:	fb02 6101 	mla	r1, r2, r1, r6
 80095a0:	0c1e      	lsrs	r6, r3, #16
 80095a2:	0c0b      	lsrs	r3, r1, #16
 80095a4:	fb02 3306 	mla	r3, r2, r6, r3
 80095a8:	b289      	uxth	r1, r1
 80095aa:	3001      	adds	r0, #1
 80095ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80095b0:	4285      	cmp	r5, r0
 80095b2:	f84c 1b04 	str.w	r1, [ip], #4
 80095b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80095ba:	dcec      	bgt.n	8009596 <__multadd+0x12>
 80095bc:	b30e      	cbz	r6, 8009602 <__multadd+0x7e>
 80095be:	68a3      	ldr	r3, [r4, #8]
 80095c0:	42ab      	cmp	r3, r5
 80095c2:	dc19      	bgt.n	80095f8 <__multadd+0x74>
 80095c4:	6861      	ldr	r1, [r4, #4]
 80095c6:	4638      	mov	r0, r7
 80095c8:	3101      	adds	r1, #1
 80095ca:	f7ff ff79 	bl	80094c0 <_Balloc>
 80095ce:	4680      	mov	r8, r0
 80095d0:	b928      	cbnz	r0, 80095de <__multadd+0x5a>
 80095d2:	4602      	mov	r2, r0
 80095d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009608 <__multadd+0x84>)
 80095d6:	480d      	ldr	r0, [pc, #52]	@ (800960c <__multadd+0x88>)
 80095d8:	21ba      	movs	r1, #186	@ 0xba
 80095da:	f001 fe41 	bl	800b260 <__assert_func>
 80095de:	6922      	ldr	r2, [r4, #16]
 80095e0:	3202      	adds	r2, #2
 80095e2:	f104 010c 	add.w	r1, r4, #12
 80095e6:	0092      	lsls	r2, r2, #2
 80095e8:	300c      	adds	r0, #12
 80095ea:	f001 fe21 	bl	800b230 <memcpy>
 80095ee:	4621      	mov	r1, r4
 80095f0:	4638      	mov	r0, r7
 80095f2:	f7ff ffa5 	bl	8009540 <_Bfree>
 80095f6:	4644      	mov	r4, r8
 80095f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095fc:	3501      	adds	r5, #1
 80095fe:	615e      	str	r6, [r3, #20]
 8009600:	6125      	str	r5, [r4, #16]
 8009602:	4620      	mov	r0, r4
 8009604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009608:	0800bef2 	.word	0x0800bef2
 800960c:	0800bf03 	.word	0x0800bf03

08009610 <__s2b>:
 8009610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009614:	460c      	mov	r4, r1
 8009616:	4615      	mov	r5, r2
 8009618:	461f      	mov	r7, r3
 800961a:	2209      	movs	r2, #9
 800961c:	3308      	adds	r3, #8
 800961e:	4606      	mov	r6, r0
 8009620:	fb93 f3f2 	sdiv	r3, r3, r2
 8009624:	2100      	movs	r1, #0
 8009626:	2201      	movs	r2, #1
 8009628:	429a      	cmp	r2, r3
 800962a:	db09      	blt.n	8009640 <__s2b+0x30>
 800962c:	4630      	mov	r0, r6
 800962e:	f7ff ff47 	bl	80094c0 <_Balloc>
 8009632:	b940      	cbnz	r0, 8009646 <__s2b+0x36>
 8009634:	4602      	mov	r2, r0
 8009636:	4b19      	ldr	r3, [pc, #100]	@ (800969c <__s2b+0x8c>)
 8009638:	4819      	ldr	r0, [pc, #100]	@ (80096a0 <__s2b+0x90>)
 800963a:	21d3      	movs	r1, #211	@ 0xd3
 800963c:	f001 fe10 	bl	800b260 <__assert_func>
 8009640:	0052      	lsls	r2, r2, #1
 8009642:	3101      	adds	r1, #1
 8009644:	e7f0      	b.n	8009628 <__s2b+0x18>
 8009646:	9b08      	ldr	r3, [sp, #32]
 8009648:	6143      	str	r3, [r0, #20]
 800964a:	2d09      	cmp	r5, #9
 800964c:	f04f 0301 	mov.w	r3, #1
 8009650:	6103      	str	r3, [r0, #16]
 8009652:	dd16      	ble.n	8009682 <__s2b+0x72>
 8009654:	f104 0909 	add.w	r9, r4, #9
 8009658:	46c8      	mov	r8, r9
 800965a:	442c      	add	r4, r5
 800965c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009660:	4601      	mov	r1, r0
 8009662:	3b30      	subs	r3, #48	@ 0x30
 8009664:	220a      	movs	r2, #10
 8009666:	4630      	mov	r0, r6
 8009668:	f7ff ff8c 	bl	8009584 <__multadd>
 800966c:	45a0      	cmp	r8, r4
 800966e:	d1f5      	bne.n	800965c <__s2b+0x4c>
 8009670:	f1a5 0408 	sub.w	r4, r5, #8
 8009674:	444c      	add	r4, r9
 8009676:	1b2d      	subs	r5, r5, r4
 8009678:	1963      	adds	r3, r4, r5
 800967a:	42bb      	cmp	r3, r7
 800967c:	db04      	blt.n	8009688 <__s2b+0x78>
 800967e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009682:	340a      	adds	r4, #10
 8009684:	2509      	movs	r5, #9
 8009686:	e7f6      	b.n	8009676 <__s2b+0x66>
 8009688:	f814 3b01 	ldrb.w	r3, [r4], #1
 800968c:	4601      	mov	r1, r0
 800968e:	3b30      	subs	r3, #48	@ 0x30
 8009690:	220a      	movs	r2, #10
 8009692:	4630      	mov	r0, r6
 8009694:	f7ff ff76 	bl	8009584 <__multadd>
 8009698:	e7ee      	b.n	8009678 <__s2b+0x68>
 800969a:	bf00      	nop
 800969c:	0800bef2 	.word	0x0800bef2
 80096a0:	0800bf03 	.word	0x0800bf03

080096a4 <__hi0bits>:
 80096a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80096a8:	4603      	mov	r3, r0
 80096aa:	bf36      	itet	cc
 80096ac:	0403      	lslcc	r3, r0, #16
 80096ae:	2000      	movcs	r0, #0
 80096b0:	2010      	movcc	r0, #16
 80096b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096b6:	bf3c      	itt	cc
 80096b8:	021b      	lslcc	r3, r3, #8
 80096ba:	3008      	addcc	r0, #8
 80096bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096c0:	bf3c      	itt	cc
 80096c2:	011b      	lslcc	r3, r3, #4
 80096c4:	3004      	addcc	r0, #4
 80096c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ca:	bf3c      	itt	cc
 80096cc:	009b      	lslcc	r3, r3, #2
 80096ce:	3002      	addcc	r0, #2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	db05      	blt.n	80096e0 <__hi0bits+0x3c>
 80096d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80096d8:	f100 0001 	add.w	r0, r0, #1
 80096dc:	bf08      	it	eq
 80096de:	2020      	moveq	r0, #32
 80096e0:	4770      	bx	lr

080096e2 <__lo0bits>:
 80096e2:	6803      	ldr	r3, [r0, #0]
 80096e4:	4602      	mov	r2, r0
 80096e6:	f013 0007 	ands.w	r0, r3, #7
 80096ea:	d00b      	beq.n	8009704 <__lo0bits+0x22>
 80096ec:	07d9      	lsls	r1, r3, #31
 80096ee:	d421      	bmi.n	8009734 <__lo0bits+0x52>
 80096f0:	0798      	lsls	r0, r3, #30
 80096f2:	bf49      	itett	mi
 80096f4:	085b      	lsrmi	r3, r3, #1
 80096f6:	089b      	lsrpl	r3, r3, #2
 80096f8:	2001      	movmi	r0, #1
 80096fa:	6013      	strmi	r3, [r2, #0]
 80096fc:	bf5c      	itt	pl
 80096fe:	6013      	strpl	r3, [r2, #0]
 8009700:	2002      	movpl	r0, #2
 8009702:	4770      	bx	lr
 8009704:	b299      	uxth	r1, r3
 8009706:	b909      	cbnz	r1, 800970c <__lo0bits+0x2a>
 8009708:	0c1b      	lsrs	r3, r3, #16
 800970a:	2010      	movs	r0, #16
 800970c:	b2d9      	uxtb	r1, r3
 800970e:	b909      	cbnz	r1, 8009714 <__lo0bits+0x32>
 8009710:	3008      	adds	r0, #8
 8009712:	0a1b      	lsrs	r3, r3, #8
 8009714:	0719      	lsls	r1, r3, #28
 8009716:	bf04      	itt	eq
 8009718:	091b      	lsreq	r3, r3, #4
 800971a:	3004      	addeq	r0, #4
 800971c:	0799      	lsls	r1, r3, #30
 800971e:	bf04      	itt	eq
 8009720:	089b      	lsreq	r3, r3, #2
 8009722:	3002      	addeq	r0, #2
 8009724:	07d9      	lsls	r1, r3, #31
 8009726:	d403      	bmi.n	8009730 <__lo0bits+0x4e>
 8009728:	085b      	lsrs	r3, r3, #1
 800972a:	f100 0001 	add.w	r0, r0, #1
 800972e:	d003      	beq.n	8009738 <__lo0bits+0x56>
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	4770      	bx	lr
 8009734:	2000      	movs	r0, #0
 8009736:	4770      	bx	lr
 8009738:	2020      	movs	r0, #32
 800973a:	4770      	bx	lr

0800973c <__i2b>:
 800973c:	b510      	push	{r4, lr}
 800973e:	460c      	mov	r4, r1
 8009740:	2101      	movs	r1, #1
 8009742:	f7ff febd 	bl	80094c0 <_Balloc>
 8009746:	4602      	mov	r2, r0
 8009748:	b928      	cbnz	r0, 8009756 <__i2b+0x1a>
 800974a:	4b05      	ldr	r3, [pc, #20]	@ (8009760 <__i2b+0x24>)
 800974c:	4805      	ldr	r0, [pc, #20]	@ (8009764 <__i2b+0x28>)
 800974e:	f240 1145 	movw	r1, #325	@ 0x145
 8009752:	f001 fd85 	bl	800b260 <__assert_func>
 8009756:	2301      	movs	r3, #1
 8009758:	6144      	str	r4, [r0, #20]
 800975a:	6103      	str	r3, [r0, #16]
 800975c:	bd10      	pop	{r4, pc}
 800975e:	bf00      	nop
 8009760:	0800bef2 	.word	0x0800bef2
 8009764:	0800bf03 	.word	0x0800bf03

08009768 <__multiply>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	4617      	mov	r7, r2
 800976e:	690a      	ldr	r2, [r1, #16]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	429a      	cmp	r2, r3
 8009774:	bfa8      	it	ge
 8009776:	463b      	movge	r3, r7
 8009778:	4689      	mov	r9, r1
 800977a:	bfa4      	itt	ge
 800977c:	460f      	movge	r7, r1
 800977e:	4699      	movge	r9, r3
 8009780:	693d      	ldr	r5, [r7, #16]
 8009782:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6879      	ldr	r1, [r7, #4]
 800978a:	eb05 060a 	add.w	r6, r5, sl
 800978e:	42b3      	cmp	r3, r6
 8009790:	b085      	sub	sp, #20
 8009792:	bfb8      	it	lt
 8009794:	3101      	addlt	r1, #1
 8009796:	f7ff fe93 	bl	80094c0 <_Balloc>
 800979a:	b930      	cbnz	r0, 80097aa <__multiply+0x42>
 800979c:	4602      	mov	r2, r0
 800979e:	4b41      	ldr	r3, [pc, #260]	@ (80098a4 <__multiply+0x13c>)
 80097a0:	4841      	ldr	r0, [pc, #260]	@ (80098a8 <__multiply+0x140>)
 80097a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80097a6:	f001 fd5b 	bl	800b260 <__assert_func>
 80097aa:	f100 0414 	add.w	r4, r0, #20
 80097ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80097b2:	4623      	mov	r3, r4
 80097b4:	2200      	movs	r2, #0
 80097b6:	4573      	cmp	r3, lr
 80097b8:	d320      	bcc.n	80097fc <__multiply+0x94>
 80097ba:	f107 0814 	add.w	r8, r7, #20
 80097be:	f109 0114 	add.w	r1, r9, #20
 80097c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80097c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80097ca:	9302      	str	r3, [sp, #8]
 80097cc:	1beb      	subs	r3, r5, r7
 80097ce:	3b15      	subs	r3, #21
 80097d0:	f023 0303 	bic.w	r3, r3, #3
 80097d4:	3304      	adds	r3, #4
 80097d6:	3715      	adds	r7, #21
 80097d8:	42bd      	cmp	r5, r7
 80097da:	bf38      	it	cc
 80097dc:	2304      	movcc	r3, #4
 80097de:	9301      	str	r3, [sp, #4]
 80097e0:	9b02      	ldr	r3, [sp, #8]
 80097e2:	9103      	str	r1, [sp, #12]
 80097e4:	428b      	cmp	r3, r1
 80097e6:	d80c      	bhi.n	8009802 <__multiply+0x9a>
 80097e8:	2e00      	cmp	r6, #0
 80097ea:	dd03      	ble.n	80097f4 <__multiply+0x8c>
 80097ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d055      	beq.n	80098a0 <__multiply+0x138>
 80097f4:	6106      	str	r6, [r0, #16]
 80097f6:	b005      	add	sp, #20
 80097f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fc:	f843 2b04 	str.w	r2, [r3], #4
 8009800:	e7d9      	b.n	80097b6 <__multiply+0x4e>
 8009802:	f8b1 a000 	ldrh.w	sl, [r1]
 8009806:	f1ba 0f00 	cmp.w	sl, #0
 800980a:	d01f      	beq.n	800984c <__multiply+0xe4>
 800980c:	46c4      	mov	ip, r8
 800980e:	46a1      	mov	r9, r4
 8009810:	2700      	movs	r7, #0
 8009812:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009816:	f8d9 3000 	ldr.w	r3, [r9]
 800981a:	fa1f fb82 	uxth.w	fp, r2
 800981e:	b29b      	uxth	r3, r3
 8009820:	fb0a 330b 	mla	r3, sl, fp, r3
 8009824:	443b      	add	r3, r7
 8009826:	f8d9 7000 	ldr.w	r7, [r9]
 800982a:	0c12      	lsrs	r2, r2, #16
 800982c:	0c3f      	lsrs	r7, r7, #16
 800982e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009832:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009836:	b29b      	uxth	r3, r3
 8009838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800983c:	4565      	cmp	r5, ip
 800983e:	f849 3b04 	str.w	r3, [r9], #4
 8009842:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009846:	d8e4      	bhi.n	8009812 <__multiply+0xaa>
 8009848:	9b01      	ldr	r3, [sp, #4]
 800984a:	50e7      	str	r7, [r4, r3]
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009852:	3104      	adds	r1, #4
 8009854:	f1b9 0f00 	cmp.w	r9, #0
 8009858:	d020      	beq.n	800989c <__multiply+0x134>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	4647      	mov	r7, r8
 800985e:	46a4      	mov	ip, r4
 8009860:	f04f 0a00 	mov.w	sl, #0
 8009864:	f8b7 b000 	ldrh.w	fp, [r7]
 8009868:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800986c:	fb09 220b 	mla	r2, r9, fp, r2
 8009870:	4452      	add	r2, sl
 8009872:	b29b      	uxth	r3, r3
 8009874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009878:	f84c 3b04 	str.w	r3, [ip], #4
 800987c:	f857 3b04 	ldr.w	r3, [r7], #4
 8009880:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009884:	f8bc 3000 	ldrh.w	r3, [ip]
 8009888:	fb09 330a 	mla	r3, r9, sl, r3
 800988c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009890:	42bd      	cmp	r5, r7
 8009892:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009896:	d8e5      	bhi.n	8009864 <__multiply+0xfc>
 8009898:	9a01      	ldr	r2, [sp, #4]
 800989a:	50a3      	str	r3, [r4, r2]
 800989c:	3404      	adds	r4, #4
 800989e:	e79f      	b.n	80097e0 <__multiply+0x78>
 80098a0:	3e01      	subs	r6, #1
 80098a2:	e7a1      	b.n	80097e8 <__multiply+0x80>
 80098a4:	0800bef2 	.word	0x0800bef2
 80098a8:	0800bf03 	.word	0x0800bf03

080098ac <__pow5mult>:
 80098ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b0:	4615      	mov	r5, r2
 80098b2:	f012 0203 	ands.w	r2, r2, #3
 80098b6:	4607      	mov	r7, r0
 80098b8:	460e      	mov	r6, r1
 80098ba:	d007      	beq.n	80098cc <__pow5mult+0x20>
 80098bc:	4c25      	ldr	r4, [pc, #148]	@ (8009954 <__pow5mult+0xa8>)
 80098be:	3a01      	subs	r2, #1
 80098c0:	2300      	movs	r3, #0
 80098c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098c6:	f7ff fe5d 	bl	8009584 <__multadd>
 80098ca:	4606      	mov	r6, r0
 80098cc:	10ad      	asrs	r5, r5, #2
 80098ce:	d03d      	beq.n	800994c <__pow5mult+0xa0>
 80098d0:	69fc      	ldr	r4, [r7, #28]
 80098d2:	b97c      	cbnz	r4, 80098f4 <__pow5mult+0x48>
 80098d4:	2010      	movs	r0, #16
 80098d6:	f7ff fd3d 	bl	8009354 <malloc>
 80098da:	4602      	mov	r2, r0
 80098dc:	61f8      	str	r0, [r7, #28]
 80098de:	b928      	cbnz	r0, 80098ec <__pow5mult+0x40>
 80098e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009958 <__pow5mult+0xac>)
 80098e2:	481e      	ldr	r0, [pc, #120]	@ (800995c <__pow5mult+0xb0>)
 80098e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80098e8:	f001 fcba 	bl	800b260 <__assert_func>
 80098ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098f0:	6004      	str	r4, [r0, #0]
 80098f2:	60c4      	str	r4, [r0, #12]
 80098f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80098f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098fc:	b94c      	cbnz	r4, 8009912 <__pow5mult+0x66>
 80098fe:	f240 2171 	movw	r1, #625	@ 0x271
 8009902:	4638      	mov	r0, r7
 8009904:	f7ff ff1a 	bl	800973c <__i2b>
 8009908:	2300      	movs	r3, #0
 800990a:	f8c8 0008 	str.w	r0, [r8, #8]
 800990e:	4604      	mov	r4, r0
 8009910:	6003      	str	r3, [r0, #0]
 8009912:	f04f 0900 	mov.w	r9, #0
 8009916:	07eb      	lsls	r3, r5, #31
 8009918:	d50a      	bpl.n	8009930 <__pow5mult+0x84>
 800991a:	4631      	mov	r1, r6
 800991c:	4622      	mov	r2, r4
 800991e:	4638      	mov	r0, r7
 8009920:	f7ff ff22 	bl	8009768 <__multiply>
 8009924:	4631      	mov	r1, r6
 8009926:	4680      	mov	r8, r0
 8009928:	4638      	mov	r0, r7
 800992a:	f7ff fe09 	bl	8009540 <_Bfree>
 800992e:	4646      	mov	r6, r8
 8009930:	106d      	asrs	r5, r5, #1
 8009932:	d00b      	beq.n	800994c <__pow5mult+0xa0>
 8009934:	6820      	ldr	r0, [r4, #0]
 8009936:	b938      	cbnz	r0, 8009948 <__pow5mult+0x9c>
 8009938:	4622      	mov	r2, r4
 800993a:	4621      	mov	r1, r4
 800993c:	4638      	mov	r0, r7
 800993e:	f7ff ff13 	bl	8009768 <__multiply>
 8009942:	6020      	str	r0, [r4, #0]
 8009944:	f8c0 9000 	str.w	r9, [r0]
 8009948:	4604      	mov	r4, r0
 800994a:	e7e4      	b.n	8009916 <__pow5mult+0x6a>
 800994c:	4630      	mov	r0, r6
 800994e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009952:	bf00      	nop
 8009954:	0800c014 	.word	0x0800c014
 8009958:	0800be83 	.word	0x0800be83
 800995c:	0800bf03 	.word	0x0800bf03

08009960 <__lshift>:
 8009960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009964:	460c      	mov	r4, r1
 8009966:	6849      	ldr	r1, [r1, #4]
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800996e:	68a3      	ldr	r3, [r4, #8]
 8009970:	4607      	mov	r7, r0
 8009972:	4691      	mov	r9, r2
 8009974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009978:	f108 0601 	add.w	r6, r8, #1
 800997c:	42b3      	cmp	r3, r6
 800997e:	db0b      	blt.n	8009998 <__lshift+0x38>
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff fd9d 	bl	80094c0 <_Balloc>
 8009986:	4605      	mov	r5, r0
 8009988:	b948      	cbnz	r0, 800999e <__lshift+0x3e>
 800998a:	4602      	mov	r2, r0
 800998c:	4b28      	ldr	r3, [pc, #160]	@ (8009a30 <__lshift+0xd0>)
 800998e:	4829      	ldr	r0, [pc, #164]	@ (8009a34 <__lshift+0xd4>)
 8009990:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009994:	f001 fc64 	bl	800b260 <__assert_func>
 8009998:	3101      	adds	r1, #1
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	e7ee      	b.n	800997c <__lshift+0x1c>
 800999e:	2300      	movs	r3, #0
 80099a0:	f100 0114 	add.w	r1, r0, #20
 80099a4:	f100 0210 	add.w	r2, r0, #16
 80099a8:	4618      	mov	r0, r3
 80099aa:	4553      	cmp	r3, sl
 80099ac:	db33      	blt.n	8009a16 <__lshift+0xb6>
 80099ae:	6920      	ldr	r0, [r4, #16]
 80099b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099b4:	f104 0314 	add.w	r3, r4, #20
 80099b8:	f019 091f 	ands.w	r9, r9, #31
 80099bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099c4:	d02b      	beq.n	8009a1e <__lshift+0xbe>
 80099c6:	f1c9 0e20 	rsb	lr, r9, #32
 80099ca:	468a      	mov	sl, r1
 80099cc:	2200      	movs	r2, #0
 80099ce:	6818      	ldr	r0, [r3, #0]
 80099d0:	fa00 f009 	lsl.w	r0, r0, r9
 80099d4:	4310      	orrs	r0, r2
 80099d6:	f84a 0b04 	str.w	r0, [sl], #4
 80099da:	f853 2b04 	ldr.w	r2, [r3], #4
 80099de:	459c      	cmp	ip, r3
 80099e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80099e4:	d8f3      	bhi.n	80099ce <__lshift+0x6e>
 80099e6:	ebac 0304 	sub.w	r3, ip, r4
 80099ea:	3b15      	subs	r3, #21
 80099ec:	f023 0303 	bic.w	r3, r3, #3
 80099f0:	3304      	adds	r3, #4
 80099f2:	f104 0015 	add.w	r0, r4, #21
 80099f6:	4560      	cmp	r0, ip
 80099f8:	bf88      	it	hi
 80099fa:	2304      	movhi	r3, #4
 80099fc:	50ca      	str	r2, [r1, r3]
 80099fe:	b10a      	cbz	r2, 8009a04 <__lshift+0xa4>
 8009a00:	f108 0602 	add.w	r6, r8, #2
 8009a04:	3e01      	subs	r6, #1
 8009a06:	4638      	mov	r0, r7
 8009a08:	612e      	str	r6, [r5, #16]
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	f7ff fd98 	bl	8009540 <_Bfree>
 8009a10:	4628      	mov	r0, r5
 8009a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a16:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	e7c5      	b.n	80099aa <__lshift+0x4a>
 8009a1e:	3904      	subs	r1, #4
 8009a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a24:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a28:	459c      	cmp	ip, r3
 8009a2a:	d8f9      	bhi.n	8009a20 <__lshift+0xc0>
 8009a2c:	e7ea      	b.n	8009a04 <__lshift+0xa4>
 8009a2e:	bf00      	nop
 8009a30:	0800bef2 	.word	0x0800bef2
 8009a34:	0800bf03 	.word	0x0800bf03

08009a38 <__mcmp>:
 8009a38:	690a      	ldr	r2, [r1, #16]
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	6900      	ldr	r0, [r0, #16]
 8009a3e:	1a80      	subs	r0, r0, r2
 8009a40:	b530      	push	{r4, r5, lr}
 8009a42:	d10e      	bne.n	8009a62 <__mcmp+0x2a>
 8009a44:	3314      	adds	r3, #20
 8009a46:	3114      	adds	r1, #20
 8009a48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a58:	4295      	cmp	r5, r2
 8009a5a:	d003      	beq.n	8009a64 <__mcmp+0x2c>
 8009a5c:	d205      	bcs.n	8009a6a <__mcmp+0x32>
 8009a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a62:	bd30      	pop	{r4, r5, pc}
 8009a64:	42a3      	cmp	r3, r4
 8009a66:	d3f3      	bcc.n	8009a50 <__mcmp+0x18>
 8009a68:	e7fb      	b.n	8009a62 <__mcmp+0x2a>
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	e7f9      	b.n	8009a62 <__mcmp+0x2a>
	...

08009a70 <__mdiff>:
 8009a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	4689      	mov	r9, r1
 8009a76:	4606      	mov	r6, r0
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4648      	mov	r0, r9
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	f7ff ffdb 	bl	8009a38 <__mcmp>
 8009a82:	1e05      	subs	r5, r0, #0
 8009a84:	d112      	bne.n	8009aac <__mdiff+0x3c>
 8009a86:	4629      	mov	r1, r5
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f7ff fd19 	bl	80094c0 <_Balloc>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	b928      	cbnz	r0, 8009a9e <__mdiff+0x2e>
 8009a92:	4b3f      	ldr	r3, [pc, #252]	@ (8009b90 <__mdiff+0x120>)
 8009a94:	f240 2137 	movw	r1, #567	@ 0x237
 8009a98:	483e      	ldr	r0, [pc, #248]	@ (8009b94 <__mdiff+0x124>)
 8009a9a:	f001 fbe1 	bl	800b260 <__assert_func>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	b003      	add	sp, #12
 8009aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aac:	bfbc      	itt	lt
 8009aae:	464b      	movlt	r3, r9
 8009ab0:	46a1      	movlt	r9, r4
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ab8:	bfba      	itte	lt
 8009aba:	461c      	movlt	r4, r3
 8009abc:	2501      	movlt	r5, #1
 8009abe:	2500      	movge	r5, #0
 8009ac0:	f7ff fcfe 	bl	80094c0 <_Balloc>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	b918      	cbnz	r0, 8009ad0 <__mdiff+0x60>
 8009ac8:	4b31      	ldr	r3, [pc, #196]	@ (8009b90 <__mdiff+0x120>)
 8009aca:	f240 2145 	movw	r1, #581	@ 0x245
 8009ace:	e7e3      	b.n	8009a98 <__mdiff+0x28>
 8009ad0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009ad4:	6926      	ldr	r6, [r4, #16]
 8009ad6:	60c5      	str	r5, [r0, #12]
 8009ad8:	f109 0310 	add.w	r3, r9, #16
 8009adc:	f109 0514 	add.w	r5, r9, #20
 8009ae0:	f104 0e14 	add.w	lr, r4, #20
 8009ae4:	f100 0b14 	add.w	fp, r0, #20
 8009ae8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009aec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	46d9      	mov	r9, fp
 8009af4:	f04f 0c00 	mov.w	ip, #0
 8009af8:	9b01      	ldr	r3, [sp, #4]
 8009afa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009afe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b02:	9301      	str	r3, [sp, #4]
 8009b04:	fa1f f38a 	uxth.w	r3, sl
 8009b08:	4619      	mov	r1, r3
 8009b0a:	b283      	uxth	r3, r0
 8009b0c:	1acb      	subs	r3, r1, r3
 8009b0e:	0c00      	lsrs	r0, r0, #16
 8009b10:	4463      	add	r3, ip
 8009b12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b20:	4576      	cmp	r6, lr
 8009b22:	f849 3b04 	str.w	r3, [r9], #4
 8009b26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b2a:	d8e5      	bhi.n	8009af8 <__mdiff+0x88>
 8009b2c:	1b33      	subs	r3, r6, r4
 8009b2e:	3b15      	subs	r3, #21
 8009b30:	f023 0303 	bic.w	r3, r3, #3
 8009b34:	3415      	adds	r4, #21
 8009b36:	3304      	adds	r3, #4
 8009b38:	42a6      	cmp	r6, r4
 8009b3a:	bf38      	it	cc
 8009b3c:	2304      	movcc	r3, #4
 8009b3e:	441d      	add	r5, r3
 8009b40:	445b      	add	r3, fp
 8009b42:	461e      	mov	r6, r3
 8009b44:	462c      	mov	r4, r5
 8009b46:	4544      	cmp	r4, r8
 8009b48:	d30e      	bcc.n	8009b68 <__mdiff+0xf8>
 8009b4a:	f108 0103 	add.w	r1, r8, #3
 8009b4e:	1b49      	subs	r1, r1, r5
 8009b50:	f021 0103 	bic.w	r1, r1, #3
 8009b54:	3d03      	subs	r5, #3
 8009b56:	45a8      	cmp	r8, r5
 8009b58:	bf38      	it	cc
 8009b5a:	2100      	movcc	r1, #0
 8009b5c:	440b      	add	r3, r1
 8009b5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b62:	b191      	cbz	r1, 8009b8a <__mdiff+0x11a>
 8009b64:	6117      	str	r7, [r2, #16]
 8009b66:	e79d      	b.n	8009aa4 <__mdiff+0x34>
 8009b68:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b6c:	46e6      	mov	lr, ip
 8009b6e:	0c08      	lsrs	r0, r1, #16
 8009b70:	fa1c fc81 	uxtah	ip, ip, r1
 8009b74:	4471      	add	r1, lr
 8009b76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009b7a:	b289      	uxth	r1, r1
 8009b7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b80:	f846 1b04 	str.w	r1, [r6], #4
 8009b84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b88:	e7dd      	b.n	8009b46 <__mdiff+0xd6>
 8009b8a:	3f01      	subs	r7, #1
 8009b8c:	e7e7      	b.n	8009b5e <__mdiff+0xee>
 8009b8e:	bf00      	nop
 8009b90:	0800bef2 	.word	0x0800bef2
 8009b94:	0800bf03 	.word	0x0800bf03

08009b98 <__ulp>:
 8009b98:	b082      	sub	sp, #8
 8009b9a:	ed8d 0b00 	vstr	d0, [sp]
 8009b9e:	9a01      	ldr	r2, [sp, #4]
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8009be0 <__ulp+0x48>)
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	dc08      	bgt.n	8009bbe <__ulp+0x26>
 8009bac:	425b      	negs	r3, r3
 8009bae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009bb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009bb6:	da04      	bge.n	8009bc2 <__ulp+0x2a>
 8009bb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009bbc:	4113      	asrs	r3, r2
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	e008      	b.n	8009bd4 <__ulp+0x3c>
 8009bc2:	f1a2 0314 	sub.w	r3, r2, #20
 8009bc6:	2b1e      	cmp	r3, #30
 8009bc8:	bfda      	itte	le
 8009bca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009bce:	40da      	lsrle	r2, r3
 8009bd0:	2201      	movgt	r2, #1
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	ec41 0b10 	vmov	d0, r0, r1
 8009bdc:	b002      	add	sp, #8
 8009bde:	4770      	bx	lr
 8009be0:	7ff00000 	.word	0x7ff00000

08009be4 <__b2d>:
 8009be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be8:	6906      	ldr	r6, [r0, #16]
 8009bea:	f100 0814 	add.w	r8, r0, #20
 8009bee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009bf2:	1f37      	subs	r7, r6, #4
 8009bf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	f7ff fd53 	bl	80096a4 <__hi0bits>
 8009bfe:	f1c0 0320 	rsb	r3, r0, #32
 8009c02:	280a      	cmp	r0, #10
 8009c04:	600b      	str	r3, [r1, #0]
 8009c06:	491b      	ldr	r1, [pc, #108]	@ (8009c74 <__b2d+0x90>)
 8009c08:	dc15      	bgt.n	8009c36 <__b2d+0x52>
 8009c0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009c0e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009c12:	45b8      	cmp	r8, r7
 8009c14:	ea43 0501 	orr.w	r5, r3, r1
 8009c18:	bf34      	ite	cc
 8009c1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009c1e:	2300      	movcs	r3, #0
 8009c20:	3015      	adds	r0, #21
 8009c22:	fa02 f000 	lsl.w	r0, r2, r0
 8009c26:	fa23 f30c 	lsr.w	r3, r3, ip
 8009c2a:	4303      	orrs	r3, r0
 8009c2c:	461c      	mov	r4, r3
 8009c2e:	ec45 4b10 	vmov	d0, r4, r5
 8009c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c36:	45b8      	cmp	r8, r7
 8009c38:	bf3a      	itte	cc
 8009c3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009c3e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009c42:	2300      	movcs	r3, #0
 8009c44:	380b      	subs	r0, #11
 8009c46:	d012      	beq.n	8009c6e <__b2d+0x8a>
 8009c48:	f1c0 0120 	rsb	r1, r0, #32
 8009c4c:	fa23 f401 	lsr.w	r4, r3, r1
 8009c50:	4082      	lsls	r2, r0
 8009c52:	4322      	orrs	r2, r4
 8009c54:	4547      	cmp	r7, r8
 8009c56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009c5a:	bf8c      	ite	hi
 8009c5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009c60:	2200      	movls	r2, #0
 8009c62:	4083      	lsls	r3, r0
 8009c64:	40ca      	lsrs	r2, r1
 8009c66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	e7de      	b.n	8009c2c <__b2d+0x48>
 8009c6e:	ea42 0501 	orr.w	r5, r2, r1
 8009c72:	e7db      	b.n	8009c2c <__b2d+0x48>
 8009c74:	3ff00000 	.word	0x3ff00000

08009c78 <__d2b>:
 8009c78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	2101      	movs	r1, #1
 8009c80:	ec59 8b10 	vmov	r8, r9, d0
 8009c84:	4616      	mov	r6, r2
 8009c86:	f7ff fc1b 	bl	80094c0 <_Balloc>
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	b930      	cbnz	r0, 8009c9c <__d2b+0x24>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	4b23      	ldr	r3, [pc, #140]	@ (8009d20 <__d2b+0xa8>)
 8009c92:	4824      	ldr	r0, [pc, #144]	@ (8009d24 <__d2b+0xac>)
 8009c94:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c98:	f001 fae2 	bl	800b260 <__assert_func>
 8009c9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ca4:	b10d      	cbz	r5, 8009caa <__d2b+0x32>
 8009ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009caa:	9301      	str	r3, [sp, #4]
 8009cac:	f1b8 0300 	subs.w	r3, r8, #0
 8009cb0:	d023      	beq.n	8009cfa <__d2b+0x82>
 8009cb2:	4668      	mov	r0, sp
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	f7ff fd14 	bl	80096e2 <__lo0bits>
 8009cba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009cbe:	b1d0      	cbz	r0, 8009cf6 <__d2b+0x7e>
 8009cc0:	f1c0 0320 	rsb	r3, r0, #32
 8009cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc8:	430b      	orrs	r3, r1
 8009cca:	40c2      	lsrs	r2, r0
 8009ccc:	6163      	str	r3, [r4, #20]
 8009cce:	9201      	str	r2, [sp, #4]
 8009cd0:	9b01      	ldr	r3, [sp, #4]
 8009cd2:	61a3      	str	r3, [r4, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bf0c      	ite	eq
 8009cd8:	2201      	moveq	r2, #1
 8009cda:	2202      	movne	r2, #2
 8009cdc:	6122      	str	r2, [r4, #16]
 8009cde:	b1a5      	cbz	r5, 8009d0a <__d2b+0x92>
 8009ce0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009ce4:	4405      	add	r5, r0
 8009ce6:	603d      	str	r5, [r7, #0]
 8009ce8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009cec:	6030      	str	r0, [r6, #0]
 8009cee:	4620      	mov	r0, r4
 8009cf0:	b003      	add	sp, #12
 8009cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cf6:	6161      	str	r1, [r4, #20]
 8009cf8:	e7ea      	b.n	8009cd0 <__d2b+0x58>
 8009cfa:	a801      	add	r0, sp, #4
 8009cfc:	f7ff fcf1 	bl	80096e2 <__lo0bits>
 8009d00:	9b01      	ldr	r3, [sp, #4]
 8009d02:	6163      	str	r3, [r4, #20]
 8009d04:	3020      	adds	r0, #32
 8009d06:	2201      	movs	r2, #1
 8009d08:	e7e8      	b.n	8009cdc <__d2b+0x64>
 8009d0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d12:	6038      	str	r0, [r7, #0]
 8009d14:	6918      	ldr	r0, [r3, #16]
 8009d16:	f7ff fcc5 	bl	80096a4 <__hi0bits>
 8009d1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d1e:	e7e5      	b.n	8009cec <__d2b+0x74>
 8009d20:	0800bef2 	.word	0x0800bef2
 8009d24:	0800bf03 	.word	0x0800bf03

08009d28 <__ratio>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	e9cd 1000 	strd	r1, r0, [sp]
 8009d32:	a902      	add	r1, sp, #8
 8009d34:	f7ff ff56 	bl	8009be4 <__b2d>
 8009d38:	9800      	ldr	r0, [sp, #0]
 8009d3a:	a903      	add	r1, sp, #12
 8009d3c:	ec55 4b10 	vmov	r4, r5, d0
 8009d40:	f7ff ff50 	bl	8009be4 <__b2d>
 8009d44:	9b01      	ldr	r3, [sp, #4]
 8009d46:	6919      	ldr	r1, [r3, #16]
 8009d48:	9b00      	ldr	r3, [sp, #0]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	1ac9      	subs	r1, r1, r3
 8009d4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009d52:	1a9b      	subs	r3, r3, r2
 8009d54:	ec5b ab10 	vmov	sl, fp, d0
 8009d58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bfce      	itee	gt
 8009d60:	462a      	movgt	r2, r5
 8009d62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d66:	465a      	movle	r2, fp
 8009d68:	462f      	mov	r7, r5
 8009d6a:	46d9      	mov	r9, fp
 8009d6c:	bfcc      	ite	gt
 8009d6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009d76:	464b      	mov	r3, r9
 8009d78:	4652      	mov	r2, sl
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	f7f6 fd95 	bl	80008ac <__aeabi_ddiv>
 8009d82:	ec41 0b10 	vmov	d0, r0, r1
 8009d86:	b005      	add	sp, #20
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d8c <__copybits>:
 8009d8c:	3901      	subs	r1, #1
 8009d8e:	b570      	push	{r4, r5, r6, lr}
 8009d90:	1149      	asrs	r1, r1, #5
 8009d92:	6914      	ldr	r4, [r2, #16]
 8009d94:	3101      	adds	r1, #1
 8009d96:	f102 0314 	add.w	r3, r2, #20
 8009d9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009da2:	1f05      	subs	r5, r0, #4
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	d30c      	bcc.n	8009dc2 <__copybits+0x36>
 8009da8:	1aa3      	subs	r3, r4, r2
 8009daa:	3b11      	subs	r3, #17
 8009dac:	f023 0303 	bic.w	r3, r3, #3
 8009db0:	3211      	adds	r2, #17
 8009db2:	42a2      	cmp	r2, r4
 8009db4:	bf88      	it	hi
 8009db6:	2300      	movhi	r3, #0
 8009db8:	4418      	add	r0, r3
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4288      	cmp	r0, r1
 8009dbe:	d305      	bcc.n	8009dcc <__copybits+0x40>
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
 8009dc2:	f853 6b04 	ldr.w	r6, [r3], #4
 8009dc6:	f845 6f04 	str.w	r6, [r5, #4]!
 8009dca:	e7eb      	b.n	8009da4 <__copybits+0x18>
 8009dcc:	f840 3b04 	str.w	r3, [r0], #4
 8009dd0:	e7f4      	b.n	8009dbc <__copybits+0x30>

08009dd2 <__any_on>:
 8009dd2:	f100 0214 	add.w	r2, r0, #20
 8009dd6:	6900      	ldr	r0, [r0, #16]
 8009dd8:	114b      	asrs	r3, r1, #5
 8009dda:	4298      	cmp	r0, r3
 8009ddc:	b510      	push	{r4, lr}
 8009dde:	db11      	blt.n	8009e04 <__any_on+0x32>
 8009de0:	dd0a      	ble.n	8009df8 <__any_on+0x26>
 8009de2:	f011 011f 	ands.w	r1, r1, #31
 8009de6:	d007      	beq.n	8009df8 <__any_on+0x26>
 8009de8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009dec:	fa24 f001 	lsr.w	r0, r4, r1
 8009df0:	fa00 f101 	lsl.w	r1, r0, r1
 8009df4:	428c      	cmp	r4, r1
 8009df6:	d10b      	bne.n	8009e10 <__any_on+0x3e>
 8009df8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d803      	bhi.n	8009e08 <__any_on+0x36>
 8009e00:	2000      	movs	r0, #0
 8009e02:	bd10      	pop	{r4, pc}
 8009e04:	4603      	mov	r3, r0
 8009e06:	e7f7      	b.n	8009df8 <__any_on+0x26>
 8009e08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	d0f5      	beq.n	8009dfc <__any_on+0x2a>
 8009e10:	2001      	movs	r0, #1
 8009e12:	e7f6      	b.n	8009e02 <__any_on+0x30>

08009e14 <sulp>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	4604      	mov	r4, r0
 8009e18:	460d      	mov	r5, r1
 8009e1a:	ec45 4b10 	vmov	d0, r4, r5
 8009e1e:	4616      	mov	r6, r2
 8009e20:	f7ff feba 	bl	8009b98 <__ulp>
 8009e24:	ec51 0b10 	vmov	r0, r1, d0
 8009e28:	b17e      	cbz	r6, 8009e4a <sulp+0x36>
 8009e2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e2e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	dd09      	ble.n	8009e4a <sulp+0x36>
 8009e36:	051b      	lsls	r3, r3, #20
 8009e38:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009e3c:	2400      	movs	r4, #0
 8009e3e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009e42:	4622      	mov	r2, r4
 8009e44:	462b      	mov	r3, r5
 8009e46:	f7f6 fc07 	bl	8000658 <__aeabi_dmul>
 8009e4a:	ec41 0b10 	vmov	d0, r0, r1
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}

08009e50 <_strtod_l>:
 8009e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	b09f      	sub	sp, #124	@ 0x7c
 8009e56:	460c      	mov	r4, r1
 8009e58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009e5e:	9005      	str	r0, [sp, #20]
 8009e60:	f04f 0a00 	mov.w	sl, #0
 8009e64:	f04f 0b00 	mov.w	fp, #0
 8009e68:	460a      	mov	r2, r1
 8009e6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e6c:	7811      	ldrb	r1, [r2, #0]
 8009e6e:	292b      	cmp	r1, #43	@ 0x2b
 8009e70:	d04a      	beq.n	8009f08 <_strtod_l+0xb8>
 8009e72:	d838      	bhi.n	8009ee6 <_strtod_l+0x96>
 8009e74:	290d      	cmp	r1, #13
 8009e76:	d832      	bhi.n	8009ede <_strtod_l+0x8e>
 8009e78:	2908      	cmp	r1, #8
 8009e7a:	d832      	bhi.n	8009ee2 <_strtod_l+0x92>
 8009e7c:	2900      	cmp	r1, #0
 8009e7e:	d03b      	beq.n	8009ef8 <_strtod_l+0xa8>
 8009e80:	2200      	movs	r2, #0
 8009e82:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009e86:	782a      	ldrb	r2, [r5, #0]
 8009e88:	2a30      	cmp	r2, #48	@ 0x30
 8009e8a:	f040 80b2 	bne.w	8009ff2 <_strtod_l+0x1a2>
 8009e8e:	786a      	ldrb	r2, [r5, #1]
 8009e90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e94:	2a58      	cmp	r2, #88	@ 0x58
 8009e96:	d16e      	bne.n	8009f76 <_strtod_l+0x126>
 8009e98:	9302      	str	r3, [sp, #8]
 8009e9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e9c:	9301      	str	r3, [sp, #4]
 8009e9e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	4a8f      	ldr	r2, [pc, #572]	@ (800a0e0 <_strtod_l+0x290>)
 8009ea4:	9805      	ldr	r0, [sp, #20]
 8009ea6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ea8:	a919      	add	r1, sp, #100	@ 0x64
 8009eaa:	f001 fa73 	bl	800b394 <__gethex>
 8009eae:	f010 060f 	ands.w	r6, r0, #15
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	d005      	beq.n	8009ec2 <_strtod_l+0x72>
 8009eb6:	2e06      	cmp	r6, #6
 8009eb8:	d128      	bne.n	8009f0c <_strtod_l+0xbc>
 8009eba:	3501      	adds	r5, #1
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9519      	str	r5, [sp, #100]	@ 0x64
 8009ec0:	930e      	str	r3, [sp, #56]	@ 0x38
 8009ec2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f040 858e 	bne.w	800a9e6 <_strtod_l+0xb96>
 8009eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ecc:	b1cb      	cbz	r3, 8009f02 <_strtod_l+0xb2>
 8009ece:	4652      	mov	r2, sl
 8009ed0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009ed4:	ec43 2b10 	vmov	d0, r2, r3
 8009ed8:	b01f      	add	sp, #124	@ 0x7c
 8009eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ede:	2920      	cmp	r1, #32
 8009ee0:	d1ce      	bne.n	8009e80 <_strtod_l+0x30>
 8009ee2:	3201      	adds	r2, #1
 8009ee4:	e7c1      	b.n	8009e6a <_strtod_l+0x1a>
 8009ee6:	292d      	cmp	r1, #45	@ 0x2d
 8009ee8:	d1ca      	bne.n	8009e80 <_strtod_l+0x30>
 8009eea:	2101      	movs	r1, #1
 8009eec:	910e      	str	r1, [sp, #56]	@ 0x38
 8009eee:	1c51      	adds	r1, r2, #1
 8009ef0:	9119      	str	r1, [sp, #100]	@ 0x64
 8009ef2:	7852      	ldrb	r2, [r2, #1]
 8009ef4:	2a00      	cmp	r2, #0
 8009ef6:	d1c5      	bne.n	8009e84 <_strtod_l+0x34>
 8009ef8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009efa:	9419      	str	r4, [sp, #100]	@ 0x64
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f040 8570 	bne.w	800a9e2 <_strtod_l+0xb92>
 8009f02:	4652      	mov	r2, sl
 8009f04:	465b      	mov	r3, fp
 8009f06:	e7e5      	b.n	8009ed4 <_strtod_l+0x84>
 8009f08:	2100      	movs	r1, #0
 8009f0a:	e7ef      	b.n	8009eec <_strtod_l+0x9c>
 8009f0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f0e:	b13a      	cbz	r2, 8009f20 <_strtod_l+0xd0>
 8009f10:	2135      	movs	r1, #53	@ 0x35
 8009f12:	a81c      	add	r0, sp, #112	@ 0x70
 8009f14:	f7ff ff3a 	bl	8009d8c <__copybits>
 8009f18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f1a:	9805      	ldr	r0, [sp, #20]
 8009f1c:	f7ff fb10 	bl	8009540 <_Bfree>
 8009f20:	3e01      	subs	r6, #1
 8009f22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009f24:	2e04      	cmp	r6, #4
 8009f26:	d806      	bhi.n	8009f36 <_strtod_l+0xe6>
 8009f28:	e8df f006 	tbb	[pc, r6]
 8009f2c:	201d0314 	.word	0x201d0314
 8009f30:	14          	.byte	0x14
 8009f31:	00          	.byte	0x00
 8009f32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009f36:	05e1      	lsls	r1, r4, #23
 8009f38:	bf48      	it	mi
 8009f3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009f3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f42:	0d1b      	lsrs	r3, r3, #20
 8009f44:	051b      	lsls	r3, r3, #20
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1bb      	bne.n	8009ec2 <_strtod_l+0x72>
 8009f4a:	f7fe fb2b 	bl	80085a4 <__errno>
 8009f4e:	2322      	movs	r3, #34	@ 0x22
 8009f50:	6003      	str	r3, [r0, #0]
 8009f52:	e7b6      	b.n	8009ec2 <_strtod_l+0x72>
 8009f54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009f58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009f5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009f60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f64:	e7e7      	b.n	8009f36 <_strtod_l+0xe6>
 8009f66:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a0e8 <_strtod_l+0x298>
 8009f6a:	e7e4      	b.n	8009f36 <_strtod_l+0xe6>
 8009f6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009f70:	f04f 3aff 	mov.w	sl, #4294967295
 8009f74:	e7df      	b.n	8009f36 <_strtod_l+0xe6>
 8009f76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f7c:	785b      	ldrb	r3, [r3, #1]
 8009f7e:	2b30      	cmp	r3, #48	@ 0x30
 8009f80:	d0f9      	beq.n	8009f76 <_strtod_l+0x126>
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d09d      	beq.n	8009ec2 <_strtod_l+0x72>
 8009f86:	2301      	movs	r3, #1
 8009f88:	2700      	movs	r7, #0
 8009f8a:	9308      	str	r3, [sp, #32]
 8009f8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f90:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009f92:	46b9      	mov	r9, r7
 8009f94:	220a      	movs	r2, #10
 8009f96:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009f98:	7805      	ldrb	r5, [r0, #0]
 8009f9a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009f9e:	b2d9      	uxtb	r1, r3
 8009fa0:	2909      	cmp	r1, #9
 8009fa2:	d928      	bls.n	8009ff6 <_strtod_l+0x1a6>
 8009fa4:	494f      	ldr	r1, [pc, #316]	@ (800a0e4 <_strtod_l+0x294>)
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f001 f8fe 	bl	800b1a8 <strncmp>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d032      	beq.n	800a016 <_strtod_l+0x1c6>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009fb6:	464d      	mov	r5, r9
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2a65      	cmp	r2, #101	@ 0x65
 8009fbc:	d001      	beq.n	8009fc2 <_strtod_l+0x172>
 8009fbe:	2a45      	cmp	r2, #69	@ 0x45
 8009fc0:	d114      	bne.n	8009fec <_strtod_l+0x19c>
 8009fc2:	b91d      	cbnz	r5, 8009fcc <_strtod_l+0x17c>
 8009fc4:	9a08      	ldr	r2, [sp, #32]
 8009fc6:	4302      	orrs	r2, r0
 8009fc8:	d096      	beq.n	8009ef8 <_strtod_l+0xa8>
 8009fca:	2500      	movs	r5, #0
 8009fcc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009fce:	1c62      	adds	r2, r4, #1
 8009fd0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fd2:	7862      	ldrb	r2, [r4, #1]
 8009fd4:	2a2b      	cmp	r2, #43	@ 0x2b
 8009fd6:	d07a      	beq.n	800a0ce <_strtod_l+0x27e>
 8009fd8:	2a2d      	cmp	r2, #45	@ 0x2d
 8009fda:	d07e      	beq.n	800a0da <_strtod_l+0x28a>
 8009fdc:	f04f 0c00 	mov.w	ip, #0
 8009fe0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009fe4:	2909      	cmp	r1, #9
 8009fe6:	f240 8085 	bls.w	800a0f4 <_strtod_l+0x2a4>
 8009fea:	9419      	str	r4, [sp, #100]	@ 0x64
 8009fec:	f04f 0800 	mov.w	r8, #0
 8009ff0:	e0a5      	b.n	800a13e <_strtod_l+0x2ee>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e7c8      	b.n	8009f88 <_strtod_l+0x138>
 8009ff6:	f1b9 0f08 	cmp.w	r9, #8
 8009ffa:	bfd8      	it	le
 8009ffc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009ffe:	f100 0001 	add.w	r0, r0, #1
 800a002:	bfda      	itte	le
 800a004:	fb02 3301 	mlale	r3, r2, r1, r3
 800a008:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a00a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a00e:	f109 0901 	add.w	r9, r9, #1
 800a012:	9019      	str	r0, [sp, #100]	@ 0x64
 800a014:	e7bf      	b.n	8009f96 <_strtod_l+0x146>
 800a016:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a01c:	785a      	ldrb	r2, [r3, #1]
 800a01e:	f1b9 0f00 	cmp.w	r9, #0
 800a022:	d03b      	beq.n	800a09c <_strtod_l+0x24c>
 800a024:	900a      	str	r0, [sp, #40]	@ 0x28
 800a026:	464d      	mov	r5, r9
 800a028:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a02c:	2b09      	cmp	r3, #9
 800a02e:	d912      	bls.n	800a056 <_strtod_l+0x206>
 800a030:	2301      	movs	r3, #1
 800a032:	e7c2      	b.n	8009fba <_strtod_l+0x16a>
 800a034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	9219      	str	r2, [sp, #100]	@ 0x64
 800a03a:	785a      	ldrb	r2, [r3, #1]
 800a03c:	3001      	adds	r0, #1
 800a03e:	2a30      	cmp	r2, #48	@ 0x30
 800a040:	d0f8      	beq.n	800a034 <_strtod_l+0x1e4>
 800a042:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a046:	2b08      	cmp	r3, #8
 800a048:	f200 84d2 	bhi.w	800a9f0 <_strtod_l+0xba0>
 800a04c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a04e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a050:	2000      	movs	r0, #0
 800a052:	930c      	str	r3, [sp, #48]	@ 0x30
 800a054:	4605      	mov	r5, r0
 800a056:	3a30      	subs	r2, #48	@ 0x30
 800a058:	f100 0301 	add.w	r3, r0, #1
 800a05c:	d018      	beq.n	800a090 <_strtod_l+0x240>
 800a05e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a060:	4419      	add	r1, r3
 800a062:	910a      	str	r1, [sp, #40]	@ 0x28
 800a064:	462e      	mov	r6, r5
 800a066:	f04f 0e0a 	mov.w	lr, #10
 800a06a:	1c71      	adds	r1, r6, #1
 800a06c:	eba1 0c05 	sub.w	ip, r1, r5
 800a070:	4563      	cmp	r3, ip
 800a072:	dc15      	bgt.n	800a0a0 <_strtod_l+0x250>
 800a074:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a078:	182b      	adds	r3, r5, r0
 800a07a:	2b08      	cmp	r3, #8
 800a07c:	f105 0501 	add.w	r5, r5, #1
 800a080:	4405      	add	r5, r0
 800a082:	dc1a      	bgt.n	800a0ba <_strtod_l+0x26a>
 800a084:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a086:	230a      	movs	r3, #10
 800a088:	fb03 2301 	mla	r3, r3, r1, r2
 800a08c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a08e:	2300      	movs	r3, #0
 800a090:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a092:	1c51      	adds	r1, r2, #1
 800a094:	9119      	str	r1, [sp, #100]	@ 0x64
 800a096:	7852      	ldrb	r2, [r2, #1]
 800a098:	4618      	mov	r0, r3
 800a09a:	e7c5      	b.n	800a028 <_strtod_l+0x1d8>
 800a09c:	4648      	mov	r0, r9
 800a09e:	e7ce      	b.n	800a03e <_strtod_l+0x1ee>
 800a0a0:	2e08      	cmp	r6, #8
 800a0a2:	dc05      	bgt.n	800a0b0 <_strtod_l+0x260>
 800a0a4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a0a6:	fb0e f606 	mul.w	r6, lr, r6
 800a0aa:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a0ac:	460e      	mov	r6, r1
 800a0ae:	e7dc      	b.n	800a06a <_strtod_l+0x21a>
 800a0b0:	2910      	cmp	r1, #16
 800a0b2:	bfd8      	it	le
 800a0b4:	fb0e f707 	mulle.w	r7, lr, r7
 800a0b8:	e7f8      	b.n	800a0ac <_strtod_l+0x25c>
 800a0ba:	2b0f      	cmp	r3, #15
 800a0bc:	bfdc      	itt	le
 800a0be:	230a      	movle	r3, #10
 800a0c0:	fb03 2707 	mlale	r7, r3, r7, r2
 800a0c4:	e7e3      	b.n	800a08e <_strtod_l+0x23e>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e77a      	b.n	8009fc4 <_strtod_l+0x174>
 800a0ce:	f04f 0c00 	mov.w	ip, #0
 800a0d2:	1ca2      	adds	r2, r4, #2
 800a0d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0d6:	78a2      	ldrb	r2, [r4, #2]
 800a0d8:	e782      	b.n	8009fe0 <_strtod_l+0x190>
 800a0da:	f04f 0c01 	mov.w	ip, #1
 800a0de:	e7f8      	b.n	800a0d2 <_strtod_l+0x282>
 800a0e0:	0800c124 	.word	0x0800c124
 800a0e4:	0800bf5c 	.word	0x0800bf5c
 800a0e8:	7ff00000 	.word	0x7ff00000
 800a0ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0ee:	1c51      	adds	r1, r2, #1
 800a0f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a0f2:	7852      	ldrb	r2, [r2, #1]
 800a0f4:	2a30      	cmp	r2, #48	@ 0x30
 800a0f6:	d0f9      	beq.n	800a0ec <_strtod_l+0x29c>
 800a0f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a0fc:	2908      	cmp	r1, #8
 800a0fe:	f63f af75 	bhi.w	8009fec <_strtod_l+0x19c>
 800a102:	3a30      	subs	r2, #48	@ 0x30
 800a104:	9209      	str	r2, [sp, #36]	@ 0x24
 800a106:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a108:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a10a:	f04f 080a 	mov.w	r8, #10
 800a10e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a110:	1c56      	adds	r6, r2, #1
 800a112:	9619      	str	r6, [sp, #100]	@ 0x64
 800a114:	7852      	ldrb	r2, [r2, #1]
 800a116:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a11a:	f1be 0f09 	cmp.w	lr, #9
 800a11e:	d939      	bls.n	800a194 <_strtod_l+0x344>
 800a120:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a122:	1a76      	subs	r6, r6, r1
 800a124:	2e08      	cmp	r6, #8
 800a126:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a12a:	dc03      	bgt.n	800a134 <_strtod_l+0x2e4>
 800a12c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a12e:	4588      	cmp	r8, r1
 800a130:	bfa8      	it	ge
 800a132:	4688      	movge	r8, r1
 800a134:	f1bc 0f00 	cmp.w	ip, #0
 800a138:	d001      	beq.n	800a13e <_strtod_l+0x2ee>
 800a13a:	f1c8 0800 	rsb	r8, r8, #0
 800a13e:	2d00      	cmp	r5, #0
 800a140:	d14e      	bne.n	800a1e0 <_strtod_l+0x390>
 800a142:	9908      	ldr	r1, [sp, #32]
 800a144:	4308      	orrs	r0, r1
 800a146:	f47f aebc 	bne.w	8009ec2 <_strtod_l+0x72>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f47f aed4 	bne.w	8009ef8 <_strtod_l+0xa8>
 800a150:	2a69      	cmp	r2, #105	@ 0x69
 800a152:	d028      	beq.n	800a1a6 <_strtod_l+0x356>
 800a154:	dc25      	bgt.n	800a1a2 <_strtod_l+0x352>
 800a156:	2a49      	cmp	r2, #73	@ 0x49
 800a158:	d025      	beq.n	800a1a6 <_strtod_l+0x356>
 800a15a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a15c:	f47f aecc 	bne.w	8009ef8 <_strtod_l+0xa8>
 800a160:	499a      	ldr	r1, [pc, #616]	@ (800a3cc <_strtod_l+0x57c>)
 800a162:	a819      	add	r0, sp, #100	@ 0x64
 800a164:	f001 fb38 	bl	800b7d8 <__match>
 800a168:	2800      	cmp	r0, #0
 800a16a:	f43f aec5 	beq.w	8009ef8 <_strtod_l+0xa8>
 800a16e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	2b28      	cmp	r3, #40	@ 0x28
 800a174:	d12e      	bne.n	800a1d4 <_strtod_l+0x384>
 800a176:	4996      	ldr	r1, [pc, #600]	@ (800a3d0 <_strtod_l+0x580>)
 800a178:	aa1c      	add	r2, sp, #112	@ 0x70
 800a17a:	a819      	add	r0, sp, #100	@ 0x64
 800a17c:	f001 fb40 	bl	800b800 <__hexnan>
 800a180:	2805      	cmp	r0, #5
 800a182:	d127      	bne.n	800a1d4 <_strtod_l+0x384>
 800a184:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a186:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a18a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a18e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a192:	e696      	b.n	8009ec2 <_strtod_l+0x72>
 800a194:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a196:	fb08 2101 	mla	r1, r8, r1, r2
 800a19a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a19e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1a0:	e7b5      	b.n	800a10e <_strtod_l+0x2be>
 800a1a2:	2a6e      	cmp	r2, #110	@ 0x6e
 800a1a4:	e7da      	b.n	800a15c <_strtod_l+0x30c>
 800a1a6:	498b      	ldr	r1, [pc, #556]	@ (800a3d4 <_strtod_l+0x584>)
 800a1a8:	a819      	add	r0, sp, #100	@ 0x64
 800a1aa:	f001 fb15 	bl	800b7d8 <__match>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	f43f aea2 	beq.w	8009ef8 <_strtod_l+0xa8>
 800a1b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1b6:	4988      	ldr	r1, [pc, #544]	@ (800a3d8 <_strtod_l+0x588>)
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	a819      	add	r0, sp, #100	@ 0x64
 800a1bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a1be:	f001 fb0b 	bl	800b7d8 <__match>
 800a1c2:	b910      	cbnz	r0, 800a1ca <_strtod_l+0x37a>
 800a1c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a1ca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a3e8 <_strtod_l+0x598>
 800a1ce:	f04f 0a00 	mov.w	sl, #0
 800a1d2:	e676      	b.n	8009ec2 <_strtod_l+0x72>
 800a1d4:	4881      	ldr	r0, [pc, #516]	@ (800a3dc <_strtod_l+0x58c>)
 800a1d6:	f001 f83b 	bl	800b250 <nan>
 800a1da:	ec5b ab10 	vmov	sl, fp, d0
 800a1de:	e670      	b.n	8009ec2 <_strtod_l+0x72>
 800a1e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a1e4:	eba8 0303 	sub.w	r3, r8, r3
 800a1e8:	f1b9 0f00 	cmp.w	r9, #0
 800a1ec:	bf08      	it	eq
 800a1ee:	46a9      	moveq	r9, r5
 800a1f0:	2d10      	cmp	r5, #16
 800a1f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1f4:	462c      	mov	r4, r5
 800a1f6:	bfa8      	it	ge
 800a1f8:	2410      	movge	r4, #16
 800a1fa:	f7f6 f9b3 	bl	8000564 <__aeabi_ui2d>
 800a1fe:	2d09      	cmp	r5, #9
 800a200:	4682      	mov	sl, r0
 800a202:	468b      	mov	fp, r1
 800a204:	dc13      	bgt.n	800a22e <_strtod_l+0x3de>
 800a206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f43f ae5a 	beq.w	8009ec2 <_strtod_l+0x72>
 800a20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a210:	dd78      	ble.n	800a304 <_strtod_l+0x4b4>
 800a212:	2b16      	cmp	r3, #22
 800a214:	dc5f      	bgt.n	800a2d6 <_strtod_l+0x486>
 800a216:	4972      	ldr	r1, [pc, #456]	@ (800a3e0 <_strtod_l+0x590>)
 800a218:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a21c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a220:	4652      	mov	r2, sl
 800a222:	465b      	mov	r3, fp
 800a224:	f7f6 fa18 	bl	8000658 <__aeabi_dmul>
 800a228:	4682      	mov	sl, r0
 800a22a:	468b      	mov	fp, r1
 800a22c:	e649      	b.n	8009ec2 <_strtod_l+0x72>
 800a22e:	4b6c      	ldr	r3, [pc, #432]	@ (800a3e0 <_strtod_l+0x590>)
 800a230:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a234:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a238:	f7f6 fa0e 	bl	8000658 <__aeabi_dmul>
 800a23c:	4682      	mov	sl, r0
 800a23e:	4638      	mov	r0, r7
 800a240:	468b      	mov	fp, r1
 800a242:	f7f6 f98f 	bl	8000564 <__aeabi_ui2d>
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	4650      	mov	r0, sl
 800a24c:	4659      	mov	r1, fp
 800a24e:	f7f6 f84d 	bl	80002ec <__adddf3>
 800a252:	2d0f      	cmp	r5, #15
 800a254:	4682      	mov	sl, r0
 800a256:	468b      	mov	fp, r1
 800a258:	ddd5      	ble.n	800a206 <_strtod_l+0x3b6>
 800a25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25c:	1b2c      	subs	r4, r5, r4
 800a25e:	441c      	add	r4, r3
 800a260:	2c00      	cmp	r4, #0
 800a262:	f340 8093 	ble.w	800a38c <_strtod_l+0x53c>
 800a266:	f014 030f 	ands.w	r3, r4, #15
 800a26a:	d00a      	beq.n	800a282 <_strtod_l+0x432>
 800a26c:	495c      	ldr	r1, [pc, #368]	@ (800a3e0 <_strtod_l+0x590>)
 800a26e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a272:	4652      	mov	r2, sl
 800a274:	465b      	mov	r3, fp
 800a276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a27a:	f7f6 f9ed 	bl	8000658 <__aeabi_dmul>
 800a27e:	4682      	mov	sl, r0
 800a280:	468b      	mov	fp, r1
 800a282:	f034 040f 	bics.w	r4, r4, #15
 800a286:	d073      	beq.n	800a370 <_strtod_l+0x520>
 800a288:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a28c:	dd49      	ble.n	800a322 <_strtod_l+0x4d2>
 800a28e:	2400      	movs	r4, #0
 800a290:	46a0      	mov	r8, r4
 800a292:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a294:	46a1      	mov	r9, r4
 800a296:	9a05      	ldr	r2, [sp, #20]
 800a298:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a3e8 <_strtod_l+0x598>
 800a29c:	2322      	movs	r3, #34	@ 0x22
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	f04f 0a00 	mov.w	sl, #0
 800a2a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f43f ae0b 	beq.w	8009ec2 <_strtod_l+0x72>
 800a2ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2ae:	9805      	ldr	r0, [sp, #20]
 800a2b0:	f7ff f946 	bl	8009540 <_Bfree>
 800a2b4:	9805      	ldr	r0, [sp, #20]
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	f7ff f942 	bl	8009540 <_Bfree>
 800a2bc:	9805      	ldr	r0, [sp, #20]
 800a2be:	4641      	mov	r1, r8
 800a2c0:	f7ff f93e 	bl	8009540 <_Bfree>
 800a2c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2c6:	9805      	ldr	r0, [sp, #20]
 800a2c8:	f7ff f93a 	bl	8009540 <_Bfree>
 800a2cc:	9805      	ldr	r0, [sp, #20]
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	f7ff f936 	bl	8009540 <_Bfree>
 800a2d4:	e5f5      	b.n	8009ec2 <_strtod_l+0x72>
 800a2d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	dbbc      	blt.n	800a25a <_strtod_l+0x40a>
 800a2e0:	4c3f      	ldr	r4, [pc, #252]	@ (800a3e0 <_strtod_l+0x590>)
 800a2e2:	f1c5 050f 	rsb	r5, r5, #15
 800a2e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a2ea:	4652      	mov	r2, sl
 800a2ec:	465b      	mov	r3, fp
 800a2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2f2:	f7f6 f9b1 	bl	8000658 <__aeabi_dmul>
 800a2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f8:	1b5d      	subs	r5, r3, r5
 800a2fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a2fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a302:	e78f      	b.n	800a224 <_strtod_l+0x3d4>
 800a304:	3316      	adds	r3, #22
 800a306:	dba8      	blt.n	800a25a <_strtod_l+0x40a>
 800a308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a30a:	eba3 0808 	sub.w	r8, r3, r8
 800a30e:	4b34      	ldr	r3, [pc, #208]	@ (800a3e0 <_strtod_l+0x590>)
 800a310:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a314:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a318:	4650      	mov	r0, sl
 800a31a:	4659      	mov	r1, fp
 800a31c:	f7f6 fac6 	bl	80008ac <__aeabi_ddiv>
 800a320:	e782      	b.n	800a228 <_strtod_l+0x3d8>
 800a322:	2300      	movs	r3, #0
 800a324:	4f2f      	ldr	r7, [pc, #188]	@ (800a3e4 <_strtod_l+0x594>)
 800a326:	1124      	asrs	r4, r4, #4
 800a328:	4650      	mov	r0, sl
 800a32a:	4659      	mov	r1, fp
 800a32c:	461e      	mov	r6, r3
 800a32e:	2c01      	cmp	r4, #1
 800a330:	dc21      	bgt.n	800a376 <_strtod_l+0x526>
 800a332:	b10b      	cbz	r3, 800a338 <_strtod_l+0x4e8>
 800a334:	4682      	mov	sl, r0
 800a336:	468b      	mov	fp, r1
 800a338:	492a      	ldr	r1, [pc, #168]	@ (800a3e4 <_strtod_l+0x594>)
 800a33a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a33e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a342:	4652      	mov	r2, sl
 800a344:	465b      	mov	r3, fp
 800a346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a34a:	f7f6 f985 	bl	8000658 <__aeabi_dmul>
 800a34e:	4b26      	ldr	r3, [pc, #152]	@ (800a3e8 <_strtod_l+0x598>)
 800a350:	460a      	mov	r2, r1
 800a352:	400b      	ands	r3, r1
 800a354:	4925      	ldr	r1, [pc, #148]	@ (800a3ec <_strtod_l+0x59c>)
 800a356:	428b      	cmp	r3, r1
 800a358:	4682      	mov	sl, r0
 800a35a:	d898      	bhi.n	800a28e <_strtod_l+0x43e>
 800a35c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a360:	428b      	cmp	r3, r1
 800a362:	bf86      	itte	hi
 800a364:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a3f0 <_strtod_l+0x5a0>
 800a368:	f04f 3aff 	movhi.w	sl, #4294967295
 800a36c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a370:	2300      	movs	r3, #0
 800a372:	9308      	str	r3, [sp, #32]
 800a374:	e076      	b.n	800a464 <_strtod_l+0x614>
 800a376:	07e2      	lsls	r2, r4, #31
 800a378:	d504      	bpl.n	800a384 <_strtod_l+0x534>
 800a37a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a37e:	f7f6 f96b 	bl	8000658 <__aeabi_dmul>
 800a382:	2301      	movs	r3, #1
 800a384:	3601      	adds	r6, #1
 800a386:	1064      	asrs	r4, r4, #1
 800a388:	3708      	adds	r7, #8
 800a38a:	e7d0      	b.n	800a32e <_strtod_l+0x4de>
 800a38c:	d0f0      	beq.n	800a370 <_strtod_l+0x520>
 800a38e:	4264      	negs	r4, r4
 800a390:	f014 020f 	ands.w	r2, r4, #15
 800a394:	d00a      	beq.n	800a3ac <_strtod_l+0x55c>
 800a396:	4b12      	ldr	r3, [pc, #72]	@ (800a3e0 <_strtod_l+0x590>)
 800a398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a39c:	4650      	mov	r0, sl
 800a39e:	4659      	mov	r1, fp
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f7f6 fa82 	bl	80008ac <__aeabi_ddiv>
 800a3a8:	4682      	mov	sl, r0
 800a3aa:	468b      	mov	fp, r1
 800a3ac:	1124      	asrs	r4, r4, #4
 800a3ae:	d0df      	beq.n	800a370 <_strtod_l+0x520>
 800a3b0:	2c1f      	cmp	r4, #31
 800a3b2:	dd1f      	ble.n	800a3f4 <_strtod_l+0x5a4>
 800a3b4:	2400      	movs	r4, #0
 800a3b6:	46a0      	mov	r8, r4
 800a3b8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a3ba:	46a1      	mov	r9, r4
 800a3bc:	9a05      	ldr	r2, [sp, #20]
 800a3be:	2322      	movs	r3, #34	@ 0x22
 800a3c0:	f04f 0a00 	mov.w	sl, #0
 800a3c4:	f04f 0b00 	mov.w	fp, #0
 800a3c8:	6013      	str	r3, [r2, #0]
 800a3ca:	e76b      	b.n	800a2a4 <_strtod_l+0x454>
 800a3cc:	0800be4a 	.word	0x0800be4a
 800a3d0:	0800c110 	.word	0x0800c110
 800a3d4:	0800be42 	.word	0x0800be42
 800a3d8:	0800be79 	.word	0x0800be79
 800a3dc:	0800bfb2 	.word	0x0800bfb2
 800a3e0:	0800c048 	.word	0x0800c048
 800a3e4:	0800c020 	.word	0x0800c020
 800a3e8:	7ff00000 	.word	0x7ff00000
 800a3ec:	7ca00000 	.word	0x7ca00000
 800a3f0:	7fefffff 	.word	0x7fefffff
 800a3f4:	f014 0310 	ands.w	r3, r4, #16
 800a3f8:	bf18      	it	ne
 800a3fa:	236a      	movne	r3, #106	@ 0x6a
 800a3fc:	4ea9      	ldr	r6, [pc, #676]	@ (800a6a4 <_strtod_l+0x854>)
 800a3fe:	9308      	str	r3, [sp, #32]
 800a400:	4650      	mov	r0, sl
 800a402:	4659      	mov	r1, fp
 800a404:	2300      	movs	r3, #0
 800a406:	07e7      	lsls	r7, r4, #31
 800a408:	d504      	bpl.n	800a414 <_strtod_l+0x5c4>
 800a40a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a40e:	f7f6 f923 	bl	8000658 <__aeabi_dmul>
 800a412:	2301      	movs	r3, #1
 800a414:	1064      	asrs	r4, r4, #1
 800a416:	f106 0608 	add.w	r6, r6, #8
 800a41a:	d1f4      	bne.n	800a406 <_strtod_l+0x5b6>
 800a41c:	b10b      	cbz	r3, 800a422 <_strtod_l+0x5d2>
 800a41e:	4682      	mov	sl, r0
 800a420:	468b      	mov	fp, r1
 800a422:	9b08      	ldr	r3, [sp, #32]
 800a424:	b1b3      	cbz	r3, 800a454 <_strtod_l+0x604>
 800a426:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a42a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a42e:	2b00      	cmp	r3, #0
 800a430:	4659      	mov	r1, fp
 800a432:	dd0f      	ble.n	800a454 <_strtod_l+0x604>
 800a434:	2b1f      	cmp	r3, #31
 800a436:	dd56      	ble.n	800a4e6 <_strtod_l+0x696>
 800a438:	2b34      	cmp	r3, #52	@ 0x34
 800a43a:	bfde      	ittt	le
 800a43c:	f04f 33ff 	movle.w	r3, #4294967295
 800a440:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a444:	4093      	lslle	r3, r2
 800a446:	f04f 0a00 	mov.w	sl, #0
 800a44a:	bfcc      	ite	gt
 800a44c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a450:	ea03 0b01 	andle.w	fp, r3, r1
 800a454:	2200      	movs	r2, #0
 800a456:	2300      	movs	r3, #0
 800a458:	4650      	mov	r0, sl
 800a45a:	4659      	mov	r1, fp
 800a45c:	f7f6 fb64 	bl	8000b28 <__aeabi_dcmpeq>
 800a460:	2800      	cmp	r0, #0
 800a462:	d1a7      	bne.n	800a3b4 <_strtod_l+0x564>
 800a464:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a46a:	9805      	ldr	r0, [sp, #20]
 800a46c:	462b      	mov	r3, r5
 800a46e:	464a      	mov	r2, r9
 800a470:	f7ff f8ce 	bl	8009610 <__s2b>
 800a474:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a476:	2800      	cmp	r0, #0
 800a478:	f43f af09 	beq.w	800a28e <_strtod_l+0x43e>
 800a47c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a47e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a480:	2a00      	cmp	r2, #0
 800a482:	eba3 0308 	sub.w	r3, r3, r8
 800a486:	bfa8      	it	ge
 800a488:	2300      	movge	r3, #0
 800a48a:	9312      	str	r3, [sp, #72]	@ 0x48
 800a48c:	2400      	movs	r4, #0
 800a48e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a492:	9316      	str	r3, [sp, #88]	@ 0x58
 800a494:	46a0      	mov	r8, r4
 800a496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a498:	9805      	ldr	r0, [sp, #20]
 800a49a:	6859      	ldr	r1, [r3, #4]
 800a49c:	f7ff f810 	bl	80094c0 <_Balloc>
 800a4a0:	4681      	mov	r9, r0
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	f43f aef7 	beq.w	800a296 <_strtod_l+0x446>
 800a4a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4aa:	691a      	ldr	r2, [r3, #16]
 800a4ac:	3202      	adds	r2, #2
 800a4ae:	f103 010c 	add.w	r1, r3, #12
 800a4b2:	0092      	lsls	r2, r2, #2
 800a4b4:	300c      	adds	r0, #12
 800a4b6:	f000 febb 	bl	800b230 <memcpy>
 800a4ba:	ec4b ab10 	vmov	d0, sl, fp
 800a4be:	9805      	ldr	r0, [sp, #20]
 800a4c0:	aa1c      	add	r2, sp, #112	@ 0x70
 800a4c2:	a91b      	add	r1, sp, #108	@ 0x6c
 800a4c4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a4c8:	f7ff fbd6 	bl	8009c78 <__d2b>
 800a4cc:	901a      	str	r0, [sp, #104]	@ 0x68
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f43f aee1 	beq.w	800a296 <_strtod_l+0x446>
 800a4d4:	9805      	ldr	r0, [sp, #20]
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	f7ff f930 	bl	800973c <__i2b>
 800a4dc:	4680      	mov	r8, r0
 800a4de:	b948      	cbnz	r0, 800a4f4 <_strtod_l+0x6a4>
 800a4e0:	f04f 0800 	mov.w	r8, #0
 800a4e4:	e6d7      	b.n	800a296 <_strtod_l+0x446>
 800a4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ee:	ea03 0a0a 	and.w	sl, r3, sl
 800a4f2:	e7af      	b.n	800a454 <_strtod_l+0x604>
 800a4f4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a4f6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a4f8:	2d00      	cmp	r5, #0
 800a4fa:	bfab      	itete	ge
 800a4fc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a4fe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a500:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a502:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a504:	bfac      	ite	ge
 800a506:	18ef      	addge	r7, r5, r3
 800a508:	1b5e      	sublt	r6, r3, r5
 800a50a:	9b08      	ldr	r3, [sp, #32]
 800a50c:	1aed      	subs	r5, r5, r3
 800a50e:	4415      	add	r5, r2
 800a510:	4b65      	ldr	r3, [pc, #404]	@ (800a6a8 <_strtod_l+0x858>)
 800a512:	3d01      	subs	r5, #1
 800a514:	429d      	cmp	r5, r3
 800a516:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a51a:	da50      	bge.n	800a5be <_strtod_l+0x76e>
 800a51c:	1b5b      	subs	r3, r3, r5
 800a51e:	2b1f      	cmp	r3, #31
 800a520:	eba2 0203 	sub.w	r2, r2, r3
 800a524:	f04f 0101 	mov.w	r1, #1
 800a528:	dc3d      	bgt.n	800a5a6 <_strtod_l+0x756>
 800a52a:	fa01 f303 	lsl.w	r3, r1, r3
 800a52e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a530:	2300      	movs	r3, #0
 800a532:	9310      	str	r3, [sp, #64]	@ 0x40
 800a534:	18bd      	adds	r5, r7, r2
 800a536:	9b08      	ldr	r3, [sp, #32]
 800a538:	42af      	cmp	r7, r5
 800a53a:	4416      	add	r6, r2
 800a53c:	441e      	add	r6, r3
 800a53e:	463b      	mov	r3, r7
 800a540:	bfa8      	it	ge
 800a542:	462b      	movge	r3, r5
 800a544:	42b3      	cmp	r3, r6
 800a546:	bfa8      	it	ge
 800a548:	4633      	movge	r3, r6
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	bfc2      	ittt	gt
 800a54e:	1aed      	subgt	r5, r5, r3
 800a550:	1af6      	subgt	r6, r6, r3
 800a552:	1aff      	subgt	r7, r7, r3
 800a554:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a556:	2b00      	cmp	r3, #0
 800a558:	dd16      	ble.n	800a588 <_strtod_l+0x738>
 800a55a:	4641      	mov	r1, r8
 800a55c:	9805      	ldr	r0, [sp, #20]
 800a55e:	461a      	mov	r2, r3
 800a560:	f7ff f9a4 	bl	80098ac <__pow5mult>
 800a564:	4680      	mov	r8, r0
 800a566:	2800      	cmp	r0, #0
 800a568:	d0ba      	beq.n	800a4e0 <_strtod_l+0x690>
 800a56a:	4601      	mov	r1, r0
 800a56c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a56e:	9805      	ldr	r0, [sp, #20]
 800a570:	f7ff f8fa 	bl	8009768 <__multiply>
 800a574:	900a      	str	r0, [sp, #40]	@ 0x28
 800a576:	2800      	cmp	r0, #0
 800a578:	f43f ae8d 	beq.w	800a296 <_strtod_l+0x446>
 800a57c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a57e:	9805      	ldr	r0, [sp, #20]
 800a580:	f7fe ffde 	bl	8009540 <_Bfree>
 800a584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a586:	931a      	str	r3, [sp, #104]	@ 0x68
 800a588:	2d00      	cmp	r5, #0
 800a58a:	dc1d      	bgt.n	800a5c8 <_strtod_l+0x778>
 800a58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a58e:	2b00      	cmp	r3, #0
 800a590:	dd23      	ble.n	800a5da <_strtod_l+0x78a>
 800a592:	4649      	mov	r1, r9
 800a594:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a596:	9805      	ldr	r0, [sp, #20]
 800a598:	f7ff f988 	bl	80098ac <__pow5mult>
 800a59c:	4681      	mov	r9, r0
 800a59e:	b9e0      	cbnz	r0, 800a5da <_strtod_l+0x78a>
 800a5a0:	f04f 0900 	mov.w	r9, #0
 800a5a4:	e677      	b.n	800a296 <_strtod_l+0x446>
 800a5a6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a5aa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a5ae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a5b2:	35e2      	adds	r5, #226	@ 0xe2
 800a5b4:	fa01 f305 	lsl.w	r3, r1, r5
 800a5b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a5bc:	e7ba      	b.n	800a534 <_strtod_l+0x6e4>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a5c6:	e7b5      	b.n	800a534 <_strtod_l+0x6e4>
 800a5c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5ca:	9805      	ldr	r0, [sp, #20]
 800a5cc:	462a      	mov	r2, r5
 800a5ce:	f7ff f9c7 	bl	8009960 <__lshift>
 800a5d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d1d9      	bne.n	800a58c <_strtod_l+0x73c>
 800a5d8:	e65d      	b.n	800a296 <_strtod_l+0x446>
 800a5da:	2e00      	cmp	r6, #0
 800a5dc:	dd07      	ble.n	800a5ee <_strtod_l+0x79e>
 800a5de:	4649      	mov	r1, r9
 800a5e0:	9805      	ldr	r0, [sp, #20]
 800a5e2:	4632      	mov	r2, r6
 800a5e4:	f7ff f9bc 	bl	8009960 <__lshift>
 800a5e8:	4681      	mov	r9, r0
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d0d8      	beq.n	800a5a0 <_strtod_l+0x750>
 800a5ee:	2f00      	cmp	r7, #0
 800a5f0:	dd08      	ble.n	800a604 <_strtod_l+0x7b4>
 800a5f2:	4641      	mov	r1, r8
 800a5f4:	9805      	ldr	r0, [sp, #20]
 800a5f6:	463a      	mov	r2, r7
 800a5f8:	f7ff f9b2 	bl	8009960 <__lshift>
 800a5fc:	4680      	mov	r8, r0
 800a5fe:	2800      	cmp	r0, #0
 800a600:	f43f ae49 	beq.w	800a296 <_strtod_l+0x446>
 800a604:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a606:	9805      	ldr	r0, [sp, #20]
 800a608:	464a      	mov	r2, r9
 800a60a:	f7ff fa31 	bl	8009a70 <__mdiff>
 800a60e:	4604      	mov	r4, r0
 800a610:	2800      	cmp	r0, #0
 800a612:	f43f ae40 	beq.w	800a296 <_strtod_l+0x446>
 800a616:	68c3      	ldr	r3, [r0, #12]
 800a618:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a61a:	2300      	movs	r3, #0
 800a61c:	60c3      	str	r3, [r0, #12]
 800a61e:	4641      	mov	r1, r8
 800a620:	f7ff fa0a 	bl	8009a38 <__mcmp>
 800a624:	2800      	cmp	r0, #0
 800a626:	da45      	bge.n	800a6b4 <_strtod_l+0x864>
 800a628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a62a:	ea53 030a 	orrs.w	r3, r3, sl
 800a62e:	d16b      	bne.n	800a708 <_strtod_l+0x8b8>
 800a630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a634:	2b00      	cmp	r3, #0
 800a636:	d167      	bne.n	800a708 <_strtod_l+0x8b8>
 800a638:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a63c:	0d1b      	lsrs	r3, r3, #20
 800a63e:	051b      	lsls	r3, r3, #20
 800a640:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a644:	d960      	bls.n	800a708 <_strtod_l+0x8b8>
 800a646:	6963      	ldr	r3, [r4, #20]
 800a648:	b913      	cbnz	r3, 800a650 <_strtod_l+0x800>
 800a64a:	6923      	ldr	r3, [r4, #16]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	dd5b      	ble.n	800a708 <_strtod_l+0x8b8>
 800a650:	4621      	mov	r1, r4
 800a652:	2201      	movs	r2, #1
 800a654:	9805      	ldr	r0, [sp, #20]
 800a656:	f7ff f983 	bl	8009960 <__lshift>
 800a65a:	4641      	mov	r1, r8
 800a65c:	4604      	mov	r4, r0
 800a65e:	f7ff f9eb 	bl	8009a38 <__mcmp>
 800a662:	2800      	cmp	r0, #0
 800a664:	dd50      	ble.n	800a708 <_strtod_l+0x8b8>
 800a666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a66a:	9a08      	ldr	r2, [sp, #32]
 800a66c:	0d1b      	lsrs	r3, r3, #20
 800a66e:	051b      	lsls	r3, r3, #20
 800a670:	2a00      	cmp	r2, #0
 800a672:	d06a      	beq.n	800a74a <_strtod_l+0x8fa>
 800a674:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a678:	d867      	bhi.n	800a74a <_strtod_l+0x8fa>
 800a67a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a67e:	f67f ae9d 	bls.w	800a3bc <_strtod_l+0x56c>
 800a682:	4b0a      	ldr	r3, [pc, #40]	@ (800a6ac <_strtod_l+0x85c>)
 800a684:	4650      	mov	r0, sl
 800a686:	4659      	mov	r1, fp
 800a688:	2200      	movs	r2, #0
 800a68a:	f7f5 ffe5 	bl	8000658 <__aeabi_dmul>
 800a68e:	4b08      	ldr	r3, [pc, #32]	@ (800a6b0 <_strtod_l+0x860>)
 800a690:	400b      	ands	r3, r1
 800a692:	4682      	mov	sl, r0
 800a694:	468b      	mov	fp, r1
 800a696:	2b00      	cmp	r3, #0
 800a698:	f47f ae08 	bne.w	800a2ac <_strtod_l+0x45c>
 800a69c:	9a05      	ldr	r2, [sp, #20]
 800a69e:	2322      	movs	r3, #34	@ 0x22
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	e603      	b.n	800a2ac <_strtod_l+0x45c>
 800a6a4:	0800c138 	.word	0x0800c138
 800a6a8:	fffffc02 	.word	0xfffffc02
 800a6ac:	39500000 	.word	0x39500000
 800a6b0:	7ff00000 	.word	0x7ff00000
 800a6b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a6b8:	d165      	bne.n	800a786 <_strtod_l+0x936>
 800a6ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a6bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6c0:	b35a      	cbz	r2, 800a71a <_strtod_l+0x8ca>
 800a6c2:	4a9f      	ldr	r2, [pc, #636]	@ (800a940 <_strtod_l+0xaf0>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d12b      	bne.n	800a720 <_strtod_l+0x8d0>
 800a6c8:	9b08      	ldr	r3, [sp, #32]
 800a6ca:	4651      	mov	r1, sl
 800a6cc:	b303      	cbz	r3, 800a710 <_strtod_l+0x8c0>
 800a6ce:	4b9d      	ldr	r3, [pc, #628]	@ (800a944 <_strtod_l+0xaf4>)
 800a6d0:	465a      	mov	r2, fp
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6dc:	d81b      	bhi.n	800a716 <_strtod_l+0x8c6>
 800a6de:	0d1b      	lsrs	r3, r3, #20
 800a6e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e8:	4299      	cmp	r1, r3
 800a6ea:	d119      	bne.n	800a720 <_strtod_l+0x8d0>
 800a6ec:	4b96      	ldr	r3, [pc, #600]	@ (800a948 <_strtod_l+0xaf8>)
 800a6ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d102      	bne.n	800a6fa <_strtod_l+0x8aa>
 800a6f4:	3101      	adds	r1, #1
 800a6f6:	f43f adce 	beq.w	800a296 <_strtod_l+0x446>
 800a6fa:	4b92      	ldr	r3, [pc, #584]	@ (800a944 <_strtod_l+0xaf4>)
 800a6fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6fe:	401a      	ands	r2, r3
 800a700:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a704:	f04f 0a00 	mov.w	sl, #0
 800a708:	9b08      	ldr	r3, [sp, #32]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1b9      	bne.n	800a682 <_strtod_l+0x832>
 800a70e:	e5cd      	b.n	800a2ac <_strtod_l+0x45c>
 800a710:	f04f 33ff 	mov.w	r3, #4294967295
 800a714:	e7e8      	b.n	800a6e8 <_strtod_l+0x898>
 800a716:	4613      	mov	r3, r2
 800a718:	e7e6      	b.n	800a6e8 <_strtod_l+0x898>
 800a71a:	ea53 030a 	orrs.w	r3, r3, sl
 800a71e:	d0a2      	beq.n	800a666 <_strtod_l+0x816>
 800a720:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a722:	b1db      	cbz	r3, 800a75c <_strtod_l+0x90c>
 800a724:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a726:	4213      	tst	r3, r2
 800a728:	d0ee      	beq.n	800a708 <_strtod_l+0x8b8>
 800a72a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a72c:	9a08      	ldr	r2, [sp, #32]
 800a72e:	4650      	mov	r0, sl
 800a730:	4659      	mov	r1, fp
 800a732:	b1bb      	cbz	r3, 800a764 <_strtod_l+0x914>
 800a734:	f7ff fb6e 	bl	8009e14 <sulp>
 800a738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a73c:	ec53 2b10 	vmov	r2, r3, d0
 800a740:	f7f5 fdd4 	bl	80002ec <__adddf3>
 800a744:	4682      	mov	sl, r0
 800a746:	468b      	mov	fp, r1
 800a748:	e7de      	b.n	800a708 <_strtod_l+0x8b8>
 800a74a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a74e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a752:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a756:	f04f 3aff 	mov.w	sl, #4294967295
 800a75a:	e7d5      	b.n	800a708 <_strtod_l+0x8b8>
 800a75c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a75e:	ea13 0f0a 	tst.w	r3, sl
 800a762:	e7e1      	b.n	800a728 <_strtod_l+0x8d8>
 800a764:	f7ff fb56 	bl	8009e14 <sulp>
 800a768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a76c:	ec53 2b10 	vmov	r2, r3, d0
 800a770:	f7f5 fdba 	bl	80002e8 <__aeabi_dsub>
 800a774:	2200      	movs	r2, #0
 800a776:	2300      	movs	r3, #0
 800a778:	4682      	mov	sl, r0
 800a77a:	468b      	mov	fp, r1
 800a77c:	f7f6 f9d4 	bl	8000b28 <__aeabi_dcmpeq>
 800a780:	2800      	cmp	r0, #0
 800a782:	d0c1      	beq.n	800a708 <_strtod_l+0x8b8>
 800a784:	e61a      	b.n	800a3bc <_strtod_l+0x56c>
 800a786:	4641      	mov	r1, r8
 800a788:	4620      	mov	r0, r4
 800a78a:	f7ff facd 	bl	8009d28 <__ratio>
 800a78e:	ec57 6b10 	vmov	r6, r7, d0
 800a792:	2200      	movs	r2, #0
 800a794:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a798:	4630      	mov	r0, r6
 800a79a:	4639      	mov	r1, r7
 800a79c:	f7f6 f9d8 	bl	8000b50 <__aeabi_dcmple>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	d06f      	beq.n	800a884 <_strtod_l+0xa34>
 800a7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d17a      	bne.n	800a8a0 <_strtod_l+0xa50>
 800a7aa:	f1ba 0f00 	cmp.w	sl, #0
 800a7ae:	d158      	bne.n	800a862 <_strtod_l+0xa12>
 800a7b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d15a      	bne.n	800a870 <_strtod_l+0xa20>
 800a7ba:	4b64      	ldr	r3, [pc, #400]	@ (800a94c <_strtod_l+0xafc>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4630      	mov	r0, r6
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	f7f6 f9bb 	bl	8000b3c <__aeabi_dcmplt>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d159      	bne.n	800a87e <_strtod_l+0xa2e>
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	4b60      	ldr	r3, [pc, #384]	@ (800a950 <_strtod_l+0xb00>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f7f5 ff41 	bl	8000658 <__aeabi_dmul>
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	460f      	mov	r7, r1
 800a7da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a7de:	9606      	str	r6, [sp, #24]
 800a7e0:	9307      	str	r3, [sp, #28]
 800a7e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7e6:	4d57      	ldr	r5, [pc, #348]	@ (800a944 <_strtod_l+0xaf4>)
 800a7e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a7ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ee:	401d      	ands	r5, r3
 800a7f0:	4b58      	ldr	r3, [pc, #352]	@ (800a954 <_strtod_l+0xb04>)
 800a7f2:	429d      	cmp	r5, r3
 800a7f4:	f040 80b2 	bne.w	800a95c <_strtod_l+0xb0c>
 800a7f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a7fe:	ec4b ab10 	vmov	d0, sl, fp
 800a802:	f7ff f9c9 	bl	8009b98 <__ulp>
 800a806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a80a:	ec51 0b10 	vmov	r0, r1, d0
 800a80e:	f7f5 ff23 	bl	8000658 <__aeabi_dmul>
 800a812:	4652      	mov	r2, sl
 800a814:	465b      	mov	r3, fp
 800a816:	f7f5 fd69 	bl	80002ec <__adddf3>
 800a81a:	460b      	mov	r3, r1
 800a81c:	4949      	ldr	r1, [pc, #292]	@ (800a944 <_strtod_l+0xaf4>)
 800a81e:	4a4e      	ldr	r2, [pc, #312]	@ (800a958 <_strtod_l+0xb08>)
 800a820:	4019      	ands	r1, r3
 800a822:	4291      	cmp	r1, r2
 800a824:	4682      	mov	sl, r0
 800a826:	d942      	bls.n	800a8ae <_strtod_l+0xa5e>
 800a828:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a82a:	4b47      	ldr	r3, [pc, #284]	@ (800a948 <_strtod_l+0xaf8>)
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d103      	bne.n	800a838 <_strtod_l+0x9e8>
 800a830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a832:	3301      	adds	r3, #1
 800a834:	f43f ad2f 	beq.w	800a296 <_strtod_l+0x446>
 800a838:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a948 <_strtod_l+0xaf8>
 800a83c:	f04f 3aff 	mov.w	sl, #4294967295
 800a840:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a842:	9805      	ldr	r0, [sp, #20]
 800a844:	f7fe fe7c 	bl	8009540 <_Bfree>
 800a848:	9805      	ldr	r0, [sp, #20]
 800a84a:	4649      	mov	r1, r9
 800a84c:	f7fe fe78 	bl	8009540 <_Bfree>
 800a850:	9805      	ldr	r0, [sp, #20]
 800a852:	4641      	mov	r1, r8
 800a854:	f7fe fe74 	bl	8009540 <_Bfree>
 800a858:	9805      	ldr	r0, [sp, #20]
 800a85a:	4621      	mov	r1, r4
 800a85c:	f7fe fe70 	bl	8009540 <_Bfree>
 800a860:	e619      	b.n	800a496 <_strtod_l+0x646>
 800a862:	f1ba 0f01 	cmp.w	sl, #1
 800a866:	d103      	bne.n	800a870 <_strtod_l+0xa20>
 800a868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f43f ada6 	beq.w	800a3bc <_strtod_l+0x56c>
 800a870:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a920 <_strtod_l+0xad0>
 800a874:	4f35      	ldr	r7, [pc, #212]	@ (800a94c <_strtod_l+0xafc>)
 800a876:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a87a:	2600      	movs	r6, #0
 800a87c:	e7b1      	b.n	800a7e2 <_strtod_l+0x992>
 800a87e:	4f34      	ldr	r7, [pc, #208]	@ (800a950 <_strtod_l+0xb00>)
 800a880:	2600      	movs	r6, #0
 800a882:	e7aa      	b.n	800a7da <_strtod_l+0x98a>
 800a884:	4b32      	ldr	r3, [pc, #200]	@ (800a950 <_strtod_l+0xb00>)
 800a886:	4630      	mov	r0, r6
 800a888:	4639      	mov	r1, r7
 800a88a:	2200      	movs	r2, #0
 800a88c:	f7f5 fee4 	bl	8000658 <__aeabi_dmul>
 800a890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a892:	4606      	mov	r6, r0
 800a894:	460f      	mov	r7, r1
 800a896:	2b00      	cmp	r3, #0
 800a898:	d09f      	beq.n	800a7da <_strtod_l+0x98a>
 800a89a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a89e:	e7a0      	b.n	800a7e2 <_strtod_l+0x992>
 800a8a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a928 <_strtod_l+0xad8>
 800a8a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a8a8:	ec57 6b17 	vmov	r6, r7, d7
 800a8ac:	e799      	b.n	800a7e2 <_strtod_l+0x992>
 800a8ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a8b2:	9b08      	ldr	r3, [sp, #32]
 800a8b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1c1      	bne.n	800a840 <_strtod_l+0x9f0>
 800a8bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8c0:	0d1b      	lsrs	r3, r3, #20
 800a8c2:	051b      	lsls	r3, r3, #20
 800a8c4:	429d      	cmp	r5, r3
 800a8c6:	d1bb      	bne.n	800a840 <_strtod_l+0x9f0>
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	4639      	mov	r1, r7
 800a8cc:	f7f6 fa24 	bl	8000d18 <__aeabi_d2lz>
 800a8d0:	f7f5 fe94 	bl	80005fc <__aeabi_l2d>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4630      	mov	r0, r6
 800a8da:	4639      	mov	r1, r7
 800a8dc:	f7f5 fd04 	bl	80002e8 <__aeabi_dsub>
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a8e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ee:	ea46 060a 	orr.w	r6, r6, sl
 800a8f2:	431e      	orrs	r6, r3
 800a8f4:	d06f      	beq.n	800a9d6 <_strtod_l+0xb86>
 800a8f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a930 <_strtod_l+0xae0>)
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	f7f6 f91e 	bl	8000b3c <__aeabi_dcmplt>
 800a900:	2800      	cmp	r0, #0
 800a902:	f47f acd3 	bne.w	800a2ac <_strtod_l+0x45c>
 800a906:	a30c      	add	r3, pc, #48	@ (adr r3, 800a938 <_strtod_l+0xae8>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a910:	f7f6 f932 	bl	8000b78 <__aeabi_dcmpgt>
 800a914:	2800      	cmp	r0, #0
 800a916:	d093      	beq.n	800a840 <_strtod_l+0x9f0>
 800a918:	e4c8      	b.n	800a2ac <_strtod_l+0x45c>
 800a91a:	bf00      	nop
 800a91c:	f3af 8000 	nop.w
 800a920:	00000000 	.word	0x00000000
 800a924:	bff00000 	.word	0xbff00000
 800a928:	00000000 	.word	0x00000000
 800a92c:	3ff00000 	.word	0x3ff00000
 800a930:	94a03595 	.word	0x94a03595
 800a934:	3fdfffff 	.word	0x3fdfffff
 800a938:	35afe535 	.word	0x35afe535
 800a93c:	3fe00000 	.word	0x3fe00000
 800a940:	000fffff 	.word	0x000fffff
 800a944:	7ff00000 	.word	0x7ff00000
 800a948:	7fefffff 	.word	0x7fefffff
 800a94c:	3ff00000 	.word	0x3ff00000
 800a950:	3fe00000 	.word	0x3fe00000
 800a954:	7fe00000 	.word	0x7fe00000
 800a958:	7c9fffff 	.word	0x7c9fffff
 800a95c:	9b08      	ldr	r3, [sp, #32]
 800a95e:	b323      	cbz	r3, 800a9aa <_strtod_l+0xb5a>
 800a960:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a964:	d821      	bhi.n	800a9aa <_strtod_l+0xb5a>
 800a966:	a328      	add	r3, pc, #160	@ (adr r3, 800aa08 <_strtod_l+0xbb8>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	4630      	mov	r0, r6
 800a96e:	4639      	mov	r1, r7
 800a970:	f7f6 f8ee 	bl	8000b50 <__aeabi_dcmple>
 800a974:	b1a0      	cbz	r0, 800a9a0 <_strtod_l+0xb50>
 800a976:	4639      	mov	r1, r7
 800a978:	4630      	mov	r0, r6
 800a97a:	f7f6 f945 	bl	8000c08 <__aeabi_d2uiz>
 800a97e:	2801      	cmp	r0, #1
 800a980:	bf38      	it	cc
 800a982:	2001      	movcc	r0, #1
 800a984:	f7f5 fdee 	bl	8000564 <__aeabi_ui2d>
 800a988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a98a:	4606      	mov	r6, r0
 800a98c:	460f      	mov	r7, r1
 800a98e:	b9fb      	cbnz	r3, 800a9d0 <_strtod_l+0xb80>
 800a990:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a994:	9014      	str	r0, [sp, #80]	@ 0x50
 800a996:	9315      	str	r3, [sp, #84]	@ 0x54
 800a998:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a99c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a9a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a9a6:	1b5b      	subs	r3, r3, r5
 800a9a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a9aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a9ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a9b2:	f7ff f8f1 	bl	8009b98 <__ulp>
 800a9b6:	4650      	mov	r0, sl
 800a9b8:	ec53 2b10 	vmov	r2, r3, d0
 800a9bc:	4659      	mov	r1, fp
 800a9be:	f7f5 fe4b 	bl	8000658 <__aeabi_dmul>
 800a9c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a9c6:	f7f5 fc91 	bl	80002ec <__adddf3>
 800a9ca:	4682      	mov	sl, r0
 800a9cc:	468b      	mov	fp, r1
 800a9ce:	e770      	b.n	800a8b2 <_strtod_l+0xa62>
 800a9d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a9d4:	e7e0      	b.n	800a998 <_strtod_l+0xb48>
 800a9d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa10 <_strtod_l+0xbc0>)
 800a9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9dc:	f7f6 f8ae 	bl	8000b3c <__aeabi_dcmplt>
 800a9e0:	e798      	b.n	800a914 <_strtod_l+0xac4>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a9e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9ea:	6013      	str	r3, [r2, #0]
 800a9ec:	f7ff ba6d 	b.w	8009eca <_strtod_l+0x7a>
 800a9f0:	2a65      	cmp	r2, #101	@ 0x65
 800a9f2:	f43f ab68 	beq.w	800a0c6 <_strtod_l+0x276>
 800a9f6:	2a45      	cmp	r2, #69	@ 0x45
 800a9f8:	f43f ab65 	beq.w	800a0c6 <_strtod_l+0x276>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	f7ff bba0 	b.w	800a142 <_strtod_l+0x2f2>
 800aa02:	bf00      	nop
 800aa04:	f3af 8000 	nop.w
 800aa08:	ffc00000 	.word	0xffc00000
 800aa0c:	41dfffff 	.word	0x41dfffff
 800aa10:	94a03595 	.word	0x94a03595
 800aa14:	3fcfffff 	.word	0x3fcfffff

0800aa18 <_strtod_r>:
 800aa18:	4b01      	ldr	r3, [pc, #4]	@ (800aa20 <_strtod_r+0x8>)
 800aa1a:	f7ff ba19 	b.w	8009e50 <_strtod_l>
 800aa1e:	bf00      	nop
 800aa20:	200000b4 	.word	0x200000b4

0800aa24 <__ssputs_r>:
 800aa24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa28:	688e      	ldr	r6, [r1, #8]
 800aa2a:	461f      	mov	r7, r3
 800aa2c:	42be      	cmp	r6, r7
 800aa2e:	680b      	ldr	r3, [r1, #0]
 800aa30:	4682      	mov	sl, r0
 800aa32:	460c      	mov	r4, r1
 800aa34:	4690      	mov	r8, r2
 800aa36:	d82d      	bhi.n	800aa94 <__ssputs_r+0x70>
 800aa38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa40:	d026      	beq.n	800aa90 <__ssputs_r+0x6c>
 800aa42:	6965      	ldr	r5, [r4, #20]
 800aa44:	6909      	ldr	r1, [r1, #16]
 800aa46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa4a:	eba3 0901 	sub.w	r9, r3, r1
 800aa4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa52:	1c7b      	adds	r3, r7, #1
 800aa54:	444b      	add	r3, r9
 800aa56:	106d      	asrs	r5, r5, #1
 800aa58:	429d      	cmp	r5, r3
 800aa5a:	bf38      	it	cc
 800aa5c:	461d      	movcc	r5, r3
 800aa5e:	0553      	lsls	r3, r2, #21
 800aa60:	d527      	bpl.n	800aab2 <__ssputs_r+0x8e>
 800aa62:	4629      	mov	r1, r5
 800aa64:	f7fe fca0 	bl	80093a8 <_malloc_r>
 800aa68:	4606      	mov	r6, r0
 800aa6a:	b360      	cbz	r0, 800aac6 <__ssputs_r+0xa2>
 800aa6c:	6921      	ldr	r1, [r4, #16]
 800aa6e:	464a      	mov	r2, r9
 800aa70:	f000 fbde 	bl	800b230 <memcpy>
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa7e:	81a3      	strh	r3, [r4, #12]
 800aa80:	6126      	str	r6, [r4, #16]
 800aa82:	6165      	str	r5, [r4, #20]
 800aa84:	444e      	add	r6, r9
 800aa86:	eba5 0509 	sub.w	r5, r5, r9
 800aa8a:	6026      	str	r6, [r4, #0]
 800aa8c:	60a5      	str	r5, [r4, #8]
 800aa8e:	463e      	mov	r6, r7
 800aa90:	42be      	cmp	r6, r7
 800aa92:	d900      	bls.n	800aa96 <__ssputs_r+0x72>
 800aa94:	463e      	mov	r6, r7
 800aa96:	6820      	ldr	r0, [r4, #0]
 800aa98:	4632      	mov	r2, r6
 800aa9a:	4641      	mov	r1, r8
 800aa9c:	f000 fb6a 	bl	800b174 <memmove>
 800aaa0:	68a3      	ldr	r3, [r4, #8]
 800aaa2:	1b9b      	subs	r3, r3, r6
 800aaa4:	60a3      	str	r3, [r4, #8]
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	4433      	add	r3, r6
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	2000      	movs	r0, #0
 800aaae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab2:	462a      	mov	r2, r5
 800aab4:	f000 ff51 	bl	800b95a <_realloc_r>
 800aab8:	4606      	mov	r6, r0
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d1e0      	bne.n	800aa80 <__ssputs_r+0x5c>
 800aabe:	6921      	ldr	r1, [r4, #16]
 800aac0:	4650      	mov	r0, sl
 800aac2:	f7fe fbfd 	bl	80092c0 <_free_r>
 800aac6:	230c      	movs	r3, #12
 800aac8:	f8ca 3000 	str.w	r3, [sl]
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aad2:	81a3      	strh	r3, [r4, #12]
 800aad4:	f04f 30ff 	mov.w	r0, #4294967295
 800aad8:	e7e9      	b.n	800aaae <__ssputs_r+0x8a>
	...

0800aadc <_svfiprintf_r>:
 800aadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae0:	4698      	mov	r8, r3
 800aae2:	898b      	ldrh	r3, [r1, #12]
 800aae4:	061b      	lsls	r3, r3, #24
 800aae6:	b09d      	sub	sp, #116	@ 0x74
 800aae8:	4607      	mov	r7, r0
 800aaea:	460d      	mov	r5, r1
 800aaec:	4614      	mov	r4, r2
 800aaee:	d510      	bpl.n	800ab12 <_svfiprintf_r+0x36>
 800aaf0:	690b      	ldr	r3, [r1, #16]
 800aaf2:	b973      	cbnz	r3, 800ab12 <_svfiprintf_r+0x36>
 800aaf4:	2140      	movs	r1, #64	@ 0x40
 800aaf6:	f7fe fc57 	bl	80093a8 <_malloc_r>
 800aafa:	6028      	str	r0, [r5, #0]
 800aafc:	6128      	str	r0, [r5, #16]
 800aafe:	b930      	cbnz	r0, 800ab0e <_svfiprintf_r+0x32>
 800ab00:	230c      	movs	r3, #12
 800ab02:	603b      	str	r3, [r7, #0]
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295
 800ab08:	b01d      	add	sp, #116	@ 0x74
 800ab0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0e:	2340      	movs	r3, #64	@ 0x40
 800ab10:	616b      	str	r3, [r5, #20]
 800ab12:	2300      	movs	r3, #0
 800ab14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab16:	2320      	movs	r3, #32
 800ab18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab20:	2330      	movs	r3, #48	@ 0x30
 800ab22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800acc0 <_svfiprintf_r+0x1e4>
 800ab26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab2a:	f04f 0901 	mov.w	r9, #1
 800ab2e:	4623      	mov	r3, r4
 800ab30:	469a      	mov	sl, r3
 800ab32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab36:	b10a      	cbz	r2, 800ab3c <_svfiprintf_r+0x60>
 800ab38:	2a25      	cmp	r2, #37	@ 0x25
 800ab3a:	d1f9      	bne.n	800ab30 <_svfiprintf_r+0x54>
 800ab3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab40:	d00b      	beq.n	800ab5a <_svfiprintf_r+0x7e>
 800ab42:	465b      	mov	r3, fp
 800ab44:	4622      	mov	r2, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	4638      	mov	r0, r7
 800ab4a:	f7ff ff6b 	bl	800aa24 <__ssputs_r>
 800ab4e:	3001      	adds	r0, #1
 800ab50:	f000 80a7 	beq.w	800aca2 <_svfiprintf_r+0x1c6>
 800ab54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab56:	445a      	add	r2, fp
 800ab58:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f000 809f 	beq.w	800aca2 <_svfiprintf_r+0x1c6>
 800ab64:	2300      	movs	r3, #0
 800ab66:	f04f 32ff 	mov.w	r2, #4294967295
 800ab6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab6e:	f10a 0a01 	add.w	sl, sl, #1
 800ab72:	9304      	str	r3, [sp, #16]
 800ab74:	9307      	str	r3, [sp, #28]
 800ab76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab7c:	4654      	mov	r4, sl
 800ab7e:	2205      	movs	r2, #5
 800ab80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab84:	484e      	ldr	r0, [pc, #312]	@ (800acc0 <_svfiprintf_r+0x1e4>)
 800ab86:	f7f5 fb53 	bl	8000230 <memchr>
 800ab8a:	9a04      	ldr	r2, [sp, #16]
 800ab8c:	b9d8      	cbnz	r0, 800abc6 <_svfiprintf_r+0xea>
 800ab8e:	06d0      	lsls	r0, r2, #27
 800ab90:	bf44      	itt	mi
 800ab92:	2320      	movmi	r3, #32
 800ab94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab98:	0711      	lsls	r1, r2, #28
 800ab9a:	bf44      	itt	mi
 800ab9c:	232b      	movmi	r3, #43	@ 0x2b
 800ab9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aba2:	f89a 3000 	ldrb.w	r3, [sl]
 800aba6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aba8:	d015      	beq.n	800abd6 <_svfiprintf_r+0xfa>
 800abaa:	9a07      	ldr	r2, [sp, #28]
 800abac:	4654      	mov	r4, sl
 800abae:	2000      	movs	r0, #0
 800abb0:	f04f 0c0a 	mov.w	ip, #10
 800abb4:	4621      	mov	r1, r4
 800abb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abba:	3b30      	subs	r3, #48	@ 0x30
 800abbc:	2b09      	cmp	r3, #9
 800abbe:	d94b      	bls.n	800ac58 <_svfiprintf_r+0x17c>
 800abc0:	b1b0      	cbz	r0, 800abf0 <_svfiprintf_r+0x114>
 800abc2:	9207      	str	r2, [sp, #28]
 800abc4:	e014      	b.n	800abf0 <_svfiprintf_r+0x114>
 800abc6:	eba0 0308 	sub.w	r3, r0, r8
 800abca:	fa09 f303 	lsl.w	r3, r9, r3
 800abce:	4313      	orrs	r3, r2
 800abd0:	9304      	str	r3, [sp, #16]
 800abd2:	46a2      	mov	sl, r4
 800abd4:	e7d2      	b.n	800ab7c <_svfiprintf_r+0xa0>
 800abd6:	9b03      	ldr	r3, [sp, #12]
 800abd8:	1d19      	adds	r1, r3, #4
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	9103      	str	r1, [sp, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bfbb      	ittet	lt
 800abe2:	425b      	neglt	r3, r3
 800abe4:	f042 0202 	orrlt.w	r2, r2, #2
 800abe8:	9307      	strge	r3, [sp, #28]
 800abea:	9307      	strlt	r3, [sp, #28]
 800abec:	bfb8      	it	lt
 800abee:	9204      	strlt	r2, [sp, #16]
 800abf0:	7823      	ldrb	r3, [r4, #0]
 800abf2:	2b2e      	cmp	r3, #46	@ 0x2e
 800abf4:	d10a      	bne.n	800ac0c <_svfiprintf_r+0x130>
 800abf6:	7863      	ldrb	r3, [r4, #1]
 800abf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800abfa:	d132      	bne.n	800ac62 <_svfiprintf_r+0x186>
 800abfc:	9b03      	ldr	r3, [sp, #12]
 800abfe:	1d1a      	adds	r2, r3, #4
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	9203      	str	r2, [sp, #12]
 800ac04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac08:	3402      	adds	r4, #2
 800ac0a:	9305      	str	r3, [sp, #20]
 800ac0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800acd0 <_svfiprintf_r+0x1f4>
 800ac10:	7821      	ldrb	r1, [r4, #0]
 800ac12:	2203      	movs	r2, #3
 800ac14:	4650      	mov	r0, sl
 800ac16:	f7f5 fb0b 	bl	8000230 <memchr>
 800ac1a:	b138      	cbz	r0, 800ac2c <_svfiprintf_r+0x150>
 800ac1c:	9b04      	ldr	r3, [sp, #16]
 800ac1e:	eba0 000a 	sub.w	r0, r0, sl
 800ac22:	2240      	movs	r2, #64	@ 0x40
 800ac24:	4082      	lsls	r2, r0
 800ac26:	4313      	orrs	r3, r2
 800ac28:	3401      	adds	r4, #1
 800ac2a:	9304      	str	r3, [sp, #16]
 800ac2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac30:	4824      	ldr	r0, [pc, #144]	@ (800acc4 <_svfiprintf_r+0x1e8>)
 800ac32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac36:	2206      	movs	r2, #6
 800ac38:	f7f5 fafa 	bl	8000230 <memchr>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d036      	beq.n	800acae <_svfiprintf_r+0x1d2>
 800ac40:	4b21      	ldr	r3, [pc, #132]	@ (800acc8 <_svfiprintf_r+0x1ec>)
 800ac42:	bb1b      	cbnz	r3, 800ac8c <_svfiprintf_r+0x1b0>
 800ac44:	9b03      	ldr	r3, [sp, #12]
 800ac46:	3307      	adds	r3, #7
 800ac48:	f023 0307 	bic.w	r3, r3, #7
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	9303      	str	r3, [sp, #12]
 800ac50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac52:	4433      	add	r3, r6
 800ac54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac56:	e76a      	b.n	800ab2e <_svfiprintf_r+0x52>
 800ac58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	2001      	movs	r0, #1
 800ac60:	e7a8      	b.n	800abb4 <_svfiprintf_r+0xd8>
 800ac62:	2300      	movs	r3, #0
 800ac64:	3401      	adds	r4, #1
 800ac66:	9305      	str	r3, [sp, #20]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	f04f 0c0a 	mov.w	ip, #10
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac74:	3a30      	subs	r2, #48	@ 0x30
 800ac76:	2a09      	cmp	r2, #9
 800ac78:	d903      	bls.n	800ac82 <_svfiprintf_r+0x1a6>
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0c6      	beq.n	800ac0c <_svfiprintf_r+0x130>
 800ac7e:	9105      	str	r1, [sp, #20]
 800ac80:	e7c4      	b.n	800ac0c <_svfiprintf_r+0x130>
 800ac82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac86:	4604      	mov	r4, r0
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e7f0      	b.n	800ac6e <_svfiprintf_r+0x192>
 800ac8c:	ab03      	add	r3, sp, #12
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	462a      	mov	r2, r5
 800ac92:	4b0e      	ldr	r3, [pc, #56]	@ (800accc <_svfiprintf_r+0x1f0>)
 800ac94:	a904      	add	r1, sp, #16
 800ac96:	4638      	mov	r0, r7
 800ac98:	f7fc fc42 	bl	8007520 <_printf_float>
 800ac9c:	1c42      	adds	r2, r0, #1
 800ac9e:	4606      	mov	r6, r0
 800aca0:	d1d6      	bne.n	800ac50 <_svfiprintf_r+0x174>
 800aca2:	89ab      	ldrh	r3, [r5, #12]
 800aca4:	065b      	lsls	r3, r3, #25
 800aca6:	f53f af2d 	bmi.w	800ab04 <_svfiprintf_r+0x28>
 800acaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acac:	e72c      	b.n	800ab08 <_svfiprintf_r+0x2c>
 800acae:	ab03      	add	r3, sp, #12
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	462a      	mov	r2, r5
 800acb4:	4b05      	ldr	r3, [pc, #20]	@ (800accc <_svfiprintf_r+0x1f0>)
 800acb6:	a904      	add	r1, sp, #16
 800acb8:	4638      	mov	r0, r7
 800acba:	f7fc fec9 	bl	8007a50 <_printf_i>
 800acbe:	e7ed      	b.n	800ac9c <_svfiprintf_r+0x1c0>
 800acc0:	0800bf5e 	.word	0x0800bf5e
 800acc4:	0800bf68 	.word	0x0800bf68
 800acc8:	08007521 	.word	0x08007521
 800accc:	0800aa25 	.word	0x0800aa25
 800acd0:	0800bf64 	.word	0x0800bf64

0800acd4 <__sfputc_r>:
 800acd4:	6893      	ldr	r3, [r2, #8]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	2b00      	cmp	r3, #0
 800acda:	b410      	push	{r4}
 800acdc:	6093      	str	r3, [r2, #8]
 800acde:	da08      	bge.n	800acf2 <__sfputc_r+0x1e>
 800ace0:	6994      	ldr	r4, [r2, #24]
 800ace2:	42a3      	cmp	r3, r4
 800ace4:	db01      	blt.n	800acea <__sfputc_r+0x16>
 800ace6:	290a      	cmp	r1, #10
 800ace8:	d103      	bne.n	800acf2 <__sfputc_r+0x1e>
 800acea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acee:	f7fd bb72 	b.w	80083d6 <__swbuf_r>
 800acf2:	6813      	ldr	r3, [r2, #0]
 800acf4:	1c58      	adds	r0, r3, #1
 800acf6:	6010      	str	r0, [r2, #0]
 800acf8:	7019      	strb	r1, [r3, #0]
 800acfa:	4608      	mov	r0, r1
 800acfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <__sfputs_r>:
 800ad02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad04:	4606      	mov	r6, r0
 800ad06:	460f      	mov	r7, r1
 800ad08:	4614      	mov	r4, r2
 800ad0a:	18d5      	adds	r5, r2, r3
 800ad0c:	42ac      	cmp	r4, r5
 800ad0e:	d101      	bne.n	800ad14 <__sfputs_r+0x12>
 800ad10:	2000      	movs	r0, #0
 800ad12:	e007      	b.n	800ad24 <__sfputs_r+0x22>
 800ad14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad18:	463a      	mov	r2, r7
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7ff ffda 	bl	800acd4 <__sfputc_r>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d1f3      	bne.n	800ad0c <__sfputs_r+0xa>
 800ad24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad28 <_vfiprintf_r>:
 800ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	460d      	mov	r5, r1
 800ad2e:	b09d      	sub	sp, #116	@ 0x74
 800ad30:	4614      	mov	r4, r2
 800ad32:	4698      	mov	r8, r3
 800ad34:	4606      	mov	r6, r0
 800ad36:	b118      	cbz	r0, 800ad40 <_vfiprintf_r+0x18>
 800ad38:	6a03      	ldr	r3, [r0, #32]
 800ad3a:	b90b      	cbnz	r3, 800ad40 <_vfiprintf_r+0x18>
 800ad3c:	f7fd fa40 	bl	80081c0 <__sinit>
 800ad40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad42:	07d9      	lsls	r1, r3, #31
 800ad44:	d405      	bmi.n	800ad52 <_vfiprintf_r+0x2a>
 800ad46:	89ab      	ldrh	r3, [r5, #12]
 800ad48:	059a      	lsls	r2, r3, #22
 800ad4a:	d402      	bmi.n	800ad52 <_vfiprintf_r+0x2a>
 800ad4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad4e:	f7fd fc54 	bl	80085fa <__retarget_lock_acquire_recursive>
 800ad52:	89ab      	ldrh	r3, [r5, #12]
 800ad54:	071b      	lsls	r3, r3, #28
 800ad56:	d501      	bpl.n	800ad5c <_vfiprintf_r+0x34>
 800ad58:	692b      	ldr	r3, [r5, #16]
 800ad5a:	b99b      	cbnz	r3, 800ad84 <_vfiprintf_r+0x5c>
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7fd fb78 	bl	8008454 <__swsetup_r>
 800ad64:	b170      	cbz	r0, 800ad84 <_vfiprintf_r+0x5c>
 800ad66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad68:	07dc      	lsls	r4, r3, #31
 800ad6a:	d504      	bpl.n	800ad76 <_vfiprintf_r+0x4e>
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad70:	b01d      	add	sp, #116	@ 0x74
 800ad72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad76:	89ab      	ldrh	r3, [r5, #12]
 800ad78:	0598      	lsls	r0, r3, #22
 800ad7a:	d4f7      	bmi.n	800ad6c <_vfiprintf_r+0x44>
 800ad7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad7e:	f7fd fc3d 	bl	80085fc <__retarget_lock_release_recursive>
 800ad82:	e7f3      	b.n	800ad6c <_vfiprintf_r+0x44>
 800ad84:	2300      	movs	r3, #0
 800ad86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad88:	2320      	movs	r3, #32
 800ad8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad92:	2330      	movs	r3, #48	@ 0x30
 800ad94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af44 <_vfiprintf_r+0x21c>
 800ad98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad9c:	f04f 0901 	mov.w	r9, #1
 800ada0:	4623      	mov	r3, r4
 800ada2:	469a      	mov	sl, r3
 800ada4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ada8:	b10a      	cbz	r2, 800adae <_vfiprintf_r+0x86>
 800adaa:	2a25      	cmp	r2, #37	@ 0x25
 800adac:	d1f9      	bne.n	800ada2 <_vfiprintf_r+0x7a>
 800adae:	ebba 0b04 	subs.w	fp, sl, r4
 800adb2:	d00b      	beq.n	800adcc <_vfiprintf_r+0xa4>
 800adb4:	465b      	mov	r3, fp
 800adb6:	4622      	mov	r2, r4
 800adb8:	4629      	mov	r1, r5
 800adba:	4630      	mov	r0, r6
 800adbc:	f7ff ffa1 	bl	800ad02 <__sfputs_r>
 800adc0:	3001      	adds	r0, #1
 800adc2:	f000 80a7 	beq.w	800af14 <_vfiprintf_r+0x1ec>
 800adc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adc8:	445a      	add	r2, fp
 800adca:	9209      	str	r2, [sp, #36]	@ 0x24
 800adcc:	f89a 3000 	ldrb.w	r3, [sl]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 809f 	beq.w	800af14 <_vfiprintf_r+0x1ec>
 800add6:	2300      	movs	r3, #0
 800add8:	f04f 32ff 	mov.w	r2, #4294967295
 800addc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ade0:	f10a 0a01 	add.w	sl, sl, #1
 800ade4:	9304      	str	r3, [sp, #16]
 800ade6:	9307      	str	r3, [sp, #28]
 800ade8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adec:	931a      	str	r3, [sp, #104]	@ 0x68
 800adee:	4654      	mov	r4, sl
 800adf0:	2205      	movs	r2, #5
 800adf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf6:	4853      	ldr	r0, [pc, #332]	@ (800af44 <_vfiprintf_r+0x21c>)
 800adf8:	f7f5 fa1a 	bl	8000230 <memchr>
 800adfc:	9a04      	ldr	r2, [sp, #16]
 800adfe:	b9d8      	cbnz	r0, 800ae38 <_vfiprintf_r+0x110>
 800ae00:	06d1      	lsls	r1, r2, #27
 800ae02:	bf44      	itt	mi
 800ae04:	2320      	movmi	r3, #32
 800ae06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae0a:	0713      	lsls	r3, r2, #28
 800ae0c:	bf44      	itt	mi
 800ae0e:	232b      	movmi	r3, #43	@ 0x2b
 800ae10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae14:	f89a 3000 	ldrb.w	r3, [sl]
 800ae18:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae1a:	d015      	beq.n	800ae48 <_vfiprintf_r+0x120>
 800ae1c:	9a07      	ldr	r2, [sp, #28]
 800ae1e:	4654      	mov	r4, sl
 800ae20:	2000      	movs	r0, #0
 800ae22:	f04f 0c0a 	mov.w	ip, #10
 800ae26:	4621      	mov	r1, r4
 800ae28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae2c:	3b30      	subs	r3, #48	@ 0x30
 800ae2e:	2b09      	cmp	r3, #9
 800ae30:	d94b      	bls.n	800aeca <_vfiprintf_r+0x1a2>
 800ae32:	b1b0      	cbz	r0, 800ae62 <_vfiprintf_r+0x13a>
 800ae34:	9207      	str	r2, [sp, #28]
 800ae36:	e014      	b.n	800ae62 <_vfiprintf_r+0x13a>
 800ae38:	eba0 0308 	sub.w	r3, r0, r8
 800ae3c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae40:	4313      	orrs	r3, r2
 800ae42:	9304      	str	r3, [sp, #16]
 800ae44:	46a2      	mov	sl, r4
 800ae46:	e7d2      	b.n	800adee <_vfiprintf_r+0xc6>
 800ae48:	9b03      	ldr	r3, [sp, #12]
 800ae4a:	1d19      	adds	r1, r3, #4
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	9103      	str	r1, [sp, #12]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	bfbb      	ittet	lt
 800ae54:	425b      	neglt	r3, r3
 800ae56:	f042 0202 	orrlt.w	r2, r2, #2
 800ae5a:	9307      	strge	r3, [sp, #28]
 800ae5c:	9307      	strlt	r3, [sp, #28]
 800ae5e:	bfb8      	it	lt
 800ae60:	9204      	strlt	r2, [sp, #16]
 800ae62:	7823      	ldrb	r3, [r4, #0]
 800ae64:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae66:	d10a      	bne.n	800ae7e <_vfiprintf_r+0x156>
 800ae68:	7863      	ldrb	r3, [r4, #1]
 800ae6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae6c:	d132      	bne.n	800aed4 <_vfiprintf_r+0x1ac>
 800ae6e:	9b03      	ldr	r3, [sp, #12]
 800ae70:	1d1a      	adds	r2, r3, #4
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	9203      	str	r2, [sp, #12]
 800ae76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae7a:	3402      	adds	r4, #2
 800ae7c:	9305      	str	r3, [sp, #20]
 800ae7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af54 <_vfiprintf_r+0x22c>
 800ae82:	7821      	ldrb	r1, [r4, #0]
 800ae84:	2203      	movs	r2, #3
 800ae86:	4650      	mov	r0, sl
 800ae88:	f7f5 f9d2 	bl	8000230 <memchr>
 800ae8c:	b138      	cbz	r0, 800ae9e <_vfiprintf_r+0x176>
 800ae8e:	9b04      	ldr	r3, [sp, #16]
 800ae90:	eba0 000a 	sub.w	r0, r0, sl
 800ae94:	2240      	movs	r2, #64	@ 0x40
 800ae96:	4082      	lsls	r2, r0
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	3401      	adds	r4, #1
 800ae9c:	9304      	str	r3, [sp, #16]
 800ae9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea2:	4829      	ldr	r0, [pc, #164]	@ (800af48 <_vfiprintf_r+0x220>)
 800aea4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aea8:	2206      	movs	r2, #6
 800aeaa:	f7f5 f9c1 	bl	8000230 <memchr>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d03f      	beq.n	800af32 <_vfiprintf_r+0x20a>
 800aeb2:	4b26      	ldr	r3, [pc, #152]	@ (800af4c <_vfiprintf_r+0x224>)
 800aeb4:	bb1b      	cbnz	r3, 800aefe <_vfiprintf_r+0x1d6>
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	3307      	adds	r3, #7
 800aeba:	f023 0307 	bic.w	r3, r3, #7
 800aebe:	3308      	adds	r3, #8
 800aec0:	9303      	str	r3, [sp, #12]
 800aec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec4:	443b      	add	r3, r7
 800aec6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aec8:	e76a      	b.n	800ada0 <_vfiprintf_r+0x78>
 800aeca:	fb0c 3202 	mla	r2, ip, r2, r3
 800aece:	460c      	mov	r4, r1
 800aed0:	2001      	movs	r0, #1
 800aed2:	e7a8      	b.n	800ae26 <_vfiprintf_r+0xfe>
 800aed4:	2300      	movs	r3, #0
 800aed6:	3401      	adds	r4, #1
 800aed8:	9305      	str	r3, [sp, #20]
 800aeda:	4619      	mov	r1, r3
 800aedc:	f04f 0c0a 	mov.w	ip, #10
 800aee0:	4620      	mov	r0, r4
 800aee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aee6:	3a30      	subs	r2, #48	@ 0x30
 800aee8:	2a09      	cmp	r2, #9
 800aeea:	d903      	bls.n	800aef4 <_vfiprintf_r+0x1cc>
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0c6      	beq.n	800ae7e <_vfiprintf_r+0x156>
 800aef0:	9105      	str	r1, [sp, #20]
 800aef2:	e7c4      	b.n	800ae7e <_vfiprintf_r+0x156>
 800aef4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aef8:	4604      	mov	r4, r0
 800aefa:	2301      	movs	r3, #1
 800aefc:	e7f0      	b.n	800aee0 <_vfiprintf_r+0x1b8>
 800aefe:	ab03      	add	r3, sp, #12
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	462a      	mov	r2, r5
 800af04:	4b12      	ldr	r3, [pc, #72]	@ (800af50 <_vfiprintf_r+0x228>)
 800af06:	a904      	add	r1, sp, #16
 800af08:	4630      	mov	r0, r6
 800af0a:	f7fc fb09 	bl	8007520 <_printf_float>
 800af0e:	4607      	mov	r7, r0
 800af10:	1c78      	adds	r0, r7, #1
 800af12:	d1d6      	bne.n	800aec2 <_vfiprintf_r+0x19a>
 800af14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af16:	07d9      	lsls	r1, r3, #31
 800af18:	d405      	bmi.n	800af26 <_vfiprintf_r+0x1fe>
 800af1a:	89ab      	ldrh	r3, [r5, #12]
 800af1c:	059a      	lsls	r2, r3, #22
 800af1e:	d402      	bmi.n	800af26 <_vfiprintf_r+0x1fe>
 800af20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af22:	f7fd fb6b 	bl	80085fc <__retarget_lock_release_recursive>
 800af26:	89ab      	ldrh	r3, [r5, #12]
 800af28:	065b      	lsls	r3, r3, #25
 800af2a:	f53f af1f 	bmi.w	800ad6c <_vfiprintf_r+0x44>
 800af2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af30:	e71e      	b.n	800ad70 <_vfiprintf_r+0x48>
 800af32:	ab03      	add	r3, sp, #12
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	462a      	mov	r2, r5
 800af38:	4b05      	ldr	r3, [pc, #20]	@ (800af50 <_vfiprintf_r+0x228>)
 800af3a:	a904      	add	r1, sp, #16
 800af3c:	4630      	mov	r0, r6
 800af3e:	f7fc fd87 	bl	8007a50 <_printf_i>
 800af42:	e7e4      	b.n	800af0e <_vfiprintf_r+0x1e6>
 800af44:	0800bf5e 	.word	0x0800bf5e
 800af48:	0800bf68 	.word	0x0800bf68
 800af4c:	08007521 	.word	0x08007521
 800af50:	0800ad03 	.word	0x0800ad03
 800af54:	0800bf64 	.word	0x0800bf64

0800af58 <__sflush_r>:
 800af58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af60:	0716      	lsls	r6, r2, #28
 800af62:	4605      	mov	r5, r0
 800af64:	460c      	mov	r4, r1
 800af66:	d454      	bmi.n	800b012 <__sflush_r+0xba>
 800af68:	684b      	ldr	r3, [r1, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	dc02      	bgt.n	800af74 <__sflush_r+0x1c>
 800af6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af70:	2b00      	cmp	r3, #0
 800af72:	dd48      	ble.n	800b006 <__sflush_r+0xae>
 800af74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af76:	2e00      	cmp	r6, #0
 800af78:	d045      	beq.n	800b006 <__sflush_r+0xae>
 800af7a:	2300      	movs	r3, #0
 800af7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af80:	682f      	ldr	r7, [r5, #0]
 800af82:	6a21      	ldr	r1, [r4, #32]
 800af84:	602b      	str	r3, [r5, #0]
 800af86:	d030      	beq.n	800afea <__sflush_r+0x92>
 800af88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	0759      	lsls	r1, r3, #29
 800af8e:	d505      	bpl.n	800af9c <__sflush_r+0x44>
 800af90:	6863      	ldr	r3, [r4, #4]
 800af92:	1ad2      	subs	r2, r2, r3
 800af94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af96:	b10b      	cbz	r3, 800af9c <__sflush_r+0x44>
 800af98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af9a:	1ad2      	subs	r2, r2, r3
 800af9c:	2300      	movs	r3, #0
 800af9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afa0:	6a21      	ldr	r1, [r4, #32]
 800afa2:	4628      	mov	r0, r5
 800afa4:	47b0      	blx	r6
 800afa6:	1c43      	adds	r3, r0, #1
 800afa8:	89a3      	ldrh	r3, [r4, #12]
 800afaa:	d106      	bne.n	800afba <__sflush_r+0x62>
 800afac:	6829      	ldr	r1, [r5, #0]
 800afae:	291d      	cmp	r1, #29
 800afb0:	d82b      	bhi.n	800b00a <__sflush_r+0xb2>
 800afb2:	4a2a      	ldr	r2, [pc, #168]	@ (800b05c <__sflush_r+0x104>)
 800afb4:	40ca      	lsrs	r2, r1
 800afb6:	07d6      	lsls	r6, r2, #31
 800afb8:	d527      	bpl.n	800b00a <__sflush_r+0xb2>
 800afba:	2200      	movs	r2, #0
 800afbc:	6062      	str	r2, [r4, #4]
 800afbe:	04d9      	lsls	r1, r3, #19
 800afc0:	6922      	ldr	r2, [r4, #16]
 800afc2:	6022      	str	r2, [r4, #0]
 800afc4:	d504      	bpl.n	800afd0 <__sflush_r+0x78>
 800afc6:	1c42      	adds	r2, r0, #1
 800afc8:	d101      	bne.n	800afce <__sflush_r+0x76>
 800afca:	682b      	ldr	r3, [r5, #0]
 800afcc:	b903      	cbnz	r3, 800afd0 <__sflush_r+0x78>
 800afce:	6560      	str	r0, [r4, #84]	@ 0x54
 800afd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afd2:	602f      	str	r7, [r5, #0]
 800afd4:	b1b9      	cbz	r1, 800b006 <__sflush_r+0xae>
 800afd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afda:	4299      	cmp	r1, r3
 800afdc:	d002      	beq.n	800afe4 <__sflush_r+0x8c>
 800afde:	4628      	mov	r0, r5
 800afe0:	f7fe f96e 	bl	80092c0 <_free_r>
 800afe4:	2300      	movs	r3, #0
 800afe6:	6363      	str	r3, [r4, #52]	@ 0x34
 800afe8:	e00d      	b.n	800b006 <__sflush_r+0xae>
 800afea:	2301      	movs	r3, #1
 800afec:	4628      	mov	r0, r5
 800afee:	47b0      	blx	r6
 800aff0:	4602      	mov	r2, r0
 800aff2:	1c50      	adds	r0, r2, #1
 800aff4:	d1c9      	bne.n	800af8a <__sflush_r+0x32>
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0c6      	beq.n	800af8a <__sflush_r+0x32>
 800affc:	2b1d      	cmp	r3, #29
 800affe:	d001      	beq.n	800b004 <__sflush_r+0xac>
 800b000:	2b16      	cmp	r3, #22
 800b002:	d11e      	bne.n	800b042 <__sflush_r+0xea>
 800b004:	602f      	str	r7, [r5, #0]
 800b006:	2000      	movs	r0, #0
 800b008:	e022      	b.n	800b050 <__sflush_r+0xf8>
 800b00a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b00e:	b21b      	sxth	r3, r3
 800b010:	e01b      	b.n	800b04a <__sflush_r+0xf2>
 800b012:	690f      	ldr	r7, [r1, #16]
 800b014:	2f00      	cmp	r7, #0
 800b016:	d0f6      	beq.n	800b006 <__sflush_r+0xae>
 800b018:	0793      	lsls	r3, r2, #30
 800b01a:	680e      	ldr	r6, [r1, #0]
 800b01c:	bf08      	it	eq
 800b01e:	694b      	ldreq	r3, [r1, #20]
 800b020:	600f      	str	r7, [r1, #0]
 800b022:	bf18      	it	ne
 800b024:	2300      	movne	r3, #0
 800b026:	eba6 0807 	sub.w	r8, r6, r7
 800b02a:	608b      	str	r3, [r1, #8]
 800b02c:	f1b8 0f00 	cmp.w	r8, #0
 800b030:	dde9      	ble.n	800b006 <__sflush_r+0xae>
 800b032:	6a21      	ldr	r1, [r4, #32]
 800b034:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b036:	4643      	mov	r3, r8
 800b038:	463a      	mov	r2, r7
 800b03a:	4628      	mov	r0, r5
 800b03c:	47b0      	blx	r6
 800b03e:	2800      	cmp	r0, #0
 800b040:	dc08      	bgt.n	800b054 <__sflush_r+0xfc>
 800b042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b04a:	81a3      	strh	r3, [r4, #12]
 800b04c:	f04f 30ff 	mov.w	r0, #4294967295
 800b050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b054:	4407      	add	r7, r0
 800b056:	eba8 0800 	sub.w	r8, r8, r0
 800b05a:	e7e7      	b.n	800b02c <__sflush_r+0xd4>
 800b05c:	20400001 	.word	0x20400001

0800b060 <_fflush_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	690b      	ldr	r3, [r1, #16]
 800b064:	4605      	mov	r5, r0
 800b066:	460c      	mov	r4, r1
 800b068:	b913      	cbnz	r3, 800b070 <_fflush_r+0x10>
 800b06a:	2500      	movs	r5, #0
 800b06c:	4628      	mov	r0, r5
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	b118      	cbz	r0, 800b07a <_fflush_r+0x1a>
 800b072:	6a03      	ldr	r3, [r0, #32]
 800b074:	b90b      	cbnz	r3, 800b07a <_fflush_r+0x1a>
 800b076:	f7fd f8a3 	bl	80081c0 <__sinit>
 800b07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0f3      	beq.n	800b06a <_fflush_r+0xa>
 800b082:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b084:	07d0      	lsls	r0, r2, #31
 800b086:	d404      	bmi.n	800b092 <_fflush_r+0x32>
 800b088:	0599      	lsls	r1, r3, #22
 800b08a:	d402      	bmi.n	800b092 <_fflush_r+0x32>
 800b08c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b08e:	f7fd fab4 	bl	80085fa <__retarget_lock_acquire_recursive>
 800b092:	4628      	mov	r0, r5
 800b094:	4621      	mov	r1, r4
 800b096:	f7ff ff5f 	bl	800af58 <__sflush_r>
 800b09a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b09c:	07da      	lsls	r2, r3, #31
 800b09e:	4605      	mov	r5, r0
 800b0a0:	d4e4      	bmi.n	800b06c <_fflush_r+0xc>
 800b0a2:	89a3      	ldrh	r3, [r4, #12]
 800b0a4:	059b      	lsls	r3, r3, #22
 800b0a6:	d4e1      	bmi.n	800b06c <_fflush_r+0xc>
 800b0a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0aa:	f7fd faa7 	bl	80085fc <__retarget_lock_release_recursive>
 800b0ae:	e7dd      	b.n	800b06c <_fflush_r+0xc>

0800b0b0 <__swhatbuf_r>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b8:	2900      	cmp	r1, #0
 800b0ba:	b096      	sub	sp, #88	@ 0x58
 800b0bc:	4615      	mov	r5, r2
 800b0be:	461e      	mov	r6, r3
 800b0c0:	da0d      	bge.n	800b0de <__swhatbuf_r+0x2e>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0c8:	f04f 0100 	mov.w	r1, #0
 800b0cc:	bf14      	ite	ne
 800b0ce:	2340      	movne	r3, #64	@ 0x40
 800b0d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	6031      	str	r1, [r6, #0]
 800b0d8:	602b      	str	r3, [r5, #0]
 800b0da:	b016      	add	sp, #88	@ 0x58
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
 800b0de:	466a      	mov	r2, sp
 800b0e0:	f000 f874 	bl	800b1cc <_fstat_r>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	dbec      	blt.n	800b0c2 <__swhatbuf_r+0x12>
 800b0e8:	9901      	ldr	r1, [sp, #4]
 800b0ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0f2:	4259      	negs	r1, r3
 800b0f4:	4159      	adcs	r1, r3
 800b0f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0fa:	e7eb      	b.n	800b0d4 <__swhatbuf_r+0x24>

0800b0fc <__smakebuf_r>:
 800b0fc:	898b      	ldrh	r3, [r1, #12]
 800b0fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b100:	079d      	lsls	r5, r3, #30
 800b102:	4606      	mov	r6, r0
 800b104:	460c      	mov	r4, r1
 800b106:	d507      	bpl.n	800b118 <__smakebuf_r+0x1c>
 800b108:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	6123      	str	r3, [r4, #16]
 800b110:	2301      	movs	r3, #1
 800b112:	6163      	str	r3, [r4, #20]
 800b114:	b003      	add	sp, #12
 800b116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b118:	ab01      	add	r3, sp, #4
 800b11a:	466a      	mov	r2, sp
 800b11c:	f7ff ffc8 	bl	800b0b0 <__swhatbuf_r>
 800b120:	9f00      	ldr	r7, [sp, #0]
 800b122:	4605      	mov	r5, r0
 800b124:	4639      	mov	r1, r7
 800b126:	4630      	mov	r0, r6
 800b128:	f7fe f93e 	bl	80093a8 <_malloc_r>
 800b12c:	b948      	cbnz	r0, 800b142 <__smakebuf_r+0x46>
 800b12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b132:	059a      	lsls	r2, r3, #22
 800b134:	d4ee      	bmi.n	800b114 <__smakebuf_r+0x18>
 800b136:	f023 0303 	bic.w	r3, r3, #3
 800b13a:	f043 0302 	orr.w	r3, r3, #2
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	e7e2      	b.n	800b108 <__smakebuf_r+0xc>
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	6020      	str	r0, [r4, #0]
 800b146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	9b01      	ldr	r3, [sp, #4]
 800b14e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b152:	b15b      	cbz	r3, 800b16c <__smakebuf_r+0x70>
 800b154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b158:	4630      	mov	r0, r6
 800b15a:	f000 f849 	bl	800b1f0 <_isatty_r>
 800b15e:	b128      	cbz	r0, 800b16c <__smakebuf_r+0x70>
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	f023 0303 	bic.w	r3, r3, #3
 800b166:	f043 0301 	orr.w	r3, r3, #1
 800b16a:	81a3      	strh	r3, [r4, #12]
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	431d      	orrs	r5, r3
 800b170:	81a5      	strh	r5, [r4, #12]
 800b172:	e7cf      	b.n	800b114 <__smakebuf_r+0x18>

0800b174 <memmove>:
 800b174:	4288      	cmp	r0, r1
 800b176:	b510      	push	{r4, lr}
 800b178:	eb01 0402 	add.w	r4, r1, r2
 800b17c:	d902      	bls.n	800b184 <memmove+0x10>
 800b17e:	4284      	cmp	r4, r0
 800b180:	4623      	mov	r3, r4
 800b182:	d807      	bhi.n	800b194 <memmove+0x20>
 800b184:	1e43      	subs	r3, r0, #1
 800b186:	42a1      	cmp	r1, r4
 800b188:	d008      	beq.n	800b19c <memmove+0x28>
 800b18a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b18e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b192:	e7f8      	b.n	800b186 <memmove+0x12>
 800b194:	4402      	add	r2, r0
 800b196:	4601      	mov	r1, r0
 800b198:	428a      	cmp	r2, r1
 800b19a:	d100      	bne.n	800b19e <memmove+0x2a>
 800b19c:	bd10      	pop	{r4, pc}
 800b19e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1a6:	e7f7      	b.n	800b198 <memmove+0x24>

0800b1a8 <strncmp>:
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	b16a      	cbz	r2, 800b1c8 <strncmp+0x20>
 800b1ac:	3901      	subs	r1, #1
 800b1ae:	1884      	adds	r4, r0, r2
 800b1b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d103      	bne.n	800b1c4 <strncmp+0x1c>
 800b1bc:	42a0      	cmp	r0, r4
 800b1be:	d001      	beq.n	800b1c4 <strncmp+0x1c>
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	d1f5      	bne.n	800b1b0 <strncmp+0x8>
 800b1c4:	1ad0      	subs	r0, r2, r3
 800b1c6:	bd10      	pop	{r4, pc}
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	e7fc      	b.n	800b1c6 <strncmp+0x1e>

0800b1cc <_fstat_r>:
 800b1cc:	b538      	push	{r3, r4, r5, lr}
 800b1ce:	4d07      	ldr	r5, [pc, #28]	@ (800b1ec <_fstat_r+0x20>)
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	4608      	mov	r0, r1
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	602b      	str	r3, [r5, #0]
 800b1da:	f7f7 fbb7 	bl	800294c <_fstat>
 800b1de:	1c43      	adds	r3, r0, #1
 800b1e0:	d102      	bne.n	800b1e8 <_fstat_r+0x1c>
 800b1e2:	682b      	ldr	r3, [r5, #0]
 800b1e4:	b103      	cbz	r3, 800b1e8 <_fstat_r+0x1c>
 800b1e6:	6023      	str	r3, [r4, #0]
 800b1e8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ea:	bf00      	nop
 800b1ec:	200007a4 	.word	0x200007a4

0800b1f0 <_isatty_r>:
 800b1f0:	b538      	push	{r3, r4, r5, lr}
 800b1f2:	4d06      	ldr	r5, [pc, #24]	@ (800b20c <_isatty_r+0x1c>)
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	4608      	mov	r0, r1
 800b1fa:	602b      	str	r3, [r5, #0]
 800b1fc:	f7f7 fbb6 	bl	800296c <_isatty>
 800b200:	1c43      	adds	r3, r0, #1
 800b202:	d102      	bne.n	800b20a <_isatty_r+0x1a>
 800b204:	682b      	ldr	r3, [r5, #0]
 800b206:	b103      	cbz	r3, 800b20a <_isatty_r+0x1a>
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	bd38      	pop	{r3, r4, r5, pc}
 800b20c:	200007a4 	.word	0x200007a4

0800b210 <_sbrk_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4d06      	ldr	r5, [pc, #24]	@ (800b22c <_sbrk_r+0x1c>)
 800b214:	2300      	movs	r3, #0
 800b216:	4604      	mov	r4, r0
 800b218:	4608      	mov	r0, r1
 800b21a:	602b      	str	r3, [r5, #0]
 800b21c:	f7f7 fbbe 	bl	800299c <_sbrk>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d102      	bne.n	800b22a <_sbrk_r+0x1a>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	b103      	cbz	r3, 800b22a <_sbrk_r+0x1a>
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	200007a4 	.word	0x200007a4

0800b230 <memcpy>:
 800b230:	440a      	add	r2, r1
 800b232:	4291      	cmp	r1, r2
 800b234:	f100 33ff 	add.w	r3, r0, #4294967295
 800b238:	d100      	bne.n	800b23c <memcpy+0xc>
 800b23a:	4770      	bx	lr
 800b23c:	b510      	push	{r4, lr}
 800b23e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b242:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b246:	4291      	cmp	r1, r2
 800b248:	d1f9      	bne.n	800b23e <memcpy+0xe>
 800b24a:	bd10      	pop	{r4, pc}
 800b24c:	0000      	movs	r0, r0
	...

0800b250 <nan>:
 800b250:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b258 <nan+0x8>
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	00000000 	.word	0x00000000
 800b25c:	7ff80000 	.word	0x7ff80000

0800b260 <__assert_func>:
 800b260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b262:	4614      	mov	r4, r2
 800b264:	461a      	mov	r2, r3
 800b266:	4b09      	ldr	r3, [pc, #36]	@ (800b28c <__assert_func+0x2c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4605      	mov	r5, r0
 800b26c:	68d8      	ldr	r0, [r3, #12]
 800b26e:	b14c      	cbz	r4, 800b284 <__assert_func+0x24>
 800b270:	4b07      	ldr	r3, [pc, #28]	@ (800b290 <__assert_func+0x30>)
 800b272:	9100      	str	r1, [sp, #0]
 800b274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b278:	4906      	ldr	r1, [pc, #24]	@ (800b294 <__assert_func+0x34>)
 800b27a:	462b      	mov	r3, r5
 800b27c:	f000 fba8 	bl	800b9d0 <fiprintf>
 800b280:	f000 fbb8 	bl	800b9f4 <abort>
 800b284:	4b04      	ldr	r3, [pc, #16]	@ (800b298 <__assert_func+0x38>)
 800b286:	461c      	mov	r4, r3
 800b288:	e7f3      	b.n	800b272 <__assert_func+0x12>
 800b28a:	bf00      	nop
 800b28c:	20000064 	.word	0x20000064
 800b290:	0800bf77 	.word	0x0800bf77
 800b294:	0800bf84 	.word	0x0800bf84
 800b298:	0800bfb2 	.word	0x0800bfb2

0800b29c <_calloc_r>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	fba1 5402 	umull	r5, r4, r1, r2
 800b2a2:	b934      	cbnz	r4, 800b2b2 <_calloc_r+0x16>
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	f7fe f87f 	bl	80093a8 <_malloc_r>
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	b928      	cbnz	r0, 800b2ba <_calloc_r+0x1e>
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	bd70      	pop	{r4, r5, r6, pc}
 800b2b2:	220c      	movs	r2, #12
 800b2b4:	6002      	str	r2, [r0, #0]
 800b2b6:	2600      	movs	r6, #0
 800b2b8:	e7f9      	b.n	800b2ae <_calloc_r+0x12>
 800b2ba:	462a      	mov	r2, r5
 800b2bc:	4621      	mov	r1, r4
 800b2be:	f7fd f91f 	bl	8008500 <memset>
 800b2c2:	e7f4      	b.n	800b2ae <_calloc_r+0x12>

0800b2c4 <rshift>:
 800b2c4:	6903      	ldr	r3, [r0, #16]
 800b2c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2d2:	f100 0414 	add.w	r4, r0, #20
 800b2d6:	dd45      	ble.n	800b364 <rshift+0xa0>
 800b2d8:	f011 011f 	ands.w	r1, r1, #31
 800b2dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2e4:	d10c      	bne.n	800b300 <rshift+0x3c>
 800b2e6:	f100 0710 	add.w	r7, r0, #16
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	42b1      	cmp	r1, r6
 800b2ee:	d334      	bcc.n	800b35a <rshift+0x96>
 800b2f0:	1a9b      	subs	r3, r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	1eea      	subs	r2, r5, #3
 800b2f6:	4296      	cmp	r6, r2
 800b2f8:	bf38      	it	cc
 800b2fa:	2300      	movcc	r3, #0
 800b2fc:	4423      	add	r3, r4
 800b2fe:	e015      	b.n	800b32c <rshift+0x68>
 800b300:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b304:	f1c1 0820 	rsb	r8, r1, #32
 800b308:	40cf      	lsrs	r7, r1
 800b30a:	f105 0e04 	add.w	lr, r5, #4
 800b30e:	46a1      	mov	r9, r4
 800b310:	4576      	cmp	r6, lr
 800b312:	46f4      	mov	ip, lr
 800b314:	d815      	bhi.n	800b342 <rshift+0x7e>
 800b316:	1a9a      	subs	r2, r3, r2
 800b318:	0092      	lsls	r2, r2, #2
 800b31a:	3a04      	subs	r2, #4
 800b31c:	3501      	adds	r5, #1
 800b31e:	42ae      	cmp	r6, r5
 800b320:	bf38      	it	cc
 800b322:	2200      	movcc	r2, #0
 800b324:	18a3      	adds	r3, r4, r2
 800b326:	50a7      	str	r7, [r4, r2]
 800b328:	b107      	cbz	r7, 800b32c <rshift+0x68>
 800b32a:	3304      	adds	r3, #4
 800b32c:	1b1a      	subs	r2, r3, r4
 800b32e:	42a3      	cmp	r3, r4
 800b330:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b334:	bf08      	it	eq
 800b336:	2300      	moveq	r3, #0
 800b338:	6102      	str	r2, [r0, #16]
 800b33a:	bf08      	it	eq
 800b33c:	6143      	streq	r3, [r0, #20]
 800b33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b342:	f8dc c000 	ldr.w	ip, [ip]
 800b346:	fa0c fc08 	lsl.w	ip, ip, r8
 800b34a:	ea4c 0707 	orr.w	r7, ip, r7
 800b34e:	f849 7b04 	str.w	r7, [r9], #4
 800b352:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b356:	40cf      	lsrs	r7, r1
 800b358:	e7da      	b.n	800b310 <rshift+0x4c>
 800b35a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b35e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b362:	e7c3      	b.n	800b2ec <rshift+0x28>
 800b364:	4623      	mov	r3, r4
 800b366:	e7e1      	b.n	800b32c <rshift+0x68>

0800b368 <__hexdig_fun>:
 800b368:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b36c:	2b09      	cmp	r3, #9
 800b36e:	d802      	bhi.n	800b376 <__hexdig_fun+0xe>
 800b370:	3820      	subs	r0, #32
 800b372:	b2c0      	uxtb	r0, r0
 800b374:	4770      	bx	lr
 800b376:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b37a:	2b05      	cmp	r3, #5
 800b37c:	d801      	bhi.n	800b382 <__hexdig_fun+0x1a>
 800b37e:	3847      	subs	r0, #71	@ 0x47
 800b380:	e7f7      	b.n	800b372 <__hexdig_fun+0xa>
 800b382:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b386:	2b05      	cmp	r3, #5
 800b388:	d801      	bhi.n	800b38e <__hexdig_fun+0x26>
 800b38a:	3827      	subs	r0, #39	@ 0x27
 800b38c:	e7f1      	b.n	800b372 <__hexdig_fun+0xa>
 800b38e:	2000      	movs	r0, #0
 800b390:	4770      	bx	lr
	...

0800b394 <__gethex>:
 800b394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b398:	b085      	sub	sp, #20
 800b39a:	468a      	mov	sl, r1
 800b39c:	9302      	str	r3, [sp, #8]
 800b39e:	680b      	ldr	r3, [r1, #0]
 800b3a0:	9001      	str	r0, [sp, #4]
 800b3a2:	4690      	mov	r8, r2
 800b3a4:	1c9c      	adds	r4, r3, #2
 800b3a6:	46a1      	mov	r9, r4
 800b3a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b3ac:	2830      	cmp	r0, #48	@ 0x30
 800b3ae:	d0fa      	beq.n	800b3a6 <__gethex+0x12>
 800b3b0:	eba9 0303 	sub.w	r3, r9, r3
 800b3b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b3b8:	f7ff ffd6 	bl	800b368 <__hexdig_fun>
 800b3bc:	4605      	mov	r5, r0
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d168      	bne.n	800b494 <__gethex+0x100>
 800b3c2:	49a0      	ldr	r1, [pc, #640]	@ (800b644 <__gethex+0x2b0>)
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	4648      	mov	r0, r9
 800b3c8:	f7ff feee 	bl	800b1a8 <strncmp>
 800b3cc:	4607      	mov	r7, r0
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d167      	bne.n	800b4a2 <__gethex+0x10e>
 800b3d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b3d6:	4626      	mov	r6, r4
 800b3d8:	f7ff ffc6 	bl	800b368 <__hexdig_fun>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d062      	beq.n	800b4a6 <__gethex+0x112>
 800b3e0:	4623      	mov	r3, r4
 800b3e2:	7818      	ldrb	r0, [r3, #0]
 800b3e4:	2830      	cmp	r0, #48	@ 0x30
 800b3e6:	4699      	mov	r9, r3
 800b3e8:	f103 0301 	add.w	r3, r3, #1
 800b3ec:	d0f9      	beq.n	800b3e2 <__gethex+0x4e>
 800b3ee:	f7ff ffbb 	bl	800b368 <__hexdig_fun>
 800b3f2:	fab0 f580 	clz	r5, r0
 800b3f6:	096d      	lsrs	r5, r5, #5
 800b3f8:	f04f 0b01 	mov.w	fp, #1
 800b3fc:	464a      	mov	r2, r9
 800b3fe:	4616      	mov	r6, r2
 800b400:	3201      	adds	r2, #1
 800b402:	7830      	ldrb	r0, [r6, #0]
 800b404:	f7ff ffb0 	bl	800b368 <__hexdig_fun>
 800b408:	2800      	cmp	r0, #0
 800b40a:	d1f8      	bne.n	800b3fe <__gethex+0x6a>
 800b40c:	498d      	ldr	r1, [pc, #564]	@ (800b644 <__gethex+0x2b0>)
 800b40e:	2201      	movs	r2, #1
 800b410:	4630      	mov	r0, r6
 800b412:	f7ff fec9 	bl	800b1a8 <strncmp>
 800b416:	2800      	cmp	r0, #0
 800b418:	d13f      	bne.n	800b49a <__gethex+0x106>
 800b41a:	b944      	cbnz	r4, 800b42e <__gethex+0x9a>
 800b41c:	1c74      	adds	r4, r6, #1
 800b41e:	4622      	mov	r2, r4
 800b420:	4616      	mov	r6, r2
 800b422:	3201      	adds	r2, #1
 800b424:	7830      	ldrb	r0, [r6, #0]
 800b426:	f7ff ff9f 	bl	800b368 <__hexdig_fun>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d1f8      	bne.n	800b420 <__gethex+0x8c>
 800b42e:	1ba4      	subs	r4, r4, r6
 800b430:	00a7      	lsls	r7, r4, #2
 800b432:	7833      	ldrb	r3, [r6, #0]
 800b434:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b438:	2b50      	cmp	r3, #80	@ 0x50
 800b43a:	d13e      	bne.n	800b4ba <__gethex+0x126>
 800b43c:	7873      	ldrb	r3, [r6, #1]
 800b43e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b440:	d033      	beq.n	800b4aa <__gethex+0x116>
 800b442:	2b2d      	cmp	r3, #45	@ 0x2d
 800b444:	d034      	beq.n	800b4b0 <__gethex+0x11c>
 800b446:	1c71      	adds	r1, r6, #1
 800b448:	2400      	movs	r4, #0
 800b44a:	7808      	ldrb	r0, [r1, #0]
 800b44c:	f7ff ff8c 	bl	800b368 <__hexdig_fun>
 800b450:	1e43      	subs	r3, r0, #1
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b18      	cmp	r3, #24
 800b456:	d830      	bhi.n	800b4ba <__gethex+0x126>
 800b458:	f1a0 0210 	sub.w	r2, r0, #16
 800b45c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b460:	f7ff ff82 	bl	800b368 <__hexdig_fun>
 800b464:	f100 3cff 	add.w	ip, r0, #4294967295
 800b468:	fa5f fc8c 	uxtb.w	ip, ip
 800b46c:	f1bc 0f18 	cmp.w	ip, #24
 800b470:	f04f 030a 	mov.w	r3, #10
 800b474:	d91e      	bls.n	800b4b4 <__gethex+0x120>
 800b476:	b104      	cbz	r4, 800b47a <__gethex+0xe6>
 800b478:	4252      	negs	r2, r2
 800b47a:	4417      	add	r7, r2
 800b47c:	f8ca 1000 	str.w	r1, [sl]
 800b480:	b1ed      	cbz	r5, 800b4be <__gethex+0x12a>
 800b482:	f1bb 0f00 	cmp.w	fp, #0
 800b486:	bf0c      	ite	eq
 800b488:	2506      	moveq	r5, #6
 800b48a:	2500      	movne	r5, #0
 800b48c:	4628      	mov	r0, r5
 800b48e:	b005      	add	sp, #20
 800b490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b494:	2500      	movs	r5, #0
 800b496:	462c      	mov	r4, r5
 800b498:	e7b0      	b.n	800b3fc <__gethex+0x68>
 800b49a:	2c00      	cmp	r4, #0
 800b49c:	d1c7      	bne.n	800b42e <__gethex+0x9a>
 800b49e:	4627      	mov	r7, r4
 800b4a0:	e7c7      	b.n	800b432 <__gethex+0x9e>
 800b4a2:	464e      	mov	r6, r9
 800b4a4:	462f      	mov	r7, r5
 800b4a6:	2501      	movs	r5, #1
 800b4a8:	e7c3      	b.n	800b432 <__gethex+0x9e>
 800b4aa:	2400      	movs	r4, #0
 800b4ac:	1cb1      	adds	r1, r6, #2
 800b4ae:	e7cc      	b.n	800b44a <__gethex+0xb6>
 800b4b0:	2401      	movs	r4, #1
 800b4b2:	e7fb      	b.n	800b4ac <__gethex+0x118>
 800b4b4:	fb03 0002 	mla	r0, r3, r2, r0
 800b4b8:	e7ce      	b.n	800b458 <__gethex+0xc4>
 800b4ba:	4631      	mov	r1, r6
 800b4bc:	e7de      	b.n	800b47c <__gethex+0xe8>
 800b4be:	eba6 0309 	sub.w	r3, r6, r9
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	2b07      	cmp	r3, #7
 800b4c8:	dc0a      	bgt.n	800b4e0 <__gethex+0x14c>
 800b4ca:	9801      	ldr	r0, [sp, #4]
 800b4cc:	f7fd fff8 	bl	80094c0 <_Balloc>
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	b940      	cbnz	r0, 800b4e6 <__gethex+0x152>
 800b4d4:	4b5c      	ldr	r3, [pc, #368]	@ (800b648 <__gethex+0x2b4>)
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	21e4      	movs	r1, #228	@ 0xe4
 800b4da:	485c      	ldr	r0, [pc, #368]	@ (800b64c <__gethex+0x2b8>)
 800b4dc:	f7ff fec0 	bl	800b260 <__assert_func>
 800b4e0:	3101      	adds	r1, #1
 800b4e2:	105b      	asrs	r3, r3, #1
 800b4e4:	e7ef      	b.n	800b4c6 <__gethex+0x132>
 800b4e6:	f100 0a14 	add.w	sl, r0, #20
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	4655      	mov	r5, sl
 800b4ee:	469b      	mov	fp, r3
 800b4f0:	45b1      	cmp	r9, r6
 800b4f2:	d337      	bcc.n	800b564 <__gethex+0x1d0>
 800b4f4:	f845 bb04 	str.w	fp, [r5], #4
 800b4f8:	eba5 050a 	sub.w	r5, r5, sl
 800b4fc:	10ad      	asrs	r5, r5, #2
 800b4fe:	6125      	str	r5, [r4, #16]
 800b500:	4658      	mov	r0, fp
 800b502:	f7fe f8cf 	bl	80096a4 <__hi0bits>
 800b506:	016d      	lsls	r5, r5, #5
 800b508:	f8d8 6000 	ldr.w	r6, [r8]
 800b50c:	1a2d      	subs	r5, r5, r0
 800b50e:	42b5      	cmp	r5, r6
 800b510:	dd54      	ble.n	800b5bc <__gethex+0x228>
 800b512:	1bad      	subs	r5, r5, r6
 800b514:	4629      	mov	r1, r5
 800b516:	4620      	mov	r0, r4
 800b518:	f7fe fc5b 	bl	8009dd2 <__any_on>
 800b51c:	4681      	mov	r9, r0
 800b51e:	b178      	cbz	r0, 800b540 <__gethex+0x1ac>
 800b520:	1e6b      	subs	r3, r5, #1
 800b522:	1159      	asrs	r1, r3, #5
 800b524:	f003 021f 	and.w	r2, r3, #31
 800b528:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b52c:	f04f 0901 	mov.w	r9, #1
 800b530:	fa09 f202 	lsl.w	r2, r9, r2
 800b534:	420a      	tst	r2, r1
 800b536:	d003      	beq.n	800b540 <__gethex+0x1ac>
 800b538:	454b      	cmp	r3, r9
 800b53a:	dc36      	bgt.n	800b5aa <__gethex+0x216>
 800b53c:	f04f 0902 	mov.w	r9, #2
 800b540:	4629      	mov	r1, r5
 800b542:	4620      	mov	r0, r4
 800b544:	f7ff febe 	bl	800b2c4 <rshift>
 800b548:	442f      	add	r7, r5
 800b54a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b54e:	42bb      	cmp	r3, r7
 800b550:	da42      	bge.n	800b5d8 <__gethex+0x244>
 800b552:	9801      	ldr	r0, [sp, #4]
 800b554:	4621      	mov	r1, r4
 800b556:	f7fd fff3 	bl	8009540 <_Bfree>
 800b55a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b55c:	2300      	movs	r3, #0
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	25a3      	movs	r5, #163	@ 0xa3
 800b562:	e793      	b.n	800b48c <__gethex+0xf8>
 800b564:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b568:	2a2e      	cmp	r2, #46	@ 0x2e
 800b56a:	d012      	beq.n	800b592 <__gethex+0x1fe>
 800b56c:	2b20      	cmp	r3, #32
 800b56e:	d104      	bne.n	800b57a <__gethex+0x1e6>
 800b570:	f845 bb04 	str.w	fp, [r5], #4
 800b574:	f04f 0b00 	mov.w	fp, #0
 800b578:	465b      	mov	r3, fp
 800b57a:	7830      	ldrb	r0, [r6, #0]
 800b57c:	9303      	str	r3, [sp, #12]
 800b57e:	f7ff fef3 	bl	800b368 <__hexdig_fun>
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	f000 000f 	and.w	r0, r0, #15
 800b588:	4098      	lsls	r0, r3
 800b58a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b58e:	3304      	adds	r3, #4
 800b590:	e7ae      	b.n	800b4f0 <__gethex+0x15c>
 800b592:	45b1      	cmp	r9, r6
 800b594:	d8ea      	bhi.n	800b56c <__gethex+0x1d8>
 800b596:	492b      	ldr	r1, [pc, #172]	@ (800b644 <__gethex+0x2b0>)
 800b598:	9303      	str	r3, [sp, #12]
 800b59a:	2201      	movs	r2, #1
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7ff fe03 	bl	800b1a8 <strncmp>
 800b5a2:	9b03      	ldr	r3, [sp, #12]
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d1e1      	bne.n	800b56c <__gethex+0x1d8>
 800b5a8:	e7a2      	b.n	800b4f0 <__gethex+0x15c>
 800b5aa:	1ea9      	subs	r1, r5, #2
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f7fe fc10 	bl	8009dd2 <__any_on>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d0c2      	beq.n	800b53c <__gethex+0x1a8>
 800b5b6:	f04f 0903 	mov.w	r9, #3
 800b5ba:	e7c1      	b.n	800b540 <__gethex+0x1ac>
 800b5bc:	da09      	bge.n	800b5d2 <__gethex+0x23e>
 800b5be:	1b75      	subs	r5, r6, r5
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	9801      	ldr	r0, [sp, #4]
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	f7fe f9cb 	bl	8009960 <__lshift>
 800b5ca:	1b7f      	subs	r7, r7, r5
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	f100 0a14 	add.w	sl, r0, #20
 800b5d2:	f04f 0900 	mov.w	r9, #0
 800b5d6:	e7b8      	b.n	800b54a <__gethex+0x1b6>
 800b5d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5dc:	42bd      	cmp	r5, r7
 800b5de:	dd6f      	ble.n	800b6c0 <__gethex+0x32c>
 800b5e0:	1bed      	subs	r5, r5, r7
 800b5e2:	42ae      	cmp	r6, r5
 800b5e4:	dc34      	bgt.n	800b650 <__gethex+0x2bc>
 800b5e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d022      	beq.n	800b634 <__gethex+0x2a0>
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d024      	beq.n	800b63c <__gethex+0x2a8>
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d115      	bne.n	800b622 <__gethex+0x28e>
 800b5f6:	42ae      	cmp	r6, r5
 800b5f8:	d113      	bne.n	800b622 <__gethex+0x28e>
 800b5fa:	2e01      	cmp	r6, #1
 800b5fc:	d10b      	bne.n	800b616 <__gethex+0x282>
 800b5fe:	9a02      	ldr	r2, [sp, #8]
 800b600:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b604:	6013      	str	r3, [r2, #0]
 800b606:	2301      	movs	r3, #1
 800b608:	6123      	str	r3, [r4, #16]
 800b60a:	f8ca 3000 	str.w	r3, [sl]
 800b60e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b610:	2562      	movs	r5, #98	@ 0x62
 800b612:	601c      	str	r4, [r3, #0]
 800b614:	e73a      	b.n	800b48c <__gethex+0xf8>
 800b616:	1e71      	subs	r1, r6, #1
 800b618:	4620      	mov	r0, r4
 800b61a:	f7fe fbda 	bl	8009dd2 <__any_on>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d1ed      	bne.n	800b5fe <__gethex+0x26a>
 800b622:	9801      	ldr	r0, [sp, #4]
 800b624:	4621      	mov	r1, r4
 800b626:	f7fd ff8b 	bl	8009540 <_Bfree>
 800b62a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b62c:	2300      	movs	r3, #0
 800b62e:	6013      	str	r3, [r2, #0]
 800b630:	2550      	movs	r5, #80	@ 0x50
 800b632:	e72b      	b.n	800b48c <__gethex+0xf8>
 800b634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1f3      	bne.n	800b622 <__gethex+0x28e>
 800b63a:	e7e0      	b.n	800b5fe <__gethex+0x26a>
 800b63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1dd      	bne.n	800b5fe <__gethex+0x26a>
 800b642:	e7ee      	b.n	800b622 <__gethex+0x28e>
 800b644:	0800bf5c 	.word	0x0800bf5c
 800b648:	0800bef2 	.word	0x0800bef2
 800b64c:	0800bfb3 	.word	0x0800bfb3
 800b650:	1e6f      	subs	r7, r5, #1
 800b652:	f1b9 0f00 	cmp.w	r9, #0
 800b656:	d130      	bne.n	800b6ba <__gethex+0x326>
 800b658:	b127      	cbz	r7, 800b664 <__gethex+0x2d0>
 800b65a:	4639      	mov	r1, r7
 800b65c:	4620      	mov	r0, r4
 800b65e:	f7fe fbb8 	bl	8009dd2 <__any_on>
 800b662:	4681      	mov	r9, r0
 800b664:	117a      	asrs	r2, r7, #5
 800b666:	2301      	movs	r3, #1
 800b668:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b66c:	f007 071f 	and.w	r7, r7, #31
 800b670:	40bb      	lsls	r3, r7
 800b672:	4213      	tst	r3, r2
 800b674:	4629      	mov	r1, r5
 800b676:	4620      	mov	r0, r4
 800b678:	bf18      	it	ne
 800b67a:	f049 0902 	orrne.w	r9, r9, #2
 800b67e:	f7ff fe21 	bl	800b2c4 <rshift>
 800b682:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b686:	1b76      	subs	r6, r6, r5
 800b688:	2502      	movs	r5, #2
 800b68a:	f1b9 0f00 	cmp.w	r9, #0
 800b68e:	d047      	beq.n	800b720 <__gethex+0x38c>
 800b690:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b694:	2b02      	cmp	r3, #2
 800b696:	d015      	beq.n	800b6c4 <__gethex+0x330>
 800b698:	2b03      	cmp	r3, #3
 800b69a:	d017      	beq.n	800b6cc <__gethex+0x338>
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d109      	bne.n	800b6b4 <__gethex+0x320>
 800b6a0:	f019 0f02 	tst.w	r9, #2
 800b6a4:	d006      	beq.n	800b6b4 <__gethex+0x320>
 800b6a6:	f8da 3000 	ldr.w	r3, [sl]
 800b6aa:	ea49 0903 	orr.w	r9, r9, r3
 800b6ae:	f019 0f01 	tst.w	r9, #1
 800b6b2:	d10e      	bne.n	800b6d2 <__gethex+0x33e>
 800b6b4:	f045 0510 	orr.w	r5, r5, #16
 800b6b8:	e032      	b.n	800b720 <__gethex+0x38c>
 800b6ba:	f04f 0901 	mov.w	r9, #1
 800b6be:	e7d1      	b.n	800b664 <__gethex+0x2d0>
 800b6c0:	2501      	movs	r5, #1
 800b6c2:	e7e2      	b.n	800b68a <__gethex+0x2f6>
 800b6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6c6:	f1c3 0301 	rsb	r3, r3, #1
 800b6ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d0f0      	beq.n	800b6b4 <__gethex+0x320>
 800b6d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b6d6:	f104 0314 	add.w	r3, r4, #20
 800b6da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b6de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b6e2:	f04f 0c00 	mov.w	ip, #0
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b6f0:	d01b      	beq.n	800b72a <__gethex+0x396>
 800b6f2:	3201      	adds	r2, #1
 800b6f4:	6002      	str	r2, [r0, #0]
 800b6f6:	2d02      	cmp	r5, #2
 800b6f8:	f104 0314 	add.w	r3, r4, #20
 800b6fc:	d13c      	bne.n	800b778 <__gethex+0x3e4>
 800b6fe:	f8d8 2000 	ldr.w	r2, [r8]
 800b702:	3a01      	subs	r2, #1
 800b704:	42b2      	cmp	r2, r6
 800b706:	d109      	bne.n	800b71c <__gethex+0x388>
 800b708:	1171      	asrs	r1, r6, #5
 800b70a:	2201      	movs	r2, #1
 800b70c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b710:	f006 061f 	and.w	r6, r6, #31
 800b714:	fa02 f606 	lsl.w	r6, r2, r6
 800b718:	421e      	tst	r6, r3
 800b71a:	d13a      	bne.n	800b792 <__gethex+0x3fe>
 800b71c:	f045 0520 	orr.w	r5, r5, #32
 800b720:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b722:	601c      	str	r4, [r3, #0]
 800b724:	9b02      	ldr	r3, [sp, #8]
 800b726:	601f      	str	r7, [r3, #0]
 800b728:	e6b0      	b.n	800b48c <__gethex+0xf8>
 800b72a:	4299      	cmp	r1, r3
 800b72c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b730:	d8d9      	bhi.n	800b6e6 <__gethex+0x352>
 800b732:	68a3      	ldr	r3, [r4, #8]
 800b734:	459b      	cmp	fp, r3
 800b736:	db17      	blt.n	800b768 <__gethex+0x3d4>
 800b738:	6861      	ldr	r1, [r4, #4]
 800b73a:	9801      	ldr	r0, [sp, #4]
 800b73c:	3101      	adds	r1, #1
 800b73e:	f7fd febf 	bl	80094c0 <_Balloc>
 800b742:	4681      	mov	r9, r0
 800b744:	b918      	cbnz	r0, 800b74e <__gethex+0x3ba>
 800b746:	4b1a      	ldr	r3, [pc, #104]	@ (800b7b0 <__gethex+0x41c>)
 800b748:	4602      	mov	r2, r0
 800b74a:	2184      	movs	r1, #132	@ 0x84
 800b74c:	e6c5      	b.n	800b4da <__gethex+0x146>
 800b74e:	6922      	ldr	r2, [r4, #16]
 800b750:	3202      	adds	r2, #2
 800b752:	f104 010c 	add.w	r1, r4, #12
 800b756:	0092      	lsls	r2, r2, #2
 800b758:	300c      	adds	r0, #12
 800b75a:	f7ff fd69 	bl	800b230 <memcpy>
 800b75e:	4621      	mov	r1, r4
 800b760:	9801      	ldr	r0, [sp, #4]
 800b762:	f7fd feed 	bl	8009540 <_Bfree>
 800b766:	464c      	mov	r4, r9
 800b768:	6923      	ldr	r3, [r4, #16]
 800b76a:	1c5a      	adds	r2, r3, #1
 800b76c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b770:	6122      	str	r2, [r4, #16]
 800b772:	2201      	movs	r2, #1
 800b774:	615a      	str	r2, [r3, #20]
 800b776:	e7be      	b.n	800b6f6 <__gethex+0x362>
 800b778:	6922      	ldr	r2, [r4, #16]
 800b77a:	455a      	cmp	r2, fp
 800b77c:	dd0b      	ble.n	800b796 <__gethex+0x402>
 800b77e:	2101      	movs	r1, #1
 800b780:	4620      	mov	r0, r4
 800b782:	f7ff fd9f 	bl	800b2c4 <rshift>
 800b786:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b78a:	3701      	adds	r7, #1
 800b78c:	42bb      	cmp	r3, r7
 800b78e:	f6ff aee0 	blt.w	800b552 <__gethex+0x1be>
 800b792:	2501      	movs	r5, #1
 800b794:	e7c2      	b.n	800b71c <__gethex+0x388>
 800b796:	f016 061f 	ands.w	r6, r6, #31
 800b79a:	d0fa      	beq.n	800b792 <__gethex+0x3fe>
 800b79c:	4453      	add	r3, sl
 800b79e:	f1c6 0620 	rsb	r6, r6, #32
 800b7a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b7a6:	f7fd ff7d 	bl	80096a4 <__hi0bits>
 800b7aa:	42b0      	cmp	r0, r6
 800b7ac:	dbe7      	blt.n	800b77e <__gethex+0x3ea>
 800b7ae:	e7f0      	b.n	800b792 <__gethex+0x3fe>
 800b7b0:	0800bef2 	.word	0x0800bef2

0800b7b4 <L_shift>:
 800b7b4:	f1c2 0208 	rsb	r2, r2, #8
 800b7b8:	0092      	lsls	r2, r2, #2
 800b7ba:	b570      	push	{r4, r5, r6, lr}
 800b7bc:	f1c2 0620 	rsb	r6, r2, #32
 800b7c0:	6843      	ldr	r3, [r0, #4]
 800b7c2:	6804      	ldr	r4, [r0, #0]
 800b7c4:	fa03 f506 	lsl.w	r5, r3, r6
 800b7c8:	432c      	orrs	r4, r5
 800b7ca:	40d3      	lsrs	r3, r2
 800b7cc:	6004      	str	r4, [r0, #0]
 800b7ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800b7d2:	4288      	cmp	r0, r1
 800b7d4:	d3f4      	bcc.n	800b7c0 <L_shift+0xc>
 800b7d6:	bd70      	pop	{r4, r5, r6, pc}

0800b7d8 <__match>:
 800b7d8:	b530      	push	{r4, r5, lr}
 800b7da:	6803      	ldr	r3, [r0, #0]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7e2:	b914      	cbnz	r4, 800b7ea <__match+0x12>
 800b7e4:	6003      	str	r3, [r0, #0]
 800b7e6:	2001      	movs	r0, #1
 800b7e8:	bd30      	pop	{r4, r5, pc}
 800b7ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b7f2:	2d19      	cmp	r5, #25
 800b7f4:	bf98      	it	ls
 800b7f6:	3220      	addls	r2, #32
 800b7f8:	42a2      	cmp	r2, r4
 800b7fa:	d0f0      	beq.n	800b7de <__match+0x6>
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	e7f3      	b.n	800b7e8 <__match+0x10>

0800b800 <__hexnan>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	680b      	ldr	r3, [r1, #0]
 800b806:	6801      	ldr	r1, [r0, #0]
 800b808:	115e      	asrs	r6, r3, #5
 800b80a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b80e:	f013 031f 	ands.w	r3, r3, #31
 800b812:	b087      	sub	sp, #28
 800b814:	bf18      	it	ne
 800b816:	3604      	addne	r6, #4
 800b818:	2500      	movs	r5, #0
 800b81a:	1f37      	subs	r7, r6, #4
 800b81c:	4682      	mov	sl, r0
 800b81e:	4690      	mov	r8, r2
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	f846 5c04 	str.w	r5, [r6, #-4]
 800b826:	46b9      	mov	r9, r7
 800b828:	463c      	mov	r4, r7
 800b82a:	9502      	str	r5, [sp, #8]
 800b82c:	46ab      	mov	fp, r5
 800b82e:	784a      	ldrb	r2, [r1, #1]
 800b830:	1c4b      	adds	r3, r1, #1
 800b832:	9303      	str	r3, [sp, #12]
 800b834:	b342      	cbz	r2, 800b888 <__hexnan+0x88>
 800b836:	4610      	mov	r0, r2
 800b838:	9105      	str	r1, [sp, #20]
 800b83a:	9204      	str	r2, [sp, #16]
 800b83c:	f7ff fd94 	bl	800b368 <__hexdig_fun>
 800b840:	2800      	cmp	r0, #0
 800b842:	d151      	bne.n	800b8e8 <__hexnan+0xe8>
 800b844:	9a04      	ldr	r2, [sp, #16]
 800b846:	9905      	ldr	r1, [sp, #20]
 800b848:	2a20      	cmp	r2, #32
 800b84a:	d818      	bhi.n	800b87e <__hexnan+0x7e>
 800b84c:	9b02      	ldr	r3, [sp, #8]
 800b84e:	459b      	cmp	fp, r3
 800b850:	dd13      	ble.n	800b87a <__hexnan+0x7a>
 800b852:	454c      	cmp	r4, r9
 800b854:	d206      	bcs.n	800b864 <__hexnan+0x64>
 800b856:	2d07      	cmp	r5, #7
 800b858:	dc04      	bgt.n	800b864 <__hexnan+0x64>
 800b85a:	462a      	mov	r2, r5
 800b85c:	4649      	mov	r1, r9
 800b85e:	4620      	mov	r0, r4
 800b860:	f7ff ffa8 	bl	800b7b4 <L_shift>
 800b864:	4544      	cmp	r4, r8
 800b866:	d952      	bls.n	800b90e <__hexnan+0x10e>
 800b868:	2300      	movs	r3, #0
 800b86a:	f1a4 0904 	sub.w	r9, r4, #4
 800b86e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b872:	f8cd b008 	str.w	fp, [sp, #8]
 800b876:	464c      	mov	r4, r9
 800b878:	461d      	mov	r5, r3
 800b87a:	9903      	ldr	r1, [sp, #12]
 800b87c:	e7d7      	b.n	800b82e <__hexnan+0x2e>
 800b87e:	2a29      	cmp	r2, #41	@ 0x29
 800b880:	d157      	bne.n	800b932 <__hexnan+0x132>
 800b882:	3102      	adds	r1, #2
 800b884:	f8ca 1000 	str.w	r1, [sl]
 800b888:	f1bb 0f00 	cmp.w	fp, #0
 800b88c:	d051      	beq.n	800b932 <__hexnan+0x132>
 800b88e:	454c      	cmp	r4, r9
 800b890:	d206      	bcs.n	800b8a0 <__hexnan+0xa0>
 800b892:	2d07      	cmp	r5, #7
 800b894:	dc04      	bgt.n	800b8a0 <__hexnan+0xa0>
 800b896:	462a      	mov	r2, r5
 800b898:	4649      	mov	r1, r9
 800b89a:	4620      	mov	r0, r4
 800b89c:	f7ff ff8a 	bl	800b7b4 <L_shift>
 800b8a0:	4544      	cmp	r4, r8
 800b8a2:	d936      	bls.n	800b912 <__hexnan+0x112>
 800b8a4:	f1a8 0204 	sub.w	r2, r8, #4
 800b8a8:	4623      	mov	r3, r4
 800b8aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b8ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800b8b2:	429f      	cmp	r7, r3
 800b8b4:	d2f9      	bcs.n	800b8aa <__hexnan+0xaa>
 800b8b6:	1b3b      	subs	r3, r7, r4
 800b8b8:	f023 0303 	bic.w	r3, r3, #3
 800b8bc:	3304      	adds	r3, #4
 800b8be:	3401      	adds	r4, #1
 800b8c0:	3e03      	subs	r6, #3
 800b8c2:	42b4      	cmp	r4, r6
 800b8c4:	bf88      	it	hi
 800b8c6:	2304      	movhi	r3, #4
 800b8c8:	4443      	add	r3, r8
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f843 2b04 	str.w	r2, [r3], #4
 800b8d0:	429f      	cmp	r7, r3
 800b8d2:	d2fb      	bcs.n	800b8cc <__hexnan+0xcc>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	b91b      	cbnz	r3, 800b8e0 <__hexnan+0xe0>
 800b8d8:	4547      	cmp	r7, r8
 800b8da:	d128      	bne.n	800b92e <__hexnan+0x12e>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	603b      	str	r3, [r7, #0]
 800b8e0:	2005      	movs	r0, #5
 800b8e2:	b007      	add	sp, #28
 800b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e8:	3501      	adds	r5, #1
 800b8ea:	2d08      	cmp	r5, #8
 800b8ec:	f10b 0b01 	add.w	fp, fp, #1
 800b8f0:	dd06      	ble.n	800b900 <__hexnan+0x100>
 800b8f2:	4544      	cmp	r4, r8
 800b8f4:	d9c1      	bls.n	800b87a <__hexnan+0x7a>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8fc:	2501      	movs	r5, #1
 800b8fe:	3c04      	subs	r4, #4
 800b900:	6822      	ldr	r2, [r4, #0]
 800b902:	f000 000f 	and.w	r0, r0, #15
 800b906:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b90a:	6020      	str	r0, [r4, #0]
 800b90c:	e7b5      	b.n	800b87a <__hexnan+0x7a>
 800b90e:	2508      	movs	r5, #8
 800b910:	e7b3      	b.n	800b87a <__hexnan+0x7a>
 800b912:	9b01      	ldr	r3, [sp, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d0dd      	beq.n	800b8d4 <__hexnan+0xd4>
 800b918:	f1c3 0320 	rsb	r3, r3, #32
 800b91c:	f04f 32ff 	mov.w	r2, #4294967295
 800b920:	40da      	lsrs	r2, r3
 800b922:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b926:	4013      	ands	r3, r2
 800b928:	f846 3c04 	str.w	r3, [r6, #-4]
 800b92c:	e7d2      	b.n	800b8d4 <__hexnan+0xd4>
 800b92e:	3f04      	subs	r7, #4
 800b930:	e7d0      	b.n	800b8d4 <__hexnan+0xd4>
 800b932:	2004      	movs	r0, #4
 800b934:	e7d5      	b.n	800b8e2 <__hexnan+0xe2>

0800b936 <__ascii_mbtowc>:
 800b936:	b082      	sub	sp, #8
 800b938:	b901      	cbnz	r1, 800b93c <__ascii_mbtowc+0x6>
 800b93a:	a901      	add	r1, sp, #4
 800b93c:	b142      	cbz	r2, 800b950 <__ascii_mbtowc+0x1a>
 800b93e:	b14b      	cbz	r3, 800b954 <__ascii_mbtowc+0x1e>
 800b940:	7813      	ldrb	r3, [r2, #0]
 800b942:	600b      	str	r3, [r1, #0]
 800b944:	7812      	ldrb	r2, [r2, #0]
 800b946:	1e10      	subs	r0, r2, #0
 800b948:	bf18      	it	ne
 800b94a:	2001      	movne	r0, #1
 800b94c:	b002      	add	sp, #8
 800b94e:	4770      	bx	lr
 800b950:	4610      	mov	r0, r2
 800b952:	e7fb      	b.n	800b94c <__ascii_mbtowc+0x16>
 800b954:	f06f 0001 	mvn.w	r0, #1
 800b958:	e7f8      	b.n	800b94c <__ascii_mbtowc+0x16>

0800b95a <_realloc_r>:
 800b95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b95e:	4607      	mov	r7, r0
 800b960:	4614      	mov	r4, r2
 800b962:	460d      	mov	r5, r1
 800b964:	b921      	cbnz	r1, 800b970 <_realloc_r+0x16>
 800b966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b96a:	4611      	mov	r1, r2
 800b96c:	f7fd bd1c 	b.w	80093a8 <_malloc_r>
 800b970:	b92a      	cbnz	r2, 800b97e <_realloc_r+0x24>
 800b972:	f7fd fca5 	bl	80092c0 <_free_r>
 800b976:	4625      	mov	r5, r4
 800b978:	4628      	mov	r0, r5
 800b97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b97e:	f000 f840 	bl	800ba02 <_malloc_usable_size_r>
 800b982:	4284      	cmp	r4, r0
 800b984:	4606      	mov	r6, r0
 800b986:	d802      	bhi.n	800b98e <_realloc_r+0x34>
 800b988:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b98c:	d8f4      	bhi.n	800b978 <_realloc_r+0x1e>
 800b98e:	4621      	mov	r1, r4
 800b990:	4638      	mov	r0, r7
 800b992:	f7fd fd09 	bl	80093a8 <_malloc_r>
 800b996:	4680      	mov	r8, r0
 800b998:	b908      	cbnz	r0, 800b99e <_realloc_r+0x44>
 800b99a:	4645      	mov	r5, r8
 800b99c:	e7ec      	b.n	800b978 <_realloc_r+0x1e>
 800b99e:	42b4      	cmp	r4, r6
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	bf28      	it	cs
 800b9a6:	4632      	movcs	r2, r6
 800b9a8:	f7ff fc42 	bl	800b230 <memcpy>
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	4638      	mov	r0, r7
 800b9b0:	f7fd fc86 	bl	80092c0 <_free_r>
 800b9b4:	e7f1      	b.n	800b99a <_realloc_r+0x40>

0800b9b6 <__ascii_wctomb>:
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	b141      	cbz	r1, 800b9ce <__ascii_wctomb+0x18>
 800b9bc:	2aff      	cmp	r2, #255	@ 0xff
 800b9be:	d904      	bls.n	800b9ca <__ascii_wctomb+0x14>
 800b9c0:	228a      	movs	r2, #138	@ 0x8a
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c8:	4770      	bx	lr
 800b9ca:	700a      	strb	r2, [r1, #0]
 800b9cc:	2001      	movs	r0, #1
 800b9ce:	4770      	bx	lr

0800b9d0 <fiprintf>:
 800b9d0:	b40e      	push	{r1, r2, r3}
 800b9d2:	b503      	push	{r0, r1, lr}
 800b9d4:	4601      	mov	r1, r0
 800b9d6:	ab03      	add	r3, sp, #12
 800b9d8:	4805      	ldr	r0, [pc, #20]	@ (800b9f0 <fiprintf+0x20>)
 800b9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9de:	6800      	ldr	r0, [r0, #0]
 800b9e0:	9301      	str	r3, [sp, #4]
 800b9e2:	f7ff f9a1 	bl	800ad28 <_vfiprintf_r>
 800b9e6:	b002      	add	sp, #8
 800b9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9ec:	b003      	add	sp, #12
 800b9ee:	4770      	bx	lr
 800b9f0:	20000064 	.word	0x20000064

0800b9f4 <abort>:
 800b9f4:	b508      	push	{r3, lr}
 800b9f6:	2006      	movs	r0, #6
 800b9f8:	f000 f834 	bl	800ba64 <raise>
 800b9fc:	2001      	movs	r0, #1
 800b9fe:	f7f6 ff55 	bl	80028ac <_exit>

0800ba02 <_malloc_usable_size_r>:
 800ba02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba06:	1f18      	subs	r0, r3, #4
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	bfbc      	itt	lt
 800ba0c:	580b      	ldrlt	r3, [r1, r0]
 800ba0e:	18c0      	addlt	r0, r0, r3
 800ba10:	4770      	bx	lr

0800ba12 <_raise_r>:
 800ba12:	291f      	cmp	r1, #31
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4605      	mov	r5, r0
 800ba18:	460c      	mov	r4, r1
 800ba1a:	d904      	bls.n	800ba26 <_raise_r+0x14>
 800ba1c:	2316      	movs	r3, #22
 800ba1e:	6003      	str	r3, [r0, #0]
 800ba20:	f04f 30ff 	mov.w	r0, #4294967295
 800ba24:	bd38      	pop	{r3, r4, r5, pc}
 800ba26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba28:	b112      	cbz	r2, 800ba30 <_raise_r+0x1e>
 800ba2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba2e:	b94b      	cbnz	r3, 800ba44 <_raise_r+0x32>
 800ba30:	4628      	mov	r0, r5
 800ba32:	f000 f831 	bl	800ba98 <_getpid_r>
 800ba36:	4622      	mov	r2, r4
 800ba38:	4601      	mov	r1, r0
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba40:	f000 b818 	b.w	800ba74 <_kill_r>
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d00a      	beq.n	800ba5e <_raise_r+0x4c>
 800ba48:	1c59      	adds	r1, r3, #1
 800ba4a:	d103      	bne.n	800ba54 <_raise_r+0x42>
 800ba4c:	2316      	movs	r3, #22
 800ba4e:	6003      	str	r3, [r0, #0]
 800ba50:	2001      	movs	r0, #1
 800ba52:	e7e7      	b.n	800ba24 <_raise_r+0x12>
 800ba54:	2100      	movs	r1, #0
 800ba56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	4798      	blx	r3
 800ba5e:	2000      	movs	r0, #0
 800ba60:	e7e0      	b.n	800ba24 <_raise_r+0x12>
	...

0800ba64 <raise>:
 800ba64:	4b02      	ldr	r3, [pc, #8]	@ (800ba70 <raise+0xc>)
 800ba66:	4601      	mov	r1, r0
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	f7ff bfd2 	b.w	800ba12 <_raise_r>
 800ba6e:	bf00      	nop
 800ba70:	20000064 	.word	0x20000064

0800ba74 <_kill_r>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	4d07      	ldr	r5, [pc, #28]	@ (800ba94 <_kill_r+0x20>)
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	4608      	mov	r0, r1
 800ba7e:	4611      	mov	r1, r2
 800ba80:	602b      	str	r3, [r5, #0]
 800ba82:	f7f6 ff03 	bl	800288c <_kill>
 800ba86:	1c43      	adds	r3, r0, #1
 800ba88:	d102      	bne.n	800ba90 <_kill_r+0x1c>
 800ba8a:	682b      	ldr	r3, [r5, #0]
 800ba8c:	b103      	cbz	r3, 800ba90 <_kill_r+0x1c>
 800ba8e:	6023      	str	r3, [r4, #0]
 800ba90:	bd38      	pop	{r3, r4, r5, pc}
 800ba92:	bf00      	nop
 800ba94:	200007a4 	.word	0x200007a4

0800ba98 <_getpid_r>:
 800ba98:	f7f6 bef0 	b.w	800287c <_getpid>

0800ba9c <_init>:
 800ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9e:	bf00      	nop
 800baa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baa2:	bc08      	pop	{r3}
 800baa4:	469e      	mov	lr, r3
 800baa6:	4770      	bx	lr

0800baa8 <_fini>:
 800baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baaa:	bf00      	nop
 800baac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baae:	bc08      	pop	{r3}
 800bab0:	469e      	mov	lr, r3
 800bab2:	4770      	bx	lr
