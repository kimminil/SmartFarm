/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dac.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "MCP2515.h"
#include "CANSPI.h"

#define printf_en 1
#define USART_Ch_1_EN	3
#define Console_Ch2   2
#define dht11_en 3
#define Ch1	1
#define cds_en	2
#define co2_en	3
#define w_height_en	4
#define servo_en 5
#define water_pump_en 	6
#define fan_en 6
#define light_en 6
#define pelt_en 6
#include "my_library.h"

#define Out_Bit(port, pin, out_data_bits) HAL_GPIO_WritePin(port, pin, out_data_bits)
#define MAX_VALUES 4
#define MAX_STR_LEN 20



float temp=0.0;
float humi=0.0;
int16_t temp_x10=0;
int16_t humi_x10=0;


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
char Test_Msg[16];
char pass_sig[] = "Pass\r\n";
char msg_to_Rpi[64];
char Cmd_Msg[80];
extern int Cmd_values[4];
char message[16];
uCAN_MSG rxMessage;
uint8_t Sensor_flag = 0;
uint8_t act_flag =0;

struct flags{
	uint8_t water_sensor_flag;
	uint8_t timer1;
	uint8_t timer2;
}FLAGS = {0,0,0};
struct flags *flag = &FLAGS;

struct Sensor_Value{
	  float TEMP;		// 온도
	  float RH;			// 습도
	  float lux ;				// 밝기
	  float co2 ;				// c02 ppm
	  float w_1;		// 둘 중 하나
}sen_val = {0.0, 0.0, 0.0, 0.0, 0.0};
struct Sensor_Value *sen_v = &sen_val;

uint8_t water_sensor_flag= 0;
uint16_t cnt = 0;
extern ADC_HandleTypeDef hadc1;
int timer1 = 0 , timer2 = 0;
uint16_t adc_value = 0;
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void can_mcp2515_init(void)
{
    if(!MCP2515_Initialize()) {
        printf("MCP2515 SPI initialize error!\r\n");
        Error_Handler();
    }
    if(!MCP2515_SetConfigMode()) {

        printf("Config error!\r\n");
        Error_Handler();
    }
    // 💡 비트레이트 설정 필요
    // 예: MCP2515_SetBitrate(500000);  // 드라이버에 따라 함수명 다를 수 있음

    if(!MCP2515_SetNormalMode()) {
        printf("Normal set fail!\r\n");
        Error_Handler();
    }
    printf("MCP2515 success\r\n");
}

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM6_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM5_Init();
  MX_DAC_Init();
  MX_TIM11_Init();
  MX_SPI1_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
  HAL_TIM_Base_Start(&htim1);
  HAL_ADC_Start(&hadc1);
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);



  HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim5);

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
  fan_off();
  Water_P1_Stop();
  Water_P2_Stop();
  can_mcp2515_init();
  CANSPI_Initialize();


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {



	  //센서 받을 준비 되었냐
	  if( Sensor_flag == 0)
	  {

		  printf("Waiting Rpi Test Mode Msg\r\n");
		  // 데이터 받았냐
		  if(CANSPI_Receive(&rxMessage)) {

		 				temp_x10 = (rxMessage.frame.data0 << 8) | rxMessage.frame.data1;
		 				humi_x10 = (rxMessage.frame.data2 << 8) | rxMessage.frame.data3;
		 				temp = temp_x10 / 10.0;
		 				humi = humi_x10 / 10.0;

		 				printf("ID=0x%03X, 온도=%.1f, 습도=%.1f \r\n", rxMessage.frame.id, t, h);
		 			}
		  if(HAL_UART_Receive(&huart1, (uint8_t *)Test_Msg, 16, 1000)== HAL_OK)
		  {

			  printf("pass1\r\n");
			  Test_Msg[15] = '\0'; // 강제로 문자열 종료
			  printf("Received data = %s\r\n", Test_Msg);

			  if(CANSPI_Receive(&rxMessage)) {

				temp_x10 = (rxMessage.frame.data0 << 8) | rxMessage.frame.data1;
				humi_x10 = (rxMessage.frame.data2 << 8) | rxMessage.frame.data3;
				temp = temp_x10 / 10.0;
				humi = humi_x10 / 10.0;

				//printf("ID=0x%03X, 온도=%.1f, 습도=%.1f \r\n", rxMessage.frame.id, t, h);
			}

			  //float TEMP1 = DHT11_Run_TEMP();		// 온도
			  //float RH1 = DHT11_Run_RH();			// 습도
			  float lux1 = read_light();
			  printf("TEMP : %.1f RH : %.1f lux : %.1f\r\n", temp, humi, lux1);
			  //받은 데이터가 이거냐?
			  if (strcmp(Test_Msg, "\nSTM32 Test Mod") == 0)
			  {
				  printf("pass2\r\n");
				  if(DHT11_Sensor_Test()&&check_light())
				  {
					  Sensor_flag = 1;
					  printf("Sensor Check Complete\r\n");
					  HAL_UART_Transmit(&huart1, (uint8_t*)pass_sig, strlen(pass_sig), 10);

				  }
			  }
		  }
	  }
	  else
	  {
		  //물 순환 시작
		  //인터럽트로 1분마다 읽게 만들거
		  //float TEMP = DHT11_Run_TEMP();		// 온도
		  //float RH = DHT11_Run_RH();			// 습도
		  if(CANSPI_Receive(&rxMessage)) {

			temp_x10 = (rxMessage.frame.data0 << 8) | rxMessage.frame.data1;
			humi_x10 = (rxMessage.frame.data2 << 8) | rxMessage.frame.data3;
			temp = temp_x10 / 10.0;
			humi = humi_x10 / 10.0;

			printf("ID=0x%03X, 온도=%.1f, 습도=%.1f \r\n", rxMessage.frame.id, temp, humi);
		}
		  float lux = read_light_lux();				// 전압값(0~4096)
		  float co2 = read_co2();				// c02 ppm
	  	  float w_1 = isWaterDetected1();		// 둘 중 하나 -> 타이머 인터럽트

	  	  act_flag = 0;

		  printf("TEMP : %.1f RH : %.1f co2 : %.1f lux : %.1f water : %.1f\r\n", temp, humi, co2, lux,w_1);
		  cnt++;

		  if(temp && cnt == 6 ){
			  // co2,w_height level 반환 대신 그냥 adc값 반환하도록 변경해야됨
			  // 둘 중 하나 사용
			  cnt = 0;
			  sprintf(msg_to_Rpi, "%.1f,%.1f,%.1f,%.1f,%.1f\r\n", temp, humi,co2,lux,w_1);
			  HAL_UART_Transmit(&huart1, (char *)msg_to_Rpi, strlen(msg_to_Rpi), 10);
		  }
		  	  // 제어 신호 받으면?????
		  if(HAL_UART_Receive(&huart1, (uint8_t *)Cmd_Msg, 8, 1000)== HAL_OK)
		  {
			  //제어 명령어 -  팬+팰티어, led. 팬, 모터 센서(급수)
			  printf("Received data\r\n");
			  Cmd_Msg[8] = '\0';
			  printf("Cmd_Msg = %s",Cmd_Msg); // 강제로 문자열 종료
			  parse_fixed_csv(Cmd_Msg);
			  for (int i = 0; i < 4; i++)
			  {
				  printf("Cmd_values[%d] = %d\r\n", i, Cmd_values[i]);  // 문제 잡기 물 센서 위치에 따라
			  }
	  	  	  process_commands(Cmd_values);

		  }
		  else{
			  printf("Receive stage pass\r\n");
		  }
		  HAL_Delay(1000);		//1분
	  }
	  HAL_Delay(5000);			//5초
  }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM14 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM2)
	{//	0.1s	급수
		if(Sensor_flag == 1)
		{
			float light = read_light();
			light_on((uint16_t)light);
			float w_2 = isWaterDetected1();
			if(w_2 == 0.0){
				Water_P1_Start(); //급수

			}else{
				Water_P1_Stop();
			}

		}
	}
	if (htim->Instance == TIM3)
	{// 60s
		if(Sensor_flag == 1)
		{
			(flag->timer1)+=1;
			printf("%dmin pass\r\n", flag->timer1);
			if(flag->timer1 == 10){	//1분마다
//				(flag->timer2)++;			//timer2++
//				flag->timer1 = 0;			//30초
//				if(flag->timer2 == 1){
//					flag->water_sensor_flag = 1;
//					flag->timer2 = 0;
//				}
				flag->timer1 = 0;
				flag->water_sensor_flag = 1;
				printf("Water drainage\r\n");
			}else{
				flag->water_sensor_flag = 0;
				printf("Water drainage stop\r\n");
			}
		}
	}
	if (htim->Instance == TIM5)
	{	// 10s

		if(Sensor_flag == 1){

			if(flag->water_sensor_flag == 1){
				Water_P2_Start();

			}else{
				Water_P2_Stop();

			}
		}
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
  {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
